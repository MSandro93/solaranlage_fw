
solaranlage_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000198c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000070  00800060  0000198c  00001a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  008000d0  008000d0  00001a90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001b28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001002  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a29  00000000  00000000  00002cda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001880  00000000  00000000  00003703  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00004f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f0d  00000000  00000000  000054d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a83  00000000  00000000  0000c3dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000ce60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d41  00000000  00000000  0000cf70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_1>
       8:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 6f 05 	jmp	0xade	; 0xade <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e8       	ldi	r30, 0x8C	; 140
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 03 	call	0x608	; 0x608 <main>
      8a:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SevenSeg_init>:
uint16_t kessel_anzeige = 0;
uint8_t on = 0;


void SevenSeg_init()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);	//enable overflow-interrupt
      9a:	89 e5       	ldi	r24, 0x59	; 89
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	29 e5       	ldi	r18, 0x59	; 89
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	f9 01       	movw	r30, r18
      a4:	20 81       	ld	r18, Z
      a6:	21 60       	ori	r18, 0x01	; 1
      a8:	fc 01       	movw	r30, r24
      aa:	20 83       	st	Z, r18
	
	sei();
      ac:	78 94       	sei
}
      ae:	00 00       	nop
      b0:	df 91       	pop	r29
      b2:	cf 91       	pop	r28
      b4:	08 95       	ret

000000b6 <SevenSeg_set_val>:

//seg: 1=dach; 0=kessel;   val: 0-9: 0-9; 10: off
void SevenSeg_set_val(uint8_t seg, uint16_t val)
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	00 d0       	rcall	.+0      	; 0xbc <SevenSeg_set_val+0x6>
      bc:	00 d0       	rcall	.+0      	; 0xbe <SevenSeg_set_val+0x8>
      be:	00 d0       	rcall	.+0      	; 0xc0 <SevenSeg_set_val+0xa>
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	8c 83       	std	Y+4, r24	; 0x04
      c6:	7e 83       	std	Y+6, r23	; 0x06
      c8:	6d 83       	std	Y+5, r22	; 0x05
	if(seg==1)
      ca:	8c 81       	ldd	r24, Y+4	; 0x04
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f5       	brne	.+66     	; 0x112 <SevenSeg_set_val+0x5c>
	{
		if (val!=dach_anzeige)
      d0:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <dach_anzeige>
      d4:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <dach_anzeige+0x1>
      d8:	2d 81       	ldd	r18, Y+5	; 0x05
      da:	3e 81       	ldd	r19, Y+6	; 0x06
      dc:	28 17       	cp	r18, r24
      de:	39 07       	cpc	r19, r25
      e0:	d9 f1       	breq	.+118    	; 0x158 <SevenSeg_set_val+0xa2>
		{
			dach_anzeige = val;
      e2:	8d 81       	ldd	r24, Y+5	; 0x05
      e4:	9e 81       	ldd	r25, Y+6	; 0x06
      e6:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <dach_anzeige+0x1>
      ea:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <dach_anzeige>
			printf("segment 'dach' set to %d\n", val);
      ee:	8e 81       	ldd	r24, Y+6	; 0x06
      f0:	8f 93       	push	r24
      f2:	8d 81       	ldd	r24, Y+5	; 0x05
      f4:	8f 93       	push	r24
      f6:	8a e7       	ldi	r24, 0x7A	; 122
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	89 2f       	mov	r24, r25
      fc:	8f 93       	push	r24
      fe:	8a e7       	ldi	r24, 0x7A	; 122
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	8f 93       	push	r24
     104:	0e 94 9d 09 	call	0x133a	; 0x133a <printf>
     108:	0f 90       	pop	r0
     10a:	0f 90       	pop	r0
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	23 c0       	rjmp	.+70     	; 0x158 <SevenSeg_set_val+0xa2>
		}
	}
	else if(seg==0)
     112:	8c 81       	ldd	r24, Y+4	; 0x04
     114:	88 23       	and	r24, r24
     116:	01 f5       	brne	.+64     	; 0x158 <SevenSeg_set_val+0xa2>
	{
		if(val!=kessel_anzeige)
     118:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <kessel_anzeige>
     11c:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <kessel_anzeige+0x1>
     120:	2d 81       	ldd	r18, Y+5	; 0x05
     122:	3e 81       	ldd	r19, Y+6	; 0x06
     124:	28 17       	cp	r18, r24
     126:	39 07       	cpc	r19, r25
     128:	b9 f0       	breq	.+46     	; 0x158 <SevenSeg_set_val+0xa2>
		{
			kessel_anzeige = val;
     12a:	8d 81       	ldd	r24, Y+5	; 0x05
     12c:	9e 81       	ldd	r25, Y+6	; 0x06
     12e:	90 93 e0 00 	sts	0x00E0, r25	; 0x8000e0 <kessel_anzeige+0x1>
     132:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <kessel_anzeige>
			printf("segment 'kessel' set to %d\n", val);
     136:	8e 81       	ldd	r24, Y+6	; 0x06
     138:	8f 93       	push	r24
     13a:	8d 81       	ldd	r24, Y+5	; 0x05
     13c:	8f 93       	push	r24
     13e:	84 e9       	ldi	r24, 0x94	; 148
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	89 2f       	mov	r24, r25
     144:	8f 93       	push	r24
     146:	84 e9       	ldi	r24, 0x94	; 148
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	8f 93       	push	r24
     14c:	0e 94 9d 09 	call	0x133a	; 0x133a <printf>
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
		}
	}
	
	uint8_t h = (uint8_t) (val/100);
     158:	8d 81       	ldd	r24, Y+5	; 0x05
     15a:	9e 81       	ldd	r25, Y+6	; 0x06
     15c:	96 95       	lsr	r25
     15e:	87 95       	ror	r24
     160:	96 95       	lsr	r25
     162:	87 95       	ror	r24
     164:	9c 01       	movw	r18, r24
     166:	ab e7       	ldi	r26, 0x7B	; 123
     168:	b4 e1       	ldi	r27, 0x14	; 20
     16a:	0e 94 8e 09 	call	0x131c	; 0x131c <__umulhisi3>
     16e:	96 95       	lsr	r25
     170:	87 95       	ror	r24
     172:	89 83       	std	Y+1, r24	; 0x01
	uint8_t z = (uint8_t) ((val- (h*100)) / 10 );
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	88 2f       	mov	r24, r24
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	4c e9       	ldi	r20, 0x9C	; 156
     17c:	bc 01       	movw	r22, r24
     17e:	46 03       	mulsu	r20, r22
     180:	90 01       	movw	r18, r0
     182:	47 9f       	mul	r20, r23
     184:	30 0d       	add	r19, r0
     186:	11 24       	eor	r1, r1
     188:	8d 81       	ldd	r24, Y+5	; 0x05
     18a:	9e 81       	ldd	r25, Y+6	; 0x06
     18c:	82 0f       	add	r24, r18
     18e:	93 1f       	adc	r25, r19
     190:	9c 01       	movw	r18, r24
     192:	ad ec       	ldi	r26, 0xCD	; 205
     194:	bc ec       	ldi	r27, 0xCC	; 204
     196:	0e 94 8e 09 	call	0x131c	; 0x131c <__umulhisi3>
     19a:	96 95       	lsr	r25
     19c:	87 95       	ror	r24
     19e:	96 95       	lsr	r25
     1a0:	87 95       	ror	r24
     1a2:	96 95       	lsr	r25
     1a4:	87 95       	ror	r24
     1a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t e = (uint8_t)  (val- (h*100)- (z*10));
     1a8:	9d 81       	ldd	r25, Y+5	; 0x05
     1aa:	29 81       	ldd	r18, Y+1	; 0x01
     1ac:	84 e6       	ldi	r24, 0x64	; 100
     1ae:	28 9f       	mul	r18, r24
     1b0:	80 2d       	mov	r24, r0
     1b2:	11 24       	eor	r1, r1
     1b4:	98 1b       	sub	r25, r24
     1b6:	8a 81       	ldd	r24, Y+2	; 0x02
     1b8:	88 0f       	add	r24, r24
     1ba:	28 2f       	mov	r18, r24
     1bc:	22 0f       	add	r18, r18
     1be:	22 0f       	add	r18, r18
     1c0:	82 0f       	add	r24, r18
     1c2:	79 2f       	mov	r23, r25
     1c4:	78 1b       	sub	r23, r24
     1c6:	87 2f       	mov	r24, r23
     1c8:	8b 83       	std	Y+3, r24	; 0x03
	
	if(val==1000)
     1ca:	8d 81       	ldd	r24, Y+5	; 0x05
     1cc:	9e 81       	ldd	r25, Y+6	; 0x06
     1ce:	88 3e       	cpi	r24, 0xE8	; 232
     1d0:	93 40       	sbci	r25, 0x03	; 3
     1d2:	39 f5       	brne	.+78     	; 0x222 <SevenSeg_set_val+0x16c>
	{
		segs[seg]   = 10;
     1d4:	8c 81       	ldd	r24, Y+4	; 0x04
     1d6:	88 2f       	mov	r24, r24
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	80 53       	subi	r24, 0x30	; 48
     1e0:	9f 4f       	sbci	r25, 0xFF	; 255
     1e2:	2a e0       	ldi	r18, 0x0A	; 10
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	31 83       	std	Z+1, r19	; 0x01
     1ea:	20 83       	st	Z, r18
		segs[seg+2] = 10;
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	88 2f       	mov	r24, r24
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 96       	adiw	r24, 0x02	; 2
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	80 53       	subi	r24, 0x30	; 48
     1fa:	9f 4f       	sbci	r25, 0xFF	; 255
     1fc:	2a e0       	ldi	r18, 0x0A	; 10
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	fc 01       	movw	r30, r24
     202:	31 83       	std	Z+1, r19	; 0x01
     204:	20 83       	st	Z, r18
		segs[seg+4] = 10;
     206:	8c 81       	ldd	r24, Y+4	; 0x04
     208:	88 2f       	mov	r24, r24
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	04 96       	adiw	r24, 0x04	; 4
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	80 53       	subi	r24, 0x30	; 48
     214:	9f 4f       	sbci	r25, 0xFF	; 255
     216:	2a e0       	ldi	r18, 0x0A	; 10
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	fc 01       	movw	r30, r24
     21c:	31 83       	std	Z+1, r19	; 0x01
     21e:	20 83       	st	Z, r18
		return;
     220:	29 c0       	rjmp	.+82     	; 0x274 <SevenSeg_set_val+0x1be>
	}
	
	segs[seg]   = e;
     222:	8c 81       	ldd	r24, Y+4	; 0x04
     224:	88 2f       	mov	r24, r24
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	2b 81       	ldd	r18, Y+3	; 0x03
     22a:	22 2f       	mov	r18, r18
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	80 53       	subi	r24, 0x30	; 48
     234:	9f 4f       	sbci	r25, 0xFF	; 255
     236:	fc 01       	movw	r30, r24
     238:	31 83       	std	Z+1, r19	; 0x01
     23a:	20 83       	st	Z, r18
	segs[seg+2] = z;
     23c:	8c 81       	ldd	r24, Y+4	; 0x04
     23e:	88 2f       	mov	r24, r24
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	02 96       	adiw	r24, 0x02	; 2
     244:	2a 81       	ldd	r18, Y+2	; 0x02
     246:	22 2f       	mov	r18, r18
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	80 53       	subi	r24, 0x30	; 48
     250:	9f 4f       	sbci	r25, 0xFF	; 255
     252:	fc 01       	movw	r30, r24
     254:	31 83       	std	Z+1, r19	; 0x01
     256:	20 83       	st	Z, r18
	segs[seg+4] = h;
     258:	8c 81       	ldd	r24, Y+4	; 0x04
     25a:	88 2f       	mov	r24, r24
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	04 96       	adiw	r24, 0x04	; 4
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	22 2f       	mov	r18, r18
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	80 53       	subi	r24, 0x30	; 48
     26c:	9f 4f       	sbci	r25, 0xFF	; 255
     26e:	fc 01       	movw	r30, r24
     270:	31 83       	std	Z+1, r19	; 0x01
     272:	20 83       	st	Z, r18
}
     274:	26 96       	adiw	r28, 0x06	; 6
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	8f 93       	push	r24
     298:	9f 93       	push	r25
     29a:	ef 93       	push	r30
     29c:	ff 93       	push	r31
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	1f 92       	push	r1
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
	cli();
     2a8:	f8 94       	cli
	
	if(segs[seg_cnt] < 10)					//if the current digit to display is valid (0..9)..
     2aa:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <seg_cnt>
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	80 53       	subi	r24, 0x30	; 48
     2b8:	9f 4f       	sbci	r25, 0xFF	; 255
     2ba:	fc 01       	movw	r30, r24
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	0a 97       	sbiw	r24, 0x0a	; 10
     2c2:	98 f5       	brcc	.+102    	; 0x32a <__vector_11+0xa4>
	{
		PORTB = patterns[segs[seg_cnt]];	//set the propper pattern to the anodes.
     2c4:	88 e3       	ldi	r24, 0x38	; 56
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <seg_cnt>
     2cc:	22 2f       	mov	r18, r18
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	22 0f       	add	r18, r18
     2d2:	33 1f       	adc	r19, r19
     2d4:	20 53       	subi	r18, 0x30	; 48
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	f9 01       	movw	r30, r18
     2da:	20 81       	ld	r18, Z
     2dc:	31 81       	ldd	r19, Z+1	; 0x01
     2de:	20 5a       	subi	r18, 0xA0	; 160
     2e0:	3f 4f       	sbci	r19, 0xFF	; 255
     2e2:	f9 01       	movw	r30, r18
     2e4:	20 81       	ld	r18, Z
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
		sei();
		return;								//leave. The common cathode of this segment shall not be activated.
	}
	
	//if digit for this segment is valid..
	uint8_t a = (uint8_t) (~(1<<(seg_cnt + 2)));
     2ea:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <seg_cnt>
     2ee:	88 2f       	mov	r24, r24
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	9c 01       	movw	r18, r24
     2f4:	2e 5f       	subi	r18, 0xFE	; 254
     2f6:	3f 4f       	sbci	r19, 0xFF	; 255
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <__vector_11+0x7c>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	2a 95       	dec	r18
     304:	e2 f7       	brpl	.-8      	; 0x2fe <__vector_11+0x78>
     306:	80 95       	com	r24
     308:	89 83       	std	Y+1, r24	; 0x01
	PORTA = a & 0xFC;	//mask to avoid ADC-channels 0 and 1
     30a:	8b e3       	ldi	r24, 0x3B	; 59
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	29 81       	ldd	r18, Y+1	; 0x01
     310:	2c 7f       	andi	r18, 0xFC	; 252
     312:	fc 01       	movw	r30, r24
     314:	20 83       	st	Z, r18
	seg_cnt ++;			//switching to next segment
     316:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <seg_cnt>
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <seg_cnt>
	
	if(seg_cnt == 6)	//looping
     320:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <seg_cnt>
     324:	86 30       	cpi	r24, 0x06	; 6
     326:	a1 f4       	brne	.+40     	; 0x350 <__vector_11+0xca>
     328:	11 c0       	rjmp	.+34     	; 0x34c <__vector_11+0xc6>
	{
		PORTB = patterns[segs[seg_cnt]];	//set the propper pattern to the anodes.
	}
	else									//if the current digit to display is NOT valid, it is meant to be ignored..
	{
		PORTB = 0x00;						//therefore clear the anodes
     32a:	88 e3       	ldi	r24, 0x38	; 56
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	fc 01       	movw	r30, r24
     330:	10 82       	st	Z, r1
		seg_cnt ++;							//switch to nex segment
     332:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <seg_cnt>
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <seg_cnt>
		
		if(seg_cnt == 6)	//looping
     33c:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <seg_cnt>
     340:	86 30       	cpi	r24, 0x06	; 6
     342:	11 f4       	brne	.+4      	; 0x348 <__vector_11+0xc2>
		{
			seg_cnt = 0;
     344:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <seg_cnt>
		}
		sei();
     348:	78 94       	sei
		return;								//leave. The common cathode of this segment shall not be activated.
     34a:	0c c0       	rjmp	.+24     	; 0x364 <__vector_11+0xde>
	PORTA = a & 0xFC;	//mask to avoid ADC-channels 0 and 1
	seg_cnt ++;			//switching to next segment
	
	if(seg_cnt == 6)	//looping
	{
		seg_cnt = 0;
     34c:	10 92 dc 00 	sts	0x00DC, r1	; 0x8000dc <seg_cnt>
	}
	
	TIFR &= ~(1<<TOV0);	//clear timer0 overflow interrupt flag
     350:	88 e5       	ldi	r24, 0x58	; 88
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	28 e5       	ldi	r18, 0x58	; 88
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	2e 7f       	andi	r18, 0xFE	; 254
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
	
	sei();
     362:	78 94       	sei
}
     364:	0f 90       	pop	r0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	ff 91       	pop	r31
     36c:	ef 91       	pop	r30
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	3f 91       	pop	r19
     374:	2f 91       	pop	r18
     376:	0f 90       	pop	r0
     378:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <SevenSeg_on>:


void SevenSeg_on()
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01) | (1<<CS00);		//setting prescaler to /256
     38a:	83 e5       	ldi	r24, 0x53	; 83
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	23 e0       	ldi	r18, 0x03	; 3
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18
	on = 1;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <on>
}
     39a:	00 00       	nop
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <SevenSeg_off>:

void SevenSeg_off()
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~((1<<CS01) | (1<<CS00));	//disable timer
     3aa:	83 e5       	ldi	r24, 0x53	; 83
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	23 e5       	ldi	r18, 0x53	; 83
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	f9 01       	movw	r30, r18
     3b4:	20 81       	ld	r18, Z
     3b6:	2c 7f       	andi	r18, 0xFC	; 252
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
	TCNT0 = 0;							//resetting counter
     3bc:	82 e5       	ldi	r24, 0x52	; 82
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	fc 01       	movw	r30, r24
     3c2:	10 82       	st	Z, r1
	PORTB = 0x00;
     3c4:	88 e3       	ldi	r24, 0x38	; 56
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fc 01       	movw	r30, r24
     3ca:	10 82       	st	Z, r1
	PORTA = 0xFC;
     3cc:	8b e3       	ldi	r24, 0x3B	; 59
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	2c ef       	ldi	r18, 0xFC	; 252
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
	on = 0;
     3d6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <on>
}
     3da:	00 00       	nop
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <SevenSeg_get_state>:


uint8_t SevenSeg_get_state()
{
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
	return on;
     3ea:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <on>
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <Encoder_init>:

uint8_t selected_seg = 1;


void Encoder_init()
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
	ENC_PORT &= ~((1<<ENC_A_PIN) | (1<<ENC_A_PIN));							//setting encoder terminals to input
     3fc:	82 e3       	ldi	r24, 0x32	; 50
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	22 e3       	ldi	r18, 0x32	; 50
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	2b 7f       	andi	r18, 0xFB	; 251
     40a:	fc 01       	movw	r30, r24
     40c:	20 83       	st	Z, r18
	MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11);				//setting ext-int0 to sensitive at rising edge
     40e:	85 e5       	ldi	r24, 0x55	; 85
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	25 e5       	ldi	r18, 0x55	; 85
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	2b 60       	ori	r18, 0x0B	; 11
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1);											//enable external interrupt 0 (ENC_A_PIN)
     420:	8b e5       	ldi	r24, 0x5B	; 91
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	2b e5       	ldi	r18, 0x5B	; 91
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	f9 01       	movw	r30, r18
     42a:	20 81       	ld	r18, Z
     42c:	20 6c       	ori	r18, 0xC0	; 192
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
	sei();
     432:	78 94       	sei
}
     434:	00 00       	nop
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <__vector_1>:



ISR(INT0_vect)
{	
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	2f 93       	push	r18
     44a:	3f 93       	push	r19
     44c:	4f 93       	push	r20
     44e:	5f 93       	push	r21
     450:	6f 93       	push	r22
     452:	7f 93       	push	r23
     454:	8f 93       	push	r24
     456:	9f 93       	push	r25
     458:	af 93       	push	r26
     45a:	bf 93       	push	r27
     45c:	ef 93       	push	r30
     45e:	ff 93       	push	r31
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
	cli();
     468:	f8 94       	cli
	
	switch(getState())
     46a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <getState>
     46e:	88 2f       	mov	r24, r24
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	83 30       	cpi	r24, 0x03	; 3
     474:	91 05       	cpc	r25, r1
     476:	19 f0       	breq	.+6      	; 0x47e <__vector_1+0x42>
     478:	04 97       	sbiw	r24, 0x04	; 4
     47a:	a1 f0       	breq	.+40     	; 0x4a4 <__vector_1+0x68>
			}
			break;
		}
		
		default:
			break;
     47c:	26 c0       	rjmp	.+76     	; 0x4ca <__vector_1+0x8e>
	
	switch(getState())
	{
		case 3:	
		{	
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     47e:	80 e3       	ldi	r24, 0x30	; 48
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	fc 01       	movw	r30, r24
     484:	80 81       	ld	r24, Z
     486:	88 2f       	mov	r24, r24
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	80 71       	andi	r24, 0x10	; 16
     48c:	99 27       	eor	r25, r25
     48e:	18 16       	cp	r1, r24
     490:	19 06       	cpc	r1, r25
     492:	24 f4       	brge	.+8      	; 0x49c <__vector_1+0x60>
			{
				dec_delta(1);
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 56 04 	call	0x8ac	; 0x8ac <dec_delta>
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
			}
			break;
     49a:	17 c0       	rjmp	.+46     	; 0x4ca <__vector_1+0x8e>
			{
				dec_delta(1);
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	0e 94 33 04 	call	0x866	; 0x866 <inc_delta>
			}
			break;
     4a2:	13 c0       	rjmp	.+38     	; 0x4ca <__vector_1+0x8e>
		}
		
		case 4:
		{
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     4a4:	80 e3       	ldi	r24, 0x30	; 48
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	80 81       	ld	r24, Z
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	80 71       	andi	r24, 0x10	; 16
     4b2:	99 27       	eor	r25, r25
     4b4:	18 16       	cp	r1, r24
     4b6:	19 06       	cpc	r1, r25
     4b8:	24 f4       	brge	.+8      	; 0x4c2 <__vector_1+0x86>
			{
				dec_delta(2);
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	0e 94 56 04 	call	0x8ac	; 0x8ac <dec_delta>
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
			}
			break;
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__vector_1+0x8c>
			{
				dec_delta(2);
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 33 04 	call	0x866	; 0x866 <inc_delta>
			}
			break;
     4c8:	00 00       	nop
		
		default:
			break;
	}
	
	stop_timeout_timer();
     4ca:	0e 94 60 06 	call	0xcc0	; 0xcc0 <stop_timeout_timer>
	start_timeout_timer();
     4ce:	0e 94 4e 06 	call	0xc9c	; 0xc9c <start_timeout_timer>
	
	
	GIFR &= ~(1<<INTF0);  //clear ext-interrupt-0 flag
     4d2:	8a e5       	ldi	r24, 0x5A	; 90
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	2a e5       	ldi	r18, 0x5A	; 90
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	f9 01       	movw	r30, r18
     4dc:	20 81       	ld	r18, Z
     4de:	2f 7b       	andi	r18, 0xBF	; 191
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
	
	sei();
     4e4:	78 94       	sei
}
     4e6:	00 00       	nop
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_2>:


ISR(INT1_vect)  //if the encoder got pushed
{
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	1f 93       	push	r17
     51e:	2f 93       	push	r18
     520:	3f 93       	push	r19
     522:	4f 93       	push	r20
     524:	5f 93       	push	r21
     526:	6f 93       	push	r22
     528:	7f 93       	push	r23
     52a:	8f 93       	push	r24
     52c:	9f 93       	push	r25
     52e:	af 93       	push	r26
     530:	bf 93       	push	r27
     532:	ef 93       	push	r30
     534:	ff 93       	push	r31
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	cli();
     53e:	f8 94       	cli
	
	switch(getState())
     540:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <getState>
     544:	88 2f       	mov	r24, r24
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	91 05       	cpc	r25, r1
     54c:	a1 f0       	breq	.+40     	; 0x576 <__vector_2+0x66>
     54e:	83 30       	cpi	r24, 0x03	; 3
     550:	91 05       	cpc	r25, r1
     552:	1c f4       	brge	.+6      	; 0x55a <__vector_2+0x4a>
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	39 f0       	breq	.+14     	; 0x566 <__vector_2+0x56>
     558:	40 c0       	rjmp	.+128    	; 0x5da <__vector_2+0xca>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	91 05       	cpc	r25, r1
     55e:	89 f0       	breq	.+34     	; 0x582 <__vector_2+0x72>
     560:	04 97       	sbiw	r24, 0x04	; 4
     562:	29 f1       	breq	.+74     	; 0x5ae <__vector_2+0x9e>
     564:	3a c0       	rjmp	.+116    	; 0x5da <__vector_2+0xca>
	{
		case 1:
		{
			setState(2);
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
			stop_timeout_timer();
     56c:	0e 94 60 06 	call	0xcc0	; 0xcc0 <stop_timeout_timer>
			start_timeout_timer();
     570:	0e 94 4e 06 	call	0xc9c	; 0xc9c <start_timeout_timer>
			break;
     574:	32 c0       	rjmp	.+100    	; 0x5da <__vector_2+0xca>
		}
		case 2:
		{
			setState(3);
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
			start_timeout_timer();
     57c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <start_timeout_timer>
			break;
     580:	2c c0       	rjmp	.+88     	; 0x5da <__vector_2+0xca>
		}
		case 3:
		{
			if(eeprom_read_byte(0) != get_delta(1))
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <eeprom_read_byte>
     58a:	18 2f       	mov	r17, r24
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     592:	18 17       	cp	r17, r24
     594:	41 f0       	breq	.+16     	; 0x5a6 <__vector_2+0x96>
			{
				eeprom_update_byte(0, get_delta(1));
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     59c:	68 2f       	mov	r22, r24
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <eeprom_update_byte>
			}
			setState(4);
     5a6:	84 e0       	ldi	r24, 0x04	; 4
     5a8:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
			break;
     5ac:	16 c0       	rjmp	.+44     	; 0x5da <__vector_2+0xca>
		}
		case 4:
		{
			if(eeprom_read_byte(1) != get_delta(2))
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <eeprom_read_byte>
     5b6:	18 2f       	mov	r17, r24
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     5be:	18 17       	cp	r17, r24
     5c0:	41 f0       	breq	.+16     	; 0x5d2 <__vector_2+0xc2>
			{
				eeprom_update_byte(1, get_delta(2));
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     5c8:	68 2f       	mov	r22, r24
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <eeprom_update_byte>
			}
			setState(2);
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
			break;
     5d8:	00 00       	nop
		}
	}
	
	sei();
     5da:	78 94       	sei
     5dc:	00 00       	nop
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	ff 91       	pop	r31
     5e4:	ef 91       	pop	r30
     5e6:	bf 91       	pop	r27
     5e8:	af 91       	pop	r26
     5ea:	9f 91       	pop	r25
     5ec:	8f 91       	pop	r24
     5ee:	7f 91       	pop	r23
     5f0:	6f 91       	pop	r22
     5f2:	5f 91       	pop	r21
     5f4:	4f 91       	pop	r20
     5f6:	3f 91       	pop	r19
     5f8:	2f 91       	pop	r18
     5fa:	1f 91       	pop	r17
     5fc:	0f 90       	pop	r0
     5fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <main>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);



int main(void)
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
     610:	8b e3       	ldi	r24, 0x3B	; 59
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	fc 01       	movw	r30, r24
     616:	10 82       	st	Z, r1
	PORTB = 0x00;
     618:	88 e3       	ldi	r24, 0x38	; 56
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fc 01       	movw	r30, r24
     61e:	10 82       	st	Z, r1
	
	DDRA = 0xFC;
     620:	8a e3       	ldi	r24, 0x3A	; 58
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	2c ef       	ldi	r18, 0xFC	; 252
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
	DDRB = 0xFF;
     62a:	87 e3       	ldi	r24, 0x37	; 55
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	2f ef       	ldi	r18, 0xFF	; 255
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18
	DDRC |= (1<<WDI_PIN);
     634:	84 e3       	ldi	r24, 0x34	; 52
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	24 e3       	ldi	r18, 0x34	; 52
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	f9 01       	movw	r30, r18
     63e:	20 81       	ld	r18, Z
     640:	20 64       	ori	r18, 0x40	; 64
     642:	fc 01       	movw	r30, r24
     644:	20 83       	st	Z, r18
	DDRD |= (1<<PD5);
     646:	81 e3       	ldi	r24, 0x31	; 49
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	21 e3       	ldi	r18, 0x31	; 49
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	f9 01       	movw	r30, r18
     650:	20 81       	ld	r18, Z
     652:	20 62       	ori	r18, 0x20	; 32
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
	
	uart_init(0);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <uart_init>
	
	
	stdout = &mystdout;
     660:	8b e6       	ldi	r24, 0x6B	; 107
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__iob+0x3>
     668:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__iob+0x2>
	
	printf("startup!\n");
     66c:	80 eb       	ldi	r24, 0xB0	; 176
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 b3 09 	call	0x1366	; 0x1366 <puts>
	
	regulator_init();
     674:	0e 94 ed 03 	call	0x7da	; 0x7da <regulator_init>
	SevenSeg_init();
     678:	0e 94 49 00 	call	0x92	; 0x92 <SevenSeg_init>
	Timeout_init();
     67c:	0e 94 38 06 	call	0xc70	; 0xc70 <Timeout_init>
	Encoder_init();
     680:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Encoder_init>
	
	set_PWM(63);
     684:	8f e3       	ldi	r24, 0x3F	; 63
     686:	0e 94 5f 05 	call	0xabe	; 0xabe <set_PWM>
	
    /* Replace with your application code */
    while (1) 
    {
		switch(state)
     68a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <state>
     68e:	88 2f       	mov	r24, r24
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	91 05       	cpc	r25, r1
     696:	09 f1       	breq	.+66     	; 0x6da <main+0xd2>
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	91 05       	cpc	r25, r1
     69c:	2c f4       	brge	.+10     	; 0x6a8 <main+0xa0>
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	51 f0       	breq	.+20     	; 0x6b6 <main+0xae>
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	91 f0       	breq	.+36     	; 0x6ca <main+0xc2>
     6a6:	63 c0       	rjmp	.+198    	; 0x76e <main+0x166>
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	91 05       	cpc	r25, r1
     6ac:	79 f1       	breq	.+94     	; 0x70c <main+0x104>
     6ae:	04 97       	sbiw	r24, 0x04	; 4
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <main+0xac>
     6b2:	41 c0       	rjmp	.+130    	; 0x736 <main+0x12e>
     6b4:	5c c0       	rjmp	.+184    	; 0x76e <main+0x166>
		{
			case 0:
			{
				if(SevenSeg_get_state() == 1)  //disable display only if it is on
     6b6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <main+0xba>
					SevenSeg_off();		
     6be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SevenSeg_off>
				setState(1);
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
				break;
     6c8:	52 c0       	rjmp	.+164    	; 0x76e <main+0x166>
			}
			
			case 1:
			{
				if(SevenSeg_get_state() == 1)  //disable display only if it is on
     6ca:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0xcc>
     6d2:	46 c0       	rjmp	.+140    	; 0x760 <main+0x158>
					SevenSeg_off();		
     6d4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SevenSeg_off>
				break;
     6d8:	43 c0       	rjmp	.+134    	; 0x760 <main+0x158>
			}
				
			case 2:
			{
				SevenSeg_set_val(1, get_temp(1));
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 48 05 	call	0xa90	; 0xa90 <get_temp>
     6e0:	88 2f       	mov	r24, r24
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	bc 01       	movw	r22, r24
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, get_temp(0));
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 48 05 	call	0xa90	; 0xa90 <get_temp>
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	bc 01       	movw	r22, r24
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
     6fe:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     702:	88 23       	and	r24, r24
     704:	79 f5       	brne	.+94     	; 0x764 <main+0x15c>
					SevenSeg_on();
     706:	0e 94 c1 01 	call	0x382	; 0x382 <SevenSeg_on>
				break;
     70a:	2c c0       	rjmp	.+88     	; 0x764 <main+0x15c>
			}
			
			case 3: 
			{
				SevenSeg_set_val(1, get_delta(1));
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	bc 01       	movw	r22, r24
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, 1000); //set Kessel-display off
     71e:	68 ee       	ldi	r22, 0xE8	; 232
     720:	73 e0       	ldi	r23, 0x03	; 3
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
     728:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     72c:	88 23       	and	r24, r24
     72e:	e1 f4       	brne	.+56     	; 0x768 <main+0x160>
					SevenSeg_on();
     730:	0e 94 c1 01 	call	0x382	; 0x382 <SevenSeg_on>
				break;
     734:	19 c0       	rjmp	.+50     	; 0x768 <main+0x160>
			}
			
			case 4:
			{
				SevenSeg_set_val(1, 1000); //set Dach-display off
     736:	68 ee       	ldi	r22, 0xE8	; 232
     738:	73 e0       	ldi	r23, 0x03	; 3
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, get_delta(2));
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     746:	88 2f       	mov	r24, r24
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	bc 01       	movw	r22, r24
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
     752:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     756:	88 23       	and	r24, r24
     758:	49 f4       	brne	.+18     	; 0x76c <main+0x164>
				SevenSeg_on();
     75a:	0e 94 c1 01 	call	0x382	; 0x382 <SevenSeg_on>
				break;
     75e:	06 c0       	rjmp	.+12     	; 0x76c <main+0x164>
			
			case 1:
			{
				if(SevenSeg_get_state() == 1)  //disable display only if it is on
					SevenSeg_off();		
				break;
     760:	00 00       	nop
     762:	05 c0       	rjmp	.+10     	; 0x76e <main+0x166>
			{
				SevenSeg_set_val(1, get_temp(1));
				SevenSeg_set_val(0, get_temp(0));
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
					SevenSeg_on();
				break;
     764:	00 00       	nop
     766:	03 c0       	rjmp	.+6      	; 0x76e <main+0x166>
			{
				SevenSeg_set_val(1, get_delta(1));
				SevenSeg_set_val(0, 1000); //set Kessel-display off
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
					SevenSeg_on();
				break;
     768:	00 00       	nop
     76a:	01 c0       	rjmp	.+2      	; 0x76e <main+0x166>
			{
				SevenSeg_set_val(1, 1000); //set Dach-display off
				SevenSeg_set_val(0, get_delta(2));
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
				SevenSeg_on();
				break;
     76c:	00 00       	nop
			}
		}
		
		WDI_PORT ^= (1<<WDI_PIN);
     76e:	85 e3       	ldi	r24, 0x35	; 53
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	25 e3       	ldi	r18, 0x35	; 53
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	f9 01       	movw	r30, r18
     778:	30 81       	ld	r19, Z
     77a:	20 e4       	ldi	r18, 0x40	; 64
     77c:	23 27       	eor	r18, r19
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
    }
     782:	83 cf       	rjmp	.-250    	; 0x68a <main+0x82>

00000784 <setState>:
}

void setState(uint8_t s)
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	1f 92       	push	r1
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	89 83       	std	Y+1, r24	; 0x01
	state = s;
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <state>
	printf("state -> %d\n", state);
     796:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <state>
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	29 2f       	mov	r18, r25
     7a0:	2f 93       	push	r18
     7a2:	8f 93       	push	r24
     7a4:	89 eb       	ldi	r24, 0xB9	; 185
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	89 2f       	mov	r24, r25
     7aa:	8f 93       	push	r24
     7ac:	89 eb       	ldi	r24, 0xB9	; 185
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	8f 93       	push	r24
     7b2:	0e 94 9d 09 	call	0x133a	; 0x133a <printf>
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
}
     7be:	00 00       	nop
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <getState>:

uint8_t getState()
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	return state;
     7d0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <state>
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <regulator_init>:
}

void disable_show_temps(void)
{
	show_temps = 0;
}
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <eeprom_read_byte>
     7ea:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <delta1>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <eeprom_read_byte>
     7f6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <delta2>
     7fa:	87 e2       	ldi	r24, 0x27	; 39
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	fc 01       	movw	r30, r24
     800:	10 82       	st	Z, r1
     802:	87 e2       	ldi	r24, 0x27	; 39
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	27 e2       	ldi	r18, 0x27	; 39
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	f9 01       	movw	r30, r18
     80c:	20 81       	ld	r18, Z
     80e:	2f 7d       	andi	r18, 0xDF	; 223
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
     814:	86 e2       	ldi	r24, 0x26	; 38
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	26 e2       	ldi	r18, 0x26	; 38
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	f9 01       	movw	r30, r18
     81e:	20 81       	ld	r18, Z
     820:	20 68       	ori	r18, 0x80	; 128
     822:	fc 01       	movw	r30, r24
     824:	20 83       	st	Z, r18
     826:	85 e4       	ldi	r24, 0x45	; 69
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	25 e4       	ldi	r18, 0x45	; 69
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	f9 01       	movw	r30, r18
     830:	20 81       	ld	r18, Z
     832:	2f 66       	ori	r18, 0x6F	; 111
     834:	fc 01       	movw	r30, r24
     836:	20 83       	st	Z, r18
     838:	89 e5       	ldi	r24, 0x59	; 89
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	29 e5       	ldi	r18, 0x59	; 89
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	f9 01       	movw	r30, r18
     842:	20 81       	ld	r18, Z
     844:	20 64       	ori	r18, 0x40	; 64
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
     84a:	81 e3       	ldi	r24, 0x31	; 49
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	21 e3       	ldi	r18, 0x31	; 49
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	f9 01       	movw	r30, r18
     854:	20 81       	ld	r18, Z
     856:	20 68       	ori	r18, 0x80	; 128
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
     85c:	78 94       	sei
     85e:	00 00       	nop
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <inc_delta>:

void inc_delta(uint8_t i_)
{
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	1f 92       	push	r1
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	49 f4       	brne	.+18     	; 0x88a <inc_delta+0x24>
	{
		if(delta1<100)
     878:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <delta1>
     87c:	84 36       	cpi	r24, 0x64	; 100
     87e:	28 f4       	brcc	.+10     	; 0x88a <inc_delta+0x24>
			delta1++;
     880:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <delta1>
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <delta1>
	}
	
	if(i_==2)
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	49 f4       	brne	.+18     	; 0x8a2 <inc_delta+0x3c>
	{
		if(delta2<100)
     890:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <delta2>
     894:	84 36       	cpi	r24, 0x64	; 100
     896:	28 f4       	brcc	.+10     	; 0x8a2 <inc_delta+0x3c>
			delta2++;
     898:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <delta2>
     89c:	8f 5f       	subi	r24, 0xFF	; 255
     89e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <delta2>
	}			
}
     8a2:	00 00       	nop
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <dec_delta>:

void dec_delta(uint8_t i_)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	1f 92       	push	r1
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	49 f4       	brne	.+18     	; 0x8d0 <dec_delta+0x24>
	{
		if(delta1>0)
     8be:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <delta1>
     8c2:	88 23       	and	r24, r24
     8c4:	29 f0       	breq	.+10     	; 0x8d0 <dec_delta+0x24>
			delta1--;
     8c6:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <delta1>
     8ca:	81 50       	subi	r24, 0x01	; 1
     8cc:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <delta1>
	}
	
	if(i_==2)
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	49 f4       	brne	.+18     	; 0x8e8 <dec_delta+0x3c>
	{
		if(delta2>0)
     8d6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <delta2>
     8da:	88 23       	and	r24, r24
     8dc:	29 f0       	breq	.+10     	; 0x8e8 <dec_delta+0x3c>
			delta2--;
     8de:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <delta2>
     8e2:	81 50       	subi	r24, 0x01	; 1
     8e4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <delta2>
	}
}
     8e8:	00 00       	nop
     8ea:	0f 90       	pop	r0
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <get_delta>:

uint8_t get_delta(uint8_t i_)
{
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	1f 92       	push	r1
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	19 f4       	brne	.+6      	; 0x90a <get_delta+0x18>
	{
		return delta1;
     904:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <delta1>
     908:	07 c0       	rjmp	.+14     	; 0x918 <get_delta+0x26>
	}
	if(i_==2)
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	19 f4       	brne	.+6      	; 0x916 <get_delta+0x24>
	{
		return delta2;
     910:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <delta2>
     914:	01 c0       	rjmp	.+2      	; 0x918 <get_delta+0x26>
	}
	return 255;
     916:	8f ef       	ldi	r24, 0xFF	; 255
}
     918:	0f 90       	pop	r0
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <measure_temp>:


//sensor: 1=dach; 0=kessel
uint8_t measure_temp(uint8_t sensor)
{
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	2c 97       	sbiw	r28, 0x0c	; 12
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	8c 87       	std	Y+12, r24	; 0x0c
	ADMUX &= ~0x1F;							//clear MUX4:0
     93e:	87 e2       	ldi	r24, 0x27	; 39
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	27 e2       	ldi	r18, 0x27	; 39
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	f9 01       	movw	r30, r18
     948:	20 81       	ld	r18, Z
     94a:	20 7e       	andi	r18, 0xE0	; 224
     94c:	fc 01       	movw	r30, r24
     94e:	20 83       	st	Z, r18
	
	if(sensor == 0)
     950:	8c 85       	ldd	r24, Y+12	; 0x0c
     952:	88 23       	and	r24, r24
     954:	49 f4       	brne	.+18     	; 0x968 <measure_temp+0x48>
		ADMUX |= (1<<MUX0);					//set ADC to CH1. If CH2 has to be sampled MUX[4:0] is alreadyy 0, because it was rsetted above
     956:	87 e2       	ldi	r24, 0x27	; 39
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	27 e2       	ldi	r18, 0x27	; 39
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	f9 01       	movw	r30, r18
     960:	20 81       	ld	r18, Z
     962:	21 60       	ori	r18, 0x01	; 1
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
		
	ADCSRA |= (1<<ADSC);					//start conversion
     968:	86 e2       	ldi	r24, 0x26	; 38
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	26 e2       	ldi	r18, 0x26	; 38
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	f9 01       	movw	r30, r18
     972:	20 81       	ld	r18, Z
     974:	20 64       	ori	r18, 0x40	; 64
     976:	fc 01       	movw	r30, r24
     978:	20 83       	st	Z, r18
	
	while( (ADCSRA & (1<<ADSC)) > 0 )		//wait for end of conversion
     97a:	00 00       	nop
     97c:	86 e2       	ldi	r24, 0x26	; 38
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	fc 01       	movw	r30, r24
     982:	80 81       	ld	r24, Z
     984:	88 2f       	mov	r24, r24
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	80 74       	andi	r24, 0x40	; 64
     98a:	99 27       	eor	r25, r25
     98c:	18 16       	cp	r1, r24
     98e:	19 06       	cpc	r1, r25
     990:	ac f3       	brlt	.-22     	; 0x97c <measure_temp+0x5c>
	{
	}
	
	uint16_t adc_val = ADCL;				//get conversion result low-byte
     992:	84 e2       	ldi	r24, 0x24	; 36
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	fc 01       	movw	r30, r24
     998:	80 81       	ld	r24, Z
     99a:	88 2f       	mov	r24, r24
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	9a 83       	std	Y+2, r25	; 0x02
     9a0:	89 83       	std	Y+1, r24	; 0x01
	adc_val += (ADCH<<8);					//and high-byte
     9a2:	85 e2       	ldi	r24, 0x25	; 37
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	fc 01       	movw	r30, r24
     9a8:	80 81       	ld	r24, Z
     9aa:	88 2f       	mov	r24, r24
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	98 2f       	mov	r25, r24
     9b0:	88 27       	eor	r24, r24
     9b2:	9c 01       	movw	r18, r24
     9b4:	89 81       	ldd	r24, Y+1	; 0x01
     9b6:	9a 81       	ldd	r25, Y+2	; 0x02
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	9a 83       	std	Y+2, r25	; 0x02
     9be:	89 83       	std	Y+1, r24	; 0x01
	
	
	float voltage = adc_val * 4.854e-3f;									//get voltage from ADC-values	
     9c0:	89 81       	ldd	r24, Y+1	; 0x01
     9c2:	9a 81       	ldd	r25, Y+2	; 0x02
     9c4:	cc 01       	movw	r24, r24
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	bc 01       	movw	r22, r24
     9cc:	cd 01       	movw	r24, r26
     9ce:	0e 94 46 08 	call	0x108c	; 0x108c <__floatunsisf>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	2e e4       	ldi	r18, 0x4E	; 78
     9d8:	3e e0       	ldi	r19, 0x0E	; 14
     9da:	4f e9       	ldi	r20, 0x9F	; 159
     9dc:	5b e3       	ldi	r21, 0x3B	; 59
     9de:	bc 01       	movw	r22, r24
     9e0:	cd 01       	movw	r24, r26
     9e2:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     9e6:	dc 01       	movw	r26, r24
     9e8:	cb 01       	movw	r24, r22
     9ea:	8b 83       	std	Y+3, r24	; 0x03
     9ec:	9c 83       	std	Y+4, r25	; 0x04
     9ee:	ad 83       	std	Y+5, r26	; 0x05
     9f0:	be 83       	std	Y+6, r27	; 0x06
	float temp_f = (7382.06f - voltage*2751.75f)/(voltage - 29.323f);		//get temperature from voltage	
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	3c ef       	ldi	r19, 0xFC	; 252
     9f6:	4b e2       	ldi	r20, 0x2B	; 43
     9f8:	55 e4       	ldi	r21, 0x45	; 69
     9fa:	6b 81       	ldd	r22, Y+3	; 0x03
     9fc:	7c 81       	ldd	r23, Y+4	; 0x04
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	9e 81       	ldd	r25, Y+6	; 0x06
     a02:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__mulsf3>
     a06:	dc 01       	movw	r26, r24
     a08:	cb 01       	movw	r24, r22
     a0a:	9c 01       	movw	r18, r24
     a0c:	ad 01       	movw	r20, r26
     a0e:	6b e7       	ldi	r22, 0x7B	; 123
     a10:	70 eb       	ldi	r23, 0xB0	; 176
     a12:	86 ee       	ldi	r24, 0xE6	; 230
     a14:	95 e4       	ldi	r25, 0x45	; 69
     a16:	0e 94 38 07 	call	0xe70	; 0xe70 <__subsf3>
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	6c 01       	movw	r12, r24
     a20:	7d 01       	movw	r14, r26
     a22:	21 e8       	ldi	r18, 0x81	; 129
     a24:	35 e9       	ldi	r19, 0x95	; 149
     a26:	4a ee       	ldi	r20, 0xEA	; 234
     a28:	51 e4       	ldi	r21, 0x41	; 65
     a2a:	6b 81       	ldd	r22, Y+3	; 0x03
     a2c:	7c 81       	ldd	r23, Y+4	; 0x04
     a2e:	8d 81       	ldd	r24, Y+5	; 0x05
     a30:	9e 81       	ldd	r25, Y+6	; 0x06
     a32:	0e 94 38 07 	call	0xe70	; 0xe70 <__subsf3>
     a36:	dc 01       	movw	r26, r24
     a38:	cb 01       	movw	r24, r22
     a3a:	9c 01       	movw	r18, r24
     a3c:	ad 01       	movw	r20, r26
     a3e:	c7 01       	movw	r24, r14
     a40:	b6 01       	movw	r22, r12
     a42:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__divsf3>
     a46:	dc 01       	movw	r26, r24
     a48:	cb 01       	movw	r24, r22
     a4a:	8f 83       	std	Y+7, r24	; 0x07
     a4c:	98 87       	std	Y+8, r25	; 0x08
     a4e:	a9 87       	std	Y+9, r26	; 0x09
     a50:	ba 87       	std	Y+10, r27	; 0x0a
	uint8_t temp = (uint8_t) roundf( temp_f );								//round temperature and cast it to int
     a52:	8f 81       	ldd	r24, Y+7	; 0x07
     a54:	98 85       	ldd	r25, Y+8	; 0x08
     a56:	a9 85       	ldd	r26, Y+9	; 0x09
     a58:	ba 85       	ldd	r27, Y+10	; 0x0a
     a5a:	bc 01       	movw	r22, r24
     a5c:	cd 01       	movw	r24, r26
     a5e:	0e 94 41 09 	call	0x1282	; 0x1282 <round>
     a62:	dc 01       	movw	r26, r24
     a64:	cb 01       	movw	r24, r22
     a66:	bc 01       	movw	r22, r24
     a68:	cd 01       	movw	r24, r26
     a6a:	0e 94 17 08 	call	0x102e	; 0x102e <__fixunssfsi>
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	8b 87       	std	Y+11, r24	; 0x0b

	return temp;
     a74:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     a76:	2c 96       	adiw	r28, 0x0c	; 12
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	de bf       	out	0x3e, r29	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	cd bf       	out	0x3d, r28	; 61
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	cf 90       	pop	r12
     a8e:	08 95       	ret

00000a90 <get_temp>:

//sensor: 1=dach; 0=kessel
uint8_t get_temp(uint8_t sensor)
{
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	1f 92       	push	r1
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == 1)
     a9c:	89 81       	ldd	r24, Y+1	; 0x01
     a9e:	81 30       	cpi	r24, 0x01	; 1
     aa0:	19 f4       	brne	.+6      	; 0xaa8 <get_temp+0x18>
		return temp_dach;
     aa2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <temp_dach>
     aa6:	07 c0       	rjmp	.+14     	; 0xab6 <get_temp+0x26>
	else if(sensor == 0)
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	88 23       	and	r24, r24
     aac:	19 f4       	brne	.+6      	; 0xab4 <get_temp+0x24>
		return temp_kessel;
     aae:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <temp_kessel>
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <get_temp+0x26>
	else
		return 255;
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
}
     ab6:	0f 90       	pop	r0
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	08 95       	ret

00000abe <set_PWM>:


//sets duty cycle; 0-255
void set_PWM(uint8_t duty)
{
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	1f 92       	push	r1
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = duty;
     aca:	83 e4       	ldi	r24, 0x43	; 67
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	29 81       	ldd	r18, Y+1	; 0x01
     ad0:	fc 01       	movw	r30, r24
     ad2:	20 83       	st	Z, r18
}
     ad4:	00 00       	nop
     ad6:	0f 90       	pop	r0
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <__vector_5>:



ISR(TIMER2_OVF_vect)
{
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	cd b7       	in	r28, 0x3d	; 61
     b08:	de b7       	in	r29, 0x3e	; 62
	cli();
     b0a:	f8 94       	cli
	
	if(loop_cnt < 62) //if 2s are not passed
     b0c:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <loop_cnt>
     b10:	8e 33       	cpi	r24, 0x3E	; 62
     b12:	30 f4       	brcc	.+12     	; 0xb20 <__vector_5+0x42>
	{
		loop_cnt++;
     b14:	80 91 e5 00 	lds	r24, 0x00E5	; 0x8000e5 <loop_cnt>
     b18:	8f 5f       	subi	r24, 0xFF	; 255
     b1a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <loop_cnt>
     b1e:	89 c0       	rjmp	.+274    	; 0xc32 <__vector_5+0x154>
	}
	
	else	//if it is time to work...
	{
		if (log_counter == 255)
     b20:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <log_counter>
     b24:	8f 3f       	cpi	r24, 0xFF	; 255
     b26:	11 f4       	brne	.+4      	; 0xb2c <__vector_5+0x4e>
		{
			log_counter = 0;
     b28:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <log_counter>
		}
		
		PORTD ^= (1<<PD5);
     b2c:	82 e3       	ldi	r24, 0x32	; 50
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	22 e3       	ldi	r18, 0x32	; 50
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	f9 01       	movw	r30, r18
     b36:	30 81       	ld	r19, Z
     b38:	20 e2       	ldi	r18, 0x20	; 32
     b3a:	23 27       	eor	r18, r19
     b3c:	fc 01       	movw	r30, r24
     b3e:	20 83       	st	Z, r18

		temp_dach   = measure_temp(1);
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	0e 94 90 04 	call	0x920	; 0x920 <measure_temp>
     b46:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <temp_dach>
		temp_kessel = measure_temp(0);
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 90 04 	call	0x920	; 0x920 <measure_temp>
     b50:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <temp_kessel>
		
		d_teta = temp_dach - temp_kessel;
     b54:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <temp_dach>
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <temp_kessel>
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a9 01       	movw	r20, r18
     b66:	48 1b       	sub	r20, r24
     b68:	59 0b       	sbc	r21, r25
     b6a:	ca 01       	movw	r24, r20
     b6c:	90 93 e7 00 	sts	0x00E7, r25	; 0x8000e7 <d_teta+0x1>
     b70:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <d_teta>
		
		if(d_teta > delta1)
     b74:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <delta1>
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <d_teta>
     b80:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <d_teta+0x1>
     b84:	28 17       	cp	r18, r24
     b86:	39 07       	cpc	r19, r25
     b88:	dc f4       	brge	.+54     	; 0xbc0 <__vector_5+0xe2>
		{
			if( d_teta >= delta2)
     b8a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <delta2>
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <d_teta>
     b96:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <d_teta+0x1>
     b9a:	82 17       	cp	r24, r18
     b9c:	93 07       	cpc	r25, r19
     b9e:	6c f0       	brlt	.+26     	; 0xbba <__vector_5+0xdc>
			{
				duty = (uint8_t) d_teta * k;
     ba0:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <d_teta>
     ba4:	90 91 e7 00 	lds	r25, 0x00E7	; 0x8000e7 <d_teta+0x1>
     ba8:	98 2f       	mov	r25, r24
     baa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <k>
     bae:	98 9f       	mul	r25, r24
     bb0:	80 2d       	mov	r24, r0
     bb2:	11 24       	eor	r1, r1
     bb4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <duty>
     bb8:	05 c0       	rjmp	.+10     	; 0xbc4 <__vector_5+0xe6>
			}
			else
			{
				duty = 0;
     bba:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <duty>
     bbe:	02 c0       	rjmp	.+4      	; 0xbc4 <__vector_5+0xe6>
			}
		}
		else
		{
			duty = 0;
     bc0:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <duty>
		}
		
		set_PWM(duty);
     bc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <duty>
     bc8:	0e 94 5f 05 	call	0xabe	; 0xabe <set_PWM>
		
		loop_cnt = 0;
     bcc:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <loop_cnt>
		log_counter ++;
     bd0:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <log_counter>
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <log_counter>
		
		
		#ifdef LOGGING
		if(log_counter==5) //every 10 secounds
     bda:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <log_counter>
     bde:	85 30       	cpi	r24, 0x05	; 5
     be0:	41 f5       	brne	.+80     	; 0xc32 <__vector_5+0x154>
		{
			log_counter = 0;
     be2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <log_counter>
			printf("%d,%d,%d\n", temp_dach, temp_kessel, duty);
     be6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <duty>
     bea:	48 2f       	mov	r20, r24
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <temp_kessel>
     bf2:	28 2f       	mov	r18, r24
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <temp_dach>
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	65 2f       	mov	r22, r21
     c00:	6f 93       	push	r22
     c02:	4f 93       	push	r20
     c04:	43 2f       	mov	r20, r19
     c06:	4f 93       	push	r20
     c08:	2f 93       	push	r18
     c0a:	29 2f       	mov	r18, r25
     c0c:	2f 93       	push	r18
     c0e:	8f 93       	push	r24
     c10:	86 ec       	ldi	r24, 0xC6	; 198
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	89 2f       	mov	r24, r25
     c16:	8f 93       	push	r24
     c18:	86 ec       	ldi	r24, 0xC6	; 198
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	8f 93       	push	r24
     c1e:	0e 94 9d 09 	call	0x133a	; 0x133a <printf>
     c22:	8d b7       	in	r24, 0x3d	; 61
     c24:	9e b7       	in	r25, 0x3e	; 62
     c26:	08 96       	adiw	r24, 0x08	; 8
     c28:	0f b6       	in	r0, 0x3f	; 63
     c2a:	f8 94       	cli
     c2c:	de bf       	out	0x3e, r29	; 62
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cd bf       	out	0x3d, r28	; 61
	}
	
	
	
	
	TIFR &= ~(1<<TOV2);			//clear flag
     c32:	88 e5       	ldi	r24, 0x58	; 88
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	28 e5       	ldi	r18, 0x58	; 88
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	f9 01       	movw	r30, r18
     c3c:	20 81       	ld	r18, Z
     c3e:	2f 7b       	andi	r18, 0xBF	; 191
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18
		
	sei();
     c44:	78 94       	sei
     c46:	00 00       	nop
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	ff 91       	pop	r31
     c4e:	ef 91       	pop	r30
     c50:	bf 91       	pop	r27
     c52:	af 91       	pop	r26
     c54:	9f 91       	pop	r25
     c56:	8f 91       	pop	r24
     c58:	7f 91       	pop	r23
     c5a:	6f 91       	pop	r22
     c5c:	5f 91       	pop	r21
     c5e:	4f 91       	pop	r20
     c60:	3f 91       	pop	r19
     c62:	2f 91       	pop	r18
     c64:	0f 90       	pop	r0
     c66:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <Timeout_init>:
#include "main.h"
#include "regulator.h"
#include "uart.h"

void Timeout_init()
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00;
     c78:	8f e4       	ldi	r24, 0x4F	; 79
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	10 82       	st	Z, r1
	
	TIMSK |= (1<<TOIE1);			//enable overflow-event
     c80:	89 e5       	ldi	r24, 0x59	; 89
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	29 e5       	ldi	r18, 0x59	; 89
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	f9 01       	movw	r30, r18
     c8a:	20 81       	ld	r18, Z
     c8c:	24 60       	ori	r18, 0x04	; 4
     c8e:	fc 01       	movw	r30, r24
     c90:	20 83       	st	Z, r18
	sei();
     c92:	78 94       	sei
}
     c94:	00 00       	nop
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <start_timeout_timer>:
void start_timeout_timer()
{
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						 //reset timer counter value
     ca4:	8c e4       	ldi	r24, 0x4C	; 76
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	fc 01       	movw	r30, r24
     caa:	11 82       	std	Z+1, r1	; 0x01
     cac:	10 82       	st	Z, r1
	TCCR1B = (1<<CS12) | (1<<CS10);  //start timer at prescaler /1024
     cae:	8e e4       	ldi	r24, 0x4E	; 78
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	25 e0       	ldi	r18, 0x05	; 5
     cb4:	fc 01       	movw	r30, r24
     cb6:	20 83       	st	Z, r18
}
     cb8:	00 00       	nop
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <stop_timeout_timer>:

void stop_timeout_timer()
{
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     cc8:	8e e4       	ldi	r24, 0x4E	; 78
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	2e e4       	ldi	r18, 0x4E	; 78
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	f9 01       	movw	r30, r18
     cd2:	20 81       	ld	r18, Z
     cd4:	2a 7f       	andi	r18, 0xFA	; 250
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18
}
     cda:	00 00       	nop
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <__vector_9>:



//timeouted
ISR(TIMER1_OVF_vect)
{	
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	1f 93       	push	r17
     cf0:	2f 93       	push	r18
     cf2:	3f 93       	push	r19
     cf4:	4f 93       	push	r20
     cf6:	5f 93       	push	r21
     cf8:	6f 93       	push	r22
     cfa:	7f 93       	push	r23
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	af 93       	push	r26
     d02:	bf 93       	push	r27
     d04:	ef 93       	push	r30
     d06:	ff 93       	push	r31
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
	cli();
     d10:	f8 94       	cli
	
	if((getState() == 3) && (eeprom_read_byte(0) != get_delta(0)))
     d12:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <getState>
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	91 f4       	brne	.+36     	; 0xd3e <__vector_9+0x5c>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <eeprom_read_byte>
     d22:	18 2f       	mov	r17, r24
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     d2a:	18 17       	cp	r17, r24
     d2c:	41 f0       	breq	.+16     	; 0xd3e <__vector_9+0x5c>
	{
		eeprom_update_byte((uint8_t*)(0), (uint8_t)get_delta(0));
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     d34:	68 2f       	mov	r22, r24
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <eeprom_update_byte>
	}
	
	if((getState() == 4) && (eeprom_read_byte(1) != get_delta(1)))
     d3e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <getState>
     d42:	84 30       	cpi	r24, 0x04	; 4
     d44:	91 f4       	brne	.+36     	; 0xd6a <__vector_9+0x88>
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <eeprom_read_byte>
     d4e:	18 2f       	mov	r17, r24
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     d56:	18 17       	cp	r17, r24
     d58:	41 f0       	breq	.+16     	; 0xd6a <__vector_9+0x88>
	{
		eeprom_update_byte((uint8_t*)(1), (uint8_t)get_delta(1));
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     d60:	68 2f       	mov	r22, r24
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <eeprom_update_byte>
	}
	
	setState(1);
     d6a:	81 e0       	ldi	r24, 0x01	; 1
     d6c:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
	
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     d70:	8e e4       	ldi	r24, 0x4E	; 78
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	2e e4       	ldi	r18, 0x4E	; 78
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	20 81       	ld	r18, Z
     d7c:	2a 7f       	andi	r18, 0xFA	; 250
     d7e:	fc 01       	movw	r30, r24
     d80:	20 83       	st	Z, r18
	TCNT1 = 0;						   //resetting counter register
     d82:	8c e4       	ldi	r24, 0x4C	; 76
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	fc 01       	movw	r30, r24
     d88:	11 82       	std	Z+1, r1	; 0x01
     d8a:	10 82       	st	Z, r1
	
	
	TIFR &= ~(1<<TOV1);
     d8c:	88 e5       	ldi	r24, 0x58	; 88
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	28 e5       	ldi	r18, 0x58	; 88
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	f9 01       	movw	r30, r18
     d96:	20 81       	ld	r18, Z
     d98:	2b 7f       	andi	r18, 0xFB	; 251
     d9a:	fc 01       	movw	r30, r24
     d9c:	20 83       	st	Z, r18
	sei();
     d9e:	78 94       	sei
     da0:	00 00       	nop
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	ff 91       	pop	r31
     da8:	ef 91       	pop	r30
     daa:	bf 91       	pop	r27
     dac:	af 91       	pop	r26
     dae:	9f 91       	pop	r25
     db0:	8f 91       	pop	r24
     db2:	7f 91       	pop	r23
     db4:	6f 91       	pop	r22
     db6:	5f 91       	pop	r21
     db8:	4f 91       	pop	r20
     dba:	3f 91       	pop	r19
     dbc:	2f 91       	pop	r18
     dbe:	1f 91       	pop	r17
     dc0:	0f 90       	pop	r0
     dc2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dc6:	0f 90       	pop	r0
     dc8:	1f 90       	pop	r1
     dca:	18 95       	reti

00000dcc <uart_init>:
#include <avr/io.h>
#include <stdio.h>


void uart_init()
{
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<RXEN) | (1<<TXEN);  //enable receive and transmit
     dd4:	8a e2       	ldi	r24, 0x2A	; 42
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	2a e2       	ldi	r18, 0x2A	; 42
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	f9 01       	movw	r30, r18
     dde:	20 81       	ld	r18, Z
     de0:	28 61       	ori	r18, 0x18	; 24
     de2:	fc 01       	movw	r30, r24
     de4:	20 83       	st	Z, r18
	UBRRL = 51;						 //setting datarate to 9600 baud/s
     de6:	89 e2       	ldi	r24, 0x29	; 41
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	23 e3       	ldi	r18, 0x33	; 51
     dec:	fc 01       	movw	r30, r24
     dee:	20 83       	st	Z, r18

	UCSRB |= (1<<RXEN) | (1<<TXEN);
     df0:	8a e2       	ldi	r24, 0x2A	; 42
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	2a e2       	ldi	r18, 0x2A	; 42
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	f9 01       	movw	r30, r18
     dfa:	20 81       	ld	r18, Z
     dfc:	28 61       	ori	r18, 0x18	; 24
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18

	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     e02:	80 e4       	ldi	r24, 0x40	; 64
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	20 e4       	ldi	r18, 0x40	; 64
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	f9 01       	movw	r30, r18
     e0c:	20 81       	ld	r18, Z
     e0e:	26 68       	ori	r18, 0x86	; 134
     e10:	fc 01       	movw	r30, r24
     e12:	20 83       	st	Z, r18
}
     e14:	00 00       	nop
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	00 d0       	rcall	.+0      	; 0xe22 <uart_putchar+0x6>
     e22:	1f 92       	push	r1
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	7b 83       	std	Y+3, r23	; 0x03
     e2c:	6a 83       	std	Y+2, r22	; 0x02
	if(c=='\n')
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	8a 30       	cpi	r24, 0x0A	; 10
     e32:	31 f4       	brne	.+12     	; 0xe40 <uart_putchar+0x24>
		uart_putchar('\r', stream);
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	9b 81       	ldd	r25, Y+3	; 0x03
     e38:	bc 01       	movw	r22, r24
     e3a:	8d e0       	ldi	r24, 0x0D	; 13
     e3c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <uart_putchar>
		
		
	while( (UCSRA & (1<<UDRE)) ==0 )
     e40:	00 00       	nop
     e42:	8b e2       	ldi	r24, 0x2B	; 43
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	fc 01       	movw	r30, r24
     e48:	80 81       	ld	r24, Z
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	80 72       	andi	r24, 0x20	; 32
     e50:	99 27       	eor	r25, r25
     e52:	89 2b       	or	r24, r25
     e54:	b1 f3       	breq	.-20     	; 0xe42 <uart_putchar+0x26>
	{
	}
		
	UDR = c;
     e56:	8c e2       	ldi	r24, 0x2C	; 44
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	29 81       	ldd	r18, Y+1	; 0x01
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 83       	st	Z, r18
	
	return 0;
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <__subsf3>:
     e70:	50 58       	subi	r21, 0x80	; 128

00000e72 <__addsf3>:
     e72:	bb 27       	eor	r27, r27
     e74:	aa 27       	eor	r26, r26
     e76:	0e 94 50 07 	call	0xea0	; 0xea0 <__addsf3x>
     e7a:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__fp_round>
     e7e:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_pscA>
     e82:	38 f0       	brcs	.+14     	; 0xe92 <__addsf3+0x20>
     e84:	0e 94 93 08 	call	0x1126	; 0x1126 <__fp_pscB>
     e88:	20 f0       	brcs	.+8      	; 0xe92 <__addsf3+0x20>
     e8a:	39 f4       	brne	.+14     	; 0xe9a <__addsf3+0x28>
     e8c:	9f 3f       	cpi	r25, 0xFF	; 255
     e8e:	19 f4       	brne	.+6      	; 0xe96 <__addsf3+0x24>
     e90:	26 f4       	brtc	.+8      	; 0xe9a <__addsf3+0x28>
     e92:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_nan>
     e96:	0e f4       	brtc	.+2      	; 0xe9a <__addsf3+0x28>
     e98:	e0 95       	com	r30
     e9a:	e7 fb       	bst	r30, 7
     e9c:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>

00000ea0 <__addsf3x>:
     ea0:	e9 2f       	mov	r30, r25
     ea2:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fp_split3>
     ea6:	58 f3       	brcs	.-42     	; 0xe7e <__addsf3+0xc>
     ea8:	ba 17       	cp	r27, r26
     eaa:	62 07       	cpc	r22, r18
     eac:	73 07       	cpc	r23, r19
     eae:	84 07       	cpc	r24, r20
     eb0:	95 07       	cpc	r25, r21
     eb2:	20 f0       	brcs	.+8      	; 0xebc <__addsf3x+0x1c>
     eb4:	79 f4       	brne	.+30     	; 0xed4 <__addsf3x+0x34>
     eb6:	a6 f5       	brtc	.+104    	; 0xf20 <__addsf3x+0x80>
     eb8:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_zero>
     ebc:	0e f4       	brtc	.+2      	; 0xec0 <__addsf3x+0x20>
     ebe:	e0 95       	com	r30
     ec0:	0b 2e       	mov	r0, r27
     ec2:	ba 2f       	mov	r27, r26
     ec4:	a0 2d       	mov	r26, r0
     ec6:	0b 01       	movw	r0, r22
     ec8:	b9 01       	movw	r22, r18
     eca:	90 01       	movw	r18, r0
     ecc:	0c 01       	movw	r0, r24
     ece:	ca 01       	movw	r24, r20
     ed0:	a0 01       	movw	r20, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	ff 27       	eor	r31, r31
     ed6:	59 1b       	sub	r21, r25
     ed8:	99 f0       	breq	.+38     	; 0xf00 <__addsf3x+0x60>
     eda:	59 3f       	cpi	r21, 0xF9	; 249
     edc:	50 f4       	brcc	.+20     	; 0xef2 <__addsf3x+0x52>
     ede:	50 3e       	cpi	r21, 0xE0	; 224
     ee0:	68 f1       	brcs	.+90     	; 0xf3c <__addsf3x+0x9c>
     ee2:	1a 16       	cp	r1, r26
     ee4:	f0 40       	sbci	r31, 0x00	; 0
     ee6:	a2 2f       	mov	r26, r18
     ee8:	23 2f       	mov	r18, r19
     eea:	34 2f       	mov	r19, r20
     eec:	44 27       	eor	r20, r20
     eee:	58 5f       	subi	r21, 0xF8	; 248
     ef0:	f3 cf       	rjmp	.-26     	; 0xed8 <__addsf3x+0x38>
     ef2:	46 95       	lsr	r20
     ef4:	37 95       	ror	r19
     ef6:	27 95       	ror	r18
     ef8:	a7 95       	ror	r26
     efa:	f0 40       	sbci	r31, 0x00	; 0
     efc:	53 95       	inc	r21
     efe:	c9 f7       	brne	.-14     	; 0xef2 <__addsf3x+0x52>
     f00:	7e f4       	brtc	.+30     	; 0xf20 <__addsf3x+0x80>
     f02:	1f 16       	cp	r1, r31
     f04:	ba 0b       	sbc	r27, r26
     f06:	62 0b       	sbc	r22, r18
     f08:	73 0b       	sbc	r23, r19
     f0a:	84 0b       	sbc	r24, r20
     f0c:	ba f0       	brmi	.+46     	; 0xf3c <__addsf3x+0x9c>
     f0e:	91 50       	subi	r25, 0x01	; 1
     f10:	a1 f0       	breq	.+40     	; 0xf3a <__addsf3x+0x9a>
     f12:	ff 0f       	add	r31, r31
     f14:	bb 1f       	adc	r27, r27
     f16:	66 1f       	adc	r22, r22
     f18:	77 1f       	adc	r23, r23
     f1a:	88 1f       	adc	r24, r24
     f1c:	c2 f7       	brpl	.-16     	; 0xf0e <__addsf3x+0x6e>
     f1e:	0e c0       	rjmp	.+28     	; 0xf3c <__addsf3x+0x9c>
     f20:	ba 0f       	add	r27, r26
     f22:	62 1f       	adc	r22, r18
     f24:	73 1f       	adc	r23, r19
     f26:	84 1f       	adc	r24, r20
     f28:	48 f4       	brcc	.+18     	; 0xf3c <__addsf3x+0x9c>
     f2a:	87 95       	ror	r24
     f2c:	77 95       	ror	r23
     f2e:	67 95       	ror	r22
     f30:	b7 95       	ror	r27
     f32:	f7 95       	ror	r31
     f34:	9e 3f       	cpi	r25, 0xFE	; 254
     f36:	08 f0       	brcs	.+2      	; 0xf3a <__addsf3x+0x9a>
     f38:	b0 cf       	rjmp	.-160    	; 0xe9a <__addsf3+0x28>
     f3a:	93 95       	inc	r25
     f3c:	88 0f       	add	r24, r24
     f3e:	08 f0       	brcs	.+2      	; 0xf42 <__addsf3x+0xa2>
     f40:	99 27       	eor	r25, r25
     f42:	ee 0f       	add	r30, r30
     f44:	97 95       	ror	r25
     f46:	87 95       	ror	r24
     f48:	08 95       	ret

00000f4a <__divsf3>:
     f4a:	0e 94 b9 07 	call	0xf72	; 0xf72 <__divsf3x>
     f4e:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__fp_round>
     f52:	0e 94 93 08 	call	0x1126	; 0x1126 <__fp_pscB>
     f56:	58 f0       	brcs	.+22     	; 0xf6e <__divsf3+0x24>
     f58:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_pscA>
     f5c:	40 f0       	brcs	.+16     	; 0xf6e <__divsf3+0x24>
     f5e:	29 f4       	brne	.+10     	; 0xf6a <__divsf3+0x20>
     f60:	5f 3f       	cpi	r21, 0xFF	; 255
     f62:	29 f0       	breq	.+10     	; 0xf6e <__divsf3+0x24>
     f64:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
     f68:	51 11       	cpse	r21, r1
     f6a:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__fp_szero>
     f6e:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_nan>

00000f72 <__divsf3x>:
     f72:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fp_split3>
     f76:	68 f3       	brcs	.-38     	; 0xf52 <__divsf3+0x8>

00000f78 <__divsf3_pse>:
     f78:	99 23       	and	r25, r25
     f7a:	b1 f3       	breq	.-20     	; 0xf68 <__divsf3+0x1e>
     f7c:	55 23       	and	r21, r21
     f7e:	91 f3       	breq	.-28     	; 0xf64 <__divsf3+0x1a>
     f80:	95 1b       	sub	r25, r21
     f82:	55 0b       	sbc	r21, r21
     f84:	bb 27       	eor	r27, r27
     f86:	aa 27       	eor	r26, r26
     f88:	62 17       	cp	r22, r18
     f8a:	73 07       	cpc	r23, r19
     f8c:	84 07       	cpc	r24, r20
     f8e:	38 f0       	brcs	.+14     	; 0xf9e <__divsf3_pse+0x26>
     f90:	9f 5f       	subi	r25, 0xFF	; 255
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	22 0f       	add	r18, r18
     f96:	33 1f       	adc	r19, r19
     f98:	44 1f       	adc	r20, r20
     f9a:	aa 1f       	adc	r26, r26
     f9c:	a9 f3       	breq	.-22     	; 0xf88 <__divsf3_pse+0x10>
     f9e:	35 d0       	rcall	.+106    	; 0x100a <__divsf3_pse+0x92>
     fa0:	0e 2e       	mov	r0, r30
     fa2:	3a f0       	brmi	.+14     	; 0xfb2 <__divsf3_pse+0x3a>
     fa4:	e0 e8       	ldi	r30, 0x80	; 128
     fa6:	32 d0       	rcall	.+100    	; 0x100c <__divsf3_pse+0x94>
     fa8:	91 50       	subi	r25, 0x01	; 1
     faa:	50 40       	sbci	r21, 0x00	; 0
     fac:	e6 95       	lsr	r30
     fae:	00 1c       	adc	r0, r0
     fb0:	ca f7       	brpl	.-14     	; 0xfa4 <__divsf3_pse+0x2c>
     fb2:	2b d0       	rcall	.+86     	; 0x100a <__divsf3_pse+0x92>
     fb4:	fe 2f       	mov	r31, r30
     fb6:	29 d0       	rcall	.+82     	; 0x100a <__divsf3_pse+0x92>
     fb8:	66 0f       	add	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	bb 1f       	adc	r27, r27
     fc0:	26 17       	cp	r18, r22
     fc2:	37 07       	cpc	r19, r23
     fc4:	48 07       	cpc	r20, r24
     fc6:	ab 07       	cpc	r26, r27
     fc8:	b0 e8       	ldi	r27, 0x80	; 128
     fca:	09 f0       	breq	.+2      	; 0xfce <__divsf3_pse+0x56>
     fcc:	bb 0b       	sbc	r27, r27
     fce:	80 2d       	mov	r24, r0
     fd0:	bf 01       	movw	r22, r30
     fd2:	ff 27       	eor	r31, r31
     fd4:	93 58       	subi	r25, 0x83	; 131
     fd6:	5f 4f       	sbci	r21, 0xFF	; 255
     fd8:	3a f0       	brmi	.+14     	; 0xfe8 <__divsf3_pse+0x70>
     fda:	9e 3f       	cpi	r25, 0xFE	; 254
     fdc:	51 05       	cpc	r21, r1
     fde:	78 f0       	brcs	.+30     	; 0xffe <__divsf3_pse+0x86>
     fe0:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
     fe4:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__fp_szero>
     fe8:	5f 3f       	cpi	r21, 0xFF	; 255
     fea:	e4 f3       	brlt	.-8      	; 0xfe4 <__divsf3_pse+0x6c>
     fec:	98 3e       	cpi	r25, 0xE8	; 232
     fee:	d4 f3       	brlt	.-12     	; 0xfe4 <__divsf3_pse+0x6c>
     ff0:	86 95       	lsr	r24
     ff2:	77 95       	ror	r23
     ff4:	67 95       	ror	r22
     ff6:	b7 95       	ror	r27
     ff8:	f7 95       	ror	r31
     ffa:	9f 5f       	subi	r25, 0xFF	; 255
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__divsf3_pse+0x78>
     ffe:	88 0f       	add	r24, r24
    1000:	91 1d       	adc	r25, r1
    1002:	96 95       	lsr	r25
    1004:	87 95       	ror	r24
    1006:	97 f9       	bld	r25, 7
    1008:	08 95       	ret
    100a:	e1 e0       	ldi	r30, 0x01	; 1
    100c:	66 0f       	add	r22, r22
    100e:	77 1f       	adc	r23, r23
    1010:	88 1f       	adc	r24, r24
    1012:	bb 1f       	adc	r27, r27
    1014:	62 17       	cp	r22, r18
    1016:	73 07       	cpc	r23, r19
    1018:	84 07       	cpc	r24, r20
    101a:	ba 07       	cpc	r27, r26
    101c:	20 f0       	brcs	.+8      	; 0x1026 <__divsf3_pse+0xae>
    101e:	62 1b       	sub	r22, r18
    1020:	73 0b       	sbc	r23, r19
    1022:	84 0b       	sbc	r24, r20
    1024:	ba 0b       	sbc	r27, r26
    1026:	ee 1f       	adc	r30, r30
    1028:	88 f7       	brcc	.-30     	; 0x100c <__divsf3_pse+0x94>
    102a:	e0 95       	com	r30
    102c:	08 95       	ret

0000102e <__fixunssfsi>:
    102e:	0e 94 b3 08 	call	0x1166	; 0x1166 <__fp_splitA>
    1032:	88 f0       	brcs	.+34     	; 0x1056 <__fixunssfsi+0x28>
    1034:	9f 57       	subi	r25, 0x7F	; 127
    1036:	98 f0       	brcs	.+38     	; 0x105e <__fixunssfsi+0x30>
    1038:	b9 2f       	mov	r27, r25
    103a:	99 27       	eor	r25, r25
    103c:	b7 51       	subi	r27, 0x17	; 23
    103e:	b0 f0       	brcs	.+44     	; 0x106c <__fixunssfsi+0x3e>
    1040:	e1 f0       	breq	.+56     	; 0x107a <__fixunssfsi+0x4c>
    1042:	66 0f       	add	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	88 1f       	adc	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	1a f0       	brmi	.+6      	; 0x1052 <__fixunssfsi+0x24>
    104c:	ba 95       	dec	r27
    104e:	c9 f7       	brne	.-14     	; 0x1042 <__fixunssfsi+0x14>
    1050:	14 c0       	rjmp	.+40     	; 0x107a <__fixunssfsi+0x4c>
    1052:	b1 30       	cpi	r27, 0x01	; 1
    1054:	91 f0       	breq	.+36     	; 0x107a <__fixunssfsi+0x4c>
    1056:	0e 94 cd 08 	call	0x119a	; 0x119a <__fp_zero>
    105a:	b1 e0       	ldi	r27, 0x01	; 1
    105c:	08 95       	ret
    105e:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_zero>
    1062:	67 2f       	mov	r22, r23
    1064:	78 2f       	mov	r23, r24
    1066:	88 27       	eor	r24, r24
    1068:	b8 5f       	subi	r27, 0xF8	; 248
    106a:	39 f0       	breq	.+14     	; 0x107a <__fixunssfsi+0x4c>
    106c:	b9 3f       	cpi	r27, 0xF9	; 249
    106e:	cc f3       	brlt	.-14     	; 0x1062 <__fixunssfsi+0x34>
    1070:	86 95       	lsr	r24
    1072:	77 95       	ror	r23
    1074:	67 95       	ror	r22
    1076:	b3 95       	inc	r27
    1078:	d9 f7       	brne	.-10     	; 0x1070 <__fixunssfsi+0x42>
    107a:	3e f4       	brtc	.+14     	; 0x108a <__fixunssfsi+0x5c>
    107c:	90 95       	com	r25
    107e:	80 95       	com	r24
    1080:	70 95       	com	r23
    1082:	61 95       	neg	r22
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	8f 4f       	sbci	r24, 0xFF	; 255
    1088:	9f 4f       	sbci	r25, 0xFF	; 255
    108a:	08 95       	ret

0000108c <__floatunsisf>:
    108c:	e8 94       	clt
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <__floatsisf+0x12>

00001090 <__floatsisf>:
    1090:	97 fb       	bst	r25, 7
    1092:	3e f4       	brtc	.+14     	; 0x10a2 <__floatsisf+0x12>
    1094:	90 95       	com	r25
    1096:	80 95       	com	r24
    1098:	70 95       	com	r23
    109a:	61 95       	neg	r22
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	8f 4f       	sbci	r24, 0xFF	; 255
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	99 23       	and	r25, r25
    10a4:	a9 f0       	breq	.+42     	; 0x10d0 <__floatsisf+0x40>
    10a6:	f9 2f       	mov	r31, r25
    10a8:	96 e9       	ldi	r25, 0x96	; 150
    10aa:	bb 27       	eor	r27, r27
    10ac:	93 95       	inc	r25
    10ae:	f6 95       	lsr	r31
    10b0:	87 95       	ror	r24
    10b2:	77 95       	ror	r23
    10b4:	67 95       	ror	r22
    10b6:	b7 95       	ror	r27
    10b8:	f1 11       	cpse	r31, r1
    10ba:	f8 cf       	rjmp	.-16     	; 0x10ac <__floatsisf+0x1c>
    10bc:	fa f4       	brpl	.+62     	; 0x10fc <__floatsisf+0x6c>
    10be:	bb 0f       	add	r27, r27
    10c0:	11 f4       	brne	.+4      	; 0x10c6 <__floatsisf+0x36>
    10c2:	60 ff       	sbrs	r22, 0
    10c4:	1b c0       	rjmp	.+54     	; 0x10fc <__floatsisf+0x6c>
    10c6:	6f 5f       	subi	r22, 0xFF	; 255
    10c8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ca:	8f 4f       	sbci	r24, 0xFF	; 255
    10cc:	9f 4f       	sbci	r25, 0xFF	; 255
    10ce:	16 c0       	rjmp	.+44     	; 0x10fc <__floatsisf+0x6c>
    10d0:	88 23       	and	r24, r24
    10d2:	11 f0       	breq	.+4      	; 0x10d8 <__floatsisf+0x48>
    10d4:	96 e9       	ldi	r25, 0x96	; 150
    10d6:	11 c0       	rjmp	.+34     	; 0x10fa <__floatsisf+0x6a>
    10d8:	77 23       	and	r23, r23
    10da:	21 f0       	breq	.+8      	; 0x10e4 <__floatsisf+0x54>
    10dc:	9e e8       	ldi	r25, 0x8E	; 142
    10de:	87 2f       	mov	r24, r23
    10e0:	76 2f       	mov	r23, r22
    10e2:	05 c0       	rjmp	.+10     	; 0x10ee <__floatsisf+0x5e>
    10e4:	66 23       	and	r22, r22
    10e6:	71 f0       	breq	.+28     	; 0x1104 <__floatsisf+0x74>
    10e8:	96 e8       	ldi	r25, 0x86	; 134
    10ea:	86 2f       	mov	r24, r22
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	60 e0       	ldi	r22, 0x00	; 0
    10f0:	2a f0       	brmi	.+10     	; 0x10fc <__floatsisf+0x6c>
    10f2:	9a 95       	dec	r25
    10f4:	66 0f       	add	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	da f7       	brpl	.-10     	; 0x10f2 <__floatsisf+0x62>
    10fc:	88 0f       	add	r24, r24
    10fe:	96 95       	lsr	r25
    1100:	87 95       	ror	r24
    1102:	97 f9       	bld	r25, 7
    1104:	08 95       	ret

00001106 <__fp_inf>:
    1106:	97 f9       	bld	r25, 7
    1108:	9f 67       	ori	r25, 0x7F	; 127
    110a:	80 e8       	ldi	r24, 0x80	; 128
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	08 95       	ret

00001112 <__fp_nan>:
    1112:	9f ef       	ldi	r25, 0xFF	; 255
    1114:	80 ec       	ldi	r24, 0xC0	; 192
    1116:	08 95       	ret

00001118 <__fp_pscA>:
    1118:	00 24       	eor	r0, r0
    111a:	0a 94       	dec	r0
    111c:	16 16       	cp	r1, r22
    111e:	17 06       	cpc	r1, r23
    1120:	18 06       	cpc	r1, r24
    1122:	09 06       	cpc	r0, r25
    1124:	08 95       	ret

00001126 <__fp_pscB>:
    1126:	00 24       	eor	r0, r0
    1128:	0a 94       	dec	r0
    112a:	12 16       	cp	r1, r18
    112c:	13 06       	cpc	r1, r19
    112e:	14 06       	cpc	r1, r20
    1130:	05 06       	cpc	r0, r21
    1132:	08 95       	ret

00001134 <__fp_round>:
    1134:	09 2e       	mov	r0, r25
    1136:	03 94       	inc	r0
    1138:	00 0c       	add	r0, r0
    113a:	11 f4       	brne	.+4      	; 0x1140 <__fp_round+0xc>
    113c:	88 23       	and	r24, r24
    113e:	52 f0       	brmi	.+20     	; 0x1154 <__fp_round+0x20>
    1140:	bb 0f       	add	r27, r27
    1142:	40 f4       	brcc	.+16     	; 0x1154 <__fp_round+0x20>
    1144:	bf 2b       	or	r27, r31
    1146:	11 f4       	brne	.+4      	; 0x114c <__fp_round+0x18>
    1148:	60 ff       	sbrs	r22, 0
    114a:	04 c0       	rjmp	.+8      	; 0x1154 <__fp_round+0x20>
    114c:	6f 5f       	subi	r22, 0xFF	; 255
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	8f 4f       	sbci	r24, 0xFF	; 255
    1152:	9f 4f       	sbci	r25, 0xFF	; 255
    1154:	08 95       	ret

00001156 <__fp_split3>:
    1156:	57 fd       	sbrc	r21, 7
    1158:	90 58       	subi	r25, 0x80	; 128
    115a:	44 0f       	add	r20, r20
    115c:	55 1f       	adc	r21, r21
    115e:	59 f0       	breq	.+22     	; 0x1176 <__fp_splitA+0x10>
    1160:	5f 3f       	cpi	r21, 0xFF	; 255
    1162:	71 f0       	breq	.+28     	; 0x1180 <__fp_splitA+0x1a>
    1164:	47 95       	ror	r20

00001166 <__fp_splitA>:
    1166:	88 0f       	add	r24, r24
    1168:	97 fb       	bst	r25, 7
    116a:	99 1f       	adc	r25, r25
    116c:	61 f0       	breq	.+24     	; 0x1186 <__fp_splitA+0x20>
    116e:	9f 3f       	cpi	r25, 0xFF	; 255
    1170:	79 f0       	breq	.+30     	; 0x1190 <__fp_splitA+0x2a>
    1172:	87 95       	ror	r24
    1174:	08 95       	ret
    1176:	12 16       	cp	r1, r18
    1178:	13 06       	cpc	r1, r19
    117a:	14 06       	cpc	r1, r20
    117c:	55 1f       	adc	r21, r21
    117e:	f2 cf       	rjmp	.-28     	; 0x1164 <__fp_split3+0xe>
    1180:	46 95       	lsr	r20
    1182:	f1 df       	rcall	.-30     	; 0x1166 <__fp_splitA>
    1184:	08 c0       	rjmp	.+16     	; 0x1196 <__fp_splitA+0x30>
    1186:	16 16       	cp	r1, r22
    1188:	17 06       	cpc	r1, r23
    118a:	18 06       	cpc	r1, r24
    118c:	99 1f       	adc	r25, r25
    118e:	f1 cf       	rjmp	.-30     	; 0x1172 <__fp_splitA+0xc>
    1190:	86 95       	lsr	r24
    1192:	71 05       	cpc	r23, r1
    1194:	61 05       	cpc	r22, r1
    1196:	08 94       	sec
    1198:	08 95       	ret

0000119a <__fp_zero>:
    119a:	e8 94       	clt

0000119c <__fp_szero>:
    119c:	bb 27       	eor	r27, r27
    119e:	66 27       	eor	r22, r22
    11a0:	77 27       	eor	r23, r23
    11a2:	cb 01       	movw	r24, r22
    11a4:	97 f9       	bld	r25, 7
    11a6:	08 95       	ret

000011a8 <__mulsf3>:
    11a8:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__mulsf3x>
    11ac:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__fp_round>
    11b0:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_pscA>
    11b4:	38 f0       	brcs	.+14     	; 0x11c4 <__mulsf3+0x1c>
    11b6:	0e 94 93 08 	call	0x1126	; 0x1126 <__fp_pscB>
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__mulsf3+0x1c>
    11bc:	95 23       	and	r25, r21
    11be:	11 f0       	breq	.+4      	; 0x11c4 <__mulsf3+0x1c>
    11c0:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
    11c4:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__fp_nan>
    11c8:	11 24       	eor	r1, r1
    11ca:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__fp_szero>

000011ce <__mulsf3x>:
    11ce:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fp_split3>
    11d2:	70 f3       	brcs	.-36     	; 0x11b0 <__mulsf3+0x8>

000011d4 <__mulsf3_pse>:
    11d4:	95 9f       	mul	r25, r21
    11d6:	c1 f3       	breq	.-16     	; 0x11c8 <__mulsf3+0x20>
    11d8:	95 0f       	add	r25, r21
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	55 1f       	adc	r21, r21
    11de:	62 9f       	mul	r22, r18
    11e0:	f0 01       	movw	r30, r0
    11e2:	72 9f       	mul	r23, r18
    11e4:	bb 27       	eor	r27, r27
    11e6:	f0 0d       	add	r31, r0
    11e8:	b1 1d       	adc	r27, r1
    11ea:	63 9f       	mul	r22, r19
    11ec:	aa 27       	eor	r26, r26
    11ee:	f0 0d       	add	r31, r0
    11f0:	b1 1d       	adc	r27, r1
    11f2:	aa 1f       	adc	r26, r26
    11f4:	64 9f       	mul	r22, r20
    11f6:	66 27       	eor	r22, r22
    11f8:	b0 0d       	add	r27, r0
    11fa:	a1 1d       	adc	r26, r1
    11fc:	66 1f       	adc	r22, r22
    11fe:	82 9f       	mul	r24, r18
    1200:	22 27       	eor	r18, r18
    1202:	b0 0d       	add	r27, r0
    1204:	a1 1d       	adc	r26, r1
    1206:	62 1f       	adc	r22, r18
    1208:	73 9f       	mul	r23, r19
    120a:	b0 0d       	add	r27, r0
    120c:	a1 1d       	adc	r26, r1
    120e:	62 1f       	adc	r22, r18
    1210:	83 9f       	mul	r24, r19
    1212:	a0 0d       	add	r26, r0
    1214:	61 1d       	adc	r22, r1
    1216:	22 1f       	adc	r18, r18
    1218:	74 9f       	mul	r23, r20
    121a:	33 27       	eor	r19, r19
    121c:	a0 0d       	add	r26, r0
    121e:	61 1d       	adc	r22, r1
    1220:	23 1f       	adc	r18, r19
    1222:	84 9f       	mul	r24, r20
    1224:	60 0d       	add	r22, r0
    1226:	21 1d       	adc	r18, r1
    1228:	82 2f       	mov	r24, r18
    122a:	76 2f       	mov	r23, r22
    122c:	6a 2f       	mov	r22, r26
    122e:	11 24       	eor	r1, r1
    1230:	9f 57       	subi	r25, 0x7F	; 127
    1232:	50 40       	sbci	r21, 0x00	; 0
    1234:	9a f0       	brmi	.+38     	; 0x125c <__mulsf3_pse+0x88>
    1236:	f1 f0       	breq	.+60     	; 0x1274 <__mulsf3_pse+0xa0>
    1238:	88 23       	and	r24, r24
    123a:	4a f0       	brmi	.+18     	; 0x124e <__mulsf3_pse+0x7a>
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	bb 1f       	adc	r27, r27
    1242:	66 1f       	adc	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	91 50       	subi	r25, 0x01	; 1
    124a:	50 40       	sbci	r21, 0x00	; 0
    124c:	a9 f7       	brne	.-22     	; 0x1238 <__mulsf3_pse+0x64>
    124e:	9e 3f       	cpi	r25, 0xFE	; 254
    1250:	51 05       	cpc	r21, r1
    1252:	80 f0       	brcs	.+32     	; 0x1274 <__mulsf3_pse+0xa0>
    1254:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_inf>
    1258:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__fp_szero>
    125c:	5f 3f       	cpi	r21, 0xFF	; 255
    125e:	e4 f3       	brlt	.-8      	; 0x1258 <__mulsf3_pse+0x84>
    1260:	98 3e       	cpi	r25, 0xE8	; 232
    1262:	d4 f3       	brlt	.-12     	; 0x1258 <__mulsf3_pse+0x84>
    1264:	86 95       	lsr	r24
    1266:	77 95       	ror	r23
    1268:	67 95       	ror	r22
    126a:	b7 95       	ror	r27
    126c:	f7 95       	ror	r31
    126e:	e7 95       	ror	r30
    1270:	9f 5f       	subi	r25, 0xFF	; 255
    1272:	c1 f7       	brne	.-16     	; 0x1264 <__mulsf3_pse+0x90>
    1274:	fe 2b       	or	r31, r30
    1276:	88 0f       	add	r24, r24
    1278:	91 1d       	adc	r25, r1
    127a:	96 95       	lsr	r25
    127c:	87 95       	ror	r24
    127e:	97 f9       	bld	r25, 7
    1280:	08 95       	ret

00001282 <round>:
    1282:	0e 94 b3 08 	call	0x1166	; 0x1166 <__fp_splitA>
    1286:	e8 f0       	brcs	.+58     	; 0x12c2 <round+0x40>
    1288:	9e 37       	cpi	r25, 0x7E	; 126
    128a:	e8 f0       	brcs	.+58     	; 0x12c6 <round+0x44>
    128c:	96 39       	cpi	r25, 0x96	; 150
    128e:	b8 f4       	brcc	.+46     	; 0x12be <round+0x3c>
    1290:	9e 38       	cpi	r25, 0x8E	; 142
    1292:	48 f4       	brcc	.+18     	; 0x12a6 <round+0x24>
    1294:	67 2f       	mov	r22, r23
    1296:	78 2f       	mov	r23, r24
    1298:	88 27       	eor	r24, r24
    129a:	98 5f       	subi	r25, 0xF8	; 248
    129c:	f9 cf       	rjmp	.-14     	; 0x1290 <round+0xe>
    129e:	86 95       	lsr	r24
    12a0:	77 95       	ror	r23
    12a2:	67 95       	ror	r22
    12a4:	93 95       	inc	r25
    12a6:	95 39       	cpi	r25, 0x95	; 149
    12a8:	d0 f3       	brcs	.-12     	; 0x129e <round+0x1c>
    12aa:	b6 2f       	mov	r27, r22
    12ac:	b1 70       	andi	r27, 0x01	; 1
    12ae:	6b 0f       	add	r22, r27
    12b0:	71 1d       	adc	r23, r1
    12b2:	81 1d       	adc	r24, r1
    12b4:	20 f4       	brcc	.+8      	; 0x12be <round+0x3c>
    12b6:	87 95       	ror	r24
    12b8:	77 95       	ror	r23
    12ba:	67 95       	ror	r22
    12bc:	93 95       	inc	r25
    12be:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__fp_mintl>
    12c2:	0c 94 80 09 	jmp	0x1300	; 0x1300 <__fp_mpack>
    12c6:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__fp_szero>

000012ca <__fp_mintl>:
    12ca:	88 23       	and	r24, r24
    12cc:	71 f4       	brne	.+28     	; 0x12ea <__fp_mintl+0x20>
    12ce:	77 23       	and	r23, r23
    12d0:	21 f0       	breq	.+8      	; 0x12da <__fp_mintl+0x10>
    12d2:	98 50       	subi	r25, 0x08	; 8
    12d4:	87 2b       	or	r24, r23
    12d6:	76 2f       	mov	r23, r22
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <__fp_mintl+0x1e>
    12da:	66 23       	and	r22, r22
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <__fp_mintl+0x18>
    12de:	99 27       	eor	r25, r25
    12e0:	0d c0       	rjmp	.+26     	; 0x12fc <__fp_mintl+0x32>
    12e2:	90 51       	subi	r25, 0x10	; 16
    12e4:	86 2b       	or	r24, r22
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	2a f0       	brmi	.+10     	; 0x12f6 <__fp_mintl+0x2c>
    12ec:	9a 95       	dec	r25
    12ee:	66 0f       	add	r22, r22
    12f0:	77 1f       	adc	r23, r23
    12f2:	88 1f       	adc	r24, r24
    12f4:	da f7       	brpl	.-10     	; 0x12ec <__fp_mintl+0x22>
    12f6:	88 0f       	add	r24, r24
    12f8:	96 95       	lsr	r25
    12fa:	87 95       	ror	r24
    12fc:	97 f9       	bld	r25, 7
    12fe:	08 95       	ret

00001300 <__fp_mpack>:
    1300:	9f 3f       	cpi	r25, 0xFF	; 255
    1302:	31 f0       	breq	.+12     	; 0x1310 <__fp_mpack_finite+0xc>

00001304 <__fp_mpack_finite>:
    1304:	91 50       	subi	r25, 0x01	; 1
    1306:	20 f4       	brcc	.+8      	; 0x1310 <__fp_mpack_finite+0xc>
    1308:	87 95       	ror	r24
    130a:	77 95       	ror	r23
    130c:	67 95       	ror	r22
    130e:	b7 95       	ror	r27
    1310:	88 0f       	add	r24, r24
    1312:	91 1d       	adc	r25, r1
    1314:	96 95       	lsr	r25
    1316:	87 95       	ror	r24
    1318:	97 f9       	bld	r25, 7
    131a:	08 95       	ret

0000131c <__umulhisi3>:
    131c:	a2 9f       	mul	r26, r18
    131e:	b0 01       	movw	r22, r0
    1320:	b3 9f       	mul	r27, r19
    1322:	c0 01       	movw	r24, r0
    1324:	a3 9f       	mul	r26, r19
    1326:	70 0d       	add	r23, r0
    1328:	81 1d       	adc	r24, r1
    132a:	11 24       	eor	r1, r1
    132c:	91 1d       	adc	r25, r1
    132e:	b2 9f       	mul	r27, r18
    1330:	70 0d       	add	r23, r0
    1332:	81 1d       	adc	r24, r1
    1334:	11 24       	eor	r1, r1
    1336:	91 1d       	adc	r25, r1
    1338:	08 95       	ret

0000133a <printf>:
    133a:	a0 e0       	ldi	r26, 0x00	; 0
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e3 ea       	ldi	r30, 0xA3	; 163
    1340:	f9 e0       	ldi	r31, 0x09	; 9
    1342:	0c 94 9d 0c 	jmp	0x193a	; 0x193a <__prologue_saves__+0x20>
    1346:	ae 01       	movw	r20, r28
    1348:	4b 5f       	subi	r20, 0xFB	; 251
    134a:	5f 4f       	sbci	r21, 0xFF	; 255
    134c:	fa 01       	movw	r30, r20
    134e:	61 91       	ld	r22, Z+
    1350:	71 91       	ld	r23, Z+
    1352:	af 01       	movw	r20, r30
    1354:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__iob+0x2>
    1358:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__iob+0x3>
    135c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <vfprintf>
    1360:	e2 e0       	ldi	r30, 0x02	; 2
    1362:	0c 94 b9 0c 	jmp	0x1972	; 0x1972 <__epilogue_restores__+0x20>

00001366 <puts>:
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <__iob+0x2>
    1372:	f0 91 ef 00 	lds	r31, 0x00EF	; 0x8000ef <__iob+0x3>
    1376:	23 81       	ldd	r18, Z+3	; 0x03
    1378:	21 ff       	sbrs	r18, 1
    137a:	1b c0       	rjmp	.+54     	; 0x13b2 <puts+0x4c>
    137c:	8c 01       	movw	r16, r24
    137e:	d0 e0       	ldi	r29, 0x00	; 0
    1380:	c0 e0       	ldi	r28, 0x00	; 0
    1382:	f8 01       	movw	r30, r16
    1384:	81 91       	ld	r24, Z+
    1386:	8f 01       	movw	r16, r30
    1388:	60 91 ee 00 	lds	r22, 0x00EE	; 0x8000ee <__iob+0x2>
    138c:	70 91 ef 00 	lds	r23, 0x00EF	; 0x8000ef <__iob+0x3>
    1390:	db 01       	movw	r26, r22
    1392:	18 96       	adiw	r26, 0x08	; 8
    1394:	ed 91       	ld	r30, X+
    1396:	fc 91       	ld	r31, X
    1398:	19 97       	sbiw	r26, 0x09	; 9
    139a:	88 23       	and	r24, r24
    139c:	31 f0       	breq	.+12     	; 0x13aa <puts+0x44>
    139e:	09 95       	icall
    13a0:	89 2b       	or	r24, r25
    13a2:	79 f3       	breq	.-34     	; 0x1382 <puts+0x1c>
    13a4:	df ef       	ldi	r29, 0xFF	; 255
    13a6:	cf ef       	ldi	r28, 0xFF	; 255
    13a8:	ec cf       	rjmp	.-40     	; 0x1382 <puts+0x1c>
    13aa:	8a e0       	ldi	r24, 0x0A	; 10
    13ac:	09 95       	icall
    13ae:	89 2b       	or	r24, r25
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <puts+0x52>
    13b2:	8f ef       	ldi	r24, 0xFF	; 255
    13b4:	9f ef       	ldi	r25, 0xFF	; 255
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <puts+0x56>
    13b8:	8d 2f       	mov	r24, r29
    13ba:	9c 2f       	mov	r25, r28
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	08 95       	ret

000013c6 <vfprintf>:
    13c6:	ab e0       	ldi	r26, 0x0B	; 11
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	e9 ee       	ldi	r30, 0xE9	; 233
    13cc:	f9 e0       	ldi	r31, 0x09	; 9
    13ce:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <__prologue_saves__>
    13d2:	6c 01       	movw	r12, r24
    13d4:	7b 01       	movw	r14, r22
    13d6:	8a 01       	movw	r16, r20
    13d8:	fc 01       	movw	r30, r24
    13da:	17 82       	std	Z+7, r1	; 0x07
    13dc:	16 82       	std	Z+6, r1	; 0x06
    13de:	83 81       	ldd	r24, Z+3	; 0x03
    13e0:	81 ff       	sbrs	r24, 1
    13e2:	cc c1       	rjmp	.+920    	; 0x177c <vfprintf+0x3b6>
    13e4:	ce 01       	movw	r24, r28
    13e6:	01 96       	adiw	r24, 0x01	; 1
    13e8:	3c 01       	movw	r6, r24
    13ea:	f6 01       	movw	r30, r12
    13ec:	93 81       	ldd	r25, Z+3	; 0x03
    13ee:	f7 01       	movw	r30, r14
    13f0:	93 fd       	sbrc	r25, 3
    13f2:	85 91       	lpm	r24, Z+
    13f4:	93 ff       	sbrs	r25, 3
    13f6:	81 91       	ld	r24, Z+
    13f8:	7f 01       	movw	r14, r30
    13fa:	88 23       	and	r24, r24
    13fc:	09 f4       	brne	.+2      	; 0x1400 <vfprintf+0x3a>
    13fe:	ba c1       	rjmp	.+884    	; 0x1774 <vfprintf+0x3ae>
    1400:	85 32       	cpi	r24, 0x25	; 37
    1402:	39 f4       	brne	.+14     	; 0x1412 <vfprintf+0x4c>
    1404:	93 fd       	sbrc	r25, 3
    1406:	85 91       	lpm	r24, Z+
    1408:	93 ff       	sbrs	r25, 3
    140a:	81 91       	ld	r24, Z+
    140c:	7f 01       	movw	r14, r30
    140e:	85 32       	cpi	r24, 0x25	; 37
    1410:	29 f4       	brne	.+10     	; 0x141c <vfprintf+0x56>
    1412:	b6 01       	movw	r22, r12
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <fputc>
    141a:	e7 cf       	rjmp	.-50     	; 0x13ea <vfprintf+0x24>
    141c:	91 2c       	mov	r9, r1
    141e:	21 2c       	mov	r2, r1
    1420:	31 2c       	mov	r3, r1
    1422:	ff e1       	ldi	r31, 0x1F	; 31
    1424:	f3 15       	cp	r31, r3
    1426:	d8 f0       	brcs	.+54     	; 0x145e <vfprintf+0x98>
    1428:	8b 32       	cpi	r24, 0x2B	; 43
    142a:	79 f0       	breq	.+30     	; 0x144a <vfprintf+0x84>
    142c:	38 f4       	brcc	.+14     	; 0x143c <vfprintf+0x76>
    142e:	80 32       	cpi	r24, 0x20	; 32
    1430:	79 f0       	breq	.+30     	; 0x1450 <vfprintf+0x8a>
    1432:	83 32       	cpi	r24, 0x23	; 35
    1434:	a1 f4       	brne	.+40     	; 0x145e <vfprintf+0x98>
    1436:	23 2d       	mov	r18, r3
    1438:	20 61       	ori	r18, 0x10	; 16
    143a:	1d c0       	rjmp	.+58     	; 0x1476 <vfprintf+0xb0>
    143c:	8d 32       	cpi	r24, 0x2D	; 45
    143e:	61 f0       	breq	.+24     	; 0x1458 <vfprintf+0x92>
    1440:	80 33       	cpi	r24, 0x30	; 48
    1442:	69 f4       	brne	.+26     	; 0x145e <vfprintf+0x98>
    1444:	23 2d       	mov	r18, r3
    1446:	21 60       	ori	r18, 0x01	; 1
    1448:	16 c0       	rjmp	.+44     	; 0x1476 <vfprintf+0xb0>
    144a:	83 2d       	mov	r24, r3
    144c:	82 60       	ori	r24, 0x02	; 2
    144e:	38 2e       	mov	r3, r24
    1450:	e3 2d       	mov	r30, r3
    1452:	e4 60       	ori	r30, 0x04	; 4
    1454:	3e 2e       	mov	r3, r30
    1456:	2a c0       	rjmp	.+84     	; 0x14ac <vfprintf+0xe6>
    1458:	f3 2d       	mov	r31, r3
    145a:	f8 60       	ori	r31, 0x08	; 8
    145c:	1d c0       	rjmp	.+58     	; 0x1498 <vfprintf+0xd2>
    145e:	37 fc       	sbrc	r3, 7
    1460:	2d c0       	rjmp	.+90     	; 0x14bc <vfprintf+0xf6>
    1462:	20 ed       	ldi	r18, 0xD0	; 208
    1464:	28 0f       	add	r18, r24
    1466:	2a 30       	cpi	r18, 0x0A	; 10
    1468:	40 f0       	brcs	.+16     	; 0x147a <vfprintf+0xb4>
    146a:	8e 32       	cpi	r24, 0x2E	; 46
    146c:	b9 f4       	brne	.+46     	; 0x149c <vfprintf+0xd6>
    146e:	36 fc       	sbrc	r3, 6
    1470:	81 c1       	rjmp	.+770    	; 0x1774 <vfprintf+0x3ae>
    1472:	23 2d       	mov	r18, r3
    1474:	20 64       	ori	r18, 0x40	; 64
    1476:	32 2e       	mov	r3, r18
    1478:	19 c0       	rjmp	.+50     	; 0x14ac <vfprintf+0xe6>
    147a:	36 fe       	sbrs	r3, 6
    147c:	06 c0       	rjmp	.+12     	; 0x148a <vfprintf+0xc4>
    147e:	8a e0       	ldi	r24, 0x0A	; 10
    1480:	98 9e       	mul	r9, r24
    1482:	20 0d       	add	r18, r0
    1484:	11 24       	eor	r1, r1
    1486:	92 2e       	mov	r9, r18
    1488:	11 c0       	rjmp	.+34     	; 0x14ac <vfprintf+0xe6>
    148a:	ea e0       	ldi	r30, 0x0A	; 10
    148c:	2e 9e       	mul	r2, r30
    148e:	20 0d       	add	r18, r0
    1490:	11 24       	eor	r1, r1
    1492:	22 2e       	mov	r2, r18
    1494:	f3 2d       	mov	r31, r3
    1496:	f0 62       	ori	r31, 0x20	; 32
    1498:	3f 2e       	mov	r3, r31
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <vfprintf+0xe6>
    149c:	8c 36       	cpi	r24, 0x6C	; 108
    149e:	21 f4       	brne	.+8      	; 0x14a8 <vfprintf+0xe2>
    14a0:	83 2d       	mov	r24, r3
    14a2:	80 68       	ori	r24, 0x80	; 128
    14a4:	38 2e       	mov	r3, r24
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <vfprintf+0xe6>
    14a8:	88 36       	cpi	r24, 0x68	; 104
    14aa:	41 f4       	brne	.+16     	; 0x14bc <vfprintf+0xf6>
    14ac:	f7 01       	movw	r30, r14
    14ae:	93 fd       	sbrc	r25, 3
    14b0:	85 91       	lpm	r24, Z+
    14b2:	93 ff       	sbrs	r25, 3
    14b4:	81 91       	ld	r24, Z+
    14b6:	7f 01       	movw	r14, r30
    14b8:	81 11       	cpse	r24, r1
    14ba:	b3 cf       	rjmp	.-154    	; 0x1422 <vfprintf+0x5c>
    14bc:	98 2f       	mov	r25, r24
    14be:	9f 7d       	andi	r25, 0xDF	; 223
    14c0:	95 54       	subi	r25, 0x45	; 69
    14c2:	93 30       	cpi	r25, 0x03	; 3
    14c4:	28 f4       	brcc	.+10     	; 0x14d0 <vfprintf+0x10a>
    14c6:	0c 5f       	subi	r16, 0xFC	; 252
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	9f e3       	ldi	r25, 0x3F	; 63
    14cc:	99 83       	std	Y+1, r25	; 0x01
    14ce:	0d c0       	rjmp	.+26     	; 0x14ea <vfprintf+0x124>
    14d0:	83 36       	cpi	r24, 0x63	; 99
    14d2:	31 f0       	breq	.+12     	; 0x14e0 <vfprintf+0x11a>
    14d4:	83 37       	cpi	r24, 0x73	; 115
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <vfprintf+0x12e>
    14d8:	83 35       	cpi	r24, 0x53	; 83
    14da:	09 f0       	breq	.+2      	; 0x14de <vfprintf+0x118>
    14dc:	59 c0       	rjmp	.+178    	; 0x1590 <vfprintf+0x1ca>
    14de:	21 c0       	rjmp	.+66     	; 0x1522 <vfprintf+0x15c>
    14e0:	f8 01       	movw	r30, r16
    14e2:	80 81       	ld	r24, Z
    14e4:	89 83       	std	Y+1, r24	; 0x01
    14e6:	0e 5f       	subi	r16, 0xFE	; 254
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	88 24       	eor	r8, r8
    14ec:	83 94       	inc	r8
    14ee:	91 2c       	mov	r9, r1
    14f0:	53 01       	movw	r10, r6
    14f2:	13 c0       	rjmp	.+38     	; 0x151a <vfprintf+0x154>
    14f4:	28 01       	movw	r4, r16
    14f6:	f2 e0       	ldi	r31, 0x02	; 2
    14f8:	4f 0e       	add	r4, r31
    14fa:	51 1c       	adc	r5, r1
    14fc:	f8 01       	movw	r30, r16
    14fe:	a0 80       	ld	r10, Z
    1500:	b1 80       	ldd	r11, Z+1	; 0x01
    1502:	36 fe       	sbrs	r3, 6
    1504:	03 c0       	rjmp	.+6      	; 0x150c <vfprintf+0x146>
    1506:	69 2d       	mov	r22, r9
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <vfprintf+0x14a>
    150c:	6f ef       	ldi	r22, 0xFF	; 255
    150e:	7f ef       	ldi	r23, 0xFF	; 255
    1510:	c5 01       	movw	r24, r10
    1512:	0e 94 cf 0b 	call	0x179e	; 0x179e <strnlen>
    1516:	4c 01       	movw	r8, r24
    1518:	82 01       	movw	r16, r4
    151a:	f3 2d       	mov	r31, r3
    151c:	ff 77       	andi	r31, 0x7F	; 127
    151e:	3f 2e       	mov	r3, r31
    1520:	16 c0       	rjmp	.+44     	; 0x154e <vfprintf+0x188>
    1522:	28 01       	movw	r4, r16
    1524:	22 e0       	ldi	r18, 0x02	; 2
    1526:	42 0e       	add	r4, r18
    1528:	51 1c       	adc	r5, r1
    152a:	f8 01       	movw	r30, r16
    152c:	a0 80       	ld	r10, Z
    152e:	b1 80       	ldd	r11, Z+1	; 0x01
    1530:	36 fe       	sbrs	r3, 6
    1532:	03 c0       	rjmp	.+6      	; 0x153a <vfprintf+0x174>
    1534:	69 2d       	mov	r22, r9
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	02 c0       	rjmp	.+4      	; 0x153e <vfprintf+0x178>
    153a:	6f ef       	ldi	r22, 0xFF	; 255
    153c:	7f ef       	ldi	r23, 0xFF	; 255
    153e:	c5 01       	movw	r24, r10
    1540:	0e 94 c4 0b 	call	0x1788	; 0x1788 <strnlen_P>
    1544:	4c 01       	movw	r8, r24
    1546:	f3 2d       	mov	r31, r3
    1548:	f0 68       	ori	r31, 0x80	; 128
    154a:	3f 2e       	mov	r3, r31
    154c:	82 01       	movw	r16, r4
    154e:	33 fc       	sbrc	r3, 3
    1550:	1b c0       	rjmp	.+54     	; 0x1588 <vfprintf+0x1c2>
    1552:	82 2d       	mov	r24, r2
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	88 16       	cp	r8, r24
    1558:	99 06       	cpc	r9, r25
    155a:	b0 f4       	brcc	.+44     	; 0x1588 <vfprintf+0x1c2>
    155c:	b6 01       	movw	r22, r12
    155e:	80 e2       	ldi	r24, 0x20	; 32
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <fputc>
    1566:	2a 94       	dec	r2
    1568:	f4 cf       	rjmp	.-24     	; 0x1552 <vfprintf+0x18c>
    156a:	f5 01       	movw	r30, r10
    156c:	37 fc       	sbrc	r3, 7
    156e:	85 91       	lpm	r24, Z+
    1570:	37 fe       	sbrs	r3, 7
    1572:	81 91       	ld	r24, Z+
    1574:	5f 01       	movw	r10, r30
    1576:	b6 01       	movw	r22, r12
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <fputc>
    157e:	21 10       	cpse	r2, r1
    1580:	2a 94       	dec	r2
    1582:	21 e0       	ldi	r18, 0x01	; 1
    1584:	82 1a       	sub	r8, r18
    1586:	91 08       	sbc	r9, r1
    1588:	81 14       	cp	r8, r1
    158a:	91 04       	cpc	r9, r1
    158c:	71 f7       	brne	.-36     	; 0x156a <vfprintf+0x1a4>
    158e:	e8 c0       	rjmp	.+464    	; 0x1760 <vfprintf+0x39a>
    1590:	84 36       	cpi	r24, 0x64	; 100
    1592:	11 f0       	breq	.+4      	; 0x1598 <vfprintf+0x1d2>
    1594:	89 36       	cpi	r24, 0x69	; 105
    1596:	41 f5       	brne	.+80     	; 0x15e8 <vfprintf+0x222>
    1598:	f8 01       	movw	r30, r16
    159a:	37 fe       	sbrs	r3, 7
    159c:	07 c0       	rjmp	.+14     	; 0x15ac <vfprintf+0x1e6>
    159e:	60 81       	ld	r22, Z
    15a0:	71 81       	ldd	r23, Z+1	; 0x01
    15a2:	82 81       	ldd	r24, Z+2	; 0x02
    15a4:	93 81       	ldd	r25, Z+3	; 0x03
    15a6:	0c 5f       	subi	r16, 0xFC	; 252
    15a8:	1f 4f       	sbci	r17, 0xFF	; 255
    15aa:	08 c0       	rjmp	.+16     	; 0x15bc <vfprintf+0x1f6>
    15ac:	60 81       	ld	r22, Z
    15ae:	71 81       	ldd	r23, Z+1	; 0x01
    15b0:	07 2e       	mov	r0, r23
    15b2:	00 0c       	add	r0, r0
    15b4:	88 0b       	sbc	r24, r24
    15b6:	99 0b       	sbc	r25, r25
    15b8:	0e 5f       	subi	r16, 0xFE	; 254
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	f3 2d       	mov	r31, r3
    15be:	ff 76       	andi	r31, 0x6F	; 111
    15c0:	3f 2e       	mov	r3, r31
    15c2:	97 ff       	sbrs	r25, 7
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <vfprintf+0x212>
    15c6:	90 95       	com	r25
    15c8:	80 95       	com	r24
    15ca:	70 95       	com	r23
    15cc:	61 95       	neg	r22
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	8f 4f       	sbci	r24, 0xFF	; 255
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	f0 68       	ori	r31, 0x80	; 128
    15d6:	3f 2e       	mov	r3, r31
    15d8:	2a e0       	ldi	r18, 0x0A	; 10
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	a3 01       	movw	r20, r6
    15de:	0e 94 16 0c 	call	0x182c	; 0x182c <__ultoa_invert>
    15e2:	88 2e       	mov	r8, r24
    15e4:	86 18       	sub	r8, r6
    15e6:	45 c0       	rjmp	.+138    	; 0x1672 <vfprintf+0x2ac>
    15e8:	85 37       	cpi	r24, 0x75	; 117
    15ea:	31 f4       	brne	.+12     	; 0x15f8 <vfprintf+0x232>
    15ec:	23 2d       	mov	r18, r3
    15ee:	2f 7e       	andi	r18, 0xEF	; 239
    15f0:	b2 2e       	mov	r11, r18
    15f2:	2a e0       	ldi	r18, 0x0A	; 10
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	25 c0       	rjmp	.+74     	; 0x1642 <vfprintf+0x27c>
    15f8:	93 2d       	mov	r25, r3
    15fa:	99 7f       	andi	r25, 0xF9	; 249
    15fc:	b9 2e       	mov	r11, r25
    15fe:	8f 36       	cpi	r24, 0x6F	; 111
    1600:	c1 f0       	breq	.+48     	; 0x1632 <vfprintf+0x26c>
    1602:	18 f4       	brcc	.+6      	; 0x160a <vfprintf+0x244>
    1604:	88 35       	cpi	r24, 0x58	; 88
    1606:	79 f0       	breq	.+30     	; 0x1626 <vfprintf+0x260>
    1608:	b5 c0       	rjmp	.+362    	; 0x1774 <vfprintf+0x3ae>
    160a:	80 37       	cpi	r24, 0x70	; 112
    160c:	19 f0       	breq	.+6      	; 0x1614 <vfprintf+0x24e>
    160e:	88 37       	cpi	r24, 0x78	; 120
    1610:	21 f0       	breq	.+8      	; 0x161a <vfprintf+0x254>
    1612:	b0 c0       	rjmp	.+352    	; 0x1774 <vfprintf+0x3ae>
    1614:	e9 2f       	mov	r30, r25
    1616:	e0 61       	ori	r30, 0x10	; 16
    1618:	be 2e       	mov	r11, r30
    161a:	b4 fe       	sbrs	r11, 4
    161c:	0d c0       	rjmp	.+26     	; 0x1638 <vfprintf+0x272>
    161e:	fb 2d       	mov	r31, r11
    1620:	f4 60       	ori	r31, 0x04	; 4
    1622:	bf 2e       	mov	r11, r31
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <vfprintf+0x272>
    1626:	34 fe       	sbrs	r3, 4
    1628:	0a c0       	rjmp	.+20     	; 0x163e <vfprintf+0x278>
    162a:	29 2f       	mov	r18, r25
    162c:	26 60       	ori	r18, 0x06	; 6
    162e:	b2 2e       	mov	r11, r18
    1630:	06 c0       	rjmp	.+12     	; 0x163e <vfprintf+0x278>
    1632:	28 e0       	ldi	r18, 0x08	; 8
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <vfprintf+0x27c>
    1638:	20 e1       	ldi	r18, 0x10	; 16
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <vfprintf+0x27c>
    163e:	20 e1       	ldi	r18, 0x10	; 16
    1640:	32 e0       	ldi	r19, 0x02	; 2
    1642:	f8 01       	movw	r30, r16
    1644:	b7 fe       	sbrs	r11, 7
    1646:	07 c0       	rjmp	.+14     	; 0x1656 <vfprintf+0x290>
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	0c 5f       	subi	r16, 0xFC	; 252
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <vfprintf+0x29c>
    1656:	60 81       	ld	r22, Z
    1658:	71 81       	ldd	r23, Z+1	; 0x01
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	0e 5f       	subi	r16, 0xFE	; 254
    1660:	1f 4f       	sbci	r17, 0xFF	; 255
    1662:	a3 01       	movw	r20, r6
    1664:	0e 94 16 0c 	call	0x182c	; 0x182c <__ultoa_invert>
    1668:	88 2e       	mov	r8, r24
    166a:	86 18       	sub	r8, r6
    166c:	fb 2d       	mov	r31, r11
    166e:	ff 77       	andi	r31, 0x7F	; 127
    1670:	3f 2e       	mov	r3, r31
    1672:	36 fe       	sbrs	r3, 6
    1674:	0d c0       	rjmp	.+26     	; 0x1690 <vfprintf+0x2ca>
    1676:	23 2d       	mov	r18, r3
    1678:	2e 7f       	andi	r18, 0xFE	; 254
    167a:	a2 2e       	mov	r10, r18
    167c:	89 14       	cp	r8, r9
    167e:	58 f4       	brcc	.+22     	; 0x1696 <vfprintf+0x2d0>
    1680:	34 fe       	sbrs	r3, 4
    1682:	0b c0       	rjmp	.+22     	; 0x169a <vfprintf+0x2d4>
    1684:	32 fc       	sbrc	r3, 2
    1686:	09 c0       	rjmp	.+18     	; 0x169a <vfprintf+0x2d4>
    1688:	83 2d       	mov	r24, r3
    168a:	8e 7e       	andi	r24, 0xEE	; 238
    168c:	a8 2e       	mov	r10, r24
    168e:	05 c0       	rjmp	.+10     	; 0x169a <vfprintf+0x2d4>
    1690:	b8 2c       	mov	r11, r8
    1692:	a3 2c       	mov	r10, r3
    1694:	03 c0       	rjmp	.+6      	; 0x169c <vfprintf+0x2d6>
    1696:	b8 2c       	mov	r11, r8
    1698:	01 c0       	rjmp	.+2      	; 0x169c <vfprintf+0x2d6>
    169a:	b9 2c       	mov	r11, r9
    169c:	a4 fe       	sbrs	r10, 4
    169e:	0f c0       	rjmp	.+30     	; 0x16be <vfprintf+0x2f8>
    16a0:	fe 01       	movw	r30, r28
    16a2:	e8 0d       	add	r30, r8
    16a4:	f1 1d       	adc	r31, r1
    16a6:	80 81       	ld	r24, Z
    16a8:	80 33       	cpi	r24, 0x30	; 48
    16aa:	21 f4       	brne	.+8      	; 0x16b4 <vfprintf+0x2ee>
    16ac:	9a 2d       	mov	r25, r10
    16ae:	99 7e       	andi	r25, 0xE9	; 233
    16b0:	a9 2e       	mov	r10, r25
    16b2:	09 c0       	rjmp	.+18     	; 0x16c6 <vfprintf+0x300>
    16b4:	a2 fe       	sbrs	r10, 2
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <vfprintf+0x2fe>
    16b8:	b3 94       	inc	r11
    16ba:	b3 94       	inc	r11
    16bc:	04 c0       	rjmp	.+8      	; 0x16c6 <vfprintf+0x300>
    16be:	8a 2d       	mov	r24, r10
    16c0:	86 78       	andi	r24, 0x86	; 134
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <vfprintf+0x300>
    16c4:	b3 94       	inc	r11
    16c6:	a3 fc       	sbrc	r10, 3
    16c8:	11 c0       	rjmp	.+34     	; 0x16ec <vfprintf+0x326>
    16ca:	a0 fe       	sbrs	r10, 0
    16cc:	06 c0       	rjmp	.+12     	; 0x16da <vfprintf+0x314>
    16ce:	b2 14       	cp	r11, r2
    16d0:	88 f4       	brcc	.+34     	; 0x16f4 <vfprintf+0x32e>
    16d2:	28 0c       	add	r2, r8
    16d4:	92 2c       	mov	r9, r2
    16d6:	9b 18       	sub	r9, r11
    16d8:	0e c0       	rjmp	.+28     	; 0x16f6 <vfprintf+0x330>
    16da:	b2 14       	cp	r11, r2
    16dc:	60 f4       	brcc	.+24     	; 0x16f6 <vfprintf+0x330>
    16de:	b6 01       	movw	r22, r12
    16e0:	80 e2       	ldi	r24, 0x20	; 32
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <fputc>
    16e8:	b3 94       	inc	r11
    16ea:	f7 cf       	rjmp	.-18     	; 0x16da <vfprintf+0x314>
    16ec:	b2 14       	cp	r11, r2
    16ee:	18 f4       	brcc	.+6      	; 0x16f6 <vfprintf+0x330>
    16f0:	2b 18       	sub	r2, r11
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <vfprintf+0x332>
    16f4:	98 2c       	mov	r9, r8
    16f6:	21 2c       	mov	r2, r1
    16f8:	a4 fe       	sbrs	r10, 4
    16fa:	10 c0       	rjmp	.+32     	; 0x171c <vfprintf+0x356>
    16fc:	b6 01       	movw	r22, r12
    16fe:	80 e3       	ldi	r24, 0x30	; 48
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <fputc>
    1706:	a2 fe       	sbrs	r10, 2
    1708:	17 c0       	rjmp	.+46     	; 0x1738 <vfprintf+0x372>
    170a:	a1 fc       	sbrc	r10, 1
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <vfprintf+0x34e>
    170e:	88 e7       	ldi	r24, 0x78	; 120
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x352>
    1714:	88 e5       	ldi	r24, 0x58	; 88
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	b6 01       	movw	r22, r12
    171a:	0c c0       	rjmp	.+24     	; 0x1734 <vfprintf+0x36e>
    171c:	8a 2d       	mov	r24, r10
    171e:	86 78       	andi	r24, 0x86	; 134
    1720:	59 f0       	breq	.+22     	; 0x1738 <vfprintf+0x372>
    1722:	a1 fe       	sbrs	r10, 1
    1724:	02 c0       	rjmp	.+4      	; 0x172a <vfprintf+0x364>
    1726:	8b e2       	ldi	r24, 0x2B	; 43
    1728:	01 c0       	rjmp	.+2      	; 0x172c <vfprintf+0x366>
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	a7 fc       	sbrc	r10, 7
    172e:	8d e2       	ldi	r24, 0x2D	; 45
    1730:	b6 01       	movw	r22, r12
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <fputc>
    1738:	89 14       	cp	r8, r9
    173a:	38 f4       	brcc	.+14     	; 0x174a <vfprintf+0x384>
    173c:	b6 01       	movw	r22, r12
    173e:	80 e3       	ldi	r24, 0x30	; 48
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <fputc>
    1746:	9a 94       	dec	r9
    1748:	f7 cf       	rjmp	.-18     	; 0x1738 <vfprintf+0x372>
    174a:	8a 94       	dec	r8
    174c:	f3 01       	movw	r30, r6
    174e:	e8 0d       	add	r30, r8
    1750:	f1 1d       	adc	r31, r1
    1752:	80 81       	ld	r24, Z
    1754:	b6 01       	movw	r22, r12
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <fputc>
    175c:	81 10       	cpse	r8, r1
    175e:	f5 cf       	rjmp	.-22     	; 0x174a <vfprintf+0x384>
    1760:	22 20       	and	r2, r2
    1762:	09 f4       	brne	.+2      	; 0x1766 <vfprintf+0x3a0>
    1764:	42 ce       	rjmp	.-892    	; 0x13ea <vfprintf+0x24>
    1766:	b6 01       	movw	r22, r12
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <fputc>
    1770:	2a 94       	dec	r2
    1772:	f6 cf       	rjmp	.-20     	; 0x1760 <vfprintf+0x39a>
    1774:	f6 01       	movw	r30, r12
    1776:	86 81       	ldd	r24, Z+6	; 0x06
    1778:	97 81       	ldd	r25, Z+7	; 0x07
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <vfprintf+0x3ba>
    177c:	8f ef       	ldi	r24, 0xFF	; 255
    177e:	9f ef       	ldi	r25, 0xFF	; 255
    1780:	2b 96       	adiw	r28, 0x0b	; 11
    1782:	e2 e1       	ldi	r30, 0x12	; 18
    1784:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__epilogue_restores__>

00001788 <strnlen_P>:
    1788:	fc 01       	movw	r30, r24
    178a:	05 90       	lpm	r0, Z+
    178c:	61 50       	subi	r22, 0x01	; 1
    178e:	70 40       	sbci	r23, 0x00	; 0
    1790:	01 10       	cpse	r0, r1
    1792:	d8 f7       	brcc	.-10     	; 0x178a <strnlen_P+0x2>
    1794:	80 95       	com	r24
    1796:	90 95       	com	r25
    1798:	8e 0f       	add	r24, r30
    179a:	9f 1f       	adc	r25, r31
    179c:	08 95       	ret

0000179e <strnlen>:
    179e:	fc 01       	movw	r30, r24
    17a0:	61 50       	subi	r22, 0x01	; 1
    17a2:	70 40       	sbci	r23, 0x00	; 0
    17a4:	01 90       	ld	r0, Z+
    17a6:	01 10       	cpse	r0, r1
    17a8:	d8 f7       	brcc	.-10     	; 0x17a0 <strnlen+0x2>
    17aa:	80 95       	com	r24
    17ac:	90 95       	com	r25
    17ae:	8e 0f       	add	r24, r30
    17b0:	9f 1f       	adc	r25, r31
    17b2:	08 95       	ret

000017b4 <fputc>:
    17b4:	0f 93       	push	r16
    17b6:	1f 93       	push	r17
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	fb 01       	movw	r30, r22
    17be:	23 81       	ldd	r18, Z+3	; 0x03
    17c0:	21 fd       	sbrc	r18, 1
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <fputc+0x16>
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	9f ef       	ldi	r25, 0xFF	; 255
    17c8:	2c c0       	rjmp	.+88     	; 0x1822 <fputc+0x6e>
    17ca:	22 ff       	sbrs	r18, 2
    17cc:	16 c0       	rjmp	.+44     	; 0x17fa <fputc+0x46>
    17ce:	46 81       	ldd	r20, Z+6	; 0x06
    17d0:	57 81       	ldd	r21, Z+7	; 0x07
    17d2:	24 81       	ldd	r18, Z+4	; 0x04
    17d4:	35 81       	ldd	r19, Z+5	; 0x05
    17d6:	42 17       	cp	r20, r18
    17d8:	53 07       	cpc	r21, r19
    17da:	44 f4       	brge	.+16     	; 0x17ec <fputc+0x38>
    17dc:	a0 81       	ld	r26, Z
    17de:	b1 81       	ldd	r27, Z+1	; 0x01
    17e0:	9d 01       	movw	r18, r26
    17e2:	2f 5f       	subi	r18, 0xFF	; 255
    17e4:	3f 4f       	sbci	r19, 0xFF	; 255
    17e6:	31 83       	std	Z+1, r19	; 0x01
    17e8:	20 83       	st	Z, r18
    17ea:	8c 93       	st	X, r24
    17ec:	26 81       	ldd	r18, Z+6	; 0x06
    17ee:	37 81       	ldd	r19, Z+7	; 0x07
    17f0:	2f 5f       	subi	r18, 0xFF	; 255
    17f2:	3f 4f       	sbci	r19, 0xFF	; 255
    17f4:	37 83       	std	Z+7, r19	; 0x07
    17f6:	26 83       	std	Z+6, r18	; 0x06
    17f8:	14 c0       	rjmp	.+40     	; 0x1822 <fputc+0x6e>
    17fa:	8b 01       	movw	r16, r22
    17fc:	ec 01       	movw	r28, r24
    17fe:	fb 01       	movw	r30, r22
    1800:	00 84       	ldd	r0, Z+8	; 0x08
    1802:	f1 85       	ldd	r31, Z+9	; 0x09
    1804:	e0 2d       	mov	r30, r0
    1806:	09 95       	icall
    1808:	89 2b       	or	r24, r25
    180a:	e1 f6       	brne	.-72     	; 0x17c4 <fputc+0x10>
    180c:	d8 01       	movw	r26, r16
    180e:	16 96       	adiw	r26, 0x06	; 6
    1810:	8d 91       	ld	r24, X+
    1812:	9c 91       	ld	r25, X
    1814:	17 97       	sbiw	r26, 0x07	; 7
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	17 96       	adiw	r26, 0x07	; 7
    181a:	9c 93       	st	X, r25
    181c:	8e 93       	st	-X, r24
    181e:	16 97       	sbiw	r26, 0x06	; 6
    1820:	ce 01       	movw	r24, r28
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	08 95       	ret

0000182c <__ultoa_invert>:
    182c:	fa 01       	movw	r30, r20
    182e:	aa 27       	eor	r26, r26
    1830:	28 30       	cpi	r18, 0x08	; 8
    1832:	51 f1       	breq	.+84     	; 0x1888 <__ultoa_invert+0x5c>
    1834:	20 31       	cpi	r18, 0x10	; 16
    1836:	81 f1       	breq	.+96     	; 0x1898 <__ultoa_invert+0x6c>
    1838:	e8 94       	clt
    183a:	6f 93       	push	r22
    183c:	6e 7f       	andi	r22, 0xFE	; 254
    183e:	6e 5f       	subi	r22, 0xFE	; 254
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	8f 4f       	sbci	r24, 0xFF	; 255
    1844:	9f 4f       	sbci	r25, 0xFF	; 255
    1846:	af 4f       	sbci	r26, 0xFF	; 255
    1848:	b1 e0       	ldi	r27, 0x01	; 1
    184a:	3e d0       	rcall	.+124    	; 0x18c8 <__ultoa_invert+0x9c>
    184c:	b4 e0       	ldi	r27, 0x04	; 4
    184e:	3c d0       	rcall	.+120    	; 0x18c8 <__ultoa_invert+0x9c>
    1850:	67 0f       	add	r22, r23
    1852:	78 1f       	adc	r23, r24
    1854:	89 1f       	adc	r24, r25
    1856:	9a 1f       	adc	r25, r26
    1858:	a1 1d       	adc	r26, r1
    185a:	68 0f       	add	r22, r24
    185c:	79 1f       	adc	r23, r25
    185e:	8a 1f       	adc	r24, r26
    1860:	91 1d       	adc	r25, r1
    1862:	a1 1d       	adc	r26, r1
    1864:	6a 0f       	add	r22, r26
    1866:	71 1d       	adc	r23, r1
    1868:	81 1d       	adc	r24, r1
    186a:	91 1d       	adc	r25, r1
    186c:	a1 1d       	adc	r26, r1
    186e:	20 d0       	rcall	.+64     	; 0x18b0 <__ultoa_invert+0x84>
    1870:	09 f4       	brne	.+2      	; 0x1874 <__ultoa_invert+0x48>
    1872:	68 94       	set
    1874:	3f 91       	pop	r19
    1876:	2a e0       	ldi	r18, 0x0A	; 10
    1878:	26 9f       	mul	r18, r22
    187a:	11 24       	eor	r1, r1
    187c:	30 19       	sub	r19, r0
    187e:	30 5d       	subi	r19, 0xD0	; 208
    1880:	31 93       	st	Z+, r19
    1882:	de f6       	brtc	.-74     	; 0x183a <__ultoa_invert+0xe>
    1884:	cf 01       	movw	r24, r30
    1886:	08 95       	ret
    1888:	46 2f       	mov	r20, r22
    188a:	47 70       	andi	r20, 0x07	; 7
    188c:	40 5d       	subi	r20, 0xD0	; 208
    188e:	41 93       	st	Z+, r20
    1890:	b3 e0       	ldi	r27, 0x03	; 3
    1892:	0f d0       	rcall	.+30     	; 0x18b2 <__ultoa_invert+0x86>
    1894:	c9 f7       	brne	.-14     	; 0x1888 <__ultoa_invert+0x5c>
    1896:	f6 cf       	rjmp	.-20     	; 0x1884 <__ultoa_invert+0x58>
    1898:	46 2f       	mov	r20, r22
    189a:	4f 70       	andi	r20, 0x0F	; 15
    189c:	40 5d       	subi	r20, 0xD0	; 208
    189e:	4a 33       	cpi	r20, 0x3A	; 58
    18a0:	18 f0       	brcs	.+6      	; 0x18a8 <__ultoa_invert+0x7c>
    18a2:	49 5d       	subi	r20, 0xD9	; 217
    18a4:	31 fd       	sbrc	r19, 1
    18a6:	40 52       	subi	r20, 0x20	; 32
    18a8:	41 93       	st	Z+, r20
    18aa:	02 d0       	rcall	.+4      	; 0x18b0 <__ultoa_invert+0x84>
    18ac:	a9 f7       	brne	.-22     	; 0x1898 <__ultoa_invert+0x6c>
    18ae:	ea cf       	rjmp	.-44     	; 0x1884 <__ultoa_invert+0x58>
    18b0:	b4 e0       	ldi	r27, 0x04	; 4
    18b2:	a6 95       	lsr	r26
    18b4:	97 95       	ror	r25
    18b6:	87 95       	ror	r24
    18b8:	77 95       	ror	r23
    18ba:	67 95       	ror	r22
    18bc:	ba 95       	dec	r27
    18be:	c9 f7       	brne	.-14     	; 0x18b2 <__ultoa_invert+0x86>
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	61 05       	cpc	r22, r1
    18c4:	71 05       	cpc	r23, r1
    18c6:	08 95       	ret
    18c8:	9b 01       	movw	r18, r22
    18ca:	ac 01       	movw	r20, r24
    18cc:	0a 2e       	mov	r0, r26
    18ce:	06 94       	lsr	r0
    18d0:	57 95       	ror	r21
    18d2:	47 95       	ror	r20
    18d4:	37 95       	ror	r19
    18d6:	27 95       	ror	r18
    18d8:	ba 95       	dec	r27
    18da:	c9 f7       	brne	.-14     	; 0x18ce <__ultoa_invert+0xa2>
    18dc:	62 0f       	add	r22, r18
    18de:	73 1f       	adc	r23, r19
    18e0:	84 1f       	adc	r24, r20
    18e2:	95 1f       	adc	r25, r21
    18e4:	a0 1d       	adc	r26, r0
    18e6:	08 95       	ret

000018e8 <eeprom_read_byte>:
    18e8:	e1 99       	sbic	0x1c, 1	; 28
    18ea:	fe cf       	rjmp	.-4      	; 0x18e8 <eeprom_read_byte>
    18ec:	9f bb       	out	0x1f, r25	; 31
    18ee:	8e bb       	out	0x1e, r24	; 30
    18f0:	e0 9a       	sbi	0x1c, 0	; 28
    18f2:	99 27       	eor	r25, r25
    18f4:	8d b3       	in	r24, 0x1d	; 29
    18f6:	08 95       	ret

000018f8 <eeprom_update_byte>:
    18f8:	26 2f       	mov	r18, r22

000018fa <eeprom_update_r18>:
    18fa:	e1 99       	sbic	0x1c, 1	; 28
    18fc:	fe cf       	rjmp	.-4      	; 0x18fa <eeprom_update_r18>
    18fe:	9f bb       	out	0x1f, r25	; 31
    1900:	8e bb       	out	0x1e, r24	; 30
    1902:	e0 9a       	sbi	0x1c, 0	; 28
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	0d b2       	in	r0, 0x1d	; 29
    1908:	02 16       	cp	r0, r18
    190a:	31 f0       	breq	.+12     	; 0x1918 <eeprom_update_r18+0x1e>
    190c:	2d bb       	out	0x1d, r18	; 29
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	e2 9a       	sbi	0x1c, 2	; 28
    1914:	e1 9a       	sbi	0x1c, 1	; 28
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	08 95       	ret

0000191a <__prologue_saves__>:
    191a:	2f 92       	push	r2
    191c:	3f 92       	push	r3
    191e:	4f 92       	push	r4
    1920:	5f 92       	push	r5
    1922:	6f 92       	push	r6
    1924:	7f 92       	push	r7
    1926:	8f 92       	push	r8
    1928:	9f 92       	push	r9
    192a:	af 92       	push	r10
    192c:	bf 92       	push	r11
    192e:	cf 92       	push	r12
    1930:	df 92       	push	r13
    1932:	ef 92       	push	r14
    1934:	ff 92       	push	r15
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	ca 1b       	sub	r28, r26
    1944:	db 0b       	sbc	r29, r27
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	09 94       	ijmp

00001952 <__epilogue_restores__>:
    1952:	2a 88       	ldd	r2, Y+18	; 0x12
    1954:	39 88       	ldd	r3, Y+17	; 0x11
    1956:	48 88       	ldd	r4, Y+16	; 0x10
    1958:	5f 84       	ldd	r5, Y+15	; 0x0f
    195a:	6e 84       	ldd	r6, Y+14	; 0x0e
    195c:	7d 84       	ldd	r7, Y+13	; 0x0d
    195e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1960:	9b 84       	ldd	r9, Y+11	; 0x0b
    1962:	aa 84       	ldd	r10, Y+10	; 0x0a
    1964:	b9 84       	ldd	r11, Y+9	; 0x09
    1966:	c8 84       	ldd	r12, Y+8	; 0x08
    1968:	df 80       	ldd	r13, Y+7	; 0x07
    196a:	ee 80       	ldd	r14, Y+6	; 0x06
    196c:	fd 80       	ldd	r15, Y+5	; 0x05
    196e:	0c 81       	ldd	r16, Y+4	; 0x04
    1970:	1b 81       	ldd	r17, Y+3	; 0x03
    1972:	aa 81       	ldd	r26, Y+2	; 0x02
    1974:	b9 81       	ldd	r27, Y+1	; 0x01
    1976:	ce 0f       	add	r28, r30
    1978:	d1 1d       	adc	r29, r1
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
    1984:	ed 01       	movw	r28, r26
    1986:	08 95       	ret

00001988 <_exit>:
    1988:	f8 94       	cli

0000198a <__stop_program>:
    198a:	ff cf       	rjmp	.-2      	; 0x198a <__stop_program>
