
solaranlage_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000019ee  00001a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  0080009c  0080009c  00001abe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001abe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001b58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000101b  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a0f  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018b0  00000000  00000000  00003732  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00004fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f0d  00000000  00000000  00005530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a82  00000000  00000000  0000c43d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000cebf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d41  00000000  00000000  0000cfcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_1>
       8:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 7b 05 	jmp	0xaf6	; 0xaf6 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 06 03 	call	0x60c	; 0x60c <main>
      8a:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SevenSeg_init>:
uint16_t kessel_anzeige = 0;
uint8_t on = 0;


void SevenSeg_init()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);	//enable overflow-interrupt
      9a:	89 e5       	ldi	r24, 0x59	; 89
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	29 e5       	ldi	r18, 0x59	; 89
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	f9 01       	movw	r30, r18
      a4:	20 81       	ld	r18, Z
      a6:	21 60       	ori	r18, 0x01	; 1
      a8:	fc 01       	movw	r30, r24
      aa:	20 83       	st	Z, r18
	
	sei();
      ac:	78 94       	sei
}
      ae:	00 00       	nop
      b0:	df 91       	pop	r29
      b2:	cf 91       	pop	r28
      b4:	08 95       	ret

000000b6 <SevenSeg_set_val>:

//seg: 1=dach; 0=kessel;   val: 0-9: 0-9; 10: off; 11: '-' at left segment (for negative values)
void SevenSeg_set_val(uint8_t seg, int16_t val)
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
      be:	27 97       	sbiw	r28, 0x07	; 7
      c0:	0f b6       	in	r0, 0x3f	; 63
      c2:	f8 94       	cli
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	0f be       	out	0x3f, r0	; 63
      c8:	cd bf       	out	0x3d, r28	; 61
      ca:	8d 83       	std	Y+5, r24	; 0x05
      cc:	7f 83       	std	Y+7, r23	; 0x07
      ce:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t neg = 0;											//flag for negative values
      d0:	19 82       	std	Y+1, r1	; 0x01
	
	if(seg == 1)												
      d2:	8d 81       	ldd	r24, Y+5	; 0x05
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	51 f4       	brne	.+20     	; 0xec <SevenSeg_set_val+0x36>
	{
		if (val == dach_anzeige)								//if the value to set is not new, leave function
      d8:	2e 81       	ldd	r18, Y+6	; 0x06
      da:	3f 81       	ldd	r19, Y+7	; 0x07
      dc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <dach_anzeige>
      e0:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <dach_anzeige+0x1>
      e4:	28 17       	cp	r18, r24
      e6:	39 07       	cpc	r19, r25
      e8:	71 f4       	brne	.+28     	; 0x106 <SevenSeg_set_val+0x50>
		{
			return;
      ea:	b9 c0       	rjmp	.+370    	; 0x25e <SevenSeg_set_val+0x1a8>
		}
	}
	
	else if(seg == 0)		
      ec:	8d 81       	ldd	r24, Y+5	; 0x05
      ee:	88 23       	and	r24, r24
      f0:	51 f4       	brne	.+20     	; 0x106 <SevenSeg_set_val+0x50>
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
      f2:	2e 81       	ldd	r18, Y+6	; 0x06
      f4:	3f 81       	ldd	r19, Y+7	; 0x07
      f6:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <kessel_anzeige>
      fa:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <kessel_anzeige+0x1>
      fe:	28 17       	cp	r18, r24
     100:	39 07       	cpc	r19, r25
     102:	09 f4       	brne	.+2      	; 0x106 <SevenSeg_set_val+0x50>
     104:	ab c0       	rjmp	.+342    	; 0x25c <SevenSeg_set_val+0x1a6>
	}
	
	
	
	
	if(val < 0)													//if the value to set is negative
     106:	8e 81       	ldd	r24, Y+6	; 0x06
     108:	9f 81       	ldd	r25, Y+7	; 0x07
     10a:	99 23       	and	r25, r25
     10c:	94 f4       	brge	.+36     	; 0x132 <SevenSeg_set_val+0x7c>
	{
		val *= -1;												//calculate absolute value
     10e:	8e 81       	ldd	r24, Y+6	; 0x06
     110:	9f 81       	ldd	r25, Y+7	; 0x07
     112:	91 95       	neg	r25
     114:	81 95       	neg	r24
     116:	91 09       	sbc	r25, r1
     118:	9f 83       	std	Y+7, r25	; 0x07
     11a:	8e 83       	std	Y+6, r24	; 0x06
		neg = 1;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	89 83       	std	Y+1, r24	; 0x01
		
		if(val > 99)											//because one segmenet is needed for the sign, only two digits are allowed
     120:	8e 81       	ldd	r24, Y+6	; 0x06
     122:	9f 81       	ldd	r25, Y+7	; 0x07
     124:	84 36       	cpi	r24, 0x64	; 100
     126:	91 05       	cpc	r25, r1
     128:	24 f0       	brlt	.+8      	; 0x132 <SevenSeg_set_val+0x7c>
		{
			val = 99;
     12a:	83 e6       	ldi	r24, 0x63	; 99
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	9f 83       	std	Y+7, r25	; 0x07
     130:	8e 83       	std	Y+6, r24	; 0x06
		}
	}
	
	uint8_t h = (uint8_t) (val/100);
     132:	8e 81       	ldd	r24, Y+6	; 0x06
     134:	9f 81       	ldd	r25, Y+7	; 0x07
     136:	24 e6       	ldi	r18, 0x64	; 100
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	b9 01       	movw	r22, r18
     13c:	0e 94 a6 09 	call	0x134c	; 0x134c <__divmodhi4>
     140:	cb 01       	movw	r24, r22
     142:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t z = (uint8_t) ((val- (h*100)) / 10 );
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	88 2f       	mov	r24, r24
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	4c e9       	ldi	r20, 0x9C	; 156
     14c:	bc 01       	movw	r22, r24
     14e:	46 03       	mulsu	r20, r22
     150:	90 01       	movw	r18, r0
     152:	47 9f       	mul	r20, r23
     154:	30 0d       	add	r19, r0
     156:	11 24       	eor	r1, r1
     158:	8e 81       	ldd	r24, Y+6	; 0x06
     15a:	9f 81       	ldd	r25, Y+7	; 0x07
     15c:	82 0f       	add	r24, r18
     15e:	93 1f       	adc	r25, r19
     160:	2a e0       	ldi	r18, 0x0A	; 10
     162:	30 e0       	ldi	r19, 0x00	; 0
     164:	b9 01       	movw	r22, r18
     166:	0e 94 a6 09 	call	0x134c	; 0x134c <__divmodhi4>
     16a:	cb 01       	movw	r24, r22
     16c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t e = (uint8_t)  (val- (h*100)- (z*10));
     16e:	9e 81       	ldd	r25, Y+6	; 0x06
     170:	2a 81       	ldd	r18, Y+2	; 0x02
     172:	84 e6       	ldi	r24, 0x64	; 100
     174:	28 9f       	mul	r18, r24
     176:	80 2d       	mov	r24, r0
     178:	11 24       	eor	r1, r1
     17a:	98 1b       	sub	r25, r24
     17c:	8b 81       	ldd	r24, Y+3	; 0x03
     17e:	88 0f       	add	r24, r24
     180:	28 2f       	mov	r18, r24
     182:	22 0f       	add	r18, r18
     184:	22 0f       	add	r18, r18
     186:	82 0f       	add	r24, r18
     188:	79 2f       	mov	r23, r25
     18a:	78 1b       	sub	r23, r24
     18c:	87 2f       	mov	r24, r23
     18e:	8c 83       	std	Y+4, r24	; 0x04
	
	if(val==1000)
     190:	8e 81       	ldd	r24, Y+6	; 0x06
     192:	9f 81       	ldd	r25, Y+7	; 0x07
     194:	88 3e       	cpi	r24, 0xE8	; 232
     196:	93 40       	sbci	r25, 0x03	; 3
     198:	39 f5       	brne	.+78     	; 0x1e8 <SevenSeg_set_val+0x132>
	{
		segs[seg]   = 10;
     19a:	8d 81       	ldd	r24, Y+5	; 0x05
     19c:	88 2f       	mov	r24, r24
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	84 56       	subi	r24, 0x64	; 100
     1a6:	9f 4f       	sbci	r25, 0xFF	; 255
     1a8:	2a e0       	ldi	r18, 0x0A	; 10
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	fc 01       	movw	r30, r24
     1ae:	31 83       	std	Z+1, r19	; 0x01
     1b0:	20 83       	st	Z, r18
		segs[seg+2] = 10;
     1b2:	8d 81       	ldd	r24, Y+5	; 0x05
     1b4:	88 2f       	mov	r24, r24
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	02 96       	adiw	r24, 0x02	; 2
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	84 56       	subi	r24, 0x64	; 100
     1c0:	9f 4f       	sbci	r25, 0xFF	; 255
     1c2:	2a e0       	ldi	r18, 0x0A	; 10
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	fc 01       	movw	r30, r24
     1c8:	31 83       	std	Z+1, r19	; 0x01
     1ca:	20 83       	st	Z, r18
		segs[seg+4] = 10;
     1cc:	8d 81       	ldd	r24, Y+5	; 0x05
     1ce:	88 2f       	mov	r24, r24
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	04 96       	adiw	r24, 0x04	; 4
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	84 56       	subi	r24, 0x64	; 100
     1da:	9f 4f       	sbci	r25, 0xFF	; 255
     1dc:	2a e0       	ldi	r18, 0x0A	; 10
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	fc 01       	movw	r30, r24
     1e2:	31 83       	std	Z+1, r19	; 0x01
     1e4:	20 83       	st	Z, r18
		return;
     1e6:	3b c0       	rjmp	.+118    	; 0x25e <SevenSeg_set_val+0x1a8>
	}
	
	segs[seg]   = e;
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	88 2f       	mov	r24, r24
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	2c 81       	ldd	r18, Y+4	; 0x04
     1f0:	22 2f       	mov	r18, r18
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	84 56       	subi	r24, 0x64	; 100
     1fa:	9f 4f       	sbci	r25, 0xFF	; 255
     1fc:	fc 01       	movw	r30, r24
     1fe:	31 83       	std	Z+1, r19	; 0x01
     200:	20 83       	st	Z, r18
	segs[seg+2] = z;
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	02 96       	adiw	r24, 0x02	; 2
     20a:	2b 81       	ldd	r18, Y+3	; 0x03
     20c:	22 2f       	mov	r18, r18
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	84 56       	subi	r24, 0x64	; 100
     216:	9f 4f       	sbci	r25, 0xFF	; 255
     218:	fc 01       	movw	r30, r24
     21a:	31 83       	std	Z+1, r19	; 0x01
     21c:	20 83       	st	Z, r18
	segs[seg+4] = h;
     21e:	8d 81       	ldd	r24, Y+5	; 0x05
     220:	88 2f       	mov	r24, r24
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	04 96       	adiw	r24, 0x04	; 4
     226:	2a 81       	ldd	r18, Y+2	; 0x02
     228:	22 2f       	mov	r18, r18
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	84 56       	subi	r24, 0x64	; 100
     232:	9f 4f       	sbci	r25, 0xFF	; 255
     234:	fc 01       	movw	r30, r24
     236:	31 83       	std	Z+1, r19	; 0x01
     238:	20 83       	st	Z, r18
	
	if(neg == 1)
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	79 f4       	brne	.+30     	; 0x25e <SevenSeg_set_val+0x1a8>
	{
		segs[seg+4] = 11;  //left segment shall show '-'
     240:	8d 81       	ldd	r24, Y+5	; 0x05
     242:	88 2f       	mov	r24, r24
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	04 96       	adiw	r24, 0x04	; 4
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	84 56       	subi	r24, 0x64	; 100
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
     250:	2b e0       	ldi	r18, 0x0B	; 11
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	fc 01       	movw	r30, r24
     256:	31 83       	std	Z+1, r19	; 0x01
     258:	20 83       	st	Z, r18
     25a:	01 c0       	rjmp	.+2      	; 0x25e <SevenSeg_set_val+0x1a8>
	
	else if(seg == 0)		
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
		{
			return;
     25c:	00 00       	nop
	
	if(neg == 1)
	{
		segs[seg+4] = 11;  //left segment shall show '-'
	}
}
     25e:	27 96       	adiw	r28, 0x07	; 7
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	de bf       	out	0x3e, r29	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	2f 93       	push	r18
     27e:	3f 93       	push	r19
     280:	8f 93       	push	r24
     282:	9f 93       	push	r25
     284:	ef 93       	push	r30
     286:	ff 93       	push	r31
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	1f 92       	push	r1
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
	cli();
     292:	f8 94       	cli
	
	if(segs[seg_cnt] < 10)					//if the current digit to display is valid (0..9)..
     294:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	84 56       	subi	r24, 0x64	; 100
     2a2:	9f 4f       	sbci	r25, 0xFF	; 255
     2a4:	fc 01       	movw	r30, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	91 81       	ldd	r25, Z+1	; 0x01
     2aa:	0a 97       	sbiw	r24, 0x0a	; 10
     2ac:	a0 f4       	brcc	.+40     	; 0x2d6 <__vector_11+0x66>
	{
		PORTB = patterns[segs[seg_cnt]];	//set the propper pattern to the anodes.
     2ae:	88 e3       	ldi	r24, 0x38	; 56
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <seg_cnt>
     2b6:	22 2f       	mov	r18, r18
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	24 56       	subi	r18, 0x64	; 100
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	f9 01       	movw	r30, r18
     2c4:	20 81       	ld	r18, Z
     2c6:	31 81       	ldd	r19, Z+1	; 0x01
     2c8:	20 5a       	subi	r18, 0xA0	; 160
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	f9 01       	movw	r30, r18
     2ce:	20 81       	ld	r18, Z
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
     2d4:	1e c0       	rjmp	.+60     	; 0x312 <__vector_11+0xa2>
	}
	else if	(segs[seg_cnt] == 10)			//if the current digit is 10, the segment shall be switched off.
     2d6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     2da:	88 2f       	mov	r24, r24
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	84 56       	subi	r24, 0x64	; 100
     2e4:	9f 4f       	sbci	r25, 0xFF	; 255
     2e6:	fc 01       	movw	r30, r24
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	0a 97       	sbiw	r24, 0x0a	; 10
     2ee:	89 f4       	brne	.+34     	; 0x312 <__vector_11+0xa2>
	{
		PORTB = 0x00;						//therefore clear the anodes
     2f0:	88 e3       	ldi	r24, 0x38	; 56
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	fc 01       	movw	r30, r24
     2f6:	10 82       	st	Z, r1
		seg_cnt ++;							//switch to nex segment
     2f8:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     2fc:	8f 5f       	subi	r24, 0xFF	; 255
     2fe:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <seg_cnt>
		
		if(seg_cnt == 6)	//looping
     302:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     306:	86 30       	cpi	r24, 0x06	; 6
     308:	11 f4       	brne	.+4      	; 0x30e <__vector_11+0x9e>
		{
			seg_cnt = 0;
     30a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <seg_cnt>
		}
		sei();
     30e:	78 94       	sei
		return;								//leave. The common cathode of this segment shall not be activated.
     310:	2b c0       	rjmp	.+86     	; 0x368 <__vector_11+0xf8>
	}
	
	
	//if digit for this segment is valid..
	uint8_t a = (uint8_t) (~(1<<(seg_cnt + 2)));
     312:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     316:	88 2f       	mov	r24, r24
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9c 01       	movw	r18, r24
     31c:	2e 5f       	subi	r18, 0xFE	; 254
     31e:	3f 4f       	sbci	r19, 0xFF	; 255
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 c0       	rjmp	.+4      	; 0x32a <__vector_11+0xba>
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	2a 95       	dec	r18
     32c:	e2 f7       	brpl	.-8      	; 0x326 <__vector_11+0xb6>
     32e:	80 95       	com	r24
     330:	89 83       	std	Y+1, r24	; 0x01
	PORTA = a & 0xFC;	//mask to avoid ADC-channels 0 and 1
     332:	8b e3       	ldi	r24, 0x3B	; 59
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	2c 7f       	andi	r18, 0xFC	; 252
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
	seg_cnt ++;			//switching to next segment
     33e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <seg_cnt>
	
	if(seg_cnt == 6)	//looping
     348:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     34c:	86 30       	cpi	r24, 0x06	; 6
     34e:	11 f4       	brne	.+4      	; 0x354 <__vector_11+0xe4>
	{
		seg_cnt = 0;
     350:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <seg_cnt>
	}
	
	TIFR &= ~(1<<TOV0);	//clear timer0 overflow interrupt flag
     354:	88 e5       	ldi	r24, 0x58	; 88
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	28 e5       	ldi	r18, 0x58	; 88
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	f9 01       	movw	r30, r18
     35e:	20 81       	ld	r18, Z
     360:	2e 7f       	andi	r18, 0xFE	; 254
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
	
	sei();
     366:	78 94       	sei
}
     368:	0f 90       	pop	r0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	9f 91       	pop	r25
     374:	8f 91       	pop	r24
     376:	3f 91       	pop	r19
     378:	2f 91       	pop	r18
     37a:	0f 90       	pop	r0
     37c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     380:	0f 90       	pop	r0
     382:	1f 90       	pop	r1
     384:	18 95       	reti

00000386 <SevenSeg_on>:


void SevenSeg_on()
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01) | (1<<CS00);		//setting prescaler to /256
     38e:	83 e5       	ldi	r24, 0x53	; 83
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	23 e0       	ldi	r18, 0x03	; 3
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
	on = 1;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <on>
}
     39e:	00 00       	nop
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <SevenSeg_off>:

void SevenSeg_off()
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~((1<<CS01) | (1<<CS00));	//disable timer
     3ae:	83 e5       	ldi	r24, 0x53	; 83
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	23 e5       	ldi	r18, 0x53	; 83
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	f9 01       	movw	r30, r18
     3b8:	20 81       	ld	r18, Z
     3ba:	2c 7f       	andi	r18, 0xFC	; 252
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
	TCNT0 = 0;							//resetting counter
     3c0:	82 e5       	ldi	r24, 0x52	; 82
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	fc 01       	movw	r30, r24
     3c6:	10 82       	st	Z, r1
	PORTB = 0x00;
     3c8:	88 e3       	ldi	r24, 0x38	; 56
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	fc 01       	movw	r30, r24
     3ce:	10 82       	st	Z, r1
	PORTA = 0xFC;
     3d0:	8b e3       	ldi	r24, 0x3B	; 59
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	2c ef       	ldi	r18, 0xFC	; 252
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
	on = 0;
     3da:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <on>
}
     3de:	00 00       	nop
     3e0:	df 91       	pop	r29
     3e2:	cf 91       	pop	r28
     3e4:	08 95       	ret

000003e6 <SevenSeg_get_state>:


uint8_t SevenSeg_get_state()
{
     3e6:	cf 93       	push	r28
     3e8:	df 93       	push	r29
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
	return on;
     3ee:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <on>
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <Encoder_init>:

uint8_t selected_seg = 1;


void Encoder_init()
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
	ENC_PORT &= ~((1<<ENC_A_PIN) | (1<<ENC_A_PIN));							//setting encoder terminals to input
     400:	82 e3       	ldi	r24, 0x32	; 50
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	22 e3       	ldi	r18, 0x32	; 50
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	f9 01       	movw	r30, r18
     40a:	20 81       	ld	r18, Z
     40c:	2b 7f       	andi	r18, 0xFB	; 251
     40e:	fc 01       	movw	r30, r24
     410:	20 83       	st	Z, r18
	MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11);				//setting ext-int0 to sensitive at rising edge
     412:	85 e5       	ldi	r24, 0x55	; 85
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	25 e5       	ldi	r18, 0x55	; 85
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	f9 01       	movw	r30, r18
     41c:	20 81       	ld	r18, Z
     41e:	2b 60       	ori	r18, 0x0B	; 11
     420:	fc 01       	movw	r30, r24
     422:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1);											//enable external interrupt 0 (ENC_A_PIN)
     424:	8b e5       	ldi	r24, 0x5B	; 91
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	2b e5       	ldi	r18, 0x5B	; 91
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	f9 01       	movw	r30, r18
     42e:	20 81       	ld	r18, Z
     430:	20 6c       	ori	r18, 0xC0	; 192
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
	sei();
     436:	78 94       	sei
}
     438:	00 00       	nop
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <__vector_1>:



ISR(INT0_vect)
{	
     440:	1f 92       	push	r1
     442:	0f 92       	push	r0
     444:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     448:	0f 92       	push	r0
     44a:	11 24       	eor	r1, r1
     44c:	2f 93       	push	r18
     44e:	3f 93       	push	r19
     450:	4f 93       	push	r20
     452:	5f 93       	push	r21
     454:	6f 93       	push	r22
     456:	7f 93       	push	r23
     458:	8f 93       	push	r24
     45a:	9f 93       	push	r25
     45c:	af 93       	push	r26
     45e:	bf 93       	push	r27
     460:	ef 93       	push	r30
     462:	ff 93       	push	r31
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
	cli();
     46c:	f8 94       	cli
	
	switch(getState())
     46e:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <getState>
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	83 30       	cpi	r24, 0x03	; 3
     478:	91 05       	cpc	r25, r1
     47a:	19 f0       	breq	.+6      	; 0x482 <__vector_1+0x42>
     47c:	04 97       	sbiw	r24, 0x04	; 4
     47e:	a1 f0       	breq	.+40     	; 0x4a8 <__vector_1+0x68>
			}
			break;
		}
		
		default:
			break;
     480:	26 c0       	rjmp	.+76     	; 0x4ce <__vector_1+0x8e>
	
	switch(getState())
	{
		case 3:	
		{	
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     482:	80 e3       	ldi	r24, 0x30	; 48
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	fc 01       	movw	r30, r24
     488:	80 81       	ld	r24, Z
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	80 71       	andi	r24, 0x10	; 16
     490:	99 27       	eor	r25, r25
     492:	18 16       	cp	r1, r24
     494:	19 06       	cpc	r1, r25
     496:	24 f4       	brge	.+8      	; 0x4a0 <__vector_1+0x60>
			{
				dec_delta(1);
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <dec_delta>
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
			}
			break;
     49e:	17 c0       	rjmp	.+46     	; 0x4ce <__vector_1+0x8e>
			{
				dec_delta(1);
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
     4a0:	81 e0       	ldi	r24, 0x01	; 1
     4a2:	0e 94 38 04 	call	0x870	; 0x870 <inc_delta>
			}
			break;
     4a6:	13 c0       	rjmp	.+38     	; 0x4ce <__vector_1+0x8e>
		}
		
		case 4:
		{
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     4a8:	80 e3       	ldi	r24, 0x30	; 48
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	fc 01       	movw	r30, r24
     4ae:	80 81       	ld	r24, Z
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	80 71       	andi	r24, 0x10	; 16
     4b6:	99 27       	eor	r25, r25
     4b8:	18 16       	cp	r1, r24
     4ba:	19 06       	cpc	r1, r25
     4bc:	24 f4       	brge	.+8      	; 0x4c6 <__vector_1+0x86>
			{
				dec_delta(2);
     4be:	82 e0       	ldi	r24, 0x02	; 2
     4c0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <dec_delta>
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
			}
			break;
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <__vector_1+0x8c>
			{
				dec_delta(2);
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	0e 94 38 04 	call	0x870	; 0x870 <inc_delta>
			}
			break;
     4cc:	00 00       	nop
		
		default:
			break;
	}
	
	stop_timeout_timer();
     4ce:	0e 94 71 06 	call	0xce2	; 0xce2 <stop_timeout_timer>
	start_timeout_timer();
     4d2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <start_timeout_timer>
	
	
	GIFR &= ~(1<<INTF0);  //clear ext-interrupt-0 flag
     4d6:	8a e5       	ldi	r24, 0x5A	; 90
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	2a e5       	ldi	r18, 0x5A	; 90
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	f9 01       	movw	r30, r18
     4e0:	20 81       	ld	r18, Z
     4e2:	2f 7b       	andi	r18, 0xBF	; 191
     4e4:	fc 01       	movw	r30, r24
     4e6:	20 83       	st	Z, r18
	
	sei();
     4e8:	78 94       	sei
}
     4ea:	00 00       	nop
     4ec:	df 91       	pop	r29
     4ee:	cf 91       	pop	r28
     4f0:	ff 91       	pop	r31
     4f2:	ef 91       	pop	r30
     4f4:	bf 91       	pop	r27
     4f6:	af 91       	pop	r26
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	7f 91       	pop	r23
     4fe:	6f 91       	pop	r22
     500:	5f 91       	pop	r21
     502:	4f 91       	pop	r20
     504:	3f 91       	pop	r19
     506:	2f 91       	pop	r18
     508:	0f 90       	pop	r0
     50a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     50e:	0f 90       	pop	r0
     510:	1f 90       	pop	r1
     512:	18 95       	reti

00000514 <__vector_2>:


ISR(INT1_vect)  //if the encoder got pushed
{
     514:	1f 92       	push	r1
     516:	0f 92       	push	r0
     518:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     51c:	0f 92       	push	r0
     51e:	11 24       	eor	r1, r1
     520:	1f 93       	push	r17
     522:	2f 93       	push	r18
     524:	3f 93       	push	r19
     526:	4f 93       	push	r20
     528:	5f 93       	push	r21
     52a:	6f 93       	push	r22
     52c:	7f 93       	push	r23
     52e:	8f 93       	push	r24
     530:	9f 93       	push	r25
     532:	af 93       	push	r26
     534:	bf 93       	push	r27
     536:	ef 93       	push	r30
     538:	ff 93       	push	r31
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	cd b7       	in	r28, 0x3d	; 61
     540:	de b7       	in	r29, 0x3e	; 62
	cli();
     542:	f8 94       	cli
	
	switch(getState())
     544:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <getState>
     548:	88 2f       	mov	r24, r24
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	82 30       	cpi	r24, 0x02	; 2
     54e:	91 05       	cpc	r25, r1
     550:	a1 f0       	breq	.+40     	; 0x57a <__vector_2+0x66>
     552:	83 30       	cpi	r24, 0x03	; 3
     554:	91 05       	cpc	r25, r1
     556:	1c f4       	brge	.+6      	; 0x55e <__vector_2+0x4a>
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	39 f0       	breq	.+14     	; 0x56a <__vector_2+0x56>
     55c:	40 c0       	rjmp	.+128    	; 0x5de <__vector_2+0xca>
     55e:	83 30       	cpi	r24, 0x03	; 3
     560:	91 05       	cpc	r25, r1
     562:	89 f0       	breq	.+34     	; 0x586 <__vector_2+0x72>
     564:	04 97       	sbiw	r24, 0x04	; 4
     566:	29 f1       	breq	.+74     	; 0x5b2 <__vector_2+0x9e>
     568:	3a c0       	rjmp	.+116    	; 0x5de <__vector_2+0xca>
	{
		case 1:
		{
			setState(2);
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	0e 94 c7 03 	call	0x78e	; 0x78e <setState>
			stop_timeout_timer();
     570:	0e 94 71 06 	call	0xce2	; 0xce2 <stop_timeout_timer>
			start_timeout_timer();
     574:	0e 94 5f 06 	call	0xcbe	; 0xcbe <start_timeout_timer>
			break;
     578:	32 c0       	rjmp	.+100    	; 0x5de <__vector_2+0xca>
		}
		case 2:
		{
			setState(3);
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	0e 94 c7 03 	call	0x78e	; 0x78e <setState>
			start_timeout_timer();
     580:	0e 94 5f 06 	call	0xcbe	; 0xcbe <start_timeout_timer>
			break;
     584:	2c c0       	rjmp	.+88     	; 0x5de <__vector_2+0xca>
		}
		case 3:
		{
			if(eeprom_read_byte((uint8_t*)0) != get_delta(1))
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 a5 0c 	call	0x194a	; 0x194a <eeprom_read_byte>
     58e:	18 2f       	mov	r17, r24
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     596:	18 17       	cp	r17, r24
     598:	41 f0       	breq	.+16     	; 0x5aa <__vector_2+0x96>
			{
				eeprom_update_byte((uint8_t*)0, get_delta(1));
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     5a0:	68 2f       	mov	r22, r24
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 ad 0c 	call	0x195a	; 0x195a <eeprom_update_byte>
			}
			setState(4);
     5aa:	84 e0       	ldi	r24, 0x04	; 4
     5ac:	0e 94 c7 03 	call	0x78e	; 0x78e <setState>
			break;
     5b0:	16 c0       	rjmp	.+44     	; 0x5de <__vector_2+0xca>
		}
		case 4:
		{
			if(eeprom_read_byte((uint8_t*)1) != get_delta(2))
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	0e 94 a5 0c 	call	0x194a	; 0x194a <eeprom_read_byte>
     5ba:	18 2f       	mov	r17, r24
     5bc:	82 e0       	ldi	r24, 0x02	; 2
     5be:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     5c2:	18 17       	cp	r17, r24
     5c4:	41 f0       	breq	.+16     	; 0x5d6 <__vector_2+0xc2>
			{
				eeprom_update_byte((uint8_t*)1, get_delta(2));
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     5cc:	68 2f       	mov	r22, r24
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 ad 0c 	call	0x195a	; 0x195a <eeprom_update_byte>
			}
			setState(2);
     5d6:	82 e0       	ldi	r24, 0x02	; 2
     5d8:	0e 94 c7 03 	call	0x78e	; 0x78e <setState>
			break;
     5dc:	00 00       	nop
		}
	}
	
	sei();
     5de:	78 94       	sei
     5e0:	00 00       	nop
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	ff 91       	pop	r31
     5e8:	ef 91       	pop	r30
     5ea:	bf 91       	pop	r27
     5ec:	af 91       	pop	r26
     5ee:	9f 91       	pop	r25
     5f0:	8f 91       	pop	r24
     5f2:	7f 91       	pop	r23
     5f4:	6f 91       	pop	r22
     5f6:	5f 91       	pop	r21
     5f8:	4f 91       	pop	r20
     5fa:	3f 91       	pop	r19
     5fc:	2f 91       	pop	r18
     5fe:	1f 91       	pop	r17
     600:	0f 90       	pop	r0
     602:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     606:	0f 90       	pop	r0
     608:	1f 90       	pop	r1
     60a:	18 95       	reti

0000060c <main>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);



int main(void)
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
     614:	8b e3       	ldi	r24, 0x3B	; 59
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	fc 01       	movw	r30, r24
     61a:	10 82       	st	Z, r1
	PORTB = 0x00;
     61c:	88 e3       	ldi	r24, 0x38	; 56
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	fc 01       	movw	r30, r24
     622:	10 82       	st	Z, r1
	
	DDRA = 0xFC;
     624:	8a e3       	ldi	r24, 0x3A	; 58
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	2c ef       	ldi	r18, 0xFC	; 252
     62a:	fc 01       	movw	r30, r24
     62c:	20 83       	st	Z, r18
	DDRB = 0xFF;
     62e:	87 e3       	ldi	r24, 0x37	; 55
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	2f ef       	ldi	r18, 0xFF	; 255
     634:	fc 01       	movw	r30, r24
     636:	20 83       	st	Z, r18
	DDRC |= (1<<WDI_PIN);
     638:	84 e3       	ldi	r24, 0x34	; 52
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	24 e3       	ldi	r18, 0x34	; 52
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	f9 01       	movw	r30, r18
     642:	20 81       	ld	r18, Z
     644:	20 64       	ori	r18, 0x40	; 64
     646:	fc 01       	movw	r30, r24
     648:	20 83       	st	Z, r18
	DDRD |= (1<<PD5);
     64a:	81 e3       	ldi	r24, 0x31	; 49
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	21 e3       	ldi	r18, 0x31	; 49
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	f9 01       	movw	r30, r18
     654:	20 81       	ld	r18, Z
     656:	20 62       	ori	r18, 0x20	; 32
     658:	fc 01       	movw	r30, r24
     65a:	20 83       	st	Z, r18
	
	uart_init(0);
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 f7 06 	call	0xdee	; 0xdee <uart_init>
	
	
	stdout = &mystdout;
     664:	8c e6       	ldi	r24, 0x6C	; 108
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <__iob+0x3>
     66c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__iob+0x2>
	
	printf("startup!\n");
     670:	8b e7       	ldi	r24, 0x7B	; 123
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <puts>
	
	regulator_init();
     678:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <regulator_init>
	SevenSeg_init();
     67c:	0e 94 49 00 	call	0x92	; 0x92 <SevenSeg_init>
	Timeout_init();
     680:	0e 94 49 06 	call	0xc92	; 0xc92 <Timeout_init>
	Encoder_init();
     684:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Encoder_init>
	
	set_PWM(63);
     688:	8f e3       	ldi	r24, 0x3F	; 63
     68a:	0e 94 6b 05 	call	0xad6	; 0xad6 <set_PWM>
	
    /* Replace with your application code */
    while (1) 
    {
		switch(state)
     68e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <state>
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	82 30       	cpi	r24, 0x02	; 2
     698:	91 05       	cpc	r25, r1
     69a:	09 f1       	breq	.+66     	; 0x6de <main+0xd2>
     69c:	83 30       	cpi	r24, 0x03	; 3
     69e:	91 05       	cpc	r25, r1
     6a0:	2c f4       	brge	.+10     	; 0x6ac <main+0xa0>
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	51 f0       	breq	.+20     	; 0x6ba <main+0xae>
     6a6:	01 97       	sbiw	r24, 0x01	; 1
     6a8:	91 f0       	breq	.+36     	; 0x6ce <main+0xc2>
     6aa:	66 c0       	rjmp	.+204    	; 0x778 <main+0x16c>
     6ac:	83 30       	cpi	r24, 0x03	; 3
     6ae:	91 05       	cpc	r25, r1
     6b0:	91 f1       	breq	.+100    	; 0x716 <main+0x10a>
     6b2:	04 97       	sbiw	r24, 0x04	; 4
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <main+0xac>
     6b6:	44 c0       	rjmp	.+136    	; 0x740 <main+0x134>
     6b8:	5f c0       	rjmp	.+190    	; 0x778 <main+0x16c>
		{
			case 0:
			{
				if(SevenSeg_get_state() == 1)  //disable display only if it is on
     6ba:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SevenSeg_get_state>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	11 f4       	brne	.+4      	; 0x6c6 <main+0xba>
					SevenSeg_off();		
     6c2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SevenSeg_off>
				setState(1);
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	0e 94 c7 03 	call	0x78e	; 0x78e <setState>
				break;
     6cc:	55 c0       	rjmp	.+170    	; 0x778 <main+0x16c>
			}
			
			case 1:
			{
				if(SevenSeg_get_state() == 1)  //disable display only if it is on
     6ce:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SevenSeg_get_state>
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <main+0xcc>
     6d6:	49 c0       	rjmp	.+146    	; 0x76a <main+0x15e>
					SevenSeg_off();		
     6d8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SevenSeg_off>
				break;
     6dc:	46 c0       	rjmp	.+140    	; 0x76a <main+0x15e>
			}
				
			case 2:
			{
				if(get_temp(1) >= 0)	
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <get_temp>
					SevenSeg_set_val(1, get_temp(1));
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	0e 94 4f 05 	call	0xa9e	; 0xa9e <get_temp>
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	bc 01       	movw	r22, r24
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				else
					SevenSeg_set_val(1, get_temp(0));
				
				SevenSeg_set_val(0, get_temp(0));
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <get_temp>
     6fc:	88 2f       	mov	r24, r24
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	bc 01       	movw	r22, r24
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
     708:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SevenSeg_get_state>
     70c:	88 23       	and	r24, r24
     70e:	79 f5       	brne	.+94     	; 0x76e <main+0x162>
					SevenSeg_on();
     710:	0e 94 c3 01 	call	0x386	; 0x386 <SevenSeg_on>
				break;
     714:	2c c0       	rjmp	.+88     	; 0x76e <main+0x162>
			}
			
			case 3: 
			{
				SevenSeg_set_val(1, get_delta(1));
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     71c:	88 2f       	mov	r24, r24
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	bc 01       	movw	r22, r24
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, 1000); //set Kessel-display off
     728:	68 ee       	ldi	r22, 0xE8	; 232
     72a:	73 e0       	ldi	r23, 0x03	; 3
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
     732:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SevenSeg_get_state>
     736:	88 23       	and	r24, r24
     738:	e1 f4       	brne	.+56     	; 0x772 <main+0x166>
					SevenSeg_on();
     73a:	0e 94 c3 01 	call	0x386	; 0x386 <SevenSeg_on>
				break;
     73e:	19 c0       	rjmp	.+50     	; 0x772 <main+0x166>
			}
			
			case 4:
			{
				SevenSeg_set_val(1, 1000); //set Dach-display off
     740:	68 ee       	ldi	r22, 0xE8	; 232
     742:	73 e0       	ldi	r23, 0x03	; 3
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, get_delta(2));
     74a:	82 e0       	ldi	r24, 0x02	; 2
     74c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	bc 01       	movw	r22, r24
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
     75c:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <SevenSeg_get_state>
     760:	88 23       	and	r24, r24
     762:	49 f4       	brne	.+18     	; 0x776 <main+0x16a>
				SevenSeg_on();
     764:	0e 94 c3 01 	call	0x386	; 0x386 <SevenSeg_on>
				break;
     768:	06 c0       	rjmp	.+12     	; 0x776 <main+0x16a>
			
			case 1:
			{
				if(SevenSeg_get_state() == 1)  //disable display only if it is on
					SevenSeg_off();		
				break;
     76a:	00 00       	nop
     76c:	05 c0       	rjmp	.+10     	; 0x778 <main+0x16c>
					SevenSeg_set_val(1, get_temp(0));
				
				SevenSeg_set_val(0, get_temp(0));
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
					SevenSeg_on();
				break;
     76e:	00 00       	nop
     770:	03 c0       	rjmp	.+6      	; 0x778 <main+0x16c>
			{
				SevenSeg_set_val(1, get_delta(1));
				SevenSeg_set_val(0, 1000); //set Kessel-display off
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
					SevenSeg_on();
				break;
     772:	00 00       	nop
     774:	01 c0       	rjmp	.+2      	; 0x778 <main+0x16c>
			{
				SevenSeg_set_val(1, 1000); //set Dach-display off
				SevenSeg_set_val(0, get_delta(2));
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
				SevenSeg_on();
				break;
     776:	00 00       	nop
			}
		}
		
		WDI_PORT ^= (1<<WDI_PIN);
     778:	85 e3       	ldi	r24, 0x35	; 53
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	25 e3       	ldi	r18, 0x35	; 53
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	f9 01       	movw	r30, r18
     782:	30 81       	ld	r19, Z
     784:	20 e4       	ldi	r18, 0x40	; 64
     786:	23 27       	eor	r18, r19
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
    }
     78c:	80 cf       	rjmp	.-256    	; 0x68e <main+0x82>

0000078e <setState>:
}

void setState(uint8_t s)
{
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	1f 92       	push	r1
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	89 83       	std	Y+1, r24	; 0x01
	state = s;
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <state>
	printf("state -> %d\n", state);
     7a0:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <state>
     7a4:	88 2f       	mov	r24, r24
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	29 2f       	mov	r18, r25
     7aa:	2f 93       	push	r18
     7ac:	8f 93       	push	r24
     7ae:	84 e8       	ldi	r24, 0x84	; 132
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	89 2f       	mov	r24, r25
     7b4:	8f 93       	push	r24
     7b6:	84 e8       	ldi	r24, 0x84	; 132
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	8f 93       	push	r24
     7bc:	0e 94 ce 09 	call	0x139c	; 0x139c <printf>
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	0f 90       	pop	r0
}
     7c8:	00 00       	nop
     7ca:	0f 90       	pop	r0
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <getState>:

uint8_t getState()
{
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
	return state;
     7da:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <state>
}
     7de:	df 91       	pop	r29
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <regulator_init>:
}

void disable_show_temps(void)
{
	show_temps = 0;
}
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 a5 0c 	call	0x194a	; 0x194a <eeprom_read_byte>
     7f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <delta1>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 a5 0c 	call	0x194a	; 0x194a <eeprom_read_byte>
     800:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <delta2>
     804:	87 e2       	ldi	r24, 0x27	; 39
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	10 82       	st	Z, r1
     80c:	87 e2       	ldi	r24, 0x27	; 39
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	27 e2       	ldi	r18, 0x27	; 39
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	f9 01       	movw	r30, r18
     816:	20 81       	ld	r18, Z
     818:	2f 7d       	andi	r18, 0xDF	; 223
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18
     81e:	86 e2       	ldi	r24, 0x26	; 38
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	26 e2       	ldi	r18, 0x26	; 38
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	f9 01       	movw	r30, r18
     828:	20 81       	ld	r18, Z
     82a:	20 68       	ori	r18, 0x80	; 128
     82c:	fc 01       	movw	r30, r24
     82e:	20 83       	st	Z, r18
     830:	85 e4       	ldi	r24, 0x45	; 69
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	25 e4       	ldi	r18, 0x45	; 69
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	f9 01       	movw	r30, r18
     83a:	20 81       	ld	r18, Z
     83c:	2f 66       	ori	r18, 0x6F	; 111
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
     842:	89 e5       	ldi	r24, 0x59	; 89
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	29 e5       	ldi	r18, 0x59	; 89
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	f9 01       	movw	r30, r18
     84c:	20 81       	ld	r18, Z
     84e:	20 64       	ori	r18, 0x40	; 64
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
     854:	81 e3       	ldi	r24, 0x31	; 49
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	21 e3       	ldi	r18, 0x31	; 49
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	f9 01       	movw	r30, r18
     85e:	20 81       	ld	r18, Z
     860:	20 68       	ori	r18, 0x80	; 128
     862:	fc 01       	movw	r30, r24
     864:	20 83       	st	Z, r18
     866:	78 94       	sei
     868:	00 00       	nop
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <inc_delta>:

void inc_delta(uint8_t i_)
{
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	1f 92       	push	r1
     876:	cd b7       	in	r28, 0x3d	; 61
     878:	de b7       	in	r29, 0x3e	; 62
     87a:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	81 30       	cpi	r24, 0x01	; 1
     880:	49 f4       	brne	.+18     	; 0x894 <inc_delta+0x24>
	{
		if(delta1<100)
     882:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     886:	84 36       	cpi	r24, 0x64	; 100
     888:	28 f4       	brcc	.+10     	; 0x894 <inc_delta+0x24>
			delta1++;
     88a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     88e:	8f 5f       	subi	r24, 0xFF	; 255
     890:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <delta1>
	}
	
	if(i_==2)
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	49 f4       	brne	.+18     	; 0x8ac <inc_delta+0x3c>
	{
		if(delta2<100)
     89a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     89e:	84 36       	cpi	r24, 0x64	; 100
     8a0:	28 f4       	brcc	.+10     	; 0x8ac <inc_delta+0x3c>
			delta2++;
     8a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <delta2>
	}			
}
     8ac:	00 00       	nop
     8ae:	0f 90       	pop	r0
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <dec_delta>:

void dec_delta(uint8_t i_)
{
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	1f 92       	push	r1
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	49 f4       	brne	.+18     	; 0x8da <dec_delta+0x24>
	{
		if(delta1>0)
     8c8:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     8cc:	88 23       	and	r24, r24
     8ce:	29 f0       	breq	.+10     	; 0x8da <dec_delta+0x24>
			delta1--;
     8d0:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     8d4:	81 50       	subi	r24, 0x01	; 1
     8d6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <delta1>
	}
	
	if(i_==2)
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	82 30       	cpi	r24, 0x02	; 2
     8de:	49 f4       	brne	.+18     	; 0x8f2 <dec_delta+0x3c>
	{
		if(delta2>0)
     8e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     8e4:	88 23       	and	r24, r24
     8e6:	29 f0       	breq	.+10     	; 0x8f2 <dec_delta+0x3c>
			delta2--;
     8e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     8ec:	81 50       	subi	r24, 0x01	; 1
     8ee:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <delta2>
	}
}
     8f2:	00 00       	nop
     8f4:	0f 90       	pop	r0
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <get_delta>:

uint8_t get_delta(uint8_t i_)
{
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	1f 92       	push	r1
     902:	cd b7       	in	r28, 0x3d	; 61
     904:	de b7       	in	r29, 0x3e	; 62
     906:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	81 30       	cpi	r24, 0x01	; 1
     90c:	19 f4       	brne	.+6      	; 0x914 <get_delta+0x18>
	{
		return delta1;
     90e:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     912:	07 c0       	rjmp	.+14     	; 0x922 <get_delta+0x26>
	}
	if(i_==2)
     914:	89 81       	ldd	r24, Y+1	; 0x01
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	19 f4       	brne	.+6      	; 0x920 <get_delta+0x24>
	{
		return delta2;
     91a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     91e:	01 c0       	rjmp	.+2      	; 0x922 <get_delta+0x26>
	}
	return 255;
     920:	8f ef       	ldi	r24, 0xFF	; 255
}
     922:	0f 90       	pop	r0
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <measure_temp>:


//sensor: 1=dach; 0=kessel
int16_t measure_temp(uint8_t sensor)
{
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	2d 97       	sbiw	r28, 0x0d	; 13
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	8d 87       	std	Y+13, r24	; 0x0d
	ADMUX &= ~0x1F;							//clear MUX4:0
     948:	87 e2       	ldi	r24, 0x27	; 39
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	27 e2       	ldi	r18, 0x27	; 39
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	f9 01       	movw	r30, r18
     952:	20 81       	ld	r18, Z
     954:	20 7e       	andi	r18, 0xE0	; 224
     956:	fc 01       	movw	r30, r24
     958:	20 83       	st	Z, r18
	
	if(sensor == 0)
     95a:	8d 85       	ldd	r24, Y+13	; 0x0d
     95c:	88 23       	and	r24, r24
     95e:	49 f4       	brne	.+18     	; 0x972 <measure_temp+0x48>
		ADMUX |= (1<<MUX0);					//set ADC to CH1. If CH2 has to be sampled MUX[4:0] is alreadyy 0, because it was rsetted above
     960:	87 e2       	ldi	r24, 0x27	; 39
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	27 e2       	ldi	r18, 0x27	; 39
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	f9 01       	movw	r30, r18
     96a:	20 81       	ld	r18, Z
     96c:	21 60       	ori	r18, 0x01	; 1
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18
		
	ADCSRA |= (1<<ADSC);					//start conversion
     972:	86 e2       	ldi	r24, 0x26	; 38
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	26 e2       	ldi	r18, 0x26	; 38
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	f9 01       	movw	r30, r18
     97c:	20 81       	ld	r18, Z
     97e:	20 64       	ori	r18, 0x40	; 64
     980:	fc 01       	movw	r30, r24
     982:	20 83       	st	Z, r18
	
	while( (ADCSRA & (1<<ADSC)) > 0 )		//wait for end of conversion
     984:	00 00       	nop
     986:	86 e2       	ldi	r24, 0x26	; 38
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	fc 01       	movw	r30, r24
     98c:	80 81       	ld	r24, Z
     98e:	88 2f       	mov	r24, r24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	80 74       	andi	r24, 0x40	; 64
     994:	99 27       	eor	r25, r25
     996:	18 16       	cp	r1, r24
     998:	19 06       	cpc	r1, r25
     99a:	ac f3       	brlt	.-22     	; 0x986 <measure_temp+0x5c>
	{
	}
	
	uint16_t adc_val = ADCL;				//get conversion result low-byte
     99c:	84 e2       	ldi	r24, 0x24	; 36
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	fc 01       	movw	r30, r24
     9a2:	80 81       	ld	r24, Z
     9a4:	88 2f       	mov	r24, r24
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	89 83       	std	Y+1, r24	; 0x01
	adc_val += (ADCH<<8);					//and high-byte
     9ac:	85 e2       	ldi	r24, 0x25	; 37
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	fc 01       	movw	r30, r24
     9b2:	80 81       	ld	r24, Z
     9b4:	88 2f       	mov	r24, r24
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	98 2f       	mov	r25, r24
     9ba:	88 27       	eor	r24, r24
     9bc:	9c 01       	movw	r18, r24
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	82 0f       	add	r24, r18
     9c4:	93 1f       	adc	r25, r19
     9c6:	9a 83       	std	Y+2, r25	; 0x02
     9c8:	89 83       	std	Y+1, r24	; 0x01
	
	
	float voltage = adc_val * 4.854e-3f;									//get voltage from ADC-values	
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	cc 01       	movw	r24, r24
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	bc 01       	movw	r22, r24
     9d6:	cd 01       	movw	r24, r26
     9d8:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__floatunsisf>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	2e e4       	ldi	r18, 0x4E	; 78
     9e2:	3e e0       	ldi	r19, 0x0E	; 14
     9e4:	4f e9       	ldi	r20, 0x9F	; 159
     9e6:	5b e3       	ldi	r21, 0x3B	; 59
     9e8:	bc 01       	movw	r22, r24
     9ea:	cd 01       	movw	r24, r26
     9ec:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__mulsf3>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	8b 83       	std	Y+3, r24	; 0x03
     9f6:	9c 83       	std	Y+4, r25	; 0x04
     9f8:	ad 83       	std	Y+5, r26	; 0x05
     9fa:	be 83       	std	Y+6, r27	; 0x06
	float temp_f = (7382.06f - voltage*2751.75f)/(voltage - 29.323f);		//get temperature from voltage	
     9fc:	20 e0       	ldi	r18, 0x00	; 0
     9fe:	3c ef       	ldi	r19, 0xFC	; 252
     a00:	4b e2       	ldi	r20, 0x2B	; 43
     a02:	55 e4       	ldi	r21, 0x45	; 69
     a04:	6b 81       	ldd	r22, Y+3	; 0x03
     a06:	7c 81       	ldd	r23, Y+4	; 0x04
     a08:	8d 81       	ldd	r24, Y+5	; 0x05
     a0a:	9e 81       	ldd	r25, Y+6	; 0x06
     a0c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <__mulsf3>
     a10:	dc 01       	movw	r26, r24
     a12:	cb 01       	movw	r24, r22
     a14:	9c 01       	movw	r18, r24
     a16:	ad 01       	movw	r20, r26
     a18:	6b e7       	ldi	r22, 0x7B	; 123
     a1a:	70 eb       	ldi	r23, 0xB0	; 176
     a1c:	86 ee       	ldi	r24, 0xE6	; 230
     a1e:	95 e4       	ldi	r25, 0x45	; 69
     a20:	0e 94 49 07 	call	0xe92	; 0xe92 <__subsf3>
     a24:	dc 01       	movw	r26, r24
     a26:	cb 01       	movw	r24, r22
     a28:	6c 01       	movw	r12, r24
     a2a:	7d 01       	movw	r14, r26
     a2c:	21 e8       	ldi	r18, 0x81	; 129
     a2e:	35 e9       	ldi	r19, 0x95	; 149
     a30:	4a ee       	ldi	r20, 0xEA	; 234
     a32:	51 e4       	ldi	r21, 0x41	; 65
     a34:	6b 81       	ldd	r22, Y+3	; 0x03
     a36:	7c 81       	ldd	r23, Y+4	; 0x04
     a38:	8d 81       	ldd	r24, Y+5	; 0x05
     a3a:	9e 81       	ldd	r25, Y+6	; 0x06
     a3c:	0e 94 49 07 	call	0xe92	; 0xe92 <__subsf3>
     a40:	dc 01       	movw	r26, r24
     a42:	cb 01       	movw	r24, r22
     a44:	9c 01       	movw	r18, r24
     a46:	ad 01       	movw	r20, r26
     a48:	c7 01       	movw	r24, r14
     a4a:	b6 01       	movw	r22, r12
     a4c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <__divsf3>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	8f 83       	std	Y+7, r24	; 0x07
     a56:	98 87       	std	Y+8, r25	; 0x08
     a58:	a9 87       	std	Y+9, r26	; 0x09
     a5a:	ba 87       	std	Y+10, r27	; 0x0a
	int16_t temp = (int16_t) roundf( temp_f );								//round temperature and cast it to int
     a5c:	8f 81       	ldd	r24, Y+7	; 0x07
     a5e:	98 85       	ldd	r25, Y+8	; 0x08
     a60:	a9 85       	ldd	r26, Y+9	; 0x09
     a62:	ba 85       	ldd	r27, Y+10	; 0x0a
     a64:	bc 01       	movw	r22, r24
     a66:	cd 01       	movw	r24, r26
     a68:	0e 94 59 09 	call	0x12b2	; 0x12b2 <round>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	bc 01       	movw	r22, r24
     a72:	cd 01       	movw	r24, r26
     a74:	0e 94 28 08 	call	0x1050	; 0x1050 <__fixsfsi>
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	9c 87       	std	Y+12, r25	; 0x0c
     a7e:	8b 87       	std	Y+11, r24	; 0x0b

	return temp;
     a80:	8b 85       	ldd	r24, Y+11	; 0x0b
     a82:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     a84:	2d 96       	adiw	r28, 0x0d	; 13
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	08 95       	ret

00000a9e <get_temp>:

//sensor: 1=dach; 0=kessel
int16_t get_temp(uint8_t sensor)
{
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	1f 92       	push	r1
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
     aa8:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == 1)
     aaa:	89 81       	ldd	r24, Y+1	; 0x01
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	29 f4       	brne	.+10     	; 0xaba <get_temp+0x1c>
		return temp_dach;
     ab0:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <temp_dach>
     ab4:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <temp_dach+0x1>
     ab8:	0a c0       	rjmp	.+20     	; 0xace <get_temp+0x30>
	else if(sensor == 0)
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	88 23       	and	r24, r24
     abe:	29 f4       	brne	.+10     	; 0xaca <get_temp+0x2c>
		return temp_kessel;
     ac0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <temp_kessel>
     ac4:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <temp_kessel+0x1>
     ac8:	02 c0       	rjmp	.+4      	; 0xace <get_temp+0x30>
	else
		return 1000;
     aca:	88 ee       	ldi	r24, 0xE8	; 232
     acc:	93 e0       	ldi	r25, 0x03	; 3
}
     ace:	0f 90       	pop	r0
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <set_PWM>:


//sets duty cycle; 0-255
void set_PWM(uint8_t duty)
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	1f 92       	push	r1
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
     ae0:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = duty;
     ae2:	83 e4       	ldi	r24, 0x43	; 67
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	29 81       	ldd	r18, Y+1	; 0x01
     ae8:	fc 01       	movw	r30, r24
     aea:	20 83       	st	Z, r18
}
     aec:	00 00       	nop
     aee:	0f 90       	pop	r0
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <__vector_5>:



ISR(TIMER2_OVF_vect)
{
     af6:	1f 92       	push	r1
     af8:	0f 92       	push	r0
     afa:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     afe:	0f 92       	push	r0
     b00:	11 24       	eor	r1, r1
     b02:	2f 93       	push	r18
     b04:	3f 93       	push	r19
     b06:	4f 93       	push	r20
     b08:	5f 93       	push	r21
     b0a:	6f 93       	push	r22
     b0c:	7f 93       	push	r23
     b0e:	8f 93       	push	r24
     b10:	9f 93       	push	r25
     b12:	af 93       	push	r26
     b14:	bf 93       	push	r27
     b16:	ef 93       	push	r30
     b18:	ff 93       	push	r31
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
	cli();
     b22:	f8 94       	cli
	
	if(loop_cnt < 62) //if 2s are not passed
     b24:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <loop_cnt>
     b28:	8e 33       	cpi	r24, 0x3E	; 62
     b2a:	30 f4       	brcc	.+12     	; 0xb38 <__vector_5+0x42>
	{
		loop_cnt++;
     b2c:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <loop_cnt>
     b30:	8f 5f       	subi	r24, 0xFF	; 255
     b32:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <loop_cnt>
     b36:	8e c0       	rjmp	.+284    	; 0xc54 <__vector_5+0x15e>
	}
	
	else	//if it is time to work...
	{
		if (log_counter == 255)
     b38:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <log_counter>
     b3c:	8f 3f       	cpi	r24, 0xFF	; 255
     b3e:	11 f4       	brne	.+4      	; 0xb44 <__vector_5+0x4e>
		{
			log_counter = 0;
     b40:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <log_counter>
		}
		
		PORTD ^= (1<<PD5);
     b44:	82 e3       	ldi	r24, 0x32	; 50
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	22 e3       	ldi	r18, 0x32	; 50
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	f9 01       	movw	r30, r18
     b4e:	30 81       	ld	r19, Z
     b50:	20 e2       	ldi	r18, 0x20	; 32
     b52:	23 27       	eor	r18, r19
     b54:	fc 01       	movw	r30, r24
     b56:	20 83       	st	Z, r18

		temp_dach   = (int16_t)measure_temp(1) - 3; //-3 to compensate the wires
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	0e 94 95 04 	call	0x92a	; 0x92a <measure_temp>
     b5e:	03 97       	sbiw	r24, 0x03	; 3
     b60:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <temp_dach+0x1>
     b64:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <temp_dach>
		temp_kessel = measure_temp(0);
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	0e 94 95 04 	call	0x92a	; 0x92a <measure_temp>
     b6e:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <temp_kessel+0x1>
     b72:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <temp_kessel>
		
		d_teta = temp_dach - temp_kessel;
     b76:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <temp_dach>
     b7a:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <temp_dach+0x1>
     b7e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <temp_kessel>
     b82:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <temp_kessel+0x1>
     b86:	a9 01       	movw	r20, r18
     b88:	48 1b       	sub	r20, r24
     b8a:	59 0b       	sbc	r21, r25
     b8c:	ca 01       	movw	r24, r20
     b8e:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <d_teta+0x1>
     b92:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <d_teta>
		
		if(d_teta > delta1)
     b96:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     b9a:	28 2f       	mov	r18, r24
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <d_teta>
     ba2:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <d_teta+0x1>
     ba6:	28 17       	cp	r18, r24
     ba8:	39 07       	cpc	r19, r25
     baa:	dc f4       	brge	.+54     	; 0xbe2 <__vector_5+0xec>
		{
			if( d_teta >= delta2)
     bac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <d_teta>
     bb8:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <d_teta+0x1>
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	6c f0       	brlt	.+26     	; 0xbdc <__vector_5+0xe6>
			{
				duty = (uint8_t) d_teta * k;
     bc2:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <d_teta>
     bc6:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <d_teta+0x1>
     bca:	98 2f       	mov	r25, r24
     bcc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <k>
     bd0:	98 9f       	mul	r25, r24
     bd2:	80 2d       	mov	r24, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <duty>
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <__vector_5+0xf0>
			}
			else
			{
				duty = 0;
     bdc:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <duty>
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <__vector_5+0xf0>
			}
		}
		else
		{
			duty = 0;
     be2:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <duty>
		}
		
		set_PWM(duty);
     be6:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <duty>
     bea:	0e 94 6b 05 	call	0xad6	; 0xad6 <set_PWM>
		
		loop_cnt = 0;
     bee:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <loop_cnt>
		log_counter ++;
     bf2:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <log_counter>
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <log_counter>
		
		
		#ifdef LOGGING
		if(log_counter==30) //every 60 secounds
     bfc:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <log_counter>
     c00:	8e 31       	cpi	r24, 0x1E	; 30
     c02:	41 f5       	brne	.+80     	; 0xc54 <__vector_5+0x15e>
		{
			log_counter = 0;
     c04:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <log_counter>
			printf("%d;%d;%d\n", temp_dach, temp_kessel, duty);
     c08:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <duty>
     c0c:	48 2f       	mov	r20, r24
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <temp_kessel>
     c14:	30 91 b2 00 	lds	r19, 0x00B2	; 0x8000b2 <temp_kessel+0x1>
     c18:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <temp_dach>
     c1c:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <temp_dach+0x1>
     c20:	65 2f       	mov	r22, r21
     c22:	6f 93       	push	r22
     c24:	4f 93       	push	r20
     c26:	43 2f       	mov	r20, r19
     c28:	4f 93       	push	r20
     c2a:	2f 93       	push	r18
     c2c:	29 2f       	mov	r18, r25
     c2e:	2f 93       	push	r18
     c30:	8f 93       	push	r24
     c32:	81 e9       	ldi	r24, 0x91	; 145
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	89 2f       	mov	r24, r25
     c38:	8f 93       	push	r24
     c3a:	81 e9       	ldi	r24, 0x91	; 145
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	8f 93       	push	r24
     c40:	0e 94 ce 09 	call	0x139c	; 0x139c <printf>
     c44:	8d b7       	in	r24, 0x3d	; 61
     c46:	9e b7       	in	r25, 0x3e	; 62
     c48:	08 96       	adiw	r24, 0x08	; 8
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
	}
	
	
	
	
	TIFR &= ~(1<<TOV2);			//clear flag
     c54:	88 e5       	ldi	r24, 0x58	; 88
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	28 e5       	ldi	r18, 0x58	; 88
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	f9 01       	movw	r30, r18
     c5e:	20 81       	ld	r18, Z
     c60:	2f 7b       	andi	r18, 0xBF	; 191
     c62:	fc 01       	movw	r30, r24
     c64:	20 83       	st	Z, r18
		
	sei();
     c66:	78 94       	sei
     c68:	00 00       	nop
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	0f 90       	pop	r0
     c88:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <Timeout_init>:
#include "main.h"
#include "regulator.h"
#include "uart.h"

void Timeout_init()
{
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00;
     c9a:	8f e4       	ldi	r24, 0x4F	; 79
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	fc 01       	movw	r30, r24
     ca0:	10 82       	st	Z, r1
	
	TIMSK |= (1<<TOIE1);			//enable overflow-event
     ca2:	89 e5       	ldi	r24, 0x59	; 89
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	29 e5       	ldi	r18, 0x59	; 89
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	f9 01       	movw	r30, r18
     cac:	20 81       	ld	r18, Z
     cae:	24 60       	ori	r18, 0x04	; 4
     cb0:	fc 01       	movw	r30, r24
     cb2:	20 83       	st	Z, r18
	sei();
     cb4:	78 94       	sei
}
     cb6:	00 00       	nop
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <start_timeout_timer>:
void start_timeout_timer()
{
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						 //reset timer counter value
     cc6:	8c e4       	ldi	r24, 0x4C	; 76
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	fc 01       	movw	r30, r24
     ccc:	11 82       	std	Z+1, r1	; 0x01
     cce:	10 82       	st	Z, r1
	TCCR1B = (1<<CS12) | (1<<CS10);  //start timer at prescaler /1024
     cd0:	8e e4       	ldi	r24, 0x4E	; 78
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	25 e0       	ldi	r18, 0x05	; 5
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18
}
     cda:	00 00       	nop
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <stop_timeout_timer>:

void stop_timeout_timer()
{
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	cd b7       	in	r28, 0x3d	; 61
     ce8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     cea:	8e e4       	ldi	r24, 0x4E	; 78
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	2e e4       	ldi	r18, 0x4E	; 78
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	f9 01       	movw	r30, r18
     cf4:	20 81       	ld	r18, Z
     cf6:	2a 7f       	andi	r18, 0xFA	; 250
     cf8:	fc 01       	movw	r30, r24
     cfa:	20 83       	st	Z, r18
}
     cfc:	00 00       	nop
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <__vector_9>:



//timeouted
ISR(TIMER1_OVF_vect)
{	
     d04:	1f 92       	push	r1
     d06:	0f 92       	push	r0
     d08:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	1f 93       	push	r17
     d12:	2f 93       	push	r18
     d14:	3f 93       	push	r19
     d16:	4f 93       	push	r20
     d18:	5f 93       	push	r21
     d1a:	6f 93       	push	r22
     d1c:	7f 93       	push	r23
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
     d22:	af 93       	push	r26
     d24:	bf 93       	push	r27
     d26:	ef 93       	push	r30
     d28:	ff 93       	push	r31
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
	cli();
     d32:	f8 94       	cli
	
	if((getState() == 3) && (eeprom_read_byte(0) != get_delta(0)))
     d34:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <getState>
     d38:	83 30       	cpi	r24, 0x03	; 3
     d3a:	91 f4       	brne	.+36     	; 0xd60 <__vector_9+0x5c>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 a5 0c 	call	0x194a	; 0x194a <eeprom_read_byte>
     d44:	18 2f       	mov	r17, r24
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     d4c:	18 17       	cp	r17, r24
     d4e:	41 f0       	breq	.+16     	; 0xd60 <__vector_9+0x5c>
	{
		eeprom_update_byte((uint8_t*)(0), (uint8_t)get_delta(0));
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     d56:	68 2f       	mov	r22, r24
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 ad 0c 	call	0x195a	; 0x195a <eeprom_update_byte>
	}
	
	if((getState() == 4) && (eeprom_read_byte(1) != get_delta(1)))
     d60:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <getState>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	91 f4       	brne	.+36     	; 0xd8c <__vector_9+0x88>
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 a5 0c 	call	0x194a	; 0x194a <eeprom_read_byte>
     d70:	18 2f       	mov	r17, r24
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     d78:	18 17       	cp	r17, r24
     d7a:	41 f0       	breq	.+16     	; 0xd8c <__vector_9+0x88>
	{
		eeprom_update_byte((uint8_t*)(1), (uint8_t)get_delta(1));
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <get_delta>
     d82:	68 2f       	mov	r22, r24
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 ad 0c 	call	0x195a	; 0x195a <eeprom_update_byte>
	}
	
	setState(1);
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	0e 94 c7 03 	call	0x78e	; 0x78e <setState>
	
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     d92:	8e e4       	ldi	r24, 0x4E	; 78
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	2e e4       	ldi	r18, 0x4E	; 78
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	f9 01       	movw	r30, r18
     d9c:	20 81       	ld	r18, Z
     d9e:	2a 7f       	andi	r18, 0xFA	; 250
     da0:	fc 01       	movw	r30, r24
     da2:	20 83       	st	Z, r18
	TCNT1 = 0;						   //resetting counter register
     da4:	8c e4       	ldi	r24, 0x4C	; 76
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	fc 01       	movw	r30, r24
     daa:	11 82       	std	Z+1, r1	; 0x01
     dac:	10 82       	st	Z, r1
	
	
	TIFR &= ~(1<<TOV1);
     dae:	88 e5       	ldi	r24, 0x58	; 88
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	28 e5       	ldi	r18, 0x58	; 88
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	f9 01       	movw	r30, r18
     db8:	20 81       	ld	r18, Z
     dba:	2b 7f       	andi	r18, 0xFB	; 251
     dbc:	fc 01       	movw	r30, r24
     dbe:	20 83       	st	Z, r18
	sei();
     dc0:	78 94       	sei
     dc2:	00 00       	nop
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	ff 91       	pop	r31
     dca:	ef 91       	pop	r30
     dcc:	bf 91       	pop	r27
     dce:	af 91       	pop	r26
     dd0:	9f 91       	pop	r25
     dd2:	8f 91       	pop	r24
     dd4:	7f 91       	pop	r23
     dd6:	6f 91       	pop	r22
     dd8:	5f 91       	pop	r21
     dda:	4f 91       	pop	r20
     ddc:	3f 91       	pop	r19
     dde:	2f 91       	pop	r18
     de0:	1f 91       	pop	r17
     de2:	0f 90       	pop	r0
     de4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <uart_init>:
#include <avr/io.h>
#include <stdio.h>


void uart_init()
{
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<RXEN) | (1<<TXEN);  //enable receive and transmit
     df6:	8a e2       	ldi	r24, 0x2A	; 42
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	2a e2       	ldi	r18, 0x2A	; 42
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	f9 01       	movw	r30, r18
     e00:	20 81       	ld	r18, Z
     e02:	28 61       	ori	r18, 0x18	; 24
     e04:	fc 01       	movw	r30, r24
     e06:	20 83       	st	Z, r18
	UBRRL = 51;						 //setting datarate to 9600 baud/s
     e08:	89 e2       	ldi	r24, 0x29	; 41
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	23 e3       	ldi	r18, 0x33	; 51
     e0e:	fc 01       	movw	r30, r24
     e10:	20 83       	st	Z, r18

	UCSRB |= (1<<RXEN) | (1<<TXEN);
     e12:	8a e2       	ldi	r24, 0x2A	; 42
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	2a e2       	ldi	r18, 0x2A	; 42
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	f9 01       	movw	r30, r18
     e1c:	20 81       	ld	r18, Z
     e1e:	28 61       	ori	r18, 0x18	; 24
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18

	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     e24:	80 e4       	ldi	r24, 0x40	; 64
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	20 e4       	ldi	r18, 0x40	; 64
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	f9 01       	movw	r30, r18
     e2e:	20 81       	ld	r18, Z
     e30:	26 68       	ori	r18, 0x86	; 134
     e32:	fc 01       	movw	r30, r24
     e34:	20 83       	st	Z, r18
}
     e36:	00 00       	nop
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	08 95       	ret

00000e3e <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	00 d0       	rcall	.+0      	; 0xe44 <uart_putchar+0x6>
     e44:	1f 92       	push	r1
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	7b 83       	std	Y+3, r23	; 0x03
     e4e:	6a 83       	std	Y+2, r22	; 0x02
	if(c=='\n')
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	8a 30       	cpi	r24, 0x0A	; 10
     e54:	31 f4       	brne	.+12     	; 0xe62 <uart_putchar+0x24>
		uart_putchar('\r', stream);
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	9b 81       	ldd	r25, Y+3	; 0x03
     e5a:	bc 01       	movw	r22, r24
     e5c:	8d e0       	ldi	r24, 0x0D	; 13
     e5e:	0e 94 1f 07 	call	0xe3e	; 0xe3e <uart_putchar>
		
		
	while( (UCSRA & (1<<UDRE)) ==0 )
     e62:	00 00       	nop
     e64:	8b e2       	ldi	r24, 0x2B	; 43
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	fc 01       	movw	r30, r24
     e6a:	80 81       	ld	r24, Z
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	80 72       	andi	r24, 0x20	; 32
     e72:	99 27       	eor	r25, r25
     e74:	89 2b       	or	r24, r25
     e76:	b1 f3       	breq	.-20     	; 0xe64 <uart_putchar+0x26>
	{
	}
		
	UDR = c;
     e78:	8c e2       	ldi	r24, 0x2C	; 44
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	29 81       	ldd	r18, Y+1	; 0x01
     e7e:	fc 01       	movw	r30, r24
     e80:	20 83       	st	Z, r18
	
	return 0;
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e0       	ldi	r25, 0x00	; 0
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <__subsf3>:
     e92:	50 58       	subi	r21, 0x80	; 128

00000e94 <__addsf3>:
     e94:	bb 27       	eor	r27, r27
     e96:	aa 27       	eor	r26, r26
     e98:	0e 94 61 07 	call	0xec2	; 0xec2 <__addsf3x>
     e9c:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>
     ea0:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_pscA>
     ea4:	38 f0       	brcs	.+14     	; 0xeb4 <__addsf3+0x20>
     ea6:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fp_pscB>
     eaa:	20 f0       	brcs	.+8      	; 0xeb4 <__addsf3+0x20>
     eac:	39 f4       	brne	.+14     	; 0xebc <__addsf3+0x28>
     eae:	9f 3f       	cpi	r25, 0xFF	; 255
     eb0:	19 f4       	brne	.+6      	; 0xeb8 <__addsf3+0x24>
     eb2:	26 f4       	brtc	.+8      	; 0xebc <__addsf3+0x28>
     eb4:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__fp_nan>
     eb8:	0e f4       	brtc	.+2      	; 0xebc <__addsf3+0x28>
     eba:	e0 95       	com	r30
     ebc:	e7 fb       	bst	r30, 7
     ebe:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>

00000ec2 <__addsf3x>:
     ec2:	e9 2f       	mov	r30, r25
     ec4:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_split3>
     ec8:	58 f3       	brcs	.-42     	; 0xea0 <__addsf3+0xc>
     eca:	ba 17       	cp	r27, r26
     ecc:	62 07       	cpc	r22, r18
     ece:	73 07       	cpc	r23, r19
     ed0:	84 07       	cpc	r24, r20
     ed2:	95 07       	cpc	r25, r21
     ed4:	20 f0       	brcs	.+8      	; 0xede <__addsf3x+0x1c>
     ed6:	79 f4       	brne	.+30     	; 0xef6 <__addsf3x+0x34>
     ed8:	a6 f5       	brtc	.+104    	; 0xf42 <__addsf3x+0x80>
     eda:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__fp_zero>
     ede:	0e f4       	brtc	.+2      	; 0xee2 <__addsf3x+0x20>
     ee0:	e0 95       	com	r30
     ee2:	0b 2e       	mov	r0, r27
     ee4:	ba 2f       	mov	r27, r26
     ee6:	a0 2d       	mov	r26, r0
     ee8:	0b 01       	movw	r0, r22
     eea:	b9 01       	movw	r22, r18
     eec:	90 01       	movw	r18, r0
     eee:	0c 01       	movw	r0, r24
     ef0:	ca 01       	movw	r24, r20
     ef2:	a0 01       	movw	r20, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	ff 27       	eor	r31, r31
     ef8:	59 1b       	sub	r21, r25
     efa:	99 f0       	breq	.+38     	; 0xf22 <__addsf3x+0x60>
     efc:	59 3f       	cpi	r21, 0xF9	; 249
     efe:	50 f4       	brcc	.+20     	; 0xf14 <__addsf3x+0x52>
     f00:	50 3e       	cpi	r21, 0xE0	; 224
     f02:	68 f1       	brcs	.+90     	; 0xf5e <__addsf3x+0x9c>
     f04:	1a 16       	cp	r1, r26
     f06:	f0 40       	sbci	r31, 0x00	; 0
     f08:	a2 2f       	mov	r26, r18
     f0a:	23 2f       	mov	r18, r19
     f0c:	34 2f       	mov	r19, r20
     f0e:	44 27       	eor	r20, r20
     f10:	58 5f       	subi	r21, 0xF8	; 248
     f12:	f3 cf       	rjmp	.-26     	; 0xefa <__addsf3x+0x38>
     f14:	46 95       	lsr	r20
     f16:	37 95       	ror	r19
     f18:	27 95       	ror	r18
     f1a:	a7 95       	ror	r26
     f1c:	f0 40       	sbci	r31, 0x00	; 0
     f1e:	53 95       	inc	r21
     f20:	c9 f7       	brne	.-14     	; 0xf14 <__addsf3x+0x52>
     f22:	7e f4       	brtc	.+30     	; 0xf42 <__addsf3x+0x80>
     f24:	1f 16       	cp	r1, r31
     f26:	ba 0b       	sbc	r27, r26
     f28:	62 0b       	sbc	r22, r18
     f2a:	73 0b       	sbc	r23, r19
     f2c:	84 0b       	sbc	r24, r20
     f2e:	ba f0       	brmi	.+46     	; 0xf5e <__addsf3x+0x9c>
     f30:	91 50       	subi	r25, 0x01	; 1
     f32:	a1 f0       	breq	.+40     	; 0xf5c <__addsf3x+0x9a>
     f34:	ff 0f       	add	r31, r31
     f36:	bb 1f       	adc	r27, r27
     f38:	66 1f       	adc	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	88 1f       	adc	r24, r24
     f3e:	c2 f7       	brpl	.-16     	; 0xf30 <__addsf3x+0x6e>
     f40:	0e c0       	rjmp	.+28     	; 0xf5e <__addsf3x+0x9c>
     f42:	ba 0f       	add	r27, r26
     f44:	62 1f       	adc	r22, r18
     f46:	73 1f       	adc	r23, r19
     f48:	84 1f       	adc	r24, r20
     f4a:	48 f4       	brcc	.+18     	; 0xf5e <__addsf3x+0x9c>
     f4c:	87 95       	ror	r24
     f4e:	77 95       	ror	r23
     f50:	67 95       	ror	r22
     f52:	b7 95       	ror	r27
     f54:	f7 95       	ror	r31
     f56:	9e 3f       	cpi	r25, 0xFE	; 254
     f58:	08 f0       	brcs	.+2      	; 0xf5c <__addsf3x+0x9a>
     f5a:	b0 cf       	rjmp	.-160    	; 0xebc <__addsf3+0x28>
     f5c:	93 95       	inc	r25
     f5e:	88 0f       	add	r24, r24
     f60:	08 f0       	brcs	.+2      	; 0xf64 <__addsf3x+0xa2>
     f62:	99 27       	eor	r25, r25
     f64:	ee 0f       	add	r30, r30
     f66:	97 95       	ror	r25
     f68:	87 95       	ror	r24
     f6a:	08 95       	ret

00000f6c <__divsf3>:
     f6c:	0e 94 ca 07 	call	0xf94	; 0xf94 <__divsf3x>
     f70:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>
     f74:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fp_pscB>
     f78:	58 f0       	brcs	.+22     	; 0xf90 <__divsf3+0x24>
     f7a:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_pscA>
     f7e:	40 f0       	brcs	.+16     	; 0xf90 <__divsf3+0x24>
     f80:	29 f4       	brne	.+10     	; 0xf8c <__divsf3+0x20>
     f82:	5f 3f       	cpi	r21, 0xFF	; 255
     f84:	29 f0       	breq	.+10     	; 0xf90 <__divsf3+0x24>
     f86:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>
     f8a:	51 11       	cpse	r21, r1
     f8c:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>
     f90:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__fp_nan>

00000f94 <__divsf3x>:
     f94:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_split3>
     f98:	68 f3       	brcs	.-38     	; 0xf74 <__divsf3+0x8>

00000f9a <__divsf3_pse>:
     f9a:	99 23       	and	r25, r25
     f9c:	b1 f3       	breq	.-20     	; 0xf8a <__divsf3+0x1e>
     f9e:	55 23       	and	r21, r21
     fa0:	91 f3       	breq	.-28     	; 0xf86 <__divsf3+0x1a>
     fa2:	95 1b       	sub	r25, r21
     fa4:	55 0b       	sbc	r21, r21
     fa6:	bb 27       	eor	r27, r27
     fa8:	aa 27       	eor	r26, r26
     faa:	62 17       	cp	r22, r18
     fac:	73 07       	cpc	r23, r19
     fae:	84 07       	cpc	r24, r20
     fb0:	38 f0       	brcs	.+14     	; 0xfc0 <__divsf3_pse+0x26>
     fb2:	9f 5f       	subi	r25, 0xFF	; 255
     fb4:	5f 4f       	sbci	r21, 0xFF	; 255
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	44 1f       	adc	r20, r20
     fbc:	aa 1f       	adc	r26, r26
     fbe:	a9 f3       	breq	.-22     	; 0xfaa <__divsf3_pse+0x10>
     fc0:	35 d0       	rcall	.+106    	; 0x102c <__divsf3_pse+0x92>
     fc2:	0e 2e       	mov	r0, r30
     fc4:	3a f0       	brmi	.+14     	; 0xfd4 <__divsf3_pse+0x3a>
     fc6:	e0 e8       	ldi	r30, 0x80	; 128
     fc8:	32 d0       	rcall	.+100    	; 0x102e <__divsf3_pse+0x94>
     fca:	91 50       	subi	r25, 0x01	; 1
     fcc:	50 40       	sbci	r21, 0x00	; 0
     fce:	e6 95       	lsr	r30
     fd0:	00 1c       	adc	r0, r0
     fd2:	ca f7       	brpl	.-14     	; 0xfc6 <__divsf3_pse+0x2c>
     fd4:	2b d0       	rcall	.+86     	; 0x102c <__divsf3_pse+0x92>
     fd6:	fe 2f       	mov	r31, r30
     fd8:	29 d0       	rcall	.+82     	; 0x102c <__divsf3_pse+0x92>
     fda:	66 0f       	add	r22, r22
     fdc:	77 1f       	adc	r23, r23
     fde:	88 1f       	adc	r24, r24
     fe0:	bb 1f       	adc	r27, r27
     fe2:	26 17       	cp	r18, r22
     fe4:	37 07       	cpc	r19, r23
     fe6:	48 07       	cpc	r20, r24
     fe8:	ab 07       	cpc	r26, r27
     fea:	b0 e8       	ldi	r27, 0x80	; 128
     fec:	09 f0       	breq	.+2      	; 0xff0 <__divsf3_pse+0x56>
     fee:	bb 0b       	sbc	r27, r27
     ff0:	80 2d       	mov	r24, r0
     ff2:	bf 01       	movw	r22, r30
     ff4:	ff 27       	eor	r31, r31
     ff6:	93 58       	subi	r25, 0x83	; 131
     ff8:	5f 4f       	sbci	r21, 0xFF	; 255
     ffa:	3a f0       	brmi	.+14     	; 0x100a <__divsf3_pse+0x70>
     ffc:	9e 3f       	cpi	r25, 0xFE	; 254
     ffe:	51 05       	cpc	r21, r1
    1000:	78 f0       	brcs	.+30     	; 0x1020 <__divsf3_pse+0x86>
    1002:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>
    1006:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>
    100a:	5f 3f       	cpi	r21, 0xFF	; 255
    100c:	e4 f3       	brlt	.-8      	; 0x1006 <__divsf3_pse+0x6c>
    100e:	98 3e       	cpi	r25, 0xE8	; 232
    1010:	d4 f3       	brlt	.-12     	; 0x1006 <__divsf3_pse+0x6c>
    1012:	86 95       	lsr	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b7 95       	ror	r27
    101a:	f7 95       	ror	r31
    101c:	9f 5f       	subi	r25, 0xFF	; 255
    101e:	c9 f7       	brne	.-14     	; 0x1012 <__divsf3_pse+0x78>
    1020:	88 0f       	add	r24, r24
    1022:	91 1d       	adc	r25, r1
    1024:	96 95       	lsr	r25
    1026:	87 95       	ror	r24
    1028:	97 f9       	bld	r25, 7
    102a:	08 95       	ret
    102c:	e1 e0       	ldi	r30, 0x01	; 1
    102e:	66 0f       	add	r22, r22
    1030:	77 1f       	adc	r23, r23
    1032:	88 1f       	adc	r24, r24
    1034:	bb 1f       	adc	r27, r27
    1036:	62 17       	cp	r22, r18
    1038:	73 07       	cpc	r23, r19
    103a:	84 07       	cpc	r24, r20
    103c:	ba 07       	cpc	r27, r26
    103e:	20 f0       	brcs	.+8      	; 0x1048 <__divsf3_pse+0xae>
    1040:	62 1b       	sub	r22, r18
    1042:	73 0b       	sbc	r23, r19
    1044:	84 0b       	sbc	r24, r20
    1046:	ba 0b       	sbc	r27, r26
    1048:	ee 1f       	adc	r30, r30
    104a:	88 f7       	brcc	.-30     	; 0x102e <__divsf3_pse+0x94>
    104c:	e0 95       	com	r30
    104e:	08 95       	ret

00001050 <__fixsfsi>:
    1050:	0e 94 2f 08 	call	0x105e	; 0x105e <__fixunssfsi>
    1054:	68 94       	set
    1056:	b1 11       	cpse	r27, r1
    1058:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>
    105c:	08 95       	ret

0000105e <__fixunssfsi>:
    105e:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_splitA>
    1062:	88 f0       	brcs	.+34     	; 0x1086 <__fixunssfsi+0x28>
    1064:	9f 57       	subi	r25, 0x7F	; 127
    1066:	98 f0       	brcs	.+38     	; 0x108e <__fixunssfsi+0x30>
    1068:	b9 2f       	mov	r27, r25
    106a:	99 27       	eor	r25, r25
    106c:	b7 51       	subi	r27, 0x17	; 23
    106e:	b0 f0       	brcs	.+44     	; 0x109c <__fixunssfsi+0x3e>
    1070:	e1 f0       	breq	.+56     	; 0x10aa <__fixunssfsi+0x4c>
    1072:	66 0f       	add	r22, r22
    1074:	77 1f       	adc	r23, r23
    1076:	88 1f       	adc	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	1a f0       	brmi	.+6      	; 0x1082 <__fixunssfsi+0x24>
    107c:	ba 95       	dec	r27
    107e:	c9 f7       	brne	.-14     	; 0x1072 <__fixunssfsi+0x14>
    1080:	14 c0       	rjmp	.+40     	; 0x10aa <__fixunssfsi+0x4c>
    1082:	b1 30       	cpi	r27, 0x01	; 1
    1084:	91 f0       	breq	.+36     	; 0x10aa <__fixunssfsi+0x4c>
    1086:	0e 94 e5 08 	call	0x11ca	; 0x11ca <__fp_zero>
    108a:	b1 e0       	ldi	r27, 0x01	; 1
    108c:	08 95       	ret
    108e:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__fp_zero>
    1092:	67 2f       	mov	r22, r23
    1094:	78 2f       	mov	r23, r24
    1096:	88 27       	eor	r24, r24
    1098:	b8 5f       	subi	r27, 0xF8	; 248
    109a:	39 f0       	breq	.+14     	; 0x10aa <__fixunssfsi+0x4c>
    109c:	b9 3f       	cpi	r27, 0xF9	; 249
    109e:	cc f3       	brlt	.-14     	; 0x1092 <__fixunssfsi+0x34>
    10a0:	86 95       	lsr	r24
    10a2:	77 95       	ror	r23
    10a4:	67 95       	ror	r22
    10a6:	b3 95       	inc	r27
    10a8:	d9 f7       	brne	.-10     	; 0x10a0 <__fixunssfsi+0x42>
    10aa:	3e f4       	brtc	.+14     	; 0x10ba <__fixunssfsi+0x5c>
    10ac:	90 95       	com	r25
    10ae:	80 95       	com	r24
    10b0:	70 95       	com	r23
    10b2:	61 95       	neg	r22
    10b4:	7f 4f       	sbci	r23, 0xFF	; 255
    10b6:	8f 4f       	sbci	r24, 0xFF	; 255
    10b8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ba:	08 95       	ret

000010bc <__floatunsisf>:
    10bc:	e8 94       	clt
    10be:	09 c0       	rjmp	.+18     	; 0x10d2 <__floatsisf+0x12>

000010c0 <__floatsisf>:
    10c0:	97 fb       	bst	r25, 7
    10c2:	3e f4       	brtc	.+14     	; 0x10d2 <__floatsisf+0x12>
    10c4:	90 95       	com	r25
    10c6:	80 95       	com	r24
    10c8:	70 95       	com	r23
    10ca:	61 95       	neg	r22
    10cc:	7f 4f       	sbci	r23, 0xFF	; 255
    10ce:	8f 4f       	sbci	r24, 0xFF	; 255
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	99 23       	and	r25, r25
    10d4:	a9 f0       	breq	.+42     	; 0x1100 <__floatsisf+0x40>
    10d6:	f9 2f       	mov	r31, r25
    10d8:	96 e9       	ldi	r25, 0x96	; 150
    10da:	bb 27       	eor	r27, r27
    10dc:	93 95       	inc	r25
    10de:	f6 95       	lsr	r31
    10e0:	87 95       	ror	r24
    10e2:	77 95       	ror	r23
    10e4:	67 95       	ror	r22
    10e6:	b7 95       	ror	r27
    10e8:	f1 11       	cpse	r31, r1
    10ea:	f8 cf       	rjmp	.-16     	; 0x10dc <__floatsisf+0x1c>
    10ec:	fa f4       	brpl	.+62     	; 0x112c <__floatsisf+0x6c>
    10ee:	bb 0f       	add	r27, r27
    10f0:	11 f4       	brne	.+4      	; 0x10f6 <__floatsisf+0x36>
    10f2:	60 ff       	sbrs	r22, 0
    10f4:	1b c0       	rjmp	.+54     	; 0x112c <__floatsisf+0x6c>
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	8f 4f       	sbci	r24, 0xFF	; 255
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	16 c0       	rjmp	.+44     	; 0x112c <__floatsisf+0x6c>
    1100:	88 23       	and	r24, r24
    1102:	11 f0       	breq	.+4      	; 0x1108 <__floatsisf+0x48>
    1104:	96 e9       	ldi	r25, 0x96	; 150
    1106:	11 c0       	rjmp	.+34     	; 0x112a <__floatsisf+0x6a>
    1108:	77 23       	and	r23, r23
    110a:	21 f0       	breq	.+8      	; 0x1114 <__floatsisf+0x54>
    110c:	9e e8       	ldi	r25, 0x8E	; 142
    110e:	87 2f       	mov	r24, r23
    1110:	76 2f       	mov	r23, r22
    1112:	05 c0       	rjmp	.+10     	; 0x111e <__floatsisf+0x5e>
    1114:	66 23       	and	r22, r22
    1116:	71 f0       	breq	.+28     	; 0x1134 <__floatsisf+0x74>
    1118:	96 e8       	ldi	r25, 0x86	; 134
    111a:	86 2f       	mov	r24, r22
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	2a f0       	brmi	.+10     	; 0x112c <__floatsisf+0x6c>
    1122:	9a 95       	dec	r25
    1124:	66 0f       	add	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	da f7       	brpl	.-10     	; 0x1122 <__floatsisf+0x62>
    112c:	88 0f       	add	r24, r24
    112e:	96 95       	lsr	r25
    1130:	87 95       	ror	r24
    1132:	97 f9       	bld	r25, 7
    1134:	08 95       	ret

00001136 <__fp_inf>:
    1136:	97 f9       	bld	r25, 7
    1138:	9f 67       	ori	r25, 0x7F	; 127
    113a:	80 e8       	ldi	r24, 0x80	; 128
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	08 95       	ret

00001142 <__fp_nan>:
    1142:	9f ef       	ldi	r25, 0xFF	; 255
    1144:	80 ec       	ldi	r24, 0xC0	; 192
    1146:	08 95       	ret

00001148 <__fp_pscA>:
    1148:	00 24       	eor	r0, r0
    114a:	0a 94       	dec	r0
    114c:	16 16       	cp	r1, r22
    114e:	17 06       	cpc	r1, r23
    1150:	18 06       	cpc	r1, r24
    1152:	09 06       	cpc	r0, r25
    1154:	08 95       	ret

00001156 <__fp_pscB>:
    1156:	00 24       	eor	r0, r0
    1158:	0a 94       	dec	r0
    115a:	12 16       	cp	r1, r18
    115c:	13 06       	cpc	r1, r19
    115e:	14 06       	cpc	r1, r20
    1160:	05 06       	cpc	r0, r21
    1162:	08 95       	ret

00001164 <__fp_round>:
    1164:	09 2e       	mov	r0, r25
    1166:	03 94       	inc	r0
    1168:	00 0c       	add	r0, r0
    116a:	11 f4       	brne	.+4      	; 0x1170 <__fp_round+0xc>
    116c:	88 23       	and	r24, r24
    116e:	52 f0       	brmi	.+20     	; 0x1184 <__fp_round+0x20>
    1170:	bb 0f       	add	r27, r27
    1172:	40 f4       	brcc	.+16     	; 0x1184 <__fp_round+0x20>
    1174:	bf 2b       	or	r27, r31
    1176:	11 f4       	brne	.+4      	; 0x117c <__fp_round+0x18>
    1178:	60 ff       	sbrs	r22, 0
    117a:	04 c0       	rjmp	.+8      	; 0x1184 <__fp_round+0x20>
    117c:	6f 5f       	subi	r22, 0xFF	; 255
    117e:	7f 4f       	sbci	r23, 0xFF	; 255
    1180:	8f 4f       	sbci	r24, 0xFF	; 255
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__fp_split3>:
    1186:	57 fd       	sbrc	r21, 7
    1188:	90 58       	subi	r25, 0x80	; 128
    118a:	44 0f       	add	r20, r20
    118c:	55 1f       	adc	r21, r21
    118e:	59 f0       	breq	.+22     	; 0x11a6 <__fp_splitA+0x10>
    1190:	5f 3f       	cpi	r21, 0xFF	; 255
    1192:	71 f0       	breq	.+28     	; 0x11b0 <__fp_splitA+0x1a>
    1194:	47 95       	ror	r20

00001196 <__fp_splitA>:
    1196:	88 0f       	add	r24, r24
    1198:	97 fb       	bst	r25, 7
    119a:	99 1f       	adc	r25, r25
    119c:	61 f0       	breq	.+24     	; 0x11b6 <__fp_splitA+0x20>
    119e:	9f 3f       	cpi	r25, 0xFF	; 255
    11a0:	79 f0       	breq	.+30     	; 0x11c0 <__fp_splitA+0x2a>
    11a2:	87 95       	ror	r24
    11a4:	08 95       	ret
    11a6:	12 16       	cp	r1, r18
    11a8:	13 06       	cpc	r1, r19
    11aa:	14 06       	cpc	r1, r20
    11ac:	55 1f       	adc	r21, r21
    11ae:	f2 cf       	rjmp	.-28     	; 0x1194 <__fp_split3+0xe>
    11b0:	46 95       	lsr	r20
    11b2:	f1 df       	rcall	.-30     	; 0x1196 <__fp_splitA>
    11b4:	08 c0       	rjmp	.+16     	; 0x11c6 <__fp_splitA+0x30>
    11b6:	16 16       	cp	r1, r22
    11b8:	17 06       	cpc	r1, r23
    11ba:	18 06       	cpc	r1, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	f1 cf       	rjmp	.-30     	; 0x11a2 <__fp_splitA+0xc>
    11c0:	86 95       	lsr	r24
    11c2:	71 05       	cpc	r23, r1
    11c4:	61 05       	cpc	r22, r1
    11c6:	08 94       	sec
    11c8:	08 95       	ret

000011ca <__fp_zero>:
    11ca:	e8 94       	clt

000011cc <__fp_szero>:
    11cc:	bb 27       	eor	r27, r27
    11ce:	66 27       	eor	r22, r22
    11d0:	77 27       	eor	r23, r23
    11d2:	cb 01       	movw	r24, r22
    11d4:	97 f9       	bld	r25, 7
    11d6:	08 95       	ret

000011d8 <__mulsf3>:
    11d8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <__mulsf3x>
    11dc:	0c 94 b2 08 	jmp	0x1164	; 0x1164 <__fp_round>
    11e0:	0e 94 a4 08 	call	0x1148	; 0x1148 <__fp_pscA>
    11e4:	38 f0       	brcs	.+14     	; 0x11f4 <__mulsf3+0x1c>
    11e6:	0e 94 ab 08 	call	0x1156	; 0x1156 <__fp_pscB>
    11ea:	20 f0       	brcs	.+8      	; 0x11f4 <__mulsf3+0x1c>
    11ec:	95 23       	and	r25, r21
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <__mulsf3+0x1c>
    11f0:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>
    11f4:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__fp_nan>
    11f8:	11 24       	eor	r1, r1
    11fa:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>

000011fe <__mulsf3x>:
    11fe:	0e 94 c3 08 	call	0x1186	; 0x1186 <__fp_split3>
    1202:	70 f3       	brcs	.-36     	; 0x11e0 <__mulsf3+0x8>

00001204 <__mulsf3_pse>:
    1204:	95 9f       	mul	r25, r21
    1206:	c1 f3       	breq	.-16     	; 0x11f8 <__mulsf3+0x20>
    1208:	95 0f       	add	r25, r21
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	55 1f       	adc	r21, r21
    120e:	62 9f       	mul	r22, r18
    1210:	f0 01       	movw	r30, r0
    1212:	72 9f       	mul	r23, r18
    1214:	bb 27       	eor	r27, r27
    1216:	f0 0d       	add	r31, r0
    1218:	b1 1d       	adc	r27, r1
    121a:	63 9f       	mul	r22, r19
    121c:	aa 27       	eor	r26, r26
    121e:	f0 0d       	add	r31, r0
    1220:	b1 1d       	adc	r27, r1
    1222:	aa 1f       	adc	r26, r26
    1224:	64 9f       	mul	r22, r20
    1226:	66 27       	eor	r22, r22
    1228:	b0 0d       	add	r27, r0
    122a:	a1 1d       	adc	r26, r1
    122c:	66 1f       	adc	r22, r22
    122e:	82 9f       	mul	r24, r18
    1230:	22 27       	eor	r18, r18
    1232:	b0 0d       	add	r27, r0
    1234:	a1 1d       	adc	r26, r1
    1236:	62 1f       	adc	r22, r18
    1238:	73 9f       	mul	r23, r19
    123a:	b0 0d       	add	r27, r0
    123c:	a1 1d       	adc	r26, r1
    123e:	62 1f       	adc	r22, r18
    1240:	83 9f       	mul	r24, r19
    1242:	a0 0d       	add	r26, r0
    1244:	61 1d       	adc	r22, r1
    1246:	22 1f       	adc	r18, r18
    1248:	74 9f       	mul	r23, r20
    124a:	33 27       	eor	r19, r19
    124c:	a0 0d       	add	r26, r0
    124e:	61 1d       	adc	r22, r1
    1250:	23 1f       	adc	r18, r19
    1252:	84 9f       	mul	r24, r20
    1254:	60 0d       	add	r22, r0
    1256:	21 1d       	adc	r18, r1
    1258:	82 2f       	mov	r24, r18
    125a:	76 2f       	mov	r23, r22
    125c:	6a 2f       	mov	r22, r26
    125e:	11 24       	eor	r1, r1
    1260:	9f 57       	subi	r25, 0x7F	; 127
    1262:	50 40       	sbci	r21, 0x00	; 0
    1264:	9a f0       	brmi	.+38     	; 0x128c <__mulsf3_pse+0x88>
    1266:	f1 f0       	breq	.+60     	; 0x12a4 <__mulsf3_pse+0xa0>
    1268:	88 23       	and	r24, r24
    126a:	4a f0       	brmi	.+18     	; 0x127e <__mulsf3_pse+0x7a>
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	bb 1f       	adc	r27, r27
    1272:	66 1f       	adc	r22, r22
    1274:	77 1f       	adc	r23, r23
    1276:	88 1f       	adc	r24, r24
    1278:	91 50       	subi	r25, 0x01	; 1
    127a:	50 40       	sbci	r21, 0x00	; 0
    127c:	a9 f7       	brne	.-22     	; 0x1268 <__mulsf3_pse+0x64>
    127e:	9e 3f       	cpi	r25, 0xFE	; 254
    1280:	51 05       	cpc	r21, r1
    1282:	80 f0       	brcs	.+32     	; 0x12a4 <__mulsf3_pse+0xa0>
    1284:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_inf>
    1288:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>
    128c:	5f 3f       	cpi	r21, 0xFF	; 255
    128e:	e4 f3       	brlt	.-8      	; 0x1288 <__mulsf3_pse+0x84>
    1290:	98 3e       	cpi	r25, 0xE8	; 232
    1292:	d4 f3       	brlt	.-12     	; 0x1288 <__mulsf3_pse+0x84>
    1294:	86 95       	lsr	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	b7 95       	ror	r27
    129c:	f7 95       	ror	r31
    129e:	e7 95       	ror	r30
    12a0:	9f 5f       	subi	r25, 0xFF	; 255
    12a2:	c1 f7       	brne	.-16     	; 0x1294 <__mulsf3_pse+0x90>
    12a4:	fe 2b       	or	r31, r30
    12a6:	88 0f       	add	r24, r24
    12a8:	91 1d       	adc	r25, r1
    12aa:	96 95       	lsr	r25
    12ac:	87 95       	ror	r24
    12ae:	97 f9       	bld	r25, 7
    12b0:	08 95       	ret

000012b2 <round>:
    12b2:	0e 94 cb 08 	call	0x1196	; 0x1196 <__fp_splitA>
    12b6:	e8 f0       	brcs	.+58     	; 0x12f2 <round+0x40>
    12b8:	9e 37       	cpi	r25, 0x7E	; 126
    12ba:	e8 f0       	brcs	.+58     	; 0x12f6 <round+0x44>
    12bc:	96 39       	cpi	r25, 0x96	; 150
    12be:	b8 f4       	brcc	.+46     	; 0x12ee <round+0x3c>
    12c0:	9e 38       	cpi	r25, 0x8E	; 142
    12c2:	48 f4       	brcc	.+18     	; 0x12d6 <round+0x24>
    12c4:	67 2f       	mov	r22, r23
    12c6:	78 2f       	mov	r23, r24
    12c8:	88 27       	eor	r24, r24
    12ca:	98 5f       	subi	r25, 0xF8	; 248
    12cc:	f9 cf       	rjmp	.-14     	; 0x12c0 <round+0xe>
    12ce:	86 95       	lsr	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	93 95       	inc	r25
    12d6:	95 39       	cpi	r25, 0x95	; 149
    12d8:	d0 f3       	brcs	.-12     	; 0x12ce <round+0x1c>
    12da:	b6 2f       	mov	r27, r22
    12dc:	b1 70       	andi	r27, 0x01	; 1
    12de:	6b 0f       	add	r22, r27
    12e0:	71 1d       	adc	r23, r1
    12e2:	81 1d       	adc	r24, r1
    12e4:	20 f4       	brcc	.+8      	; 0x12ee <round+0x3c>
    12e6:	87 95       	ror	r24
    12e8:	77 95       	ror	r23
    12ea:	67 95       	ror	r22
    12ec:	93 95       	inc	r25
    12ee:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__fp_mintl>
    12f2:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__fp_mpack>
    12f6:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__fp_szero>

000012fa <__fp_mintl>:
    12fa:	88 23       	and	r24, r24
    12fc:	71 f4       	brne	.+28     	; 0x131a <__fp_mintl+0x20>
    12fe:	77 23       	and	r23, r23
    1300:	21 f0       	breq	.+8      	; 0x130a <__fp_mintl+0x10>
    1302:	98 50       	subi	r25, 0x08	; 8
    1304:	87 2b       	or	r24, r23
    1306:	76 2f       	mov	r23, r22
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <__fp_mintl+0x1e>
    130a:	66 23       	and	r22, r22
    130c:	11 f4       	brne	.+4      	; 0x1312 <__fp_mintl+0x18>
    130e:	99 27       	eor	r25, r25
    1310:	0d c0       	rjmp	.+26     	; 0x132c <__fp_mintl+0x32>
    1312:	90 51       	subi	r25, 0x10	; 16
    1314:	86 2b       	or	r24, r22
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	2a f0       	brmi	.+10     	; 0x1326 <__fp_mintl+0x2c>
    131c:	9a 95       	dec	r25
    131e:	66 0f       	add	r22, r22
    1320:	77 1f       	adc	r23, r23
    1322:	88 1f       	adc	r24, r24
    1324:	da f7       	brpl	.-10     	; 0x131c <__fp_mintl+0x22>
    1326:	88 0f       	add	r24, r24
    1328:	96 95       	lsr	r25
    132a:	87 95       	ror	r24
    132c:	97 f9       	bld	r25, 7
    132e:	08 95       	ret

00001330 <__fp_mpack>:
    1330:	9f 3f       	cpi	r25, 0xFF	; 255
    1332:	31 f0       	breq	.+12     	; 0x1340 <__fp_mpack_finite+0xc>

00001334 <__fp_mpack_finite>:
    1334:	91 50       	subi	r25, 0x01	; 1
    1336:	20 f4       	brcc	.+8      	; 0x1340 <__fp_mpack_finite+0xc>
    1338:	87 95       	ror	r24
    133a:	77 95       	ror	r23
    133c:	67 95       	ror	r22
    133e:	b7 95       	ror	r27
    1340:	88 0f       	add	r24, r24
    1342:	91 1d       	adc	r25, r1
    1344:	96 95       	lsr	r25
    1346:	87 95       	ror	r24
    1348:	97 f9       	bld	r25, 7
    134a:	08 95       	ret

0000134c <__divmodhi4>:
    134c:	97 fb       	bst	r25, 7
    134e:	07 2e       	mov	r0, r23
    1350:	16 f4       	brtc	.+4      	; 0x1356 <__divmodhi4+0xa>
    1352:	00 94       	com	r0
    1354:	07 d0       	rcall	.+14     	; 0x1364 <__divmodhi4_neg1>
    1356:	77 fd       	sbrc	r23, 7
    1358:	09 d0       	rcall	.+18     	; 0x136c <__divmodhi4_neg2>
    135a:	0e 94 ba 09 	call	0x1374	; 0x1374 <__udivmodhi4>
    135e:	07 fc       	sbrc	r0, 7
    1360:	05 d0       	rcall	.+10     	; 0x136c <__divmodhi4_neg2>
    1362:	3e f4       	brtc	.+14     	; 0x1372 <__divmodhi4_exit>

00001364 <__divmodhi4_neg1>:
    1364:	90 95       	com	r25
    1366:	81 95       	neg	r24
    1368:	9f 4f       	sbci	r25, 0xFF	; 255
    136a:	08 95       	ret

0000136c <__divmodhi4_neg2>:
    136c:	70 95       	com	r23
    136e:	61 95       	neg	r22
    1370:	7f 4f       	sbci	r23, 0xFF	; 255

00001372 <__divmodhi4_exit>:
    1372:	08 95       	ret

00001374 <__udivmodhi4>:
    1374:	aa 1b       	sub	r26, r26
    1376:	bb 1b       	sub	r27, r27
    1378:	51 e1       	ldi	r21, 0x11	; 17
    137a:	07 c0       	rjmp	.+14     	; 0x138a <__udivmodhi4_ep>

0000137c <__udivmodhi4_loop>:
    137c:	aa 1f       	adc	r26, r26
    137e:	bb 1f       	adc	r27, r27
    1380:	a6 17       	cp	r26, r22
    1382:	b7 07       	cpc	r27, r23
    1384:	10 f0       	brcs	.+4      	; 0x138a <__udivmodhi4_ep>
    1386:	a6 1b       	sub	r26, r22
    1388:	b7 0b       	sbc	r27, r23

0000138a <__udivmodhi4_ep>:
    138a:	88 1f       	adc	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	5a 95       	dec	r21
    1390:	a9 f7       	brne	.-22     	; 0x137c <__udivmodhi4_loop>
    1392:	80 95       	com	r24
    1394:	90 95       	com	r25
    1396:	bc 01       	movw	r22, r24
    1398:	cd 01       	movw	r24, r26
    139a:	08 95       	ret

0000139c <printf>:
    139c:	a0 e0       	ldi	r26, 0x00	; 0
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e4 ed       	ldi	r30, 0xD4	; 212
    13a2:	f9 e0       	ldi	r31, 0x09	; 9
    13a4:	0c 94 ce 0c 	jmp	0x199c	; 0x199c <__prologue_saves__+0x20>
    13a8:	ae 01       	movw	r20, r28
    13aa:	4b 5f       	subi	r20, 0xFB	; 251
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	fa 01       	movw	r30, r20
    13b0:	61 91       	ld	r22, Z+
    13b2:	71 91       	ld	r23, Z+
    13b4:	af 01       	movw	r20, r30
    13b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__iob+0x2>
    13ba:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <__iob+0x3>
    13be:	0e 94 14 0a 	call	0x1428	; 0x1428 <vfprintf>
    13c2:	e2 e0       	ldi	r30, 0x02	; 2
    13c4:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <__epilogue_restores__+0x20>

000013c8 <puts>:
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <__iob+0x2>
    13d4:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <__iob+0x3>
    13d8:	23 81       	ldd	r18, Z+3	; 0x03
    13da:	21 ff       	sbrs	r18, 1
    13dc:	1b c0       	rjmp	.+54     	; 0x1414 <puts+0x4c>
    13de:	8c 01       	movw	r16, r24
    13e0:	d0 e0       	ldi	r29, 0x00	; 0
    13e2:	c0 e0       	ldi	r28, 0x00	; 0
    13e4:	f8 01       	movw	r30, r16
    13e6:	81 91       	ld	r24, Z+
    13e8:	8f 01       	movw	r16, r30
    13ea:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <__iob+0x2>
    13ee:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <__iob+0x3>
    13f2:	db 01       	movw	r26, r22
    13f4:	18 96       	adiw	r26, 0x08	; 8
    13f6:	ed 91       	ld	r30, X+
    13f8:	fc 91       	ld	r31, X
    13fa:	19 97       	sbiw	r26, 0x09	; 9
    13fc:	88 23       	and	r24, r24
    13fe:	31 f0       	breq	.+12     	; 0x140c <puts+0x44>
    1400:	09 95       	icall
    1402:	89 2b       	or	r24, r25
    1404:	79 f3       	breq	.-34     	; 0x13e4 <puts+0x1c>
    1406:	df ef       	ldi	r29, 0xFF	; 255
    1408:	cf ef       	ldi	r28, 0xFF	; 255
    140a:	ec cf       	rjmp	.-40     	; 0x13e4 <puts+0x1c>
    140c:	8a e0       	ldi	r24, 0x0A	; 10
    140e:	09 95       	icall
    1410:	89 2b       	or	r24, r25
    1412:	19 f0       	breq	.+6      	; 0x141a <puts+0x52>
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	02 c0       	rjmp	.+4      	; 0x141e <puts+0x56>
    141a:	8d 2f       	mov	r24, r29
    141c:	9c 2f       	mov	r25, r28
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	1f 91       	pop	r17
    1424:	0f 91       	pop	r16
    1426:	08 95       	ret

00001428 <vfprintf>:
    1428:	ab e0       	ldi	r26, 0x0B	; 11
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	ea e1       	ldi	r30, 0x1A	; 26
    142e:	fa e0       	ldi	r31, 0x0A	; 10
    1430:	0c 94 be 0c 	jmp	0x197c	; 0x197c <__prologue_saves__>
    1434:	6c 01       	movw	r12, r24
    1436:	7b 01       	movw	r14, r22
    1438:	8a 01       	movw	r16, r20
    143a:	fc 01       	movw	r30, r24
    143c:	17 82       	std	Z+7, r1	; 0x07
    143e:	16 82       	std	Z+6, r1	; 0x06
    1440:	83 81       	ldd	r24, Z+3	; 0x03
    1442:	81 ff       	sbrs	r24, 1
    1444:	cc c1       	rjmp	.+920    	; 0x17de <vfprintf+0x3b6>
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	3c 01       	movw	r6, r24
    144c:	f6 01       	movw	r30, r12
    144e:	93 81       	ldd	r25, Z+3	; 0x03
    1450:	f7 01       	movw	r30, r14
    1452:	93 fd       	sbrc	r25, 3
    1454:	85 91       	lpm	r24, Z+
    1456:	93 ff       	sbrs	r25, 3
    1458:	81 91       	ld	r24, Z+
    145a:	7f 01       	movw	r14, r30
    145c:	88 23       	and	r24, r24
    145e:	09 f4       	brne	.+2      	; 0x1462 <vfprintf+0x3a>
    1460:	ba c1       	rjmp	.+884    	; 0x17d6 <vfprintf+0x3ae>
    1462:	85 32       	cpi	r24, 0x25	; 37
    1464:	39 f4       	brne	.+14     	; 0x1474 <vfprintf+0x4c>
    1466:	93 fd       	sbrc	r25, 3
    1468:	85 91       	lpm	r24, Z+
    146a:	93 ff       	sbrs	r25, 3
    146c:	81 91       	ld	r24, Z+
    146e:	7f 01       	movw	r14, r30
    1470:	85 32       	cpi	r24, 0x25	; 37
    1472:	29 f4       	brne	.+10     	; 0x147e <vfprintf+0x56>
    1474:	b6 01       	movw	r22, r12
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    147c:	e7 cf       	rjmp	.-50     	; 0x144c <vfprintf+0x24>
    147e:	91 2c       	mov	r9, r1
    1480:	21 2c       	mov	r2, r1
    1482:	31 2c       	mov	r3, r1
    1484:	ff e1       	ldi	r31, 0x1F	; 31
    1486:	f3 15       	cp	r31, r3
    1488:	d8 f0       	brcs	.+54     	; 0x14c0 <vfprintf+0x98>
    148a:	8b 32       	cpi	r24, 0x2B	; 43
    148c:	79 f0       	breq	.+30     	; 0x14ac <vfprintf+0x84>
    148e:	38 f4       	brcc	.+14     	; 0x149e <vfprintf+0x76>
    1490:	80 32       	cpi	r24, 0x20	; 32
    1492:	79 f0       	breq	.+30     	; 0x14b2 <vfprintf+0x8a>
    1494:	83 32       	cpi	r24, 0x23	; 35
    1496:	a1 f4       	brne	.+40     	; 0x14c0 <vfprintf+0x98>
    1498:	23 2d       	mov	r18, r3
    149a:	20 61       	ori	r18, 0x10	; 16
    149c:	1d c0       	rjmp	.+58     	; 0x14d8 <vfprintf+0xb0>
    149e:	8d 32       	cpi	r24, 0x2D	; 45
    14a0:	61 f0       	breq	.+24     	; 0x14ba <vfprintf+0x92>
    14a2:	80 33       	cpi	r24, 0x30	; 48
    14a4:	69 f4       	brne	.+26     	; 0x14c0 <vfprintf+0x98>
    14a6:	23 2d       	mov	r18, r3
    14a8:	21 60       	ori	r18, 0x01	; 1
    14aa:	16 c0       	rjmp	.+44     	; 0x14d8 <vfprintf+0xb0>
    14ac:	83 2d       	mov	r24, r3
    14ae:	82 60       	ori	r24, 0x02	; 2
    14b0:	38 2e       	mov	r3, r24
    14b2:	e3 2d       	mov	r30, r3
    14b4:	e4 60       	ori	r30, 0x04	; 4
    14b6:	3e 2e       	mov	r3, r30
    14b8:	2a c0       	rjmp	.+84     	; 0x150e <vfprintf+0xe6>
    14ba:	f3 2d       	mov	r31, r3
    14bc:	f8 60       	ori	r31, 0x08	; 8
    14be:	1d c0       	rjmp	.+58     	; 0x14fa <vfprintf+0xd2>
    14c0:	37 fc       	sbrc	r3, 7
    14c2:	2d c0       	rjmp	.+90     	; 0x151e <vfprintf+0xf6>
    14c4:	20 ed       	ldi	r18, 0xD0	; 208
    14c6:	28 0f       	add	r18, r24
    14c8:	2a 30       	cpi	r18, 0x0A	; 10
    14ca:	40 f0       	brcs	.+16     	; 0x14dc <vfprintf+0xb4>
    14cc:	8e 32       	cpi	r24, 0x2E	; 46
    14ce:	b9 f4       	brne	.+46     	; 0x14fe <vfprintf+0xd6>
    14d0:	36 fc       	sbrc	r3, 6
    14d2:	81 c1       	rjmp	.+770    	; 0x17d6 <vfprintf+0x3ae>
    14d4:	23 2d       	mov	r18, r3
    14d6:	20 64       	ori	r18, 0x40	; 64
    14d8:	32 2e       	mov	r3, r18
    14da:	19 c0       	rjmp	.+50     	; 0x150e <vfprintf+0xe6>
    14dc:	36 fe       	sbrs	r3, 6
    14de:	06 c0       	rjmp	.+12     	; 0x14ec <vfprintf+0xc4>
    14e0:	8a e0       	ldi	r24, 0x0A	; 10
    14e2:	98 9e       	mul	r9, r24
    14e4:	20 0d       	add	r18, r0
    14e6:	11 24       	eor	r1, r1
    14e8:	92 2e       	mov	r9, r18
    14ea:	11 c0       	rjmp	.+34     	; 0x150e <vfprintf+0xe6>
    14ec:	ea e0       	ldi	r30, 0x0A	; 10
    14ee:	2e 9e       	mul	r2, r30
    14f0:	20 0d       	add	r18, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	22 2e       	mov	r2, r18
    14f6:	f3 2d       	mov	r31, r3
    14f8:	f0 62       	ori	r31, 0x20	; 32
    14fa:	3f 2e       	mov	r3, r31
    14fc:	08 c0       	rjmp	.+16     	; 0x150e <vfprintf+0xe6>
    14fe:	8c 36       	cpi	r24, 0x6C	; 108
    1500:	21 f4       	brne	.+8      	; 0x150a <vfprintf+0xe2>
    1502:	83 2d       	mov	r24, r3
    1504:	80 68       	ori	r24, 0x80	; 128
    1506:	38 2e       	mov	r3, r24
    1508:	02 c0       	rjmp	.+4      	; 0x150e <vfprintf+0xe6>
    150a:	88 36       	cpi	r24, 0x68	; 104
    150c:	41 f4       	brne	.+16     	; 0x151e <vfprintf+0xf6>
    150e:	f7 01       	movw	r30, r14
    1510:	93 fd       	sbrc	r25, 3
    1512:	85 91       	lpm	r24, Z+
    1514:	93 ff       	sbrs	r25, 3
    1516:	81 91       	ld	r24, Z+
    1518:	7f 01       	movw	r14, r30
    151a:	81 11       	cpse	r24, r1
    151c:	b3 cf       	rjmp	.-154    	; 0x1484 <vfprintf+0x5c>
    151e:	98 2f       	mov	r25, r24
    1520:	9f 7d       	andi	r25, 0xDF	; 223
    1522:	95 54       	subi	r25, 0x45	; 69
    1524:	93 30       	cpi	r25, 0x03	; 3
    1526:	28 f4       	brcc	.+10     	; 0x1532 <vfprintf+0x10a>
    1528:	0c 5f       	subi	r16, 0xFC	; 252
    152a:	1f 4f       	sbci	r17, 0xFF	; 255
    152c:	9f e3       	ldi	r25, 0x3F	; 63
    152e:	99 83       	std	Y+1, r25	; 0x01
    1530:	0d c0       	rjmp	.+26     	; 0x154c <vfprintf+0x124>
    1532:	83 36       	cpi	r24, 0x63	; 99
    1534:	31 f0       	breq	.+12     	; 0x1542 <vfprintf+0x11a>
    1536:	83 37       	cpi	r24, 0x73	; 115
    1538:	71 f0       	breq	.+28     	; 0x1556 <vfprintf+0x12e>
    153a:	83 35       	cpi	r24, 0x53	; 83
    153c:	09 f0       	breq	.+2      	; 0x1540 <vfprintf+0x118>
    153e:	59 c0       	rjmp	.+178    	; 0x15f2 <vfprintf+0x1ca>
    1540:	21 c0       	rjmp	.+66     	; 0x1584 <vfprintf+0x15c>
    1542:	f8 01       	movw	r30, r16
    1544:	80 81       	ld	r24, Z
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	0e 5f       	subi	r16, 0xFE	; 254
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
    154c:	88 24       	eor	r8, r8
    154e:	83 94       	inc	r8
    1550:	91 2c       	mov	r9, r1
    1552:	53 01       	movw	r10, r6
    1554:	13 c0       	rjmp	.+38     	; 0x157c <vfprintf+0x154>
    1556:	28 01       	movw	r4, r16
    1558:	f2 e0       	ldi	r31, 0x02	; 2
    155a:	4f 0e       	add	r4, r31
    155c:	51 1c       	adc	r5, r1
    155e:	f8 01       	movw	r30, r16
    1560:	a0 80       	ld	r10, Z
    1562:	b1 80       	ldd	r11, Z+1	; 0x01
    1564:	36 fe       	sbrs	r3, 6
    1566:	03 c0       	rjmp	.+6      	; 0x156e <vfprintf+0x146>
    1568:	69 2d       	mov	r22, r9
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x14a>
    156e:	6f ef       	ldi	r22, 0xFF	; 255
    1570:	7f ef       	ldi	r23, 0xFF	; 255
    1572:	c5 01       	movw	r24, r10
    1574:	0e 94 00 0c 	call	0x1800	; 0x1800 <strnlen>
    1578:	4c 01       	movw	r8, r24
    157a:	82 01       	movw	r16, r4
    157c:	f3 2d       	mov	r31, r3
    157e:	ff 77       	andi	r31, 0x7F	; 127
    1580:	3f 2e       	mov	r3, r31
    1582:	16 c0       	rjmp	.+44     	; 0x15b0 <vfprintf+0x188>
    1584:	28 01       	movw	r4, r16
    1586:	22 e0       	ldi	r18, 0x02	; 2
    1588:	42 0e       	add	r4, r18
    158a:	51 1c       	adc	r5, r1
    158c:	f8 01       	movw	r30, r16
    158e:	a0 80       	ld	r10, Z
    1590:	b1 80       	ldd	r11, Z+1	; 0x01
    1592:	36 fe       	sbrs	r3, 6
    1594:	03 c0       	rjmp	.+6      	; 0x159c <vfprintf+0x174>
    1596:	69 2d       	mov	r22, r9
    1598:	70 e0       	ldi	r23, 0x00	; 0
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <vfprintf+0x178>
    159c:	6f ef       	ldi	r22, 0xFF	; 255
    159e:	7f ef       	ldi	r23, 0xFF	; 255
    15a0:	c5 01       	movw	r24, r10
    15a2:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <strnlen_P>
    15a6:	4c 01       	movw	r8, r24
    15a8:	f3 2d       	mov	r31, r3
    15aa:	f0 68       	ori	r31, 0x80	; 128
    15ac:	3f 2e       	mov	r3, r31
    15ae:	82 01       	movw	r16, r4
    15b0:	33 fc       	sbrc	r3, 3
    15b2:	1b c0       	rjmp	.+54     	; 0x15ea <vfprintf+0x1c2>
    15b4:	82 2d       	mov	r24, r2
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	88 16       	cp	r8, r24
    15ba:	99 06       	cpc	r9, r25
    15bc:	b0 f4       	brcc	.+44     	; 0x15ea <vfprintf+0x1c2>
    15be:	b6 01       	movw	r22, r12
    15c0:	80 e2       	ldi	r24, 0x20	; 32
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    15c8:	2a 94       	dec	r2
    15ca:	f4 cf       	rjmp	.-24     	; 0x15b4 <vfprintf+0x18c>
    15cc:	f5 01       	movw	r30, r10
    15ce:	37 fc       	sbrc	r3, 7
    15d0:	85 91       	lpm	r24, Z+
    15d2:	37 fe       	sbrs	r3, 7
    15d4:	81 91       	ld	r24, Z+
    15d6:	5f 01       	movw	r10, r30
    15d8:	b6 01       	movw	r22, r12
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    15e0:	21 10       	cpse	r2, r1
    15e2:	2a 94       	dec	r2
    15e4:	21 e0       	ldi	r18, 0x01	; 1
    15e6:	82 1a       	sub	r8, r18
    15e8:	91 08       	sbc	r9, r1
    15ea:	81 14       	cp	r8, r1
    15ec:	91 04       	cpc	r9, r1
    15ee:	71 f7       	brne	.-36     	; 0x15cc <vfprintf+0x1a4>
    15f0:	e8 c0       	rjmp	.+464    	; 0x17c2 <vfprintf+0x39a>
    15f2:	84 36       	cpi	r24, 0x64	; 100
    15f4:	11 f0       	breq	.+4      	; 0x15fa <vfprintf+0x1d2>
    15f6:	89 36       	cpi	r24, 0x69	; 105
    15f8:	41 f5       	brne	.+80     	; 0x164a <vfprintf+0x222>
    15fa:	f8 01       	movw	r30, r16
    15fc:	37 fe       	sbrs	r3, 7
    15fe:	07 c0       	rjmp	.+14     	; 0x160e <vfprintf+0x1e6>
    1600:	60 81       	ld	r22, Z
    1602:	71 81       	ldd	r23, Z+1	; 0x01
    1604:	82 81       	ldd	r24, Z+2	; 0x02
    1606:	93 81       	ldd	r25, Z+3	; 0x03
    1608:	0c 5f       	subi	r16, 0xFC	; 252
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	08 c0       	rjmp	.+16     	; 0x161e <vfprintf+0x1f6>
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	07 2e       	mov	r0, r23
    1614:	00 0c       	add	r0, r0
    1616:	88 0b       	sbc	r24, r24
    1618:	99 0b       	sbc	r25, r25
    161a:	0e 5f       	subi	r16, 0xFE	; 254
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
    161e:	f3 2d       	mov	r31, r3
    1620:	ff 76       	andi	r31, 0x6F	; 111
    1622:	3f 2e       	mov	r3, r31
    1624:	97 ff       	sbrs	r25, 7
    1626:	09 c0       	rjmp	.+18     	; 0x163a <vfprintf+0x212>
    1628:	90 95       	com	r25
    162a:	80 95       	com	r24
    162c:	70 95       	com	r23
    162e:	61 95       	neg	r22
    1630:	7f 4f       	sbci	r23, 0xFF	; 255
    1632:	8f 4f       	sbci	r24, 0xFF	; 255
    1634:	9f 4f       	sbci	r25, 0xFF	; 255
    1636:	f0 68       	ori	r31, 0x80	; 128
    1638:	3f 2e       	mov	r3, r31
    163a:	2a e0       	ldi	r18, 0x0A	; 10
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	a3 01       	movw	r20, r6
    1640:	0e 94 47 0c 	call	0x188e	; 0x188e <__ultoa_invert>
    1644:	88 2e       	mov	r8, r24
    1646:	86 18       	sub	r8, r6
    1648:	45 c0       	rjmp	.+138    	; 0x16d4 <vfprintf+0x2ac>
    164a:	85 37       	cpi	r24, 0x75	; 117
    164c:	31 f4       	brne	.+12     	; 0x165a <vfprintf+0x232>
    164e:	23 2d       	mov	r18, r3
    1650:	2f 7e       	andi	r18, 0xEF	; 239
    1652:	b2 2e       	mov	r11, r18
    1654:	2a e0       	ldi	r18, 0x0A	; 10
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	25 c0       	rjmp	.+74     	; 0x16a4 <vfprintf+0x27c>
    165a:	93 2d       	mov	r25, r3
    165c:	99 7f       	andi	r25, 0xF9	; 249
    165e:	b9 2e       	mov	r11, r25
    1660:	8f 36       	cpi	r24, 0x6F	; 111
    1662:	c1 f0       	breq	.+48     	; 0x1694 <vfprintf+0x26c>
    1664:	18 f4       	brcc	.+6      	; 0x166c <vfprintf+0x244>
    1666:	88 35       	cpi	r24, 0x58	; 88
    1668:	79 f0       	breq	.+30     	; 0x1688 <vfprintf+0x260>
    166a:	b5 c0       	rjmp	.+362    	; 0x17d6 <vfprintf+0x3ae>
    166c:	80 37       	cpi	r24, 0x70	; 112
    166e:	19 f0       	breq	.+6      	; 0x1676 <vfprintf+0x24e>
    1670:	88 37       	cpi	r24, 0x78	; 120
    1672:	21 f0       	breq	.+8      	; 0x167c <vfprintf+0x254>
    1674:	b0 c0       	rjmp	.+352    	; 0x17d6 <vfprintf+0x3ae>
    1676:	e9 2f       	mov	r30, r25
    1678:	e0 61       	ori	r30, 0x10	; 16
    167a:	be 2e       	mov	r11, r30
    167c:	b4 fe       	sbrs	r11, 4
    167e:	0d c0       	rjmp	.+26     	; 0x169a <vfprintf+0x272>
    1680:	fb 2d       	mov	r31, r11
    1682:	f4 60       	ori	r31, 0x04	; 4
    1684:	bf 2e       	mov	r11, r31
    1686:	09 c0       	rjmp	.+18     	; 0x169a <vfprintf+0x272>
    1688:	34 fe       	sbrs	r3, 4
    168a:	0a c0       	rjmp	.+20     	; 0x16a0 <vfprintf+0x278>
    168c:	29 2f       	mov	r18, r25
    168e:	26 60       	ori	r18, 0x06	; 6
    1690:	b2 2e       	mov	r11, r18
    1692:	06 c0       	rjmp	.+12     	; 0x16a0 <vfprintf+0x278>
    1694:	28 e0       	ldi	r18, 0x08	; 8
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <vfprintf+0x27c>
    169a:	20 e1       	ldi	r18, 0x10	; 16
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <vfprintf+0x27c>
    16a0:	20 e1       	ldi	r18, 0x10	; 16
    16a2:	32 e0       	ldi	r19, 0x02	; 2
    16a4:	f8 01       	movw	r30, r16
    16a6:	b7 fe       	sbrs	r11, 7
    16a8:	07 c0       	rjmp	.+14     	; 0x16b8 <vfprintf+0x290>
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	93 81       	ldd	r25, Z+3	; 0x03
    16b2:	0c 5f       	subi	r16, 0xFC	; 252
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <vfprintf+0x29c>
    16b8:	60 81       	ld	r22, Z
    16ba:	71 81       	ldd	r23, Z+1	; 0x01
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 5f       	subi	r16, 0xFE	; 254
    16c2:	1f 4f       	sbci	r17, 0xFF	; 255
    16c4:	a3 01       	movw	r20, r6
    16c6:	0e 94 47 0c 	call	0x188e	; 0x188e <__ultoa_invert>
    16ca:	88 2e       	mov	r8, r24
    16cc:	86 18       	sub	r8, r6
    16ce:	fb 2d       	mov	r31, r11
    16d0:	ff 77       	andi	r31, 0x7F	; 127
    16d2:	3f 2e       	mov	r3, r31
    16d4:	36 fe       	sbrs	r3, 6
    16d6:	0d c0       	rjmp	.+26     	; 0x16f2 <vfprintf+0x2ca>
    16d8:	23 2d       	mov	r18, r3
    16da:	2e 7f       	andi	r18, 0xFE	; 254
    16dc:	a2 2e       	mov	r10, r18
    16de:	89 14       	cp	r8, r9
    16e0:	58 f4       	brcc	.+22     	; 0x16f8 <vfprintf+0x2d0>
    16e2:	34 fe       	sbrs	r3, 4
    16e4:	0b c0       	rjmp	.+22     	; 0x16fc <vfprintf+0x2d4>
    16e6:	32 fc       	sbrc	r3, 2
    16e8:	09 c0       	rjmp	.+18     	; 0x16fc <vfprintf+0x2d4>
    16ea:	83 2d       	mov	r24, r3
    16ec:	8e 7e       	andi	r24, 0xEE	; 238
    16ee:	a8 2e       	mov	r10, r24
    16f0:	05 c0       	rjmp	.+10     	; 0x16fc <vfprintf+0x2d4>
    16f2:	b8 2c       	mov	r11, r8
    16f4:	a3 2c       	mov	r10, r3
    16f6:	03 c0       	rjmp	.+6      	; 0x16fe <vfprintf+0x2d6>
    16f8:	b8 2c       	mov	r11, r8
    16fa:	01 c0       	rjmp	.+2      	; 0x16fe <vfprintf+0x2d6>
    16fc:	b9 2c       	mov	r11, r9
    16fe:	a4 fe       	sbrs	r10, 4
    1700:	0f c0       	rjmp	.+30     	; 0x1720 <vfprintf+0x2f8>
    1702:	fe 01       	movw	r30, r28
    1704:	e8 0d       	add	r30, r8
    1706:	f1 1d       	adc	r31, r1
    1708:	80 81       	ld	r24, Z
    170a:	80 33       	cpi	r24, 0x30	; 48
    170c:	21 f4       	brne	.+8      	; 0x1716 <vfprintf+0x2ee>
    170e:	9a 2d       	mov	r25, r10
    1710:	99 7e       	andi	r25, 0xE9	; 233
    1712:	a9 2e       	mov	r10, r25
    1714:	09 c0       	rjmp	.+18     	; 0x1728 <vfprintf+0x300>
    1716:	a2 fe       	sbrs	r10, 2
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <vfprintf+0x2fe>
    171a:	b3 94       	inc	r11
    171c:	b3 94       	inc	r11
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <vfprintf+0x300>
    1720:	8a 2d       	mov	r24, r10
    1722:	86 78       	andi	r24, 0x86	; 134
    1724:	09 f0       	breq	.+2      	; 0x1728 <vfprintf+0x300>
    1726:	b3 94       	inc	r11
    1728:	a3 fc       	sbrc	r10, 3
    172a:	11 c0       	rjmp	.+34     	; 0x174e <vfprintf+0x326>
    172c:	a0 fe       	sbrs	r10, 0
    172e:	06 c0       	rjmp	.+12     	; 0x173c <vfprintf+0x314>
    1730:	b2 14       	cp	r11, r2
    1732:	88 f4       	brcc	.+34     	; 0x1756 <vfprintf+0x32e>
    1734:	28 0c       	add	r2, r8
    1736:	92 2c       	mov	r9, r2
    1738:	9b 18       	sub	r9, r11
    173a:	0e c0       	rjmp	.+28     	; 0x1758 <vfprintf+0x330>
    173c:	b2 14       	cp	r11, r2
    173e:	60 f4       	brcc	.+24     	; 0x1758 <vfprintf+0x330>
    1740:	b6 01       	movw	r22, r12
    1742:	80 e2       	ldi	r24, 0x20	; 32
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    174a:	b3 94       	inc	r11
    174c:	f7 cf       	rjmp	.-18     	; 0x173c <vfprintf+0x314>
    174e:	b2 14       	cp	r11, r2
    1750:	18 f4       	brcc	.+6      	; 0x1758 <vfprintf+0x330>
    1752:	2b 18       	sub	r2, r11
    1754:	02 c0       	rjmp	.+4      	; 0x175a <vfprintf+0x332>
    1756:	98 2c       	mov	r9, r8
    1758:	21 2c       	mov	r2, r1
    175a:	a4 fe       	sbrs	r10, 4
    175c:	10 c0       	rjmp	.+32     	; 0x177e <vfprintf+0x356>
    175e:	b6 01       	movw	r22, r12
    1760:	80 e3       	ldi	r24, 0x30	; 48
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    1768:	a2 fe       	sbrs	r10, 2
    176a:	17 c0       	rjmp	.+46     	; 0x179a <vfprintf+0x372>
    176c:	a1 fc       	sbrc	r10, 1
    176e:	03 c0       	rjmp	.+6      	; 0x1776 <vfprintf+0x34e>
    1770:	88 e7       	ldi	r24, 0x78	; 120
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <vfprintf+0x352>
    1776:	88 e5       	ldi	r24, 0x58	; 88
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	b6 01       	movw	r22, r12
    177c:	0c c0       	rjmp	.+24     	; 0x1796 <vfprintf+0x36e>
    177e:	8a 2d       	mov	r24, r10
    1780:	86 78       	andi	r24, 0x86	; 134
    1782:	59 f0       	breq	.+22     	; 0x179a <vfprintf+0x372>
    1784:	a1 fe       	sbrs	r10, 1
    1786:	02 c0       	rjmp	.+4      	; 0x178c <vfprintf+0x364>
    1788:	8b e2       	ldi	r24, 0x2B	; 43
    178a:	01 c0       	rjmp	.+2      	; 0x178e <vfprintf+0x366>
    178c:	80 e2       	ldi	r24, 0x20	; 32
    178e:	a7 fc       	sbrc	r10, 7
    1790:	8d e2       	ldi	r24, 0x2D	; 45
    1792:	b6 01       	movw	r22, r12
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    179a:	89 14       	cp	r8, r9
    179c:	38 f4       	brcc	.+14     	; 0x17ac <vfprintf+0x384>
    179e:	b6 01       	movw	r22, r12
    17a0:	80 e3       	ldi	r24, 0x30	; 48
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    17a8:	9a 94       	dec	r9
    17aa:	f7 cf       	rjmp	.-18     	; 0x179a <vfprintf+0x372>
    17ac:	8a 94       	dec	r8
    17ae:	f3 01       	movw	r30, r6
    17b0:	e8 0d       	add	r30, r8
    17b2:	f1 1d       	adc	r31, r1
    17b4:	80 81       	ld	r24, Z
    17b6:	b6 01       	movw	r22, r12
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    17be:	81 10       	cpse	r8, r1
    17c0:	f5 cf       	rjmp	.-22     	; 0x17ac <vfprintf+0x384>
    17c2:	22 20       	and	r2, r2
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <vfprintf+0x3a0>
    17c6:	42 ce       	rjmp	.-892    	; 0x144c <vfprintf+0x24>
    17c8:	b6 01       	movw	r22, r12
    17ca:	80 e2       	ldi	r24, 0x20	; 32
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 0b 0c 	call	0x1816	; 0x1816 <fputc>
    17d2:	2a 94       	dec	r2
    17d4:	f6 cf       	rjmp	.-20     	; 0x17c2 <vfprintf+0x39a>
    17d6:	f6 01       	movw	r30, r12
    17d8:	86 81       	ldd	r24, Z+6	; 0x06
    17da:	97 81       	ldd	r25, Z+7	; 0x07
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x3ba>
    17de:	8f ef       	ldi	r24, 0xFF	; 255
    17e0:	9f ef       	ldi	r25, 0xFF	; 255
    17e2:	2b 96       	adiw	r28, 0x0b	; 11
    17e4:	e2 e1       	ldi	r30, 0x12	; 18
    17e6:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__epilogue_restores__>

000017ea <strnlen_P>:
    17ea:	fc 01       	movw	r30, r24
    17ec:	05 90       	lpm	r0, Z+
    17ee:	61 50       	subi	r22, 0x01	; 1
    17f0:	70 40       	sbci	r23, 0x00	; 0
    17f2:	01 10       	cpse	r0, r1
    17f4:	d8 f7       	brcc	.-10     	; 0x17ec <strnlen_P+0x2>
    17f6:	80 95       	com	r24
    17f8:	90 95       	com	r25
    17fa:	8e 0f       	add	r24, r30
    17fc:	9f 1f       	adc	r25, r31
    17fe:	08 95       	ret

00001800 <strnlen>:
    1800:	fc 01       	movw	r30, r24
    1802:	61 50       	subi	r22, 0x01	; 1
    1804:	70 40       	sbci	r23, 0x00	; 0
    1806:	01 90       	ld	r0, Z+
    1808:	01 10       	cpse	r0, r1
    180a:	d8 f7       	brcc	.-10     	; 0x1802 <strnlen+0x2>
    180c:	80 95       	com	r24
    180e:	90 95       	com	r25
    1810:	8e 0f       	add	r24, r30
    1812:	9f 1f       	adc	r25, r31
    1814:	08 95       	ret

00001816 <fputc>:
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	fb 01       	movw	r30, r22
    1820:	23 81       	ldd	r18, Z+3	; 0x03
    1822:	21 fd       	sbrc	r18, 1
    1824:	03 c0       	rjmp	.+6      	; 0x182c <fputc+0x16>
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	9f ef       	ldi	r25, 0xFF	; 255
    182a:	2c c0       	rjmp	.+88     	; 0x1884 <fputc+0x6e>
    182c:	22 ff       	sbrs	r18, 2
    182e:	16 c0       	rjmp	.+44     	; 0x185c <fputc+0x46>
    1830:	46 81       	ldd	r20, Z+6	; 0x06
    1832:	57 81       	ldd	r21, Z+7	; 0x07
    1834:	24 81       	ldd	r18, Z+4	; 0x04
    1836:	35 81       	ldd	r19, Z+5	; 0x05
    1838:	42 17       	cp	r20, r18
    183a:	53 07       	cpc	r21, r19
    183c:	44 f4       	brge	.+16     	; 0x184e <fputc+0x38>
    183e:	a0 81       	ld	r26, Z
    1840:	b1 81       	ldd	r27, Z+1	; 0x01
    1842:	9d 01       	movw	r18, r26
    1844:	2f 5f       	subi	r18, 0xFF	; 255
    1846:	3f 4f       	sbci	r19, 0xFF	; 255
    1848:	31 83       	std	Z+1, r19	; 0x01
    184a:	20 83       	st	Z, r18
    184c:	8c 93       	st	X, r24
    184e:	26 81       	ldd	r18, Z+6	; 0x06
    1850:	37 81       	ldd	r19, Z+7	; 0x07
    1852:	2f 5f       	subi	r18, 0xFF	; 255
    1854:	3f 4f       	sbci	r19, 0xFF	; 255
    1856:	37 83       	std	Z+7, r19	; 0x07
    1858:	26 83       	std	Z+6, r18	; 0x06
    185a:	14 c0       	rjmp	.+40     	; 0x1884 <fputc+0x6e>
    185c:	8b 01       	movw	r16, r22
    185e:	ec 01       	movw	r28, r24
    1860:	fb 01       	movw	r30, r22
    1862:	00 84       	ldd	r0, Z+8	; 0x08
    1864:	f1 85       	ldd	r31, Z+9	; 0x09
    1866:	e0 2d       	mov	r30, r0
    1868:	09 95       	icall
    186a:	89 2b       	or	r24, r25
    186c:	e1 f6       	brne	.-72     	; 0x1826 <fputc+0x10>
    186e:	d8 01       	movw	r26, r16
    1870:	16 96       	adiw	r26, 0x06	; 6
    1872:	8d 91       	ld	r24, X+
    1874:	9c 91       	ld	r25, X
    1876:	17 97       	sbiw	r26, 0x07	; 7
    1878:	01 96       	adiw	r24, 0x01	; 1
    187a:	17 96       	adiw	r26, 0x07	; 7
    187c:	9c 93       	st	X, r25
    187e:	8e 93       	st	-X, r24
    1880:	16 97       	sbiw	r26, 0x06	; 6
    1882:	ce 01       	movw	r24, r28
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	08 95       	ret

0000188e <__ultoa_invert>:
    188e:	fa 01       	movw	r30, r20
    1890:	aa 27       	eor	r26, r26
    1892:	28 30       	cpi	r18, 0x08	; 8
    1894:	51 f1       	breq	.+84     	; 0x18ea <__ultoa_invert+0x5c>
    1896:	20 31       	cpi	r18, 0x10	; 16
    1898:	81 f1       	breq	.+96     	; 0x18fa <__ultoa_invert+0x6c>
    189a:	e8 94       	clt
    189c:	6f 93       	push	r22
    189e:	6e 7f       	andi	r22, 0xFE	; 254
    18a0:	6e 5f       	subi	r22, 0xFE	; 254
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	af 4f       	sbci	r26, 0xFF	; 255
    18aa:	b1 e0       	ldi	r27, 0x01	; 1
    18ac:	3e d0       	rcall	.+124    	; 0x192a <__ultoa_invert+0x9c>
    18ae:	b4 e0       	ldi	r27, 0x04	; 4
    18b0:	3c d0       	rcall	.+120    	; 0x192a <__ultoa_invert+0x9c>
    18b2:	67 0f       	add	r22, r23
    18b4:	78 1f       	adc	r23, r24
    18b6:	89 1f       	adc	r24, r25
    18b8:	9a 1f       	adc	r25, r26
    18ba:	a1 1d       	adc	r26, r1
    18bc:	68 0f       	add	r22, r24
    18be:	79 1f       	adc	r23, r25
    18c0:	8a 1f       	adc	r24, r26
    18c2:	91 1d       	adc	r25, r1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	6a 0f       	add	r22, r26
    18c8:	71 1d       	adc	r23, r1
    18ca:	81 1d       	adc	r24, r1
    18cc:	91 1d       	adc	r25, r1
    18ce:	a1 1d       	adc	r26, r1
    18d0:	20 d0       	rcall	.+64     	; 0x1912 <__ultoa_invert+0x84>
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <__ultoa_invert+0x48>
    18d4:	68 94       	set
    18d6:	3f 91       	pop	r19
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	26 9f       	mul	r18, r22
    18dc:	11 24       	eor	r1, r1
    18de:	30 19       	sub	r19, r0
    18e0:	30 5d       	subi	r19, 0xD0	; 208
    18e2:	31 93       	st	Z+, r19
    18e4:	de f6       	brtc	.-74     	; 0x189c <__ultoa_invert+0xe>
    18e6:	cf 01       	movw	r24, r30
    18e8:	08 95       	ret
    18ea:	46 2f       	mov	r20, r22
    18ec:	47 70       	andi	r20, 0x07	; 7
    18ee:	40 5d       	subi	r20, 0xD0	; 208
    18f0:	41 93       	st	Z+, r20
    18f2:	b3 e0       	ldi	r27, 0x03	; 3
    18f4:	0f d0       	rcall	.+30     	; 0x1914 <__ultoa_invert+0x86>
    18f6:	c9 f7       	brne	.-14     	; 0x18ea <__ultoa_invert+0x5c>
    18f8:	f6 cf       	rjmp	.-20     	; 0x18e6 <__ultoa_invert+0x58>
    18fa:	46 2f       	mov	r20, r22
    18fc:	4f 70       	andi	r20, 0x0F	; 15
    18fe:	40 5d       	subi	r20, 0xD0	; 208
    1900:	4a 33       	cpi	r20, 0x3A	; 58
    1902:	18 f0       	brcs	.+6      	; 0x190a <__ultoa_invert+0x7c>
    1904:	49 5d       	subi	r20, 0xD9	; 217
    1906:	31 fd       	sbrc	r19, 1
    1908:	40 52       	subi	r20, 0x20	; 32
    190a:	41 93       	st	Z+, r20
    190c:	02 d0       	rcall	.+4      	; 0x1912 <__ultoa_invert+0x84>
    190e:	a9 f7       	brne	.-22     	; 0x18fa <__ultoa_invert+0x6c>
    1910:	ea cf       	rjmp	.-44     	; 0x18e6 <__ultoa_invert+0x58>
    1912:	b4 e0       	ldi	r27, 0x04	; 4
    1914:	a6 95       	lsr	r26
    1916:	97 95       	ror	r25
    1918:	87 95       	ror	r24
    191a:	77 95       	ror	r23
    191c:	67 95       	ror	r22
    191e:	ba 95       	dec	r27
    1920:	c9 f7       	brne	.-14     	; 0x1914 <__ultoa_invert+0x86>
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	61 05       	cpc	r22, r1
    1926:	71 05       	cpc	r23, r1
    1928:	08 95       	ret
    192a:	9b 01       	movw	r18, r22
    192c:	ac 01       	movw	r20, r24
    192e:	0a 2e       	mov	r0, r26
    1930:	06 94       	lsr	r0
    1932:	57 95       	ror	r21
    1934:	47 95       	ror	r20
    1936:	37 95       	ror	r19
    1938:	27 95       	ror	r18
    193a:	ba 95       	dec	r27
    193c:	c9 f7       	brne	.-14     	; 0x1930 <__ultoa_invert+0xa2>
    193e:	62 0f       	add	r22, r18
    1940:	73 1f       	adc	r23, r19
    1942:	84 1f       	adc	r24, r20
    1944:	95 1f       	adc	r25, r21
    1946:	a0 1d       	adc	r26, r0
    1948:	08 95       	ret

0000194a <eeprom_read_byte>:
    194a:	e1 99       	sbic	0x1c, 1	; 28
    194c:	fe cf       	rjmp	.-4      	; 0x194a <eeprom_read_byte>
    194e:	9f bb       	out	0x1f, r25	; 31
    1950:	8e bb       	out	0x1e, r24	; 30
    1952:	e0 9a       	sbi	0x1c, 0	; 28
    1954:	99 27       	eor	r25, r25
    1956:	8d b3       	in	r24, 0x1d	; 29
    1958:	08 95       	ret

0000195a <eeprom_update_byte>:
    195a:	26 2f       	mov	r18, r22

0000195c <eeprom_update_r18>:
    195c:	e1 99       	sbic	0x1c, 1	; 28
    195e:	fe cf       	rjmp	.-4      	; 0x195c <eeprom_update_r18>
    1960:	9f bb       	out	0x1f, r25	; 31
    1962:	8e bb       	out	0x1e, r24	; 30
    1964:	e0 9a       	sbi	0x1c, 0	; 28
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	0d b2       	in	r0, 0x1d	; 29
    196a:	02 16       	cp	r0, r18
    196c:	31 f0       	breq	.+12     	; 0x197a <eeprom_update_r18+0x1e>
    196e:	2d bb       	out	0x1d, r18	; 29
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	e2 9a       	sbi	0x1c, 2	; 28
    1976:	e1 9a       	sbi	0x1c, 1	; 28
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	08 95       	ret

0000197c <__prologue_saves__>:
    197c:	2f 92       	push	r2
    197e:	3f 92       	push	r3
    1980:	4f 92       	push	r4
    1982:	5f 92       	push	r5
    1984:	6f 92       	push	r6
    1986:	7f 92       	push	r7
    1988:	8f 92       	push	r8
    198a:	9f 92       	push	r9
    198c:	af 92       	push	r10
    198e:	bf 92       	push	r11
    1990:	cf 92       	push	r12
    1992:	df 92       	push	r13
    1994:	ef 92       	push	r14
    1996:	ff 92       	push	r15
    1998:	0f 93       	push	r16
    199a:	1f 93       	push	r17
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	ca 1b       	sub	r28, r26
    19a6:	db 0b       	sbc	r29, r27
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	09 94       	ijmp

000019b4 <__epilogue_restores__>:
    19b4:	2a 88       	ldd	r2, Y+18	; 0x12
    19b6:	39 88       	ldd	r3, Y+17	; 0x11
    19b8:	48 88       	ldd	r4, Y+16	; 0x10
    19ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    19bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    19be:	7d 84       	ldd	r7, Y+13	; 0x0d
    19c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    19c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    19c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    19c6:	b9 84       	ldd	r11, Y+9	; 0x09
    19c8:	c8 84       	ldd	r12, Y+8	; 0x08
    19ca:	df 80       	ldd	r13, Y+7	; 0x07
    19cc:	ee 80       	ldd	r14, Y+6	; 0x06
    19ce:	fd 80       	ldd	r15, Y+5	; 0x05
    19d0:	0c 81       	ldd	r16, Y+4	; 0x04
    19d2:	1b 81       	ldd	r17, Y+3	; 0x03
    19d4:	aa 81       	ldd	r26, Y+2	; 0x02
    19d6:	b9 81       	ldd	r27, Y+1	; 0x01
    19d8:	ce 0f       	add	r28, r30
    19da:	d1 1d       	adc	r29, r1
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	de bf       	out	0x3e, r29	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	cd bf       	out	0x3d, r28	; 61
    19e6:	ed 01       	movw	r28, r26
    19e8:	08 95       	ret

000019ea <_exit>:
    19ea:	f8 94       	cli

000019ec <__stop_program>:
    19ec:	ff cf       	rjmp	.-2      	; 0x19ec <__stop_program>
