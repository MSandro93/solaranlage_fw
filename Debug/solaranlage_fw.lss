
solaranlage_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000890  00000924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006c  0080006c  00000930  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000009a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c7f  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000885  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000acf  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00002b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bb  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f0  00000000  00000000  00003483  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_1>
   8:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 02 	call	0x4b0	; 0x4b0 <main>
  8a:	0c 94 46 04 	jmp	0x88c	; 0x88c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SevenSeg_init>:
uint8_t seg_cnt = 0;
uint8_t on = 0;


void SevenSeg_init()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	TIMSK = (1<<TOIE0);	//enable overflow-interrupt
  9a:	89 e5       	ldi	r24, 0x59	; 89
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	
	sei();
  a4:	78 94       	sei
}
  a6:	00 00       	nop
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	08 95       	ret

000000ae <SevenSeg_set_val>:

//seg: 1=dach; 0=kessel;   val: 0-9: 0-9; 10: off
void SevenSeg_set_val(uint8_t seg, uint16_t val)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <SevenSeg_set_val+0x6>
  b4:	00 d0       	rcall	.+0      	; 0xb6 <SevenSeg_set_val+0x8>
  b6:	00 d0       	rcall	.+0      	; 0xb8 <SevenSeg_set_val+0xa>
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	8c 83       	std	Y+4, r24	; 0x04
  be:	7e 83       	std	Y+6, r23	; 0x06
  c0:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t h = (uint8_t) (val/100);
  c2:	8d 81       	ldd	r24, Y+5	; 0x05
  c4:	9e 81       	ldd	r25, Y+6	; 0x06
  c6:	96 95       	lsr	r25
  c8:	87 95       	ror	r24
  ca:	96 95       	lsr	r25
  cc:	87 95       	ror	r24
  ce:	9c 01       	movw	r18, r24
  d0:	ab e7       	ldi	r26, 0x7B	; 123
  d2:	b4 e1       	ldi	r27, 0x14	; 20
  d4:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
  d8:	96 95       	lsr	r25
  da:	87 95       	ror	r24
  dc:	89 83       	std	Y+1, r24	; 0x01
	uint8_t z = (uint8_t) ((val- (h*100)) / 10 );
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	88 2f       	mov	r24, r24
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	4c e9       	ldi	r20, 0x9C	; 156
  e6:	bc 01       	movw	r22, r24
  e8:	46 03       	mulsu	r20, r22
  ea:	90 01       	movw	r18, r0
  ec:	47 9f       	mul	r20, r23
  ee:	30 0d       	add	r19, r0
  f0:	11 24       	eor	r1, r1
  f2:	8d 81       	ldd	r24, Y+5	; 0x05
  f4:	9e 81       	ldd	r25, Y+6	; 0x06
  f6:	82 0f       	add	r24, r18
  f8:	93 1f       	adc	r25, r19
  fa:	9c 01       	movw	r18, r24
  fc:	ad ec       	ldi	r26, 0xCD	; 205
  fe:	bc ec       	ldi	r27, 0xCC	; 204
 100:	0e 94 1e 04 	call	0x83c	; 0x83c <__umulhisi3>
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	96 95       	lsr	r25
 10a:	87 95       	ror	r24
 10c:	96 95       	lsr	r25
 10e:	87 95       	ror	r24
 110:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t e = (uint8_t)  (val- (h*100)- (z*10));
 112:	9d 81       	ldd	r25, Y+5	; 0x05
 114:	29 81       	ldd	r18, Y+1	; 0x01
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	28 9f       	mul	r18, r24
 11a:	80 2d       	mov	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	98 1b       	sub	r25, r24
 120:	8a 81       	ldd	r24, Y+2	; 0x02
 122:	88 0f       	add	r24, r24
 124:	28 2f       	mov	r18, r24
 126:	22 0f       	add	r18, r18
 128:	22 0f       	add	r18, r18
 12a:	82 0f       	add	r24, r18
 12c:	79 2f       	mov	r23, r25
 12e:	78 1b       	sub	r23, r24
 130:	87 2f       	mov	r24, r23
 132:	8b 83       	std	Y+3, r24	; 0x03
	
	if(val==1000)
 134:	8d 81       	ldd	r24, Y+5	; 0x05
 136:	9e 81       	ldd	r25, Y+6	; 0x06
 138:	88 3e       	cpi	r24, 0xE8	; 232
 13a:	93 40       	sbci	r25, 0x03	; 3
 13c:	39 f5       	brne	.+78     	; 0x18c <SevenSeg_set_val+0xde>
	{
		segs[seg]   = 10;
 13e:	8c 81       	ldd	r24, Y+4	; 0x04
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	84 59       	subi	r24, 0x94	; 148
 14a:	9f 4f       	sbci	r25, 0xFF	; 255
 14c:	2a e0       	ldi	r18, 0x0A	; 10
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	31 83       	std	Z+1, r19	; 0x01
 154:	20 83       	st	Z, r18
		segs[seg+2] = 10;
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	02 96       	adiw	r24, 0x02	; 2
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	84 59       	subi	r24, 0x94	; 148
 164:	9f 4f       	sbci	r25, 0xFF	; 255
 166:	2a e0       	ldi	r18, 0x0A	; 10
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	fc 01       	movw	r30, r24
 16c:	31 83       	std	Z+1, r19	; 0x01
 16e:	20 83       	st	Z, r18
		segs[seg+4] = 10;
 170:	8c 81       	ldd	r24, Y+4	; 0x04
 172:	88 2f       	mov	r24, r24
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	04 96       	adiw	r24, 0x04	; 4
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	84 59       	subi	r24, 0x94	; 148
 17e:	9f 4f       	sbci	r25, 0xFF	; 255
 180:	2a e0       	ldi	r18, 0x0A	; 10
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	31 83       	std	Z+1, r19	; 0x01
 188:	20 83       	st	Z, r18
		return;
 18a:	29 c0       	rjmp	.+82     	; 0x1de <SevenSeg_set_val+0x130>
	}
	
	segs[seg]   = e;
 18c:	8c 81       	ldd	r24, Y+4	; 0x04
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b 81       	ldd	r18, Y+3	; 0x03
 194:	22 2f       	mov	r18, r18
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	84 59       	subi	r24, 0x94	; 148
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	fc 01       	movw	r30, r24
 1a2:	31 83       	std	Z+1, r19	; 0x01
 1a4:	20 83       	st	Z, r18
	segs[seg+2] = z;
 1a6:	8c 81       	ldd	r24, Y+4	; 0x04
 1a8:	88 2f       	mov	r24, r24
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 96       	adiw	r24, 0x02	; 2
 1ae:	2a 81       	ldd	r18, Y+2	; 0x02
 1b0:	22 2f       	mov	r18, r18
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	84 59       	subi	r24, 0x94	; 148
 1ba:	9f 4f       	sbci	r25, 0xFF	; 255
 1bc:	fc 01       	movw	r30, r24
 1be:	31 83       	std	Z+1, r19	; 0x01
 1c0:	20 83       	st	Z, r18
	segs[seg+4] = h;
 1c2:	8c 81       	ldd	r24, Y+4	; 0x04
 1c4:	88 2f       	mov	r24, r24
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	04 96       	adiw	r24, 0x04	; 4
 1ca:	29 81       	ldd	r18, Y+1	; 0x01
 1cc:	22 2f       	mov	r18, r18
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	84 59       	subi	r24, 0x94	; 148
 1d6:	9f 4f       	sbci	r25, 0xFF	; 255
 1d8:	fc 01       	movw	r30, r24
 1da:	31 83       	std	Z+1, r19	; 0x01
 1dc:	20 83       	st	Z, r18
}
 1de:	26 96       	adiw	r28, 0x06	; 6
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	f8 94       	cli
 1e4:	de bf       	out	0x3e, r29	; 62
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	cd bf       	out	0x3d, r28	; 61
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	1f 92       	push	r1
 20e:	cd b7       	in	r28, 0x3d	; 61
 210:	de b7       	in	r29, 0x3e	; 62
	cli();
 212:	f8 94       	cli

	
//	PORTD ^= (1<<PD5);
	
	PORTB = patterns[segs[seg_cnt]];
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <seg_cnt>
 21c:	22 2f       	mov	r18, r18
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	22 0f       	add	r18, r18
 222:	33 1f       	adc	r19, r19
 224:	24 59       	subi	r18, 0x94	; 148
 226:	3f 4f       	sbci	r19, 0xFF	; 255
 228:	f9 01       	movw	r30, r18
 22a:	20 81       	ld	r18, Z
 22c:	31 81       	ldd	r19, Z+1	; 0x01
 22e:	20 5a       	subi	r18, 0xA0	; 160
 230:	3f 4f       	sbci	r19, 0xFF	; 255
 232:	f9 01       	movw	r30, r18
 234:	20 81       	ld	r18, Z
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
	
	uint8_t a = (uint8_t) (~(1<<(seg_cnt + 2)));
 23a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seg_cnt>
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	9c 01       	movw	r18, r24
 244:	2e 5f       	subi	r18, 0xFE	; 254
 246:	3f 4f       	sbci	r19, 0xFF	; 255
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <__vector_11+0x62>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	2a 95       	dec	r18
 254:	e2 f7       	brpl	.-8      	; 0x24e <__vector_11+0x5e>
 256:	80 95       	com	r24
 258:	89 83       	std	Y+1, r24	; 0x01
	PORTA = a;
 25a:	8b e3       	ldi	r24, 0x3B	; 59
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	29 81       	ldd	r18, Y+1	; 0x01
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18
	seg_cnt ++;
 264:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seg_cnt>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <seg_cnt>
	
	if(seg_cnt == 6)
 26e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <seg_cnt>
 272:	86 30       	cpi	r24, 0x06	; 6
 274:	11 f4       	brne	.+4      	; 0x27a <__vector_11+0x8a>
	{
		seg_cnt = 0;
 276:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <seg_cnt>
	}
	
	TIFR &= ~(1<<TOV0);
 27a:	88 e5       	ldi	r24, 0x58	; 88
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	28 e5       	ldi	r18, 0x58	; 88
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	f9 01       	movw	r30, r18
 284:	20 81       	ld	r18, Z
 286:	2e 7f       	andi	r18, 0xFE	; 254
 288:	fc 01       	movw	r30, r24
 28a:	20 83       	st	Z, r18
	
	sei();
 28c:	78 94       	sei
}
 28e:	00 00       	nop
 290:	0f 90       	pop	r0
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	3f 91       	pop	r19
 2a0:	2f 91       	pop	r18
 2a2:	0f 90       	pop	r0
 2a4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <SevenSeg_on>:


void SevenSeg_on()
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01) | (1<<CS00);		//setting prescaler to /256
 2b6:	83 e5       	ldi	r24, 0x53	; 83
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	23 e0       	ldi	r18, 0x03	; 3
 2bc:	fc 01       	movw	r30, r24
 2be:	20 83       	st	Z, r18
	on = 1;
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <on>
}
 2c6:	00 00       	nop
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	08 95       	ret

000002ce <SevenSeg_off>:

void SevenSeg_off()
{
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	cd b7       	in	r28, 0x3d	; 61
 2d4:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~((1<<CS01) | (1<<CS00));		//setting prescaler to /256
 2d6:	83 e5       	ldi	r24, 0x53	; 83
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	23 e5       	ldi	r18, 0x53	; 83
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	20 81       	ld	r18, Z
 2e2:	2c 7f       	andi	r18, 0xFC	; 252
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
	PORTB = 0x00;
 2e8:	88 e3       	ldi	r24, 0x38	; 56
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	10 82       	st	Z, r1
	PORTA = 0xFF;
 2f0:	8b e3       	ldi	r24, 0x3B	; 59
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
	on = 0;
 2fa:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <on>
}
 2fe:	00 00       	nop
 300:	df 91       	pop	r29
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <Encoder_init>:

uint8_t selected_seg = 1;


void Encoder_init()
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
	ENC_PORT &= ~((1<<ENC_A_PIN) | (1<<ENC_A_PIN));							//setting encoder terminals to input
 30e:	82 e3       	ldi	r24, 0x32	; 50
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	22 e3       	ldi	r18, 0x32	; 50
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	f9 01       	movw	r30, r18
 318:	20 81       	ld	r18, Z
 31a:	2b 7f       	andi	r18, 0xFB	; 251
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
	MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11);				//setting ext-int0 to sensitive at rising edge
 320:	85 e5       	ldi	r24, 0x55	; 85
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	25 e5       	ldi	r18, 0x55	; 85
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	f9 01       	movw	r30, r18
 32a:	20 81       	ld	r18, Z
 32c:	2b 60       	ori	r18, 0x0B	; 11
 32e:	fc 01       	movw	r30, r24
 330:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1);											//enable external interrupt 0 (ENC_A_PIN)
 332:	8b e5       	ldi	r24, 0x5B	; 91
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	2b e5       	ldi	r18, 0x5B	; 91
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	f9 01       	movw	r30, r18
 33c:	20 81       	ld	r18, Z
 33e:	20 6c       	ori	r18, 0xC0	; 192
 340:	fc 01       	movw	r30, r24
 342:	20 83       	st	Z, r18
	sei();
 344:	78 94       	sei
}
 346:	00 00       	nop
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	08 95       	ret

0000034e <__vector_1>:



ISR(INT0_vect)
{	
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 356:	0f 92       	push	r0
 358:	11 24       	eor	r1, r1
 35a:	2f 93       	push	r18
 35c:	3f 93       	push	r19
 35e:	4f 93       	push	r20
 360:	5f 93       	push	r21
 362:	6f 93       	push	r22
 364:	7f 93       	push	r23
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	af 93       	push	r26
 36c:	bf 93       	push	r27
 36e:	ef 93       	push	r30
 370:	ff 93       	push	r31
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	cli();
 37a:	f8 94       	cli
	
	switch(getState())
 37c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <getState>
 380:	88 2f       	mov	r24, r24
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	03 97       	sbiw	r24, 0x03	; 3
 386:	09 f0       	breq	.+2      	; 0x38a <__vector_1+0x3c>
			{				
				dec_delta();
			}
		}
		default:
			break;
 388:	10 c0       	rjmp	.+32     	; 0x3aa <__vector_1+0x5c>
	
	switch(getState())
	{
		case 3:	
		{	
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
 38a:	80 e3       	ldi	r24, 0x30	; 48
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	fc 01       	movw	r30, r24
 390:	80 81       	ld	r24, Z
 392:	88 2f       	mov	r24, r24
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	80 71       	andi	r24, 0x10	; 16
 398:	99 27       	eor	r25, r25
 39a:	18 16       	cp	r1, r24
 39c:	19 06       	cpc	r1, r25
 39e:	1c f4       	brge	.+6      	; 0x3a6 <__vector_1+0x58>
			{
				inc_delta();
 3a0:	0e 94 09 03 	call	0x612	; 0x612 <inc_delta>
			{				
				dec_delta();
			}
		}
		default:
			break;
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <__vector_1+0x5c>
			{
				inc_delta();
			}		
			else									//im Uhrzeigersinn
			{				
				dec_delta();
 3a6:	0e 94 1a 03 	call	0x634	; 0x634 <dec_delta>
			}
		}
		default:
			break;
 3aa:	00 00       	nop
	}
	
	stop_timeout_timer();
 3ac:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <stop_timeout_timer>
	start_timeout_timer();
 3b0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <start_timeout_timer>
	
	
	GIFR &= ~(1<<INTF0);  //clear ext-interrupt-0 flag
 3b4:	8a e5       	ldi	r24, 0x5A	; 90
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	2a e5       	ldi	r18, 0x5A	; 90
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	f9 01       	movw	r30, r18
 3be:	20 81       	ld	r18, Z
 3c0:	2f 7b       	andi	r18, 0xBF	; 191
 3c2:	fc 01       	movw	r30, r24
 3c4:	20 83       	st	Z, r18
	
	sei();
 3c6:	78 94       	sei
}
 3c8:	00 00       	nop
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <__vector_2>:

ISR(INT1_vect)  //if the encoder got pushed
{
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3fa:	0f 92       	push	r0
 3fc:	11 24       	eor	r1, r1
 3fe:	1f 93       	push	r17
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	6f 93       	push	r22
 40a:	7f 93       	push	r23
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	af 93       	push	r26
 412:	bf 93       	push	r27
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62
	cli();
 420:	f8 94       	cli
	
	switch(getState())
 422:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <getState>
 426:	88 2f       	mov	r24, r24
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	82 30       	cpi	r24, 0x02	; 2
 42c:	91 05       	cpc	r25, r1
 42e:	59 f0       	breq	.+22     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 430:	83 30       	cpi	r24, 0x03	; 3
 432:	91 05       	cpc	r25, r1
 434:	71 f0       	breq	.+28     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	21 f5       	brne	.+72     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
	{
		case 1:
		{
			setState(2);
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <setState>
			start_timeout_timer();
 440:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <start_timeout_timer>
			break;
 444:	1e c0       	rjmp	.+60     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		}
		case 2:
		{
			setState(3);
 446:	83 e0       	ldi	r24, 0x03	; 3
 448:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <setState>
			start_timeout_timer();
 44c:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <start_timeout_timer>
			break;
 450:	18 c0       	rjmp	.+48     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		}
		case 3:
		{
			if((getState() == 3) && (eeprom_read_byte(0) != get_delta()))
 452:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <getState>
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	81 f4       	brne	.+32     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 2d 04 	call	0x85a	; 0x85a <eeprom_read_byte>
 462:	18 2f       	mov	r17, r24
 464:	0e 94 2b 03 	call	0x656	; 0x656 <get_delta>
 468:	18 17       	cp	r17, r24
 46a:	39 f0       	breq	.+14     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			{
				eeprom_update_byte(0, get_delta());
 46c:	0e 94 2b 03 	call	0x656	; 0x656 <get_delta>
 470:	68 2f       	mov	r22, r24
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 35 04 	call	0x86a	; 0x86a <eeprom_update_byte>
			}
			setState(2);
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <setState>
			break;
 480:	00 00       	nop
		}
	}
	
	sei();
 482:	78 94       	sei
 484:	00 00       	nop
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	ff 91       	pop	r31
 48c:	ef 91       	pop	r30
 48e:	bf 91       	pop	r27
 490:	af 91       	pop	r26
 492:	9f 91       	pop	r25
 494:	8f 91       	pop	r24
 496:	7f 91       	pop	r23
 498:	6f 91       	pop	r22
 49a:	5f 91       	pop	r21
 49c:	4f 91       	pop	r20
 49e:	3f 91       	pop	r19
 4a0:	2f 91       	pop	r18
 4a2:	1f 91       	pop	r17
 4a4:	0f 90       	pop	r0
 4a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4aa:	0f 90       	pop	r0
 4ac:	1f 90       	pop	r1
 4ae:	18 95       	reti

000004b0 <main>:

uint8_t state = 0;


int main(void)
{
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	cd b7       	in	r28, 0x3d	; 61
 4b6:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
 4b8:	8b e3       	ldi	r24, 0x3B	; 59
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	fc 01       	movw	r30, r24
 4be:	10 82       	st	Z, r1
	PORTB = 0x00;
 4c0:	88 e3       	ldi	r24, 0x38	; 56
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	fc 01       	movw	r30, r24
 4c6:	10 82       	st	Z, r1
	
	DDRA = 0xFF;
 4c8:	8a e3       	ldi	r24, 0x3A	; 58
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	2f ef       	ldi	r18, 0xFF	; 255
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
	DDRB = 0xFF;
 4d2:	87 e3       	ldi	r24, 0x37	; 55
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	2f ef       	ldi	r18, 0xFF	; 255
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
	DDRC |= (1<<WDI_PIN);
 4dc:	84 e3       	ldi	r24, 0x34	; 52
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	24 e3       	ldi	r18, 0x34	; 52
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	f9 01       	movw	r30, r18
 4e6:	20 81       	ld	r18, Z
 4e8:	20 64       	ori	r18, 0x40	; 64
 4ea:	fc 01       	movw	r30, r24
 4ec:	20 83       	st	Z, r18
	DDRD |= (1<<PD5);
 4ee:	81 e3       	ldi	r24, 0x31	; 49
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	21 e3       	ldi	r18, 0x31	; 49
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	f9 01       	movw	r30, r18
 4f8:	20 81       	ld	r18, Z
 4fa:	20 62       	ori	r18, 0x20	; 32
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 83       	st	Z, r18
	
	uart_init(0);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	70 e0       	ldi	r23, 0x00	; 0
 504:	cb 01       	movw	r24, r22
 506:	0e 94 c8 03 	call	0x790	; 0x790 <uart_init>
	regulator_init();
 50a:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <regulator_init>
	
	SevenSeg_init();
 50e:	0e 94 49 00 	call	0x92	; 0x92 <SevenSeg_init>
	SevenSeg_set_val(1, 123);
 512:	6b e7       	ldi	r22, 0x7B	; 123
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 57 00 	call	0xae	; 0xae <SevenSeg_set_val>
	SevenSeg_set_val(0, 1000);
 51c:	68 ee       	ldi	r22, 0xE8	; 232
 51e:	73 e0       	ldi	r23, 0x03	; 3
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 57 00 	call	0xae	; 0xae <SevenSeg_set_val>
	
	Timeout_init();
 526:	0e 94 44 03 	call	0x688	; 0x688 <Timeout_init>
	Encoder_init();
 52a:	0e 94 83 01 	call	0x306	; 0x306 <Encoder_init>
	
    /* Replace with your application code */
    while (1) 
    {
		switch(state)
 52e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <state>
 532:	88 2f       	mov	r24, r24
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	91 05       	cpc	r25, r1
 53a:	91 f0       	breq	.+36     	; 0x560 <main+0xb0>
 53c:	82 30       	cpi	r24, 0x02	; 2
 53e:	91 05       	cpc	r25, r1
 540:	1c f4       	brge	.+6      	; 0x548 <main+0x98>
 542:	89 2b       	or	r24, r25
 544:	39 f0       	breq	.+14     	; 0x554 <main+0xa4>
 546:	32 c0       	rjmp	.+100    	; 0x5ac <main+0xfc>
 548:	82 30       	cpi	r24, 0x02	; 2
 54a:	91 05       	cpc	r25, r1
 54c:	61 f0       	breq	.+24     	; 0x566 <main+0xb6>
 54e:	03 97       	sbiw	r24, 0x03	; 3
 550:	f9 f0       	breq	.+62     	; 0x590 <main+0xe0>
 552:	2c c0       	rjmp	.+88     	; 0x5ac <main+0xfc>
		{
			case 0:
			{
				SevenSeg_off();
 554:	0e 94 67 01 	call	0x2ce	; 0x2ce <SevenSeg_off>
				setState(1);
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <setState>
				break;
 55e:	26 c0       	rjmp	.+76     	; 0x5ac <main+0xfc>
			}
			
			case 1:
			{
				SevenSeg_off();
 560:	0e 94 67 01 	call	0x2ce	; 0x2ce <SevenSeg_off>
				break;
 564:	23 c0       	rjmp	.+70     	; 0x5ac <main+0xfc>
			}
				
			case 2:
			{
				SevenSeg_set_val(1, get_temp(1));
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 34 03 	call	0x668	; 0x668 <get_temp>
 56c:	88 2f       	mov	r24, r24
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	bc 01       	movw	r22, r24
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 57 00 	call	0xae	; 0xae <SevenSeg_set_val>
				SevenSeg_set_val(0, get_temp(0));
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	0e 94 34 03 	call	0x668	; 0x668 <get_temp>
 57e:	88 2f       	mov	r24, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	bc 01       	movw	r22, r24
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	0e 94 57 00 	call	0xae	; 0xae <SevenSeg_set_val>
				SevenSeg_on();
 58a:	0e 94 57 01 	call	0x2ae	; 0x2ae <SevenSeg_on>
				break;
 58e:	0e c0       	rjmp	.+28     	; 0x5ac <main+0xfc>
			}
			
			case 3: 
			{
				SevenSeg_set_val(1, get_delta());
 590:	0e 94 2b 03 	call	0x656	; 0x656 <get_delta>
 594:	88 2f       	mov	r24, r24
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	bc 01       	movw	r22, r24
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	0e 94 57 00 	call	0xae	; 0xae <SevenSeg_set_val>
				SevenSeg_set_val(0, 1000); //set Kessel-display off
 5a0:	68 ee       	ldi	r22, 0xE8	; 232
 5a2:	73 e0       	ldi	r23, 0x03	; 3
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	0e 94 57 00 	call	0xae	; 0xae <SevenSeg_set_val>
				break;
 5aa:	00 00       	nop
			}
		}
		
		WDI_PORT ^= (1<<WDI_PIN);
 5ac:	85 e3       	ldi	r24, 0x35	; 53
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	25 e3       	ldi	r18, 0x35	; 53
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	30 81       	ld	r19, Z
 5b8:	20 e4       	ldi	r18, 0x40	; 64
 5ba:	23 27       	eor	r18, r19
 5bc:	fc 01       	movw	r30, r24
 5be:	20 83       	st	Z, r18
    }
 5c0:	b6 cf       	rjmp	.-148    	; 0x52e <main+0x7e>

000005c2 <setState>:
}

void setState(uint8_t s)
{
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	1f 92       	push	r1
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	89 83       	std	Y+1, r24	; 0x01
	state = s;
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <state>
	uart_send_blocking(s);
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <uart_send_blocking>
}
 5da:	00 00       	nop
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <getState>:

uint8_t getState()
{
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	cd b7       	in	r28, 0x3d	; 61
 5ea:	de b7       	in	r29, 0x3e	; 62
	return state;
 5ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <state>
}
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	08 95       	ret

000005f6 <regulator_init>:
}

void disable_show_temps(void)
{
	show_temps = 0;
}
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 2d 04 	call	0x85a	; 0x85a <eeprom_read_byte>
 606:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <delta>
 60a:	00 00       	nop
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	08 95       	ret

00000612 <inc_delta>:

void inc_delta()
{
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
	if(delta<100)
 61a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <delta>
 61e:	84 36       	cpi	r24, 0x64	; 100
 620:	28 f4       	brcc	.+10     	; 0x62c <inc_delta+0x1a>
		delta++;
 622:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <delta>
 626:	8f 5f       	subi	r24, 0xFF	; 255
 628:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <delta>
}
 62c:	00 00       	nop
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret

00000634 <dec_delta>:

void dec_delta()
{
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	cd b7       	in	r28, 0x3d	; 61
 63a:	de b7       	in	r29, 0x3e	; 62
	if(delta>0)
 63c:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <delta>
 640:	88 23       	and	r24, r24
 642:	29 f0       	breq	.+10     	; 0x64e <dec_delta+0x1a>
		delta --;
 644:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <delta>
 648:	81 50       	subi	r24, 0x01	; 1
 64a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <delta>
}
 64e:	00 00       	nop
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	08 95       	ret

00000656 <get_delta>:

uint8_t get_delta()
{
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	cd b7       	in	r28, 0x3d	; 61
 65c:	de b7       	in	r29, 0x3e	; 62
	return delta;
 65e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <delta>
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <get_temp>:


//sensor: 1=dach; 0=kessel
uint8_t get_temp(uint8_t sensor)
{
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	1f 92       	push	r1
 66e:	cd b7       	in	r28, 0x3d	; 61
 670:	de b7       	in	r29, 0x3e	; 62
 672:	89 83       	std	Y+1, r24	; 0x01
	if(sensor==0)
 674:	89 81       	ldd	r24, Y+1	; 0x01
 676:	88 23       	and	r24, r24
 678:	11 f4       	brne	.+4      	; 0x67e <get_temp+0x16>
		return 111;	//dummy
 67a:	8f e6       	ldi	r24, 0x6F	; 111
 67c:	01 c0       	rjmp	.+2      	; 0x680 <get_temp+0x18>
	else
		return 222;	//dummy
 67e:	8e ed       	ldi	r24, 0xDE	; 222
 680:	0f 90       	pop	r0
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	08 95       	ret

00000688 <Timeout_init>:
#include <avr/eeprom.h>
#include "main.h"
#include "regulator.h"

void Timeout_init()
{
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00;
 690:	8f e4       	ldi	r24, 0x4F	; 79
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	fc 01       	movw	r30, r24
 696:	10 82       	st	Z, r1
	
	TIMSK |= (1<<TOIE1);			//enable overflow-event
 698:	89 e5       	ldi	r24, 0x59	; 89
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	29 e5       	ldi	r18, 0x59	; 89
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	f9 01       	movw	r30, r18
 6a2:	20 81       	ld	r18, Z
 6a4:	24 60       	ori	r18, 0x04	; 4
 6a6:	fc 01       	movw	r30, r24
 6a8:	20 83       	st	Z, r18
	sei();
 6aa:	78 94       	sei
}
 6ac:	00 00       	nop
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <start_timeout_timer>:
void start_timeout_timer()
{
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						 //reset timer counter value
 6bc:	8c e4       	ldi	r24, 0x4C	; 76
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	fc 01       	movw	r30, r24
 6c2:	11 82       	std	Z+1, r1	; 0x01
 6c4:	10 82       	st	Z, r1
	TCCR1B = (1<<CS12) | (1<<CS10);  //start timer at prescaler /1024
 6c6:	8e e4       	ldi	r24, 0x4E	; 78
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	25 e0       	ldi	r18, 0x05	; 5
 6cc:	fc 01       	movw	r30, r24
 6ce:	20 83       	st	Z, r18
}
 6d0:	00 00       	nop
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	08 95       	ret

000006d8 <stop_timeout_timer>:

void stop_timeout_timer()
{
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = ~((1<<CS12) | (1<<CS10)); //stop timer
 6e0:	8e e4       	ldi	r24, 0x4E	; 78
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	2a ef       	ldi	r18, 0xFA	; 250
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
}
 6ea:	00 00       	nop
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	08 95       	ret

000006f2 <__vector_9>:




ISR(TIMER1_OVF_vect)
{
 6f2:	1f 92       	push	r1
 6f4:	0f 92       	push	r0
 6f6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 6fa:	0f 92       	push	r0
 6fc:	11 24       	eor	r1, r1
 6fe:	1f 93       	push	r17
 700:	2f 93       	push	r18
 702:	3f 93       	push	r19
 704:	4f 93       	push	r20
 706:	5f 93       	push	r21
 708:	6f 93       	push	r22
 70a:	7f 93       	push	r23
 70c:	8f 93       	push	r24
 70e:	9f 93       	push	r25
 710:	af 93       	push	r26
 712:	bf 93       	push	r27
 714:	ef 93       	push	r30
 716:	ff 93       	push	r31
 718:	cf 93       	push	r28
 71a:	df 93       	push	r29
 71c:	cd b7       	in	r28, 0x3d	; 61
 71e:	de b7       	in	r29, 0x3e	; 62
	cli();
 720:	f8 94       	cli
	
	if((getState() == 3) && (eeprom_read_byte(0) != get_delta()))
 722:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <getState>
 726:	83 30       	cpi	r24, 0x03	; 3
 728:	81 f4       	brne	.+32     	; 0x74a <__vector_9+0x58>
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0e 94 2d 04 	call	0x85a	; 0x85a <eeprom_read_byte>
 732:	18 2f       	mov	r17, r24
 734:	0e 94 2b 03 	call	0x656	; 0x656 <get_delta>
 738:	18 17       	cp	r17, r24
 73a:	39 f0       	breq	.+14     	; 0x74a <__vector_9+0x58>
	{
		eeprom_update_byte((uint8_t*)(0), (uint8_t)get_delta());
 73c:	0e 94 2b 03 	call	0x656	; 0x656 <get_delta>
 740:	68 2f       	mov	r22, r24
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	0e 94 35 04 	call	0x86a	; 0x86a <eeprom_update_byte>
	}
	
	setState(1);
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <setState>
	
	TIFR &= ~(1<<TOV1);
 750:	88 e5       	ldi	r24, 0x58	; 88
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	28 e5       	ldi	r18, 0x58	; 88
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	f9 01       	movw	r30, r18
 75a:	20 81       	ld	r18, Z
 75c:	2b 7f       	andi	r18, 0xFB	; 251
 75e:	fc 01       	movw	r30, r24
 760:	20 83       	st	Z, r18
	sei();
 762:	78 94       	sei
 764:	00 00       	nop
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	ff 91       	pop	r31
 76c:	ef 91       	pop	r30
 76e:	bf 91       	pop	r27
 770:	af 91       	pop	r26
 772:	9f 91       	pop	r25
 774:	8f 91       	pop	r24
 776:	7f 91       	pop	r23
 778:	6f 91       	pop	r22
 77a:	5f 91       	pop	r21
 77c:	4f 91       	pop	r20
 77e:	3f 91       	pop	r19
 780:	2f 91       	pop	r18
 782:	1f 91       	pop	r17
 784:	0f 90       	pop	r0
 786:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 78a:	0f 90       	pop	r0
 78c:	1f 90       	pop	r1
 78e:	18 95       	reti

00000790 <uart_init>:
 */ 
#include <avr/io.h>


void uart_init(uint32_t baud)
{
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	00 d0       	rcall	.+0      	; 0x796 <uart_init+0x6>
 796:	00 d0       	rcall	.+0      	; 0x798 <uart_init+0x8>
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
 79c:	69 83       	std	Y+1, r22	; 0x01
 79e:	7a 83       	std	Y+2, r23	; 0x02
 7a0:	8b 83       	std	Y+3, r24	; 0x03
 7a2:	9c 83       	std	Y+4, r25	; 0x04
	UCSRB |= (1<<RXEN) | (1<<TXEN);  //enable receive and transmit
 7a4:	8a e2       	ldi	r24, 0x2A	; 42
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	2a e2       	ldi	r18, 0x2A	; 42
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	f9 01       	movw	r30, r18
 7ae:	20 81       	ld	r18, Z
 7b0:	28 61       	ori	r18, 0x18	; 24
 7b2:	fc 01       	movw	r30, r24
 7b4:	20 83       	st	Z, r18
	UBRRL = 51;						 //setting datarate to 9600 baud/s
 7b6:	89 e2       	ldi	r24, 0x29	; 41
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	23 e3       	ldi	r18, 0x33	; 51
 7bc:	fc 01       	movw	r30, r24
 7be:	20 83       	st	Z, r18

	UCSRB |= (1<<RXEN) | (1<<TXEN);
 7c0:	8a e2       	ldi	r24, 0x2A	; 42
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	2a e2       	ldi	r18, 0x2A	; 42
 7c6:	30 e0       	ldi	r19, 0x00	; 0
 7c8:	f9 01       	movw	r30, r18
 7ca:	20 81       	ld	r18, Z
 7cc:	28 61       	ori	r18, 0x18	; 24
 7ce:	fc 01       	movw	r30, r24
 7d0:	20 83       	st	Z, r18

	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
 7d2:	80 e4       	ldi	r24, 0x40	; 64
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	20 e4       	ldi	r18, 0x40	; 64
 7d8:	30 e0       	ldi	r19, 0x00	; 0
 7da:	f9 01       	movw	r30, r18
 7dc:	20 81       	ld	r18, Z
 7de:	26 68       	ori	r18, 0x86	; 134
 7e0:	fc 01       	movw	r30, r24
 7e2:	20 83       	st	Z, r18
}
 7e4:	00 00       	nop
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	08 95       	ret

000007f4 <uart_send_blocking>:


void uart_send_blocking(uint8_t data)
{
 7f4:	cf 93       	push	r28
 7f6:	df 93       	push	r29
 7f8:	1f 92       	push	r1
 7fa:	cd b7       	in	r28, 0x3d	; 61
 7fc:	de b7       	in	r29, 0x3e	; 62
 7fe:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
 800:	8c e2       	ldi	r24, 0x2C	; 44
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	29 81       	ldd	r18, Y+1	; 0x01
 806:	fc 01       	movw	r30, r24
 808:	20 83       	st	Z, r18
	while( (UCSRA & (1<<TXC)) == 0 ) //wait for transfer finished
 80a:	00 00       	nop
 80c:	8b e2       	ldi	r24, 0x2B	; 43
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	fc 01       	movw	r30, r24
 812:	80 81       	ld	r24, Z
 814:	88 2f       	mov	r24, r24
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	80 74       	andi	r24, 0x40	; 64
 81a:	99 27       	eor	r25, r25
 81c:	89 2b       	or	r24, r25
 81e:	b1 f3       	breq	.-20     	; 0x80c <uart_send_blocking+0x18>
	{
	}
	UCSRA &= ~(1<<TXC);
 820:	8b e2       	ldi	r24, 0x2B	; 43
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	2b e2       	ldi	r18, 0x2B	; 43
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	f9 01       	movw	r30, r18
 82a:	20 81       	ld	r18, Z
 82c:	2f 7b       	andi	r18, 0xBF	; 191
 82e:	fc 01       	movw	r30, r24
 830:	20 83       	st	Z, r18
 832:	00 00       	nop
 834:	0f 90       	pop	r0
 836:	df 91       	pop	r29
 838:	cf 91       	pop	r28
 83a:	08 95       	ret

0000083c <__umulhisi3>:
 83c:	a2 9f       	mul	r26, r18
 83e:	b0 01       	movw	r22, r0
 840:	b3 9f       	mul	r27, r19
 842:	c0 01       	movw	r24, r0
 844:	a3 9f       	mul	r26, r19
 846:	70 0d       	add	r23, r0
 848:	81 1d       	adc	r24, r1
 84a:	11 24       	eor	r1, r1
 84c:	91 1d       	adc	r25, r1
 84e:	b2 9f       	mul	r27, r18
 850:	70 0d       	add	r23, r0
 852:	81 1d       	adc	r24, r1
 854:	11 24       	eor	r1, r1
 856:	91 1d       	adc	r25, r1
 858:	08 95       	ret

0000085a <eeprom_read_byte>:
 85a:	e1 99       	sbic	0x1c, 1	; 28
 85c:	fe cf       	rjmp	.-4      	; 0x85a <eeprom_read_byte>
 85e:	9f bb       	out	0x1f, r25	; 31
 860:	8e bb       	out	0x1e, r24	; 30
 862:	e0 9a       	sbi	0x1c, 0	; 28
 864:	99 27       	eor	r25, r25
 866:	8d b3       	in	r24, 0x1d	; 29
 868:	08 95       	ret

0000086a <eeprom_update_byte>:
 86a:	26 2f       	mov	r18, r22

0000086c <eeprom_update_r18>:
 86c:	e1 99       	sbic	0x1c, 1	; 28
 86e:	fe cf       	rjmp	.-4      	; 0x86c <eeprom_update_r18>
 870:	9f bb       	out	0x1f, r25	; 31
 872:	8e bb       	out	0x1e, r24	; 30
 874:	e0 9a       	sbi	0x1c, 0	; 28
 876:	01 97       	sbiw	r24, 0x01	; 1
 878:	0d b2       	in	r0, 0x1d	; 29
 87a:	02 16       	cp	r0, r18
 87c:	31 f0       	breq	.+12     	; 0x88a <eeprom_update_r18+0x1e>
 87e:	2d bb       	out	0x1d, r18	; 29
 880:	0f b6       	in	r0, 0x3f	; 63
 882:	f8 94       	cli
 884:	e2 9a       	sbi	0x1c, 2	; 28
 886:	e1 9a       	sbi	0x1c, 1	; 28
 888:	0f be       	out	0x3f, r0	; 63
 88a:	08 95       	ret

0000088c <_exit>:
 88c:	f8 94       	cli

0000088e <__stop_program>:
 88e:	ff cf       	rjmp	.-2      	; 0x88e <__stop_program>
