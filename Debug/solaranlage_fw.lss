
solaranlage_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  000018e6  0000197a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  008000e8  008000e8  00001a02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fac  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a18  00000000  00000000  00002bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001831  00000000  00000000  00003614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00004e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006ef1  00000000  00000000  00005394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a83  00000000  00000000  0000c285  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000cd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d3b  00000000  00000000  0000ce18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_1>
       8:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 43 01 	jmp	0x286	; 0x286 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 30       	cpi	r26, 0x06	; 6
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 04 03 	call	0x608	; 0x608 <main>
      8a:	0c 94 71 0c 	jmp	0x18e2	; 0x18e2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SevenSeg_init>:
uint16_t kessel_anzeige = 0;
uint8_t on = 0;


void SevenSeg_init()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);	//enable overflow-interrupt
      9a:	89 e5       	ldi	r24, 0x59	; 89
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	29 e5       	ldi	r18, 0x59	; 89
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	f9 01       	movw	r30, r18
      a4:	20 81       	ld	r18, Z
      a6:	21 60       	ori	r18, 0x01	; 1
      a8:	fc 01       	movw	r30, r24
      aa:	20 83       	st	Z, r18
	
	sei();
      ac:	78 94       	sei
}
      ae:	00 00       	nop
      b0:	df 91       	pop	r29
      b2:	cf 91       	pop	r28
      b4:	08 95       	ret

000000b6 <SevenSeg_set_val>:

//seg: 1=dach; 0=kessel;   val: 0-9: 0-9; 10: off
void SevenSeg_set_val(uint8_t seg, uint16_t val)
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	00 d0       	rcall	.+0      	; 0xbc <SevenSeg_set_val+0x6>
      bc:	00 d0       	rcall	.+0      	; 0xbe <SevenSeg_set_val+0x8>
      be:	00 d0       	rcall	.+0      	; 0xc0 <SevenSeg_set_val+0xa>
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	8c 83       	std	Y+4, r24	; 0x04
      c6:	7e 83       	std	Y+6, r23	; 0x06
      c8:	6d 83       	std	Y+5, r22	; 0x05
	if(seg==1)
      ca:	8c 81       	ldd	r24, Y+4	; 0x04
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	09 f5       	brne	.+66     	; 0x112 <SevenSeg_set_val+0x5c>
	{
		if (val!=dach_anzeige)
      d0:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <dach_anzeige>
      d4:	90 91 f6 00 	lds	r25, 0x00F6	; 0x8000f6 <dach_anzeige+0x1>
      d8:	2d 81       	ldd	r18, Y+5	; 0x05
      da:	3e 81       	ldd	r19, Y+6	; 0x06
      dc:	28 17       	cp	r18, r24
      de:	39 07       	cpc	r19, r25
      e0:	d9 f1       	breq	.+118    	; 0x158 <SevenSeg_set_val+0xa2>
		{
			dach_anzeige = val;
      e2:	8d 81       	ldd	r24, Y+5	; 0x05
      e4:	9e 81       	ldd	r25, Y+6	; 0x06
      e6:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <dach_anzeige+0x1>
      ea:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <dach_anzeige>
			printf("segment 'dach' set to %d\n", val);
      ee:	8e 81       	ldd	r24, Y+6	; 0x06
      f0:	8f 93       	push	r24
      f2:	8d 81       	ldd	r24, Y+5	; 0x05
      f4:	8f 93       	push	r24
      f6:	89 e7       	ldi	r24, 0x79	; 121
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	89 2f       	mov	r24, r25
      fc:	8f 93       	push	r24
      fe:	89 e7       	ldi	r24, 0x79	; 121
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	8f 93       	push	r24
     104:	0e 94 4a 09 	call	0x1294	; 0x1294 <printf>
     108:	0f 90       	pop	r0
     10a:	0f 90       	pop	r0
     10c:	0f 90       	pop	r0
     10e:	0f 90       	pop	r0
     110:	23 c0       	rjmp	.+70     	; 0x158 <SevenSeg_set_val+0xa2>
		}
	}
	else if(seg==0)
     112:	8c 81       	ldd	r24, Y+4	; 0x04
     114:	88 23       	and	r24, r24
     116:	01 f5       	brne	.+64     	; 0x158 <SevenSeg_set_val+0xa2>
	{
		if(val!=kessel_anzeige)
     118:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <kessel_anzeige>
     11c:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <kessel_anzeige+0x1>
     120:	2d 81       	ldd	r18, Y+5	; 0x05
     122:	3e 81       	ldd	r19, Y+6	; 0x06
     124:	28 17       	cp	r18, r24
     126:	39 07       	cpc	r19, r25
     128:	b9 f0       	breq	.+46     	; 0x158 <SevenSeg_set_val+0xa2>
		{
			kessel_anzeige = val;
     12a:	8d 81       	ldd	r24, Y+5	; 0x05
     12c:	9e 81       	ldd	r25, Y+6	; 0x06
     12e:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <kessel_anzeige+0x1>
     132:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <kessel_anzeige>
			printf("segment 'kessel' set to %d\n", val);
     136:	8e 81       	ldd	r24, Y+6	; 0x06
     138:	8f 93       	push	r24
     13a:	8d 81       	ldd	r24, Y+5	; 0x05
     13c:	8f 93       	push	r24
     13e:	83 e9       	ldi	r24, 0x93	; 147
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	89 2f       	mov	r24, r25
     144:	8f 93       	push	r24
     146:	83 e9       	ldi	r24, 0x93	; 147
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	8f 93       	push	r24
     14c:	0e 94 4a 09 	call	0x1294	; 0x1294 <printf>
     150:	0f 90       	pop	r0
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
		}
	}
	
	uint8_t h = (uint8_t) (val/100);
     158:	8d 81       	ldd	r24, Y+5	; 0x05
     15a:	9e 81       	ldd	r25, Y+6	; 0x06
     15c:	96 95       	lsr	r25
     15e:	87 95       	ror	r24
     160:	96 95       	lsr	r25
     162:	87 95       	ror	r24
     164:	9c 01       	movw	r18, r24
     166:	ab e7       	ldi	r26, 0x7B	; 123
     168:	b4 e1       	ldi	r27, 0x14	; 20
     16a:	0e 94 3b 09 	call	0x1276	; 0x1276 <__umulhisi3>
     16e:	96 95       	lsr	r25
     170:	87 95       	ror	r24
     172:	89 83       	std	Y+1, r24	; 0x01
	uint8_t z = (uint8_t) ((val- (h*100)) / 10 );
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	88 2f       	mov	r24, r24
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	4c e9       	ldi	r20, 0x9C	; 156
     17c:	bc 01       	movw	r22, r24
     17e:	46 03       	mulsu	r20, r22
     180:	90 01       	movw	r18, r0
     182:	47 9f       	mul	r20, r23
     184:	30 0d       	add	r19, r0
     186:	11 24       	eor	r1, r1
     188:	8d 81       	ldd	r24, Y+5	; 0x05
     18a:	9e 81       	ldd	r25, Y+6	; 0x06
     18c:	82 0f       	add	r24, r18
     18e:	93 1f       	adc	r25, r19
     190:	9c 01       	movw	r18, r24
     192:	ad ec       	ldi	r26, 0xCD	; 205
     194:	bc ec       	ldi	r27, 0xCC	; 204
     196:	0e 94 3b 09 	call	0x1276	; 0x1276 <__umulhisi3>
     19a:	96 95       	lsr	r25
     19c:	87 95       	ror	r24
     19e:	96 95       	lsr	r25
     1a0:	87 95       	ror	r24
     1a2:	96 95       	lsr	r25
     1a4:	87 95       	ror	r24
     1a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t e = (uint8_t)  (val- (h*100)- (z*10));
     1a8:	9d 81       	ldd	r25, Y+5	; 0x05
     1aa:	29 81       	ldd	r18, Y+1	; 0x01
     1ac:	84 e6       	ldi	r24, 0x64	; 100
     1ae:	28 9f       	mul	r18, r24
     1b0:	80 2d       	mov	r24, r0
     1b2:	11 24       	eor	r1, r1
     1b4:	98 1b       	sub	r25, r24
     1b6:	8a 81       	ldd	r24, Y+2	; 0x02
     1b8:	88 0f       	add	r24, r24
     1ba:	28 2f       	mov	r18, r24
     1bc:	22 0f       	add	r18, r18
     1be:	22 0f       	add	r18, r18
     1c0:	82 0f       	add	r24, r18
     1c2:	79 2f       	mov	r23, r25
     1c4:	78 1b       	sub	r23, r24
     1c6:	87 2f       	mov	r24, r23
     1c8:	8b 83       	std	Y+3, r24	; 0x03
	
	if(val==1000)
     1ca:	8d 81       	ldd	r24, Y+5	; 0x05
     1cc:	9e 81       	ldd	r25, Y+6	; 0x06
     1ce:	88 3e       	cpi	r24, 0xE8	; 232
     1d0:	93 40       	sbci	r25, 0x03	; 3
     1d2:	39 f5       	brne	.+78     	; 0x222 <SevenSeg_set_val+0x16c>
	{
		segs[seg]   = 10;
     1d4:	8c 81       	ldd	r24, Y+4	; 0x04
     1d6:	88 2f       	mov	r24, r24
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	88 0f       	add	r24, r24
     1dc:	99 1f       	adc	r25, r25
     1de:	88 51       	subi	r24, 0x18	; 24
     1e0:	9f 4f       	sbci	r25, 0xFF	; 255
     1e2:	2a e0       	ldi	r18, 0x0A	; 10
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	31 83       	std	Z+1, r19	; 0x01
     1ea:	20 83       	st	Z, r18
		segs[seg+2] = 10;
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	88 2f       	mov	r24, r24
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	02 96       	adiw	r24, 0x02	; 2
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	88 51       	subi	r24, 0x18	; 24
     1fa:	9f 4f       	sbci	r25, 0xFF	; 255
     1fc:	2a e0       	ldi	r18, 0x0A	; 10
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	fc 01       	movw	r30, r24
     202:	31 83       	std	Z+1, r19	; 0x01
     204:	20 83       	st	Z, r18
		segs[seg+4] = 10;
     206:	8c 81       	ldd	r24, Y+4	; 0x04
     208:	88 2f       	mov	r24, r24
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	04 96       	adiw	r24, 0x04	; 4
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	88 51       	subi	r24, 0x18	; 24
     214:	9f 4f       	sbci	r25, 0xFF	; 255
     216:	2a e0       	ldi	r18, 0x0A	; 10
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	fc 01       	movw	r30, r24
     21c:	31 83       	std	Z+1, r19	; 0x01
     21e:	20 83       	st	Z, r18
		return;
     220:	29 c0       	rjmp	.+82     	; 0x274 <SevenSeg_set_val+0x1be>
	}
	
	segs[seg]   = e;
     222:	8c 81       	ldd	r24, Y+4	; 0x04
     224:	88 2f       	mov	r24, r24
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	2b 81       	ldd	r18, Y+3	; 0x03
     22a:	22 2f       	mov	r18, r18
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	88 51       	subi	r24, 0x18	; 24
     234:	9f 4f       	sbci	r25, 0xFF	; 255
     236:	fc 01       	movw	r30, r24
     238:	31 83       	std	Z+1, r19	; 0x01
     23a:	20 83       	st	Z, r18
	segs[seg+2] = z;
     23c:	8c 81       	ldd	r24, Y+4	; 0x04
     23e:	88 2f       	mov	r24, r24
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	02 96       	adiw	r24, 0x02	; 2
     244:	2a 81       	ldd	r18, Y+2	; 0x02
     246:	22 2f       	mov	r18, r18
     248:	30 e0       	ldi	r19, 0x00	; 0
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	88 51       	subi	r24, 0x18	; 24
     250:	9f 4f       	sbci	r25, 0xFF	; 255
     252:	fc 01       	movw	r30, r24
     254:	31 83       	std	Z+1, r19	; 0x01
     256:	20 83       	st	Z, r18
	segs[seg+4] = h;
     258:	8c 81       	ldd	r24, Y+4	; 0x04
     25a:	88 2f       	mov	r24, r24
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	04 96       	adiw	r24, 0x04	; 4
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	22 2f       	mov	r18, r18
     264:	30 e0       	ldi	r19, 0x00	; 0
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	88 51       	subi	r24, 0x18	; 24
     26c:	9f 4f       	sbci	r25, 0xFF	; 255
     26e:	fc 01       	movw	r30, r24
     270:	31 83       	std	Z+1, r19	; 0x01
     272:	20 83       	st	Z, r18
}
     274:	26 96       	adiw	r28, 0x06	; 6
     276:	0f b6       	in	r0, 0x3f	; 63
     278:	f8 94       	cli
     27a:	de bf       	out	0x3e, r29	; 62
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	cd bf       	out	0x3d, r28	; 61
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	08 95       	ret

00000286 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	2f 93       	push	r18
     294:	3f 93       	push	r19
     296:	8f 93       	push	r24
     298:	9f 93       	push	r25
     29a:	ef 93       	push	r30
     29c:	ff 93       	push	r31
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	1f 92       	push	r1
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
	cli();
     2a8:	f8 94       	cli
	
	if(segs[seg_cnt] < 10)
     2aa:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seg_cnt>
     2ae:	88 2f       	mov	r24, r24
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	88 0f       	add	r24, r24
     2b4:	99 1f       	adc	r25, r25
     2b6:	88 51       	subi	r24, 0x18	; 24
     2b8:	9f 4f       	sbci	r25, 0xFF	; 255
     2ba:	fc 01       	movw	r30, r24
     2bc:	80 81       	ld	r24, Z
     2be:	91 81       	ldd	r25, Z+1	; 0x01
     2c0:	0a 97       	sbiw	r24, 0x0a	; 10
     2c2:	98 f5       	brcc	.+102    	; 0x32a <__vector_11+0xa4>
		PORTB = patterns[segs[seg_cnt]];
     2c4:	88 e3       	ldi	r24, 0x38	; 56
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <seg_cnt>
     2cc:	22 2f       	mov	r18, r18
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	22 0f       	add	r18, r18
     2d2:	33 1f       	adc	r19, r19
     2d4:	28 51       	subi	r18, 0x18	; 24
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	f9 01       	movw	r30, r18
     2da:	20 81       	ld	r18, Z
     2dc:	31 81       	ldd	r19, Z+1	; 0x01
     2de:	20 5a       	subi	r18, 0xA0	; 160
     2e0:	3f 4f       	sbci	r19, 0xFF	; 255
     2e2:	f9 01       	movw	r30, r18
     2e4:	20 81       	ld	r18, Z
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
		}
		sei();
		return;
	}
	
	uint8_t a = (uint8_t) (~(1<<(seg_cnt + 2)));
     2ea:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seg_cnt>
     2ee:	88 2f       	mov	r24, r24
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	9c 01       	movw	r18, r24
     2f4:	2e 5f       	subi	r18, 0xFE	; 254
     2f6:	3f 4f       	sbci	r19, 0xFF	; 255
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <__vector_11+0x7c>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	2a 95       	dec	r18
     304:	e2 f7       	brpl	.-8      	; 0x2fe <__vector_11+0x78>
     306:	80 95       	com	r24
     308:	89 83       	std	Y+1, r24	; 0x01
	PORTA = a & 0xFC;	//mask to avoid ADC-channels 0 and 1
     30a:	8b e3       	ldi	r24, 0x3B	; 59
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	29 81       	ldd	r18, Y+1	; 0x01
     310:	2c 7f       	andi	r18, 0xFC	; 252
     312:	fc 01       	movw	r30, r24
     314:	20 83       	st	Z, r18
	seg_cnt ++;			//switching to next segment
     316:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seg_cnt>
     31a:	8f 5f       	subi	r24, 0xFF	; 255
     31c:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <seg_cnt>
	
	if(seg_cnt == 6)	//looping
     320:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seg_cnt>
     324:	86 30       	cpi	r24, 0x06	; 6
     326:	a1 f4       	brne	.+40     	; 0x350 <__vector_11+0xca>
     328:	11 c0       	rjmp	.+34     	; 0x34c <__vector_11+0xc6>
	
	if(segs[seg_cnt] < 10)
		PORTB = patterns[segs[seg_cnt]];
	else
	{
		PORTB = 0x00;
     32a:	88 e3       	ldi	r24, 0x38	; 56
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	fc 01       	movw	r30, r24
     330:	10 82       	st	Z, r1
		seg_cnt ++;
     332:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seg_cnt>
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <seg_cnt>
		
		if(seg_cnt == 6)	//looping
     33c:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seg_cnt>
     340:	86 30       	cpi	r24, 0x06	; 6
     342:	11 f4       	brne	.+4      	; 0x348 <__vector_11+0xc2>
		{
			seg_cnt = 0;
     344:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <seg_cnt>
		}
		sei();
     348:	78 94       	sei
		return;
     34a:	0c c0       	rjmp	.+24     	; 0x364 <__vector_11+0xde>
	PORTA = a & 0xFC;	//mask to avoid ADC-channels 0 and 1
	seg_cnt ++;			//switching to next segment
	
	if(seg_cnt == 6)	//looping
	{
		seg_cnt = 0;
     34c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <seg_cnt>
	}
	
	TIFR &= ~(1<<TOV0);	//clear timer0 overflow interrupt flag
     350:	88 e5       	ldi	r24, 0x58	; 88
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	28 e5       	ldi	r18, 0x58	; 88
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	2e 7f       	andi	r18, 0xFE	; 254
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
	
	sei();
     362:	78 94       	sei
}
     364:	0f 90       	pop	r0
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	ff 91       	pop	r31
     36c:	ef 91       	pop	r30
     36e:	9f 91       	pop	r25
     370:	8f 91       	pop	r24
     372:	3f 91       	pop	r19
     374:	2f 91       	pop	r18
     376:	0f 90       	pop	r0
     378:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <SevenSeg_on>:


void SevenSeg_on()
{
     382:	cf 93       	push	r28
     384:	df 93       	push	r29
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01) | (1<<CS00);		//setting prescaler to /256
     38a:	83 e5       	ldi	r24, 0x53	; 83
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	23 e0       	ldi	r18, 0x03	; 3
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18
	on = 1;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <on>
}
     39a:	00 00       	nop
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <SevenSeg_off>:

void SevenSeg_off()
{
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	cd b7       	in	r28, 0x3d	; 61
     3a8:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~((1<<CS01) | (1<<CS00));	//disable timer
     3aa:	83 e5       	ldi	r24, 0x53	; 83
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	23 e5       	ldi	r18, 0x53	; 83
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	f9 01       	movw	r30, r18
     3b4:	20 81       	ld	r18, Z
     3b6:	2c 7f       	andi	r18, 0xFC	; 252
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
	TCNT0 = 0;							//resetting counter
     3bc:	82 e5       	ldi	r24, 0x52	; 82
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	fc 01       	movw	r30, r24
     3c2:	10 82       	st	Z, r1
	PORTB = 0x00;
     3c4:	88 e3       	ldi	r24, 0x38	; 56
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fc 01       	movw	r30, r24
     3ca:	10 82       	st	Z, r1
	PORTA = 0xFC;
     3cc:	8b e3       	ldi	r24, 0x3B	; 59
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	2c ef       	ldi	r18, 0xFC	; 252
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
	on = 0;
     3d6:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <on>
}
     3da:	00 00       	nop
     3dc:	df 91       	pop	r29
     3de:	cf 91       	pop	r28
     3e0:	08 95       	ret

000003e2 <SevenSeg_get_state>:


uint8_t SevenSeg_get_state()
{
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
	return on;
     3ea:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <on>
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <Encoder_init>:

uint8_t selected_seg = 1;


void Encoder_init()
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
	ENC_PORT &= ~((1<<ENC_A_PIN) | (1<<ENC_A_PIN));							//setting encoder terminals to input
     3fc:	82 e3       	ldi	r24, 0x32	; 50
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	22 e3       	ldi	r18, 0x32	; 50
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	f9 01       	movw	r30, r18
     406:	20 81       	ld	r18, Z
     408:	2b 7f       	andi	r18, 0xFB	; 251
     40a:	fc 01       	movw	r30, r24
     40c:	20 83       	st	Z, r18
	MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11);				//setting ext-int0 to sensitive at rising edge
     40e:	85 e5       	ldi	r24, 0x55	; 85
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	25 e5       	ldi	r18, 0x55	; 85
     414:	30 e0       	ldi	r19, 0x00	; 0
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	2b 60       	ori	r18, 0x0B	; 11
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1);											//enable external interrupt 0 (ENC_A_PIN)
     420:	8b e5       	ldi	r24, 0x5B	; 91
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	2b e5       	ldi	r18, 0x5B	; 91
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	f9 01       	movw	r30, r18
     42a:	20 81       	ld	r18, Z
     42c:	20 6c       	ori	r18, 0xC0	; 192
     42e:	fc 01       	movw	r30, r24
     430:	20 83       	st	Z, r18
	sei();
     432:	78 94       	sei
}
     434:	00 00       	nop
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <__vector_1>:



ISR(INT0_vect)
{	
     43c:	1f 92       	push	r1
     43e:	0f 92       	push	r0
     440:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	2f 93       	push	r18
     44a:	3f 93       	push	r19
     44c:	4f 93       	push	r20
     44e:	5f 93       	push	r21
     450:	6f 93       	push	r22
     452:	7f 93       	push	r23
     454:	8f 93       	push	r24
     456:	9f 93       	push	r25
     458:	af 93       	push	r26
     45a:	bf 93       	push	r27
     45c:	ef 93       	push	r30
     45e:	ff 93       	push	r31
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
	cli();
     468:	f8 94       	cli
	
	switch(getState())
     46a:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <getState>
     46e:	88 2f       	mov	r24, r24
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	83 30       	cpi	r24, 0x03	; 3
     474:	91 05       	cpc	r25, r1
     476:	19 f0       	breq	.+6      	; 0x47e <__vector_1+0x42>
     478:	04 97       	sbiw	r24, 0x04	; 4
     47a:	a1 f0       	breq	.+40     	; 0x4a4 <__vector_1+0x68>
			}
			break;
		}
		
		default:
			break;
     47c:	26 c0       	rjmp	.+76     	; 0x4ca <__vector_1+0x8e>
	
	switch(getState())
	{
		case 3:	
		{	
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     47e:	80 e3       	ldi	r24, 0x30	; 48
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	fc 01       	movw	r30, r24
     484:	80 81       	ld	r24, Z
     486:	88 2f       	mov	r24, r24
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	80 71       	andi	r24, 0x10	; 16
     48c:	99 27       	eor	r25, r25
     48e:	18 16       	cp	r1, r24
     490:	19 06       	cpc	r1, r25
     492:	24 f4       	brge	.+8      	; 0x49c <__vector_1+0x60>
			{
				dec_delta(1);
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 56 04 	call	0x8ac	; 0x8ac <dec_delta>
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
			}
			break;
     49a:	17 c0       	rjmp	.+46     	; 0x4ca <__vector_1+0x8e>
			{
				dec_delta(1);
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	0e 94 33 04 	call	0x866	; 0x866 <inc_delta>
			}
			break;
     4a2:	13 c0       	rjmp	.+38     	; 0x4ca <__vector_1+0x8e>
		}
		
		case 4:
		{
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     4a4:	80 e3       	ldi	r24, 0x30	; 48
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	80 81       	ld	r24, Z
     4ac:	88 2f       	mov	r24, r24
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	80 71       	andi	r24, 0x10	; 16
     4b2:	99 27       	eor	r25, r25
     4b4:	18 16       	cp	r1, r24
     4b6:	19 06       	cpc	r1, r25
     4b8:	24 f4       	brge	.+8      	; 0x4c2 <__vector_1+0x86>
			{
				dec_delta(2);
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	0e 94 56 04 	call	0x8ac	; 0x8ac <dec_delta>
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
			}
			break;
     4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <__vector_1+0x8c>
			{
				dec_delta(2);
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	0e 94 33 04 	call	0x866	; 0x866 <inc_delta>
			}
			break;
     4c8:	00 00       	nop
		
		default:
			break;
	}
	
	stop_timeout_timer();
     4ca:	0e 94 0d 06 	call	0xc1a	; 0xc1a <stop_timeout_timer>
	start_timeout_timer();
     4ce:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <start_timeout_timer>
	
	
	GIFR &= ~(1<<INTF0);  //clear ext-interrupt-0 flag
     4d2:	8a e5       	ldi	r24, 0x5A	; 90
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	2a e5       	ldi	r18, 0x5A	; 90
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	f9 01       	movw	r30, r18
     4dc:	20 81       	ld	r18, Z
     4de:	2f 7b       	andi	r18, 0xBF	; 191
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
	
	sei();
     4e4:	78 94       	sei
}
     4e6:	00 00       	nop
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	ff 91       	pop	r31
     4ee:	ef 91       	pop	r30
     4f0:	bf 91       	pop	r27
     4f2:	af 91       	pop	r26
     4f4:	9f 91       	pop	r25
     4f6:	8f 91       	pop	r24
     4f8:	7f 91       	pop	r23
     4fa:	6f 91       	pop	r22
     4fc:	5f 91       	pop	r21
     4fe:	4f 91       	pop	r20
     500:	3f 91       	pop	r19
     502:	2f 91       	pop	r18
     504:	0f 90       	pop	r0
     506:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_2>:


ISR(INT1_vect)  //if the encoder got pushed
{
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     518:	0f 92       	push	r0
     51a:	11 24       	eor	r1, r1
     51c:	1f 93       	push	r17
     51e:	2f 93       	push	r18
     520:	3f 93       	push	r19
     522:	4f 93       	push	r20
     524:	5f 93       	push	r21
     526:	6f 93       	push	r22
     528:	7f 93       	push	r23
     52a:	8f 93       	push	r24
     52c:	9f 93       	push	r25
     52e:	af 93       	push	r26
     530:	bf 93       	push	r27
     532:	ef 93       	push	r30
     534:	ff 93       	push	r31
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	cd b7       	in	r28, 0x3d	; 61
     53c:	de b7       	in	r29, 0x3e	; 62
	cli();
     53e:	f8 94       	cli
	
	switch(getState())
     540:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <getState>
     544:	88 2f       	mov	r24, r24
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	91 05       	cpc	r25, r1
     54c:	a1 f0       	breq	.+40     	; 0x576 <__vector_2+0x66>
     54e:	83 30       	cpi	r24, 0x03	; 3
     550:	91 05       	cpc	r25, r1
     552:	1c f4       	brge	.+6      	; 0x55a <__vector_2+0x4a>
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	39 f0       	breq	.+14     	; 0x566 <__vector_2+0x56>
     558:	40 c0       	rjmp	.+128    	; 0x5da <__vector_2+0xca>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	91 05       	cpc	r25, r1
     55e:	89 f0       	breq	.+34     	; 0x582 <__vector_2+0x72>
     560:	04 97       	sbiw	r24, 0x04	; 4
     562:	29 f1       	breq	.+74     	; 0x5ae <__vector_2+0x9e>
     564:	3a c0       	rjmp	.+116    	; 0x5da <__vector_2+0xca>
	{
		case 1:
		{
			setState(2);
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
			stop_timeout_timer();
     56c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <stop_timeout_timer>
			start_timeout_timer();
     570:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <start_timeout_timer>
			break;
     574:	32 c0       	rjmp	.+100    	; 0x5da <__vector_2+0xca>
		}
		case 2:
		{
			setState(3);
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
			start_timeout_timer();
     57c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <start_timeout_timer>
			break;
     580:	2c c0       	rjmp	.+88     	; 0x5da <__vector_2+0xca>
		}
		case 3:
		{
			if(eeprom_read_byte(0) != get_delta(1))
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 21 0c 	call	0x1842	; 0x1842 <eeprom_read_byte>
     58a:	18 2f       	mov	r17, r24
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     592:	18 17       	cp	r17, r24
     594:	41 f0       	breq	.+16     	; 0x5a6 <__vector_2+0x96>
			{
				eeprom_update_byte(0, get_delta(1));
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     59c:	68 2f       	mov	r22, r24
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 29 0c 	call	0x1852	; 0x1852 <eeprom_update_byte>
			}
			setState(4);
     5a6:	84 e0       	ldi	r24, 0x04	; 4
     5a8:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
			break;
     5ac:	16 c0       	rjmp	.+44     	; 0x5da <__vector_2+0xca>
		}
		case 4:
		{
			if(eeprom_read_byte(1) != get_delta(2))
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 21 0c 	call	0x1842	; 0x1842 <eeprom_read_byte>
     5b6:	18 2f       	mov	r17, r24
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     5be:	18 17       	cp	r17, r24
     5c0:	41 f0       	breq	.+16     	; 0x5d2 <__vector_2+0xc2>
			{
				eeprom_update_byte(1, get_delta(2));
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     5c8:	68 2f       	mov	r22, r24
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 29 0c 	call	0x1852	; 0x1852 <eeprom_update_byte>
			}
			setState(2);
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
			break;
     5d8:	00 00       	nop
		}
	}
	
	sei();
     5da:	78 94       	sei
     5dc:	00 00       	nop
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	ff 91       	pop	r31
     5e4:	ef 91       	pop	r30
     5e6:	bf 91       	pop	r27
     5e8:	af 91       	pop	r26
     5ea:	9f 91       	pop	r25
     5ec:	8f 91       	pop	r24
     5ee:	7f 91       	pop	r23
     5f0:	6f 91       	pop	r22
     5f2:	5f 91       	pop	r21
     5f4:	4f 91       	pop	r20
     5f6:	3f 91       	pop	r19
     5f8:	2f 91       	pop	r18
     5fa:	1f 91       	pop	r17
     5fc:	0f 90       	pop	r0
     5fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     602:	0f 90       	pop	r0
     604:	1f 90       	pop	r1
     606:	18 95       	reti

00000608 <main>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);



int main(void)
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
     610:	8b e3       	ldi	r24, 0x3B	; 59
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	fc 01       	movw	r30, r24
     616:	10 82       	st	Z, r1
	PORTB = 0x00;
     618:	88 e3       	ldi	r24, 0x38	; 56
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	fc 01       	movw	r30, r24
     61e:	10 82       	st	Z, r1
	
	DDRA = 0xFC;
     620:	8a e3       	ldi	r24, 0x3A	; 58
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	2c ef       	ldi	r18, 0xFC	; 252
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
	DDRB = 0xFF;
     62a:	87 e3       	ldi	r24, 0x37	; 55
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	2f ef       	ldi	r18, 0xFF	; 255
     630:	fc 01       	movw	r30, r24
     632:	20 83       	st	Z, r18
	DDRC |= (1<<WDI_PIN);
     634:	84 e3       	ldi	r24, 0x34	; 52
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	24 e3       	ldi	r18, 0x34	; 52
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	f9 01       	movw	r30, r18
     63e:	20 81       	ld	r18, Z
     640:	20 64       	ori	r18, 0x40	; 64
     642:	fc 01       	movw	r30, r24
     644:	20 83       	st	Z, r18
	DDRD |= (1<<PD5);
     646:	81 e3       	ldi	r24, 0x31	; 49
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	21 e3       	ldi	r18, 0x31	; 49
     64c:	30 e0       	ldi	r19, 0x00	; 0
     64e:	f9 01       	movw	r30, r18
     650:	20 81       	ld	r18, Z
     652:	20 62       	ori	r18, 0x20	; 32
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18
	
	uart_init(0);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	0e 94 93 06 	call	0xd26	; 0xd26 <uart_init>
	
	
	stdout = &mystdout;
     660:	8b e6       	ldi	r24, 0x6B	; 107
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__iob+0x3>
     668:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__iob+0x2>
	
	printf("startup!\n");
     66c:	8f ea       	ldi	r24, 0xAF	; 175
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 60 09 	call	0x12c0	; 0x12c0 <puts>
	
	regulator_init();
     674:	0e 94 ed 03 	call	0x7da	; 0x7da <regulator_init>
	SevenSeg_init();
     678:	0e 94 49 00 	call	0x92	; 0x92 <SevenSeg_init>
	Timeout_init();
     67c:	0e 94 e5 05 	call	0xbca	; 0xbca <Timeout_init>
	Encoder_init();
     680:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <Encoder_init>
	
	set_PWM(63);
     684:	8f e3       	ldi	r24, 0x3F	; 63
     686:	0e 94 7f 05 	call	0xafe	; 0xafe <set_PWM>
	
    /* Replace with your application code */
    while (1) 
    {
		switch(state)
     68a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <state>
     68e:	88 2f       	mov	r24, r24
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	82 30       	cpi	r24, 0x02	; 2
     694:	91 05       	cpc	r25, r1
     696:	09 f1       	breq	.+66     	; 0x6da <main+0xd2>
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	91 05       	cpc	r25, r1
     69c:	2c f4       	brge	.+10     	; 0x6a8 <main+0xa0>
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	51 f0       	breq	.+20     	; 0x6b6 <main+0xae>
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	91 f0       	breq	.+36     	; 0x6ca <main+0xc2>
     6a6:	63 c0       	rjmp	.+198    	; 0x76e <main+0x166>
     6a8:	83 30       	cpi	r24, 0x03	; 3
     6aa:	91 05       	cpc	r25, r1
     6ac:	79 f1       	breq	.+94     	; 0x70c <main+0x104>
     6ae:	04 97       	sbiw	r24, 0x04	; 4
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <main+0xac>
     6b2:	41 c0       	rjmp	.+130    	; 0x736 <main+0x12e>
     6b4:	5c c0       	rjmp	.+184    	; 0x76e <main+0x166>
		{
			case 0:
			{
				if(SevenSeg_get_state() == 1)  //disable display only if it is on
     6b6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     6ba:	81 30       	cpi	r24, 0x01	; 1
     6bc:	11 f4       	brne	.+4      	; 0x6c2 <main+0xba>
					SevenSeg_off();		
     6be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SevenSeg_off>
				setState(1);
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
				break;
     6c8:	52 c0       	rjmp	.+164    	; 0x76e <main+0x166>
			}
			
			case 1:
			{
				if(SevenSeg_get_state() == 1)  //disable display only if it is on
     6ca:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <main+0xcc>
     6d2:	46 c0       	rjmp	.+140    	; 0x760 <main+0x158>
					SevenSeg_off();		
     6d4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <SevenSeg_off>
				break;
     6d8:	43 c0       	rjmp	.+134    	; 0x760 <main+0x158>
			}
				
			case 2:
			{
				SevenSeg_set_val(1, get_temp(1));
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 68 05 	call	0xad0	; 0xad0 <get_temp>
     6e0:	88 2f       	mov	r24, r24
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	bc 01       	movw	r22, r24
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, get_temp(0));
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	0e 94 68 05 	call	0xad0	; 0xad0 <get_temp>
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	bc 01       	movw	r22, r24
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
     6fe:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     702:	88 23       	and	r24, r24
     704:	79 f5       	brne	.+94     	; 0x764 <main+0x15c>
					SevenSeg_on();
     706:	0e 94 c1 01 	call	0x382	; 0x382 <SevenSeg_on>
				break;
     70a:	2c c0       	rjmp	.+88     	; 0x764 <main+0x15c>
			}
			
			case 3: 
			{
				SevenSeg_set_val(1, get_delta(1));
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	bc 01       	movw	r22, r24
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, 1000); //set Kessel-display off
     71e:	68 ee       	ldi	r22, 0xE8	; 232
     720:	73 e0       	ldi	r23, 0x03	; 3
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
     728:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     72c:	88 23       	and	r24, r24
     72e:	e1 f4       	brne	.+56     	; 0x768 <main+0x160>
					SevenSeg_on();
     730:	0e 94 c1 01 	call	0x382	; 0x382 <SevenSeg_on>
				break;
     734:	19 c0       	rjmp	.+50     	; 0x768 <main+0x160>
			}
			
			case 4:
			{
				SevenSeg_set_val(1, 1000); //set Dach-display off
     736:	68 ee       	ldi	r22, 0xE8	; 232
     738:	73 e0       	ldi	r23, 0x03	; 3
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, get_delta(2));
     740:	82 e0       	ldi	r24, 0x02	; 2
     742:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     746:	88 2f       	mov	r24, r24
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	bc 01       	movw	r22, r24
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
     752:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SevenSeg_get_state>
     756:	88 23       	and	r24, r24
     758:	49 f4       	brne	.+18     	; 0x76c <main+0x164>
				SevenSeg_on();
     75a:	0e 94 c1 01 	call	0x382	; 0x382 <SevenSeg_on>
				break;
     75e:	06 c0       	rjmp	.+12     	; 0x76c <main+0x164>
			
			case 1:
			{
				if(SevenSeg_get_state() == 1)  //disable display only if it is on
					SevenSeg_off();		
				break;
     760:	00 00       	nop
     762:	05 c0       	rjmp	.+10     	; 0x76e <main+0x166>
			{
				SevenSeg_set_val(1, get_temp(1));
				SevenSeg_set_val(0, get_temp(0));
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
					SevenSeg_on();
				break;
     764:	00 00       	nop
     766:	03 c0       	rjmp	.+6      	; 0x76e <main+0x166>
			{
				SevenSeg_set_val(1, get_delta(1));
				SevenSeg_set_val(0, 1000); //set Kessel-display off
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
					SevenSeg_on();
				break;
     768:	00 00       	nop
     76a:	01 c0       	rjmp	.+2      	; 0x76e <main+0x166>
			{
				SevenSeg_set_val(1, 1000); //set Dach-display off
				SevenSeg_set_val(0, get_delta(2));
				if(SevenSeg_get_state() == 0)  //enable display only if it is off
				SevenSeg_on();
				break;
     76c:	00 00       	nop
			}
		}
		
		WDI_PORT ^= (1<<WDI_PIN);
     76e:	85 e3       	ldi	r24, 0x35	; 53
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	25 e3       	ldi	r18, 0x35	; 53
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	f9 01       	movw	r30, r18
     778:	30 81       	ld	r19, Z
     77a:	20 e4       	ldi	r18, 0x40	; 64
     77c:	23 27       	eor	r18, r19
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
    }
     782:	83 cf       	rjmp	.-250    	; 0x68a <main+0x82>

00000784 <setState>:
}

void setState(uint8_t s)
{
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	1f 92       	push	r1
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	89 83       	std	Y+1, r24	; 0x01
	state = s;
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <state>
	printf("state -> %d\n", state);
     796:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <state>
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	29 2f       	mov	r18, r25
     7a0:	2f 93       	push	r18
     7a2:	8f 93       	push	r24
     7a4:	88 eb       	ldi	r24, 0xB8	; 184
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	89 2f       	mov	r24, r25
     7aa:	8f 93       	push	r24
     7ac:	88 eb       	ldi	r24, 0xB8	; 184
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	8f 93       	push	r24
     7b2:	0e 94 4a 09 	call	0x1294	; 0x1294 <printf>
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
}
     7be:	00 00       	nop
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <getState>:

uint8_t getState()
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	cd b7       	in	r28, 0x3d	; 61
     7ce:	de b7       	in	r29, 0x3e	; 62
	return state;
     7d0:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <state>
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	08 95       	ret

000007da <regulator_init>:
}

void disable_show_temps(void)
{
	show_temps = 0;
}
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
     7de:	cd b7       	in	r28, 0x3d	; 61
     7e0:	de b7       	in	r29, 0x3e	; 62
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	0e 94 21 0c 	call	0x1842	; 0x1842 <eeprom_read_byte>
     7ea:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <delta1>
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 21 0c 	call	0x1842	; 0x1842 <eeprom_read_byte>
     7f6:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <delta2>
     7fa:	87 e2       	ldi	r24, 0x27	; 39
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	fc 01       	movw	r30, r24
     800:	10 82       	st	Z, r1
     802:	87 e2       	ldi	r24, 0x27	; 39
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	27 e2       	ldi	r18, 0x27	; 39
     808:	30 e0       	ldi	r19, 0x00	; 0
     80a:	f9 01       	movw	r30, r18
     80c:	20 81       	ld	r18, Z
     80e:	2f 7d       	andi	r18, 0xDF	; 223
     810:	fc 01       	movw	r30, r24
     812:	20 83       	st	Z, r18
     814:	86 e2       	ldi	r24, 0x26	; 38
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	26 e2       	ldi	r18, 0x26	; 38
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	f9 01       	movw	r30, r18
     81e:	20 81       	ld	r18, Z
     820:	20 68       	ori	r18, 0x80	; 128
     822:	fc 01       	movw	r30, r24
     824:	20 83       	st	Z, r18
     826:	85 e4       	ldi	r24, 0x45	; 69
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	25 e4       	ldi	r18, 0x45	; 69
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	f9 01       	movw	r30, r18
     830:	20 81       	ld	r18, Z
     832:	2f 66       	ori	r18, 0x6F	; 111
     834:	fc 01       	movw	r30, r24
     836:	20 83       	st	Z, r18
     838:	89 e5       	ldi	r24, 0x59	; 89
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	29 e5       	ldi	r18, 0x59	; 89
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	f9 01       	movw	r30, r18
     842:	20 81       	ld	r18, Z
     844:	20 64       	ori	r18, 0x40	; 64
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
     84a:	81 e3       	ldi	r24, 0x31	; 49
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	21 e3       	ldi	r18, 0x31	; 49
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	f9 01       	movw	r30, r18
     854:	20 81       	ld	r18, Z
     856:	20 68       	ori	r18, 0x80	; 128
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
     85c:	78 94       	sei
     85e:	00 00       	nop
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <inc_delta>:

void inc_delta(uint8_t i_)
{
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	1f 92       	push	r1
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     872:	89 81       	ldd	r24, Y+1	; 0x01
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	49 f4       	brne	.+18     	; 0x88a <inc_delta+0x24>
	{
		if(delta1<100)
     878:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <delta1>
     87c:	84 36       	cpi	r24, 0x64	; 100
     87e:	28 f4       	brcc	.+10     	; 0x88a <inc_delta+0x24>
			delta1++;
     880:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <delta1>
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <delta1>
	}
	
	if(i_==2)
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	49 f4       	brne	.+18     	; 0x8a2 <inc_delta+0x3c>
	{
		if(delta2<100)
     890:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <delta2>
     894:	84 36       	cpi	r24, 0x64	; 100
     896:	28 f4       	brcc	.+10     	; 0x8a2 <inc_delta+0x3c>
			delta2++;
     898:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <delta2>
     89c:	8f 5f       	subi	r24, 0xFF	; 255
     89e:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <delta2>
	}			
}
     8a2:	00 00       	nop
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <dec_delta>:

void dec_delta(uint8_t i_)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	1f 92       	push	r1
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     8b8:	89 81       	ldd	r24, Y+1	; 0x01
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	49 f4       	brne	.+18     	; 0x8d0 <dec_delta+0x24>
	{
		if(delta1>0)
     8be:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <delta1>
     8c2:	88 23       	and	r24, r24
     8c4:	29 f0       	breq	.+10     	; 0x8d0 <dec_delta+0x24>
			delta1--;
     8c6:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <delta1>
     8ca:	81 50       	subi	r24, 0x01	; 1
     8cc:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <delta1>
	}
	
	if(i_==2)
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	49 f4       	brne	.+18     	; 0x8e8 <dec_delta+0x3c>
	{
		if(delta2>0)
     8d6:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <delta2>
     8da:	88 23       	and	r24, r24
     8dc:	29 f0       	breq	.+10     	; 0x8e8 <dec_delta+0x3c>
			delta2--;
     8de:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <delta2>
     8e2:	81 50       	subi	r24, 0x01	; 1
     8e4:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <delta2>
	}
}
     8e8:	00 00       	nop
     8ea:	0f 90       	pop	r0
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <get_delta>:

uint8_t get_delta(uint8_t i_)
{
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	1f 92       	push	r1
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	19 f4       	brne	.+6      	; 0x90a <get_delta+0x18>
	{
		return delta1;
     904:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <delta1>
     908:	06 c0       	rjmp	.+12     	; 0x916 <get_delta+0x24>
	}
	if(i_==2)
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	19 f4       	brne	.+6      	; 0x916 <get_delta+0x24>
	{
		return delta2;
     910:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <delta2>
     914:	00 c0       	rjmp	.+0      	; 0x916 <get_delta+0x24>
	}
}
     916:	0f 90       	pop	r0
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <measure_temp>:


//sensor: 1=dach; 0=kessel
uint8_t measure_temp(uint8_t sensor)
{
     91e:	cf 92       	push	r12
     920:	df 92       	push	r13
     922:	ef 92       	push	r14
     924:	ff 92       	push	r15
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	2c 97       	sbiw	r28, 0x0c	; 12
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
     93a:	8c 87       	std	Y+12, r24	; 0x0c
	ADMUX &= ~0x1F;							//clear MUX4:0
     93c:	87 e2       	ldi	r24, 0x27	; 39
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	27 e2       	ldi	r18, 0x27	; 39
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	f9 01       	movw	r30, r18
     946:	20 81       	ld	r18, Z
     948:	20 7e       	andi	r18, 0xE0	; 224
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
	
	if(sensor == 0)
     94e:	8c 85       	ldd	r24, Y+12	; 0x0c
     950:	88 23       	and	r24, r24
     952:	49 f4       	brne	.+18     	; 0x966 <measure_temp+0x48>
		ADMUX |= (1<<MUX0);					//set ADC to CH1
     954:	87 e2       	ldi	r24, 0x27	; 39
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	27 e2       	ldi	r18, 0x27	; 39
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	f9 01       	movw	r30, r18
     95e:	20 81       	ld	r18, Z
     960:	21 60       	ori	r18, 0x01	; 1
     962:	fc 01       	movw	r30, r24
     964:	20 83       	st	Z, r18
		
	ADCSRA |= (1<<ADSC);					//start conversion
     966:	86 e2       	ldi	r24, 0x26	; 38
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	26 e2       	ldi	r18, 0x26	; 38
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	f9 01       	movw	r30, r18
     970:	20 81       	ld	r18, Z
     972:	20 64       	ori	r18, 0x40	; 64
     974:	fc 01       	movw	r30, r24
     976:	20 83       	st	Z, r18
	
	while( (ADCSRA & (1<<ADSC)) > 0 )		//wait for end of conversion
     978:	00 00       	nop
     97a:	86 e2       	ldi	r24, 0x26	; 38
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	fc 01       	movw	r30, r24
     980:	80 81       	ld	r24, Z
     982:	88 2f       	mov	r24, r24
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	80 74       	andi	r24, 0x40	; 64
     988:	99 27       	eor	r25, r25
     98a:	18 16       	cp	r1, r24
     98c:	19 06       	cpc	r1, r25
     98e:	ac f3       	brlt	.-22     	; 0x97a <measure_temp+0x5c>
	{
	}
	
	uint16_t adc_val = ADCL;				//get conversion result low-byte
     990:	84 e2       	ldi	r24, 0x24	; 36
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	80 81       	ld	r24, Z
     998:	88 2f       	mov	r24, r24
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	9a 83       	std	Y+2, r25	; 0x02
     99e:	89 83       	std	Y+1, r24	; 0x01
	adc_val += (ADCH<<8);					//and high-byte
     9a0:	85 e2       	ldi	r24, 0x25	; 37
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	fc 01       	movw	r30, r24
     9a6:	80 81       	ld	r24, Z
     9a8:	88 2f       	mov	r24, r24
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	98 2f       	mov	r25, r24
     9ae:	88 27       	eor	r24, r24
     9b0:	9c 01       	movw	r18, r24
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	9a 81       	ldd	r25, Y+2	; 0x02
     9b6:	82 0f       	add	r24, r18
     9b8:	93 1f       	adc	r25, r19
     9ba:	9a 83       	std	Y+2, r25	; 0x02
     9bc:	89 83       	std	Y+1, r24	; 0x01
	
	
	float voltage = adc_val * 4.854e-3f;	//get voltage from ADC-values
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	cc 01       	movw	r24, r24
     9c4:	a0 e0       	ldi	r26, 0x00	; 0
     9c6:	b0 e0       	ldi	r27, 0x00	; 0
     9c8:	bc 01       	movw	r22, r24
     9ca:	cd 01       	movw	r24, r26
     9cc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__floatunsisf>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	2e e4       	ldi	r18, 0x4E	; 78
     9d6:	3e e0       	ldi	r19, 0x0E	; 14
     9d8:	4f e9       	ldi	r20, 0x9F	; 159
     9da:	5b e3       	ldi	r21, 0x3B	; 59
     9dc:	bc 01       	movw	r22, r24
     9de:	cd 01       	movw	r24, r26
     9e0:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3>
     9e4:	dc 01       	movw	r26, r24
     9e6:	cb 01       	movw	r24, r22
     9e8:	8b 83       	std	Y+3, r24	; 0x03
     9ea:	9c 83       	std	Y+4, r25	; 0x04
     9ec:	ad 83       	std	Y+5, r26	; 0x05
     9ee:	be 83       	std	Y+6, r27	; 0x06
	
	float temp_f = (7382.06f - voltage*2751.75f)/(voltage - 29.323f);		//get temperature from voltage
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	3c ef       	ldi	r19, 0xFC	; 252
     9f4:	4b e2       	ldi	r20, 0x2B	; 43
     9f6:	55 e4       	ldi	r21, 0x45	; 69
     9f8:	6b 81       	ldd	r22, Y+3	; 0x03
     9fa:	7c 81       	ldd	r23, Y+4	; 0x04
     9fc:	8d 81       	ldd	r24, Y+5	; 0x05
     9fe:	9e 81       	ldd	r25, Y+6	; 0x06
     a00:	0e 94 81 08 	call	0x1102	; 0x1102 <__mulsf3>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	9c 01       	movw	r18, r24
     a0a:	ad 01       	movw	r20, r26
     a0c:	6b e7       	ldi	r22, 0x7B	; 123
     a0e:	70 eb       	ldi	r23, 0xB0	; 176
     a10:	86 ee       	ldi	r24, 0xE6	; 230
     a12:	95 e4       	ldi	r25, 0x45	; 69
     a14:	0e 94 e5 06 	call	0xdca	; 0xdca <__subsf3>
     a18:	dc 01       	movw	r26, r24
     a1a:	cb 01       	movw	r24, r22
     a1c:	6c 01       	movw	r12, r24
     a1e:	7d 01       	movw	r14, r26
     a20:	21 e8       	ldi	r18, 0x81	; 129
     a22:	35 e9       	ldi	r19, 0x95	; 149
     a24:	4a ee       	ldi	r20, 0xEA	; 234
     a26:	51 e4       	ldi	r21, 0x41	; 65
     a28:	6b 81       	ldd	r22, Y+3	; 0x03
     a2a:	7c 81       	ldd	r23, Y+4	; 0x04
     a2c:	8d 81       	ldd	r24, Y+5	; 0x05
     a2e:	9e 81       	ldd	r25, Y+6	; 0x06
     a30:	0e 94 e5 06 	call	0xdca	; 0xdca <__subsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	9c 01       	movw	r18, r24
     a3a:	ad 01       	movw	r20, r26
     a3c:	c7 01       	movw	r24, r14
     a3e:	b6 01       	movw	r22, r12
     a40:	0e 94 52 07 	call	0xea4	; 0xea4 <__divsf3>
     a44:	dc 01       	movw	r26, r24
     a46:	cb 01       	movw	r24, r22
     a48:	8f 83       	std	Y+7, r24	; 0x07
     a4a:	98 87       	std	Y+8, r25	; 0x08
     a4c:	a9 87       	std	Y+9, r26	; 0x09
     a4e:	ba 87       	std	Y+10, r27	; 0x0a
	
	uint8_t temp = (uint8_t) roundf( temp_f );						//round temperature and cast it to int
     a50:	8f 81       	ldd	r24, Y+7	; 0x07
     a52:	98 85       	ldd	r25, Y+8	; 0x08
     a54:	a9 85       	ldd	r26, Y+9	; 0x09
     a56:	ba 85       	ldd	r27, Y+10	; 0x0a
     a58:	bc 01       	movw	r22, r24
     a5a:	cd 01       	movw	r24, r26
     a5c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <round>
     a60:	dc 01       	movw	r26, r24
     a62:	cb 01       	movw	r24, r22
     a64:	bc 01       	movw	r22, r24
     a66:	cd 01       	movw	r24, r26
     a68:	0e 94 c4 07 	call	0xf88	; 0xf88 <__fixunssfsi>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	8b 87       	std	Y+11, r24	; 0x0b
	
	printf("sensor %d: ADC-val= %d, temp= %d\n", sensor, adc_val, temp);
     a72:	8b 85       	ldd	r24, Y+11	; 0x0b
     a74:	28 2f       	mov	r18, r24
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	8c 85       	ldd	r24, Y+12	; 0x0c
     a7a:	88 2f       	mov	r24, r24
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	43 2f       	mov	r20, r19
     a80:	4f 93       	push	r20
     a82:	2f 93       	push	r18
     a84:	2a 81       	ldd	r18, Y+2	; 0x02
     a86:	2f 93       	push	r18
     a88:	29 81       	ldd	r18, Y+1	; 0x01
     a8a:	2f 93       	push	r18
     a8c:	29 2f       	mov	r18, r25
     a8e:	2f 93       	push	r18
     a90:	8f 93       	push	r24
     a92:	85 ec       	ldi	r24, 0xC5	; 197
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	89 2f       	mov	r24, r25
     a98:	8f 93       	push	r24
     a9a:	85 ec       	ldi	r24, 0xC5	; 197
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	8f 93       	push	r24
     aa0:	0e 94 4a 09 	call	0x1294	; 0x1294 <printf>
     aa4:	8d b7       	in	r24, 0x3d	; 61
     aa6:	9e b7       	in	r25, 0x3e	; 62
     aa8:	08 96       	adiw	r24, 0x08	; 8
     aaa:	0f b6       	in	r0, 0x3f	; 63
     aac:	f8 94       	cli
     aae:	de bf       	out	0x3e, r29	; 62
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	cd bf       	out	0x3d, r28	; 61
		
	return temp;
     ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     ab6:	2c 96       	adiw	r28, 0x0c	; 12
     ab8:	0f b6       	in	r0, 0x3f	; 63
     aba:	f8 94       	cli
     abc:	de bf       	out	0x3e, r29	; 62
     abe:	0f be       	out	0x3f, r0	; 63
     ac0:	cd bf       	out	0x3d, r28	; 61
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	08 95       	ret

00000ad0 <get_temp>:

//sensor: 1=dach; 0=kessel
uint8_t get_temp(uint8_t sensor)
{
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	1f 92       	push	r1
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == 1)
     adc:	89 81       	ldd	r24, Y+1	; 0x01
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	19 f4       	brne	.+6      	; 0xae8 <get_temp+0x18>
		return temp_dach;
     ae2:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <temp_dach>
     ae6:	07 c0       	rjmp	.+14     	; 0xaf6 <get_temp+0x26>
	else if(sensor == 0)
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	88 23       	and	r24, r24
     aec:	19 f4       	brne	.+6      	; 0xaf4 <get_temp+0x24>
		return temp_kessel;
     aee:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <temp_kessel>
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <get_temp+0x26>
	else
		return 255;
     af4:	8f ef       	ldi	r24, 0xFF	; 255
}
     af6:	0f 90       	pop	r0
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	08 95       	ret

00000afe <set_PWM>:


//sets duty cycle; 0-255
void set_PWM(uint8_t duty)
{
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	1f 92       	push	r1
     b04:	cd b7       	in	r28, 0x3d	; 61
     b06:	de b7       	in	r29, 0x3e	; 62
     b08:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = duty;
     b0a:	83 e4       	ldi	r24, 0x43	; 67
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	29 81       	ldd	r18, Y+1	; 0x01
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
}
     b14:	00 00       	nop
     b16:	0f 90       	pop	r0
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <__vector_5>:



ISR(TIMER2_OVF_vect)
{
     b1e:	1f 92       	push	r1
     b20:	0f 92       	push	r0
     b22:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b26:	0f 92       	push	r0
     b28:	11 24       	eor	r1, r1
     b2a:	2f 93       	push	r18
     b2c:	3f 93       	push	r19
     b2e:	4f 93       	push	r20
     b30:	5f 93       	push	r21
     b32:	6f 93       	push	r22
     b34:	7f 93       	push	r23
     b36:	8f 93       	push	r24
     b38:	9f 93       	push	r25
     b3a:	af 93       	push	r26
     b3c:	bf 93       	push	r27
     b3e:	ef 93       	push	r30
     b40:	ff 93       	push	r31
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
	cli();
     b4a:	f8 94       	cli
	
	if(loop_cnt < 62) //if 2s are not passed
     b4c:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <loop_cnt>
     b50:	8e 33       	cpi	r24, 0x3E	; 62
     b52:	30 f4       	brcc	.+12     	; 0xb60 <__vector_5+0x42>
	{
		loop_cnt++;
     b54:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <loop_cnt>
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <loop_cnt>
     b5e:	16 c0       	rjmp	.+44     	; 0xb8c <__vector_5+0x6e>
	}
	
	else	//if it is time to work...
	{
		PORTD ^= (1<<PD5);
     b60:	82 e3       	ldi	r24, 0x32	; 50
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	22 e3       	ldi	r18, 0x32	; 50
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	f9 01       	movw	r30, r18
     b6a:	30 81       	ld	r19, Z
     b6c:	20 e2       	ldi	r18, 0x20	; 32
     b6e:	23 27       	eor	r18, r19
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18

		temp_dach   = measure_temp(1);
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	0e 94 8f 04 	call	0x91e	; 0x91e <measure_temp>
     b7a:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <temp_dach>
		temp_kessel = measure_temp(0);
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	0e 94 8f 04 	call	0x91e	; 0x91e <measure_temp>
     b84:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <temp_kessel>
		
		loop_cnt = 0;
     b88:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <loop_cnt>
	}
	
	
	TIFR &= ~(1<<TOV2);			//clear flag
     b8c:	88 e5       	ldi	r24, 0x58	; 88
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	28 e5       	ldi	r18, 0x58	; 88
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	f9 01       	movw	r30, r18
     b96:	20 81       	ld	r18, Z
     b98:	2f 7b       	andi	r18, 0xBF	; 191
     b9a:	fc 01       	movw	r30, r24
     b9c:	20 83       	st	Z, r18
		
	sei();
     b9e:	78 94       	sei
     ba0:	00 00       	nop
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	bf 91       	pop	r27
     bac:	af 91       	pop	r26
     bae:	9f 91       	pop	r25
     bb0:	8f 91       	pop	r24
     bb2:	7f 91       	pop	r23
     bb4:	6f 91       	pop	r22
     bb6:	5f 91       	pop	r21
     bb8:	4f 91       	pop	r20
     bba:	3f 91       	pop	r19
     bbc:	2f 91       	pop	r18
     bbe:	0f 90       	pop	r0
     bc0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bc4:	0f 90       	pop	r0
     bc6:	1f 90       	pop	r1
     bc8:	18 95       	reti

00000bca <Timeout_init>:
#include "main.h"
#include "regulator.h"
#include "uart.h"

void Timeout_init()
{
     bca:	cf 93       	push	r28
     bcc:	df 93       	push	r29
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00;
     bd2:	8f e4       	ldi	r24, 0x4F	; 79
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	fc 01       	movw	r30, r24
     bd8:	10 82       	st	Z, r1
	
	TIMSK |= (1<<TOIE1);			//enable overflow-event
     bda:	89 e5       	ldi	r24, 0x59	; 89
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	29 e5       	ldi	r18, 0x59	; 89
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	f9 01       	movw	r30, r18
     be4:	20 81       	ld	r18, Z
     be6:	24 60       	ori	r18, 0x04	; 4
     be8:	fc 01       	movw	r30, r24
     bea:	20 83       	st	Z, r18
	sei();
     bec:	78 94       	sei
}
     bee:	00 00       	nop
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <start_timeout_timer>:
void start_timeout_timer()
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						 //reset timer counter value
     bfe:	8c e4       	ldi	r24, 0x4C	; 76
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	fc 01       	movw	r30, r24
     c04:	11 82       	std	Z+1, r1	; 0x01
     c06:	10 82       	st	Z, r1
	TCCR1B = (1<<CS12) | (1<<CS10);  //start timer at prescaler /1024
     c08:	8e e4       	ldi	r24, 0x4E	; 78
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	25 e0       	ldi	r18, 0x05	; 5
     c0e:	fc 01       	movw	r30, r24
     c10:	20 83       	st	Z, r18
}
     c12:	00 00       	nop
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <stop_timeout_timer>:

void stop_timeout_timer()
{
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     c22:	8e e4       	ldi	r24, 0x4E	; 78
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	2e e4       	ldi	r18, 0x4E	; 78
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	f9 01       	movw	r30, r18
     c2c:	20 81       	ld	r18, Z
     c2e:	2a 7f       	andi	r18, 0xFA	; 250
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
}
     c34:	00 00       	nop
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <__vector_9>:



//timeouted
ISR(TIMER1_OVF_vect)
{	
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c44:	0f 92       	push	r0
     c46:	11 24       	eor	r1, r1
     c48:	1f 93       	push	r17
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
	cli();
     c6a:	f8 94       	cli
	
	if((getState() == 3) && (eeprom_read_byte(0) != get_delta(0)))
     c6c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <getState>
     c70:	83 30       	cpi	r24, 0x03	; 3
     c72:	91 f4       	brne	.+36     	; 0xc98 <__vector_9+0x5c>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 21 0c 	call	0x1842	; 0x1842 <eeprom_read_byte>
     c7c:	18 2f       	mov	r17, r24
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     c84:	18 17       	cp	r17, r24
     c86:	41 f0       	breq	.+16     	; 0xc98 <__vector_9+0x5c>
	{
		eeprom_update_byte((uint8_t*)(0), (uint8_t)get_delta(0));
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     c8e:	68 2f       	mov	r22, r24
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 29 0c 	call	0x1852	; 0x1852 <eeprom_update_byte>
	}
	
	if((getState() == 4) && (eeprom_read_byte(1) != get_delta(1)))
     c98:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <getState>
     c9c:	84 30       	cpi	r24, 0x04	; 4
     c9e:	91 f4       	brne	.+36     	; 0xcc4 <__vector_9+0x88>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 21 0c 	call	0x1842	; 0x1842 <eeprom_read_byte>
     ca8:	18 2f       	mov	r17, r24
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     cb0:	18 17       	cp	r17, r24
     cb2:	41 f0       	breq	.+16     	; 0xcc4 <__vector_9+0x88>
	{
		eeprom_update_byte((uint8_t*)(1), (uint8_t)get_delta(1));
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 94 79 04 	call	0x8f2	; 0x8f2 <get_delta>
     cba:	68 2f       	mov	r22, r24
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 94 29 0c 	call	0x1852	; 0x1852 <eeprom_update_byte>
	}
	
	setState(1);
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	0e 94 c2 03 	call	0x784	; 0x784 <setState>
	
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     cca:	8e e4       	ldi	r24, 0x4E	; 78
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	2e e4       	ldi	r18, 0x4E	; 78
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	f9 01       	movw	r30, r18
     cd4:	20 81       	ld	r18, Z
     cd6:	2a 7f       	andi	r18, 0xFA	; 250
     cd8:	fc 01       	movw	r30, r24
     cda:	20 83       	st	Z, r18
	TCNT1 = 0;						   //resetting counter register
     cdc:	8c e4       	ldi	r24, 0x4C	; 76
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	fc 01       	movw	r30, r24
     ce2:	11 82       	std	Z+1, r1	; 0x01
     ce4:	10 82       	st	Z, r1
	
	
	TIFR &= ~(1<<TOV1);
     ce6:	88 e5       	ldi	r24, 0x58	; 88
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	28 e5       	ldi	r18, 0x58	; 88
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	f9 01       	movw	r30, r18
     cf0:	20 81       	ld	r18, Z
     cf2:	2b 7f       	andi	r18, 0xFB	; 251
     cf4:	fc 01       	movw	r30, r24
     cf6:	20 83       	st	Z, r18
	sei();
     cf8:	78 94       	sei
     cfa:	00 00       	nop
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	ff 91       	pop	r31
     d02:	ef 91       	pop	r30
     d04:	bf 91       	pop	r27
     d06:	af 91       	pop	r26
     d08:	9f 91       	pop	r25
     d0a:	8f 91       	pop	r24
     d0c:	7f 91       	pop	r23
     d0e:	6f 91       	pop	r22
     d10:	5f 91       	pop	r21
     d12:	4f 91       	pop	r20
     d14:	3f 91       	pop	r19
     d16:	2f 91       	pop	r18
     d18:	1f 91       	pop	r17
     d1a:	0f 90       	pop	r0
     d1c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d20:	0f 90       	pop	r0
     d22:	1f 90       	pop	r1
     d24:	18 95       	reti

00000d26 <uart_init>:
#include <avr/io.h>
#include <stdio.h>


void uart_init()
{
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<RXEN) | (1<<TXEN);  //enable receive and transmit
     d2e:	8a e2       	ldi	r24, 0x2A	; 42
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	2a e2       	ldi	r18, 0x2A	; 42
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	f9 01       	movw	r30, r18
     d38:	20 81       	ld	r18, Z
     d3a:	28 61       	ori	r18, 0x18	; 24
     d3c:	fc 01       	movw	r30, r24
     d3e:	20 83       	st	Z, r18
	UBRRL = 51;						 //setting datarate to 9600 baud/s
     d40:	89 e2       	ldi	r24, 0x29	; 41
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	23 e3       	ldi	r18, 0x33	; 51
     d46:	fc 01       	movw	r30, r24
     d48:	20 83       	st	Z, r18

	UCSRB |= (1<<RXEN) | (1<<TXEN);
     d4a:	8a e2       	ldi	r24, 0x2A	; 42
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	2a e2       	ldi	r18, 0x2A	; 42
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	f9 01       	movw	r30, r18
     d54:	20 81       	ld	r18, Z
     d56:	28 61       	ori	r18, 0x18	; 24
     d58:	fc 01       	movw	r30, r24
     d5a:	20 83       	st	Z, r18

	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     d5c:	80 e4       	ldi	r24, 0x40	; 64
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	20 e4       	ldi	r18, 0x40	; 64
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	f9 01       	movw	r30, r18
     d66:	20 81       	ld	r18, Z
     d68:	26 68       	ori	r18, 0x86	; 134
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 83       	st	Z, r18
}
     d6e:	00 00       	nop
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <uart_putchar+0x6>
     d7c:	1f 92       	push	r1
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	89 83       	std	Y+1, r24	; 0x01
     d84:	7b 83       	std	Y+3, r23	; 0x03
     d86:	6a 83       	std	Y+2, r22	; 0x02
	if(c=='\n')
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	8a 30       	cpi	r24, 0x0A	; 10
     d8c:	31 f4       	brne	.+12     	; 0xd9a <uart_putchar+0x24>
		uart_putchar('\r', stream);
     d8e:	8a 81       	ldd	r24, Y+2	; 0x02
     d90:	9b 81       	ldd	r25, Y+3	; 0x03
     d92:	bc 01       	movw	r22, r24
     d94:	8d e0       	ldi	r24, 0x0D	; 13
     d96:	0e 94 bb 06 	call	0xd76	; 0xd76 <uart_putchar>
		
		
	while( (UCSRA & (1<<UDRE)) ==0 )
     d9a:	00 00       	nop
     d9c:	8b e2       	ldi	r24, 0x2B	; 43
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	fc 01       	movw	r30, r24
     da2:	80 81       	ld	r24, Z
     da4:	88 2f       	mov	r24, r24
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	80 72       	andi	r24, 0x20	; 32
     daa:	99 27       	eor	r25, r25
     dac:	89 2b       	or	r24, r25
     dae:	b1 f3       	breq	.-20     	; 0xd9c <uart_putchar+0x26>
	{
	}
		
	UDR = c;
     db0:	8c e2       	ldi	r24, 0x2C	; 44
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	29 81       	ldd	r18, Y+1	; 0x01
     db6:	fc 01       	movw	r30, r24
     db8:	20 83       	st	Z, r18
	
	return 0;
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
}
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	08 95       	ret

00000dca <__subsf3>:
     dca:	50 58       	subi	r21, 0x80	; 128

00000dcc <__addsf3>:
     dcc:	bb 27       	eor	r27, r27
     dce:	aa 27       	eor	r26, r26
     dd0:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__addsf3x>
     dd4:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_round>
     dd8:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_pscA>
     ddc:	38 f0       	brcs	.+14     	; 0xdec <__addsf3+0x20>
     dde:	0e 94 40 08 	call	0x1080	; 0x1080 <__fp_pscB>
     de2:	20 f0       	brcs	.+8      	; 0xdec <__addsf3+0x20>
     de4:	39 f4       	brne	.+14     	; 0xdf4 <__addsf3+0x28>
     de6:	9f 3f       	cpi	r25, 0xFF	; 255
     de8:	19 f4       	brne	.+6      	; 0xdf0 <__addsf3+0x24>
     dea:	26 f4       	brtc	.+8      	; 0xdf4 <__addsf3+0x28>
     dec:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_nan>
     df0:	0e f4       	brtc	.+2      	; 0xdf4 <__addsf3+0x28>
     df2:	e0 95       	com	r30
     df4:	e7 fb       	bst	r30, 7
     df6:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>

00000dfa <__addsf3x>:
     dfa:	e9 2f       	mov	r30, r25
     dfc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_split3>
     e00:	58 f3       	brcs	.-42     	; 0xdd8 <__addsf3+0xc>
     e02:	ba 17       	cp	r27, r26
     e04:	62 07       	cpc	r22, r18
     e06:	73 07       	cpc	r23, r19
     e08:	84 07       	cpc	r24, r20
     e0a:	95 07       	cpc	r25, r21
     e0c:	20 f0       	brcs	.+8      	; 0xe16 <__addsf3x+0x1c>
     e0e:	79 f4       	brne	.+30     	; 0xe2e <__addsf3x+0x34>
     e10:	a6 f5       	brtc	.+104    	; 0xe7a <__addsf3x+0x80>
     e12:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_zero>
     e16:	0e f4       	brtc	.+2      	; 0xe1a <__addsf3x+0x20>
     e18:	e0 95       	com	r30
     e1a:	0b 2e       	mov	r0, r27
     e1c:	ba 2f       	mov	r27, r26
     e1e:	a0 2d       	mov	r26, r0
     e20:	0b 01       	movw	r0, r22
     e22:	b9 01       	movw	r22, r18
     e24:	90 01       	movw	r18, r0
     e26:	0c 01       	movw	r0, r24
     e28:	ca 01       	movw	r24, r20
     e2a:	a0 01       	movw	r20, r0
     e2c:	11 24       	eor	r1, r1
     e2e:	ff 27       	eor	r31, r31
     e30:	59 1b       	sub	r21, r25
     e32:	99 f0       	breq	.+38     	; 0xe5a <__addsf3x+0x60>
     e34:	59 3f       	cpi	r21, 0xF9	; 249
     e36:	50 f4       	brcc	.+20     	; 0xe4c <__addsf3x+0x52>
     e38:	50 3e       	cpi	r21, 0xE0	; 224
     e3a:	68 f1       	brcs	.+90     	; 0xe96 <__addsf3x+0x9c>
     e3c:	1a 16       	cp	r1, r26
     e3e:	f0 40       	sbci	r31, 0x00	; 0
     e40:	a2 2f       	mov	r26, r18
     e42:	23 2f       	mov	r18, r19
     e44:	34 2f       	mov	r19, r20
     e46:	44 27       	eor	r20, r20
     e48:	58 5f       	subi	r21, 0xF8	; 248
     e4a:	f3 cf       	rjmp	.-26     	; 0xe32 <__addsf3x+0x38>
     e4c:	46 95       	lsr	r20
     e4e:	37 95       	ror	r19
     e50:	27 95       	ror	r18
     e52:	a7 95       	ror	r26
     e54:	f0 40       	sbci	r31, 0x00	; 0
     e56:	53 95       	inc	r21
     e58:	c9 f7       	brne	.-14     	; 0xe4c <__addsf3x+0x52>
     e5a:	7e f4       	brtc	.+30     	; 0xe7a <__addsf3x+0x80>
     e5c:	1f 16       	cp	r1, r31
     e5e:	ba 0b       	sbc	r27, r26
     e60:	62 0b       	sbc	r22, r18
     e62:	73 0b       	sbc	r23, r19
     e64:	84 0b       	sbc	r24, r20
     e66:	ba f0       	brmi	.+46     	; 0xe96 <__addsf3x+0x9c>
     e68:	91 50       	subi	r25, 0x01	; 1
     e6a:	a1 f0       	breq	.+40     	; 0xe94 <__addsf3x+0x9a>
     e6c:	ff 0f       	add	r31, r31
     e6e:	bb 1f       	adc	r27, r27
     e70:	66 1f       	adc	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	c2 f7       	brpl	.-16     	; 0xe68 <__addsf3x+0x6e>
     e78:	0e c0       	rjmp	.+28     	; 0xe96 <__addsf3x+0x9c>
     e7a:	ba 0f       	add	r27, r26
     e7c:	62 1f       	adc	r22, r18
     e7e:	73 1f       	adc	r23, r19
     e80:	84 1f       	adc	r24, r20
     e82:	48 f4       	brcc	.+18     	; 0xe96 <__addsf3x+0x9c>
     e84:	87 95       	ror	r24
     e86:	77 95       	ror	r23
     e88:	67 95       	ror	r22
     e8a:	b7 95       	ror	r27
     e8c:	f7 95       	ror	r31
     e8e:	9e 3f       	cpi	r25, 0xFE	; 254
     e90:	08 f0       	brcs	.+2      	; 0xe94 <__addsf3x+0x9a>
     e92:	b0 cf       	rjmp	.-160    	; 0xdf4 <__addsf3+0x28>
     e94:	93 95       	inc	r25
     e96:	88 0f       	add	r24, r24
     e98:	08 f0       	brcs	.+2      	; 0xe9c <__addsf3x+0xa2>
     e9a:	99 27       	eor	r25, r25
     e9c:	ee 0f       	add	r30, r30
     e9e:	97 95       	ror	r25
     ea0:	87 95       	ror	r24
     ea2:	08 95       	ret

00000ea4 <__divsf3>:
     ea4:	0e 94 66 07 	call	0xecc	; 0xecc <__divsf3x>
     ea8:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_round>
     eac:	0e 94 40 08 	call	0x1080	; 0x1080 <__fp_pscB>
     eb0:	58 f0       	brcs	.+22     	; 0xec8 <__divsf3+0x24>
     eb2:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_pscA>
     eb6:	40 f0       	brcs	.+16     	; 0xec8 <__divsf3+0x24>
     eb8:	29 f4       	brne	.+10     	; 0xec4 <__divsf3+0x20>
     eba:	5f 3f       	cpi	r21, 0xFF	; 255
     ebc:	29 f0       	breq	.+10     	; 0xec8 <__divsf3+0x24>
     ebe:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>
     ec2:	51 11       	cpse	r21, r1
     ec4:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_szero>
     ec8:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_nan>

00000ecc <__divsf3x>:
     ecc:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_split3>
     ed0:	68 f3       	brcs	.-38     	; 0xeac <__divsf3+0x8>

00000ed2 <__divsf3_pse>:
     ed2:	99 23       	and	r25, r25
     ed4:	b1 f3       	breq	.-20     	; 0xec2 <__divsf3+0x1e>
     ed6:	55 23       	and	r21, r21
     ed8:	91 f3       	breq	.-28     	; 0xebe <__divsf3+0x1a>
     eda:	95 1b       	sub	r25, r21
     edc:	55 0b       	sbc	r21, r21
     ede:	bb 27       	eor	r27, r27
     ee0:	aa 27       	eor	r26, r26
     ee2:	62 17       	cp	r22, r18
     ee4:	73 07       	cpc	r23, r19
     ee6:	84 07       	cpc	r24, r20
     ee8:	38 f0       	brcs	.+14     	; 0xef8 <__divsf3_pse+0x26>
     eea:	9f 5f       	subi	r25, 0xFF	; 255
     eec:	5f 4f       	sbci	r21, 0xFF	; 255
     eee:	22 0f       	add	r18, r18
     ef0:	33 1f       	adc	r19, r19
     ef2:	44 1f       	adc	r20, r20
     ef4:	aa 1f       	adc	r26, r26
     ef6:	a9 f3       	breq	.-22     	; 0xee2 <__divsf3_pse+0x10>
     ef8:	35 d0       	rcall	.+106    	; 0xf64 <__divsf3_pse+0x92>
     efa:	0e 2e       	mov	r0, r30
     efc:	3a f0       	brmi	.+14     	; 0xf0c <__divsf3_pse+0x3a>
     efe:	e0 e8       	ldi	r30, 0x80	; 128
     f00:	32 d0       	rcall	.+100    	; 0xf66 <__divsf3_pse+0x94>
     f02:	91 50       	subi	r25, 0x01	; 1
     f04:	50 40       	sbci	r21, 0x00	; 0
     f06:	e6 95       	lsr	r30
     f08:	00 1c       	adc	r0, r0
     f0a:	ca f7       	brpl	.-14     	; 0xefe <__divsf3_pse+0x2c>
     f0c:	2b d0       	rcall	.+86     	; 0xf64 <__divsf3_pse+0x92>
     f0e:	fe 2f       	mov	r31, r30
     f10:	29 d0       	rcall	.+82     	; 0xf64 <__divsf3_pse+0x92>
     f12:	66 0f       	add	r22, r22
     f14:	77 1f       	adc	r23, r23
     f16:	88 1f       	adc	r24, r24
     f18:	bb 1f       	adc	r27, r27
     f1a:	26 17       	cp	r18, r22
     f1c:	37 07       	cpc	r19, r23
     f1e:	48 07       	cpc	r20, r24
     f20:	ab 07       	cpc	r26, r27
     f22:	b0 e8       	ldi	r27, 0x80	; 128
     f24:	09 f0       	breq	.+2      	; 0xf28 <__divsf3_pse+0x56>
     f26:	bb 0b       	sbc	r27, r27
     f28:	80 2d       	mov	r24, r0
     f2a:	bf 01       	movw	r22, r30
     f2c:	ff 27       	eor	r31, r31
     f2e:	93 58       	subi	r25, 0x83	; 131
     f30:	5f 4f       	sbci	r21, 0xFF	; 255
     f32:	3a f0       	brmi	.+14     	; 0xf42 <__divsf3_pse+0x70>
     f34:	9e 3f       	cpi	r25, 0xFE	; 254
     f36:	51 05       	cpc	r21, r1
     f38:	78 f0       	brcs	.+30     	; 0xf58 <__divsf3_pse+0x86>
     f3a:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>
     f3e:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_szero>
     f42:	5f 3f       	cpi	r21, 0xFF	; 255
     f44:	e4 f3       	brlt	.-8      	; 0xf3e <__divsf3_pse+0x6c>
     f46:	98 3e       	cpi	r25, 0xE8	; 232
     f48:	d4 f3       	brlt	.-12     	; 0xf3e <__divsf3_pse+0x6c>
     f4a:	86 95       	lsr	r24
     f4c:	77 95       	ror	r23
     f4e:	67 95       	ror	r22
     f50:	b7 95       	ror	r27
     f52:	f7 95       	ror	r31
     f54:	9f 5f       	subi	r25, 0xFF	; 255
     f56:	c9 f7       	brne	.-14     	; 0xf4a <__divsf3_pse+0x78>
     f58:	88 0f       	add	r24, r24
     f5a:	91 1d       	adc	r25, r1
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	97 f9       	bld	r25, 7
     f62:	08 95       	ret
     f64:	e1 e0       	ldi	r30, 0x01	; 1
     f66:	66 0f       	add	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	88 1f       	adc	r24, r24
     f6c:	bb 1f       	adc	r27, r27
     f6e:	62 17       	cp	r22, r18
     f70:	73 07       	cpc	r23, r19
     f72:	84 07       	cpc	r24, r20
     f74:	ba 07       	cpc	r27, r26
     f76:	20 f0       	brcs	.+8      	; 0xf80 <__divsf3_pse+0xae>
     f78:	62 1b       	sub	r22, r18
     f7a:	73 0b       	sbc	r23, r19
     f7c:	84 0b       	sbc	r24, r20
     f7e:	ba 0b       	sbc	r27, r26
     f80:	ee 1f       	adc	r30, r30
     f82:	88 f7       	brcc	.-30     	; 0xf66 <__divsf3_pse+0x94>
     f84:	e0 95       	com	r30
     f86:	08 95       	ret

00000f88 <__fixunssfsi>:
     f88:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__fp_splitA>
     f8c:	88 f0       	brcs	.+34     	; 0xfb0 <__fixunssfsi+0x28>
     f8e:	9f 57       	subi	r25, 0x7F	; 127
     f90:	98 f0       	brcs	.+38     	; 0xfb8 <__fixunssfsi+0x30>
     f92:	b9 2f       	mov	r27, r25
     f94:	99 27       	eor	r25, r25
     f96:	b7 51       	subi	r27, 0x17	; 23
     f98:	b0 f0       	brcs	.+44     	; 0xfc6 <__fixunssfsi+0x3e>
     f9a:	e1 f0       	breq	.+56     	; 0xfd4 <__fixunssfsi+0x4c>
     f9c:	66 0f       	add	r22, r22
     f9e:	77 1f       	adc	r23, r23
     fa0:	88 1f       	adc	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	1a f0       	brmi	.+6      	; 0xfac <__fixunssfsi+0x24>
     fa6:	ba 95       	dec	r27
     fa8:	c9 f7       	brne	.-14     	; 0xf9c <__fixunssfsi+0x14>
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <__fixunssfsi+0x4c>
     fac:	b1 30       	cpi	r27, 0x01	; 1
     fae:	91 f0       	breq	.+36     	; 0xfd4 <__fixunssfsi+0x4c>
     fb0:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <__fp_zero>
     fb4:	b1 e0       	ldi	r27, 0x01	; 1
     fb6:	08 95       	ret
     fb8:	0c 94 7a 08 	jmp	0x10f4	; 0x10f4 <__fp_zero>
     fbc:	67 2f       	mov	r22, r23
     fbe:	78 2f       	mov	r23, r24
     fc0:	88 27       	eor	r24, r24
     fc2:	b8 5f       	subi	r27, 0xF8	; 248
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <__fixunssfsi+0x4c>
     fc6:	b9 3f       	cpi	r27, 0xF9	; 249
     fc8:	cc f3       	brlt	.-14     	; 0xfbc <__fixunssfsi+0x34>
     fca:	86 95       	lsr	r24
     fcc:	77 95       	ror	r23
     fce:	67 95       	ror	r22
     fd0:	b3 95       	inc	r27
     fd2:	d9 f7       	brne	.-10     	; 0xfca <__fixunssfsi+0x42>
     fd4:	3e f4       	brtc	.+14     	; 0xfe4 <__fixunssfsi+0x5c>
     fd6:	90 95       	com	r25
     fd8:	80 95       	com	r24
     fda:	70 95       	com	r23
     fdc:	61 95       	neg	r22
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	8f 4f       	sbci	r24, 0xFF	; 255
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	08 95       	ret

00000fe6 <__floatunsisf>:
     fe6:	e8 94       	clt
     fe8:	09 c0       	rjmp	.+18     	; 0xffc <__floatsisf+0x12>

00000fea <__floatsisf>:
     fea:	97 fb       	bst	r25, 7
     fec:	3e f4       	brtc	.+14     	; 0xffc <__floatsisf+0x12>
     fee:	90 95       	com	r25
     ff0:	80 95       	com	r24
     ff2:	70 95       	com	r23
     ff4:	61 95       	neg	r22
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	99 23       	and	r25, r25
     ffe:	a9 f0       	breq	.+42     	; 0x102a <__floatsisf+0x40>
    1000:	f9 2f       	mov	r31, r25
    1002:	96 e9       	ldi	r25, 0x96	; 150
    1004:	bb 27       	eor	r27, r27
    1006:	93 95       	inc	r25
    1008:	f6 95       	lsr	r31
    100a:	87 95       	ror	r24
    100c:	77 95       	ror	r23
    100e:	67 95       	ror	r22
    1010:	b7 95       	ror	r27
    1012:	f1 11       	cpse	r31, r1
    1014:	f8 cf       	rjmp	.-16     	; 0x1006 <__floatsisf+0x1c>
    1016:	fa f4       	brpl	.+62     	; 0x1056 <__floatsisf+0x6c>
    1018:	bb 0f       	add	r27, r27
    101a:	11 f4       	brne	.+4      	; 0x1020 <__floatsisf+0x36>
    101c:	60 ff       	sbrs	r22, 0
    101e:	1b c0       	rjmp	.+54     	; 0x1056 <__floatsisf+0x6c>
    1020:	6f 5f       	subi	r22, 0xFF	; 255
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	8f 4f       	sbci	r24, 0xFF	; 255
    1026:	9f 4f       	sbci	r25, 0xFF	; 255
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <__floatsisf+0x6c>
    102a:	88 23       	and	r24, r24
    102c:	11 f0       	breq	.+4      	; 0x1032 <__floatsisf+0x48>
    102e:	96 e9       	ldi	r25, 0x96	; 150
    1030:	11 c0       	rjmp	.+34     	; 0x1054 <__floatsisf+0x6a>
    1032:	77 23       	and	r23, r23
    1034:	21 f0       	breq	.+8      	; 0x103e <__floatsisf+0x54>
    1036:	9e e8       	ldi	r25, 0x8E	; 142
    1038:	87 2f       	mov	r24, r23
    103a:	76 2f       	mov	r23, r22
    103c:	05 c0       	rjmp	.+10     	; 0x1048 <__floatsisf+0x5e>
    103e:	66 23       	and	r22, r22
    1040:	71 f0       	breq	.+28     	; 0x105e <__floatsisf+0x74>
    1042:	96 e8       	ldi	r25, 0x86	; 134
    1044:	86 2f       	mov	r24, r22
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	2a f0       	brmi	.+10     	; 0x1056 <__floatsisf+0x6c>
    104c:	9a 95       	dec	r25
    104e:	66 0f       	add	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	88 1f       	adc	r24, r24
    1054:	da f7       	brpl	.-10     	; 0x104c <__floatsisf+0x62>
    1056:	88 0f       	add	r24, r24
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <__fp_inf>:
    1060:	97 f9       	bld	r25, 7
    1062:	9f 67       	ori	r25, 0x7F	; 127
    1064:	80 e8       	ldi	r24, 0x80	; 128
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	08 95       	ret

0000106c <__fp_nan>:
    106c:	9f ef       	ldi	r25, 0xFF	; 255
    106e:	80 ec       	ldi	r24, 0xC0	; 192
    1070:	08 95       	ret

00001072 <__fp_pscA>:
    1072:	00 24       	eor	r0, r0
    1074:	0a 94       	dec	r0
    1076:	16 16       	cp	r1, r22
    1078:	17 06       	cpc	r1, r23
    107a:	18 06       	cpc	r1, r24
    107c:	09 06       	cpc	r0, r25
    107e:	08 95       	ret

00001080 <__fp_pscB>:
    1080:	00 24       	eor	r0, r0
    1082:	0a 94       	dec	r0
    1084:	12 16       	cp	r1, r18
    1086:	13 06       	cpc	r1, r19
    1088:	14 06       	cpc	r1, r20
    108a:	05 06       	cpc	r0, r21
    108c:	08 95       	ret

0000108e <__fp_round>:
    108e:	09 2e       	mov	r0, r25
    1090:	03 94       	inc	r0
    1092:	00 0c       	add	r0, r0
    1094:	11 f4       	brne	.+4      	; 0x109a <__fp_round+0xc>
    1096:	88 23       	and	r24, r24
    1098:	52 f0       	brmi	.+20     	; 0x10ae <__fp_round+0x20>
    109a:	bb 0f       	add	r27, r27
    109c:	40 f4       	brcc	.+16     	; 0x10ae <__fp_round+0x20>
    109e:	bf 2b       	or	r27, r31
    10a0:	11 f4       	brne	.+4      	; 0x10a6 <__fp_round+0x18>
    10a2:	60 ff       	sbrs	r22, 0
    10a4:	04 c0       	rjmp	.+8      	; 0x10ae <__fp_round+0x20>
    10a6:	6f 5f       	subi	r22, 0xFF	; 255
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255
    10aa:	8f 4f       	sbci	r24, 0xFF	; 255
    10ac:	9f 4f       	sbci	r25, 0xFF	; 255
    10ae:	08 95       	ret

000010b0 <__fp_split3>:
    10b0:	57 fd       	sbrc	r21, 7
    10b2:	90 58       	subi	r25, 0x80	; 128
    10b4:	44 0f       	add	r20, r20
    10b6:	55 1f       	adc	r21, r21
    10b8:	59 f0       	breq	.+22     	; 0x10d0 <__fp_splitA+0x10>
    10ba:	5f 3f       	cpi	r21, 0xFF	; 255
    10bc:	71 f0       	breq	.+28     	; 0x10da <__fp_splitA+0x1a>
    10be:	47 95       	ror	r20

000010c0 <__fp_splitA>:
    10c0:	88 0f       	add	r24, r24
    10c2:	97 fb       	bst	r25, 7
    10c4:	99 1f       	adc	r25, r25
    10c6:	61 f0       	breq	.+24     	; 0x10e0 <__fp_splitA+0x20>
    10c8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ca:	79 f0       	breq	.+30     	; 0x10ea <__fp_splitA+0x2a>
    10cc:	87 95       	ror	r24
    10ce:	08 95       	ret
    10d0:	12 16       	cp	r1, r18
    10d2:	13 06       	cpc	r1, r19
    10d4:	14 06       	cpc	r1, r20
    10d6:	55 1f       	adc	r21, r21
    10d8:	f2 cf       	rjmp	.-28     	; 0x10be <__fp_split3+0xe>
    10da:	46 95       	lsr	r20
    10dc:	f1 df       	rcall	.-30     	; 0x10c0 <__fp_splitA>
    10de:	08 c0       	rjmp	.+16     	; 0x10f0 <__fp_splitA+0x30>
    10e0:	16 16       	cp	r1, r22
    10e2:	17 06       	cpc	r1, r23
    10e4:	18 06       	cpc	r1, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	f1 cf       	rjmp	.-30     	; 0x10cc <__fp_splitA+0xc>
    10ea:	86 95       	lsr	r24
    10ec:	71 05       	cpc	r23, r1
    10ee:	61 05       	cpc	r22, r1
    10f0:	08 94       	sec
    10f2:	08 95       	ret

000010f4 <__fp_zero>:
    10f4:	e8 94       	clt

000010f6 <__fp_szero>:
    10f6:	bb 27       	eor	r27, r27
    10f8:	66 27       	eor	r22, r22
    10fa:	77 27       	eor	r23, r23
    10fc:	cb 01       	movw	r24, r22
    10fe:	97 f9       	bld	r25, 7
    1100:	08 95       	ret

00001102 <__mulsf3>:
    1102:	0e 94 94 08 	call	0x1128	; 0x1128 <__mulsf3x>
    1106:	0c 94 47 08 	jmp	0x108e	; 0x108e <__fp_round>
    110a:	0e 94 39 08 	call	0x1072	; 0x1072 <__fp_pscA>
    110e:	38 f0       	brcs	.+14     	; 0x111e <__mulsf3+0x1c>
    1110:	0e 94 40 08 	call	0x1080	; 0x1080 <__fp_pscB>
    1114:	20 f0       	brcs	.+8      	; 0x111e <__mulsf3+0x1c>
    1116:	95 23       	and	r25, r21
    1118:	11 f0       	breq	.+4      	; 0x111e <__mulsf3+0x1c>
    111a:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>
    111e:	0c 94 36 08 	jmp	0x106c	; 0x106c <__fp_nan>
    1122:	11 24       	eor	r1, r1
    1124:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_szero>

00001128 <__mulsf3x>:
    1128:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__fp_split3>
    112c:	70 f3       	brcs	.-36     	; 0x110a <__mulsf3+0x8>

0000112e <__mulsf3_pse>:
    112e:	95 9f       	mul	r25, r21
    1130:	c1 f3       	breq	.-16     	; 0x1122 <__mulsf3+0x20>
    1132:	95 0f       	add	r25, r21
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	55 1f       	adc	r21, r21
    1138:	62 9f       	mul	r22, r18
    113a:	f0 01       	movw	r30, r0
    113c:	72 9f       	mul	r23, r18
    113e:	bb 27       	eor	r27, r27
    1140:	f0 0d       	add	r31, r0
    1142:	b1 1d       	adc	r27, r1
    1144:	63 9f       	mul	r22, r19
    1146:	aa 27       	eor	r26, r26
    1148:	f0 0d       	add	r31, r0
    114a:	b1 1d       	adc	r27, r1
    114c:	aa 1f       	adc	r26, r26
    114e:	64 9f       	mul	r22, r20
    1150:	66 27       	eor	r22, r22
    1152:	b0 0d       	add	r27, r0
    1154:	a1 1d       	adc	r26, r1
    1156:	66 1f       	adc	r22, r22
    1158:	82 9f       	mul	r24, r18
    115a:	22 27       	eor	r18, r18
    115c:	b0 0d       	add	r27, r0
    115e:	a1 1d       	adc	r26, r1
    1160:	62 1f       	adc	r22, r18
    1162:	73 9f       	mul	r23, r19
    1164:	b0 0d       	add	r27, r0
    1166:	a1 1d       	adc	r26, r1
    1168:	62 1f       	adc	r22, r18
    116a:	83 9f       	mul	r24, r19
    116c:	a0 0d       	add	r26, r0
    116e:	61 1d       	adc	r22, r1
    1170:	22 1f       	adc	r18, r18
    1172:	74 9f       	mul	r23, r20
    1174:	33 27       	eor	r19, r19
    1176:	a0 0d       	add	r26, r0
    1178:	61 1d       	adc	r22, r1
    117a:	23 1f       	adc	r18, r19
    117c:	84 9f       	mul	r24, r20
    117e:	60 0d       	add	r22, r0
    1180:	21 1d       	adc	r18, r1
    1182:	82 2f       	mov	r24, r18
    1184:	76 2f       	mov	r23, r22
    1186:	6a 2f       	mov	r22, r26
    1188:	11 24       	eor	r1, r1
    118a:	9f 57       	subi	r25, 0x7F	; 127
    118c:	50 40       	sbci	r21, 0x00	; 0
    118e:	9a f0       	brmi	.+38     	; 0x11b6 <__mulsf3_pse+0x88>
    1190:	f1 f0       	breq	.+60     	; 0x11ce <__mulsf3_pse+0xa0>
    1192:	88 23       	and	r24, r24
    1194:	4a f0       	brmi	.+18     	; 0x11a8 <__mulsf3_pse+0x7a>
    1196:	ee 0f       	add	r30, r30
    1198:	ff 1f       	adc	r31, r31
    119a:	bb 1f       	adc	r27, r27
    119c:	66 1f       	adc	r22, r22
    119e:	77 1f       	adc	r23, r23
    11a0:	88 1f       	adc	r24, r24
    11a2:	91 50       	subi	r25, 0x01	; 1
    11a4:	50 40       	sbci	r21, 0x00	; 0
    11a6:	a9 f7       	brne	.-22     	; 0x1192 <__mulsf3_pse+0x64>
    11a8:	9e 3f       	cpi	r25, 0xFE	; 254
    11aa:	51 05       	cpc	r21, r1
    11ac:	80 f0       	brcs	.+32     	; 0x11ce <__mulsf3_pse+0xa0>
    11ae:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_inf>
    11b2:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_szero>
    11b6:	5f 3f       	cpi	r21, 0xFF	; 255
    11b8:	e4 f3       	brlt	.-8      	; 0x11b2 <__mulsf3_pse+0x84>
    11ba:	98 3e       	cpi	r25, 0xE8	; 232
    11bc:	d4 f3       	brlt	.-12     	; 0x11b2 <__mulsf3_pse+0x84>
    11be:	86 95       	lsr	r24
    11c0:	77 95       	ror	r23
    11c2:	67 95       	ror	r22
    11c4:	b7 95       	ror	r27
    11c6:	f7 95       	ror	r31
    11c8:	e7 95       	ror	r30
    11ca:	9f 5f       	subi	r25, 0xFF	; 255
    11cc:	c1 f7       	brne	.-16     	; 0x11be <__mulsf3_pse+0x90>
    11ce:	fe 2b       	or	r31, r30
    11d0:	88 0f       	add	r24, r24
    11d2:	91 1d       	adc	r25, r1
    11d4:	96 95       	lsr	r25
    11d6:	87 95       	ror	r24
    11d8:	97 f9       	bld	r25, 7
    11da:	08 95       	ret

000011dc <round>:
    11dc:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__fp_splitA>
    11e0:	e8 f0       	brcs	.+58     	; 0x121c <round+0x40>
    11e2:	9e 37       	cpi	r25, 0x7E	; 126
    11e4:	e8 f0       	brcs	.+58     	; 0x1220 <round+0x44>
    11e6:	96 39       	cpi	r25, 0x96	; 150
    11e8:	b8 f4       	brcc	.+46     	; 0x1218 <round+0x3c>
    11ea:	9e 38       	cpi	r25, 0x8E	; 142
    11ec:	48 f4       	brcc	.+18     	; 0x1200 <round+0x24>
    11ee:	67 2f       	mov	r22, r23
    11f0:	78 2f       	mov	r23, r24
    11f2:	88 27       	eor	r24, r24
    11f4:	98 5f       	subi	r25, 0xF8	; 248
    11f6:	f9 cf       	rjmp	.-14     	; 0x11ea <round+0xe>
    11f8:	86 95       	lsr	r24
    11fa:	77 95       	ror	r23
    11fc:	67 95       	ror	r22
    11fe:	93 95       	inc	r25
    1200:	95 39       	cpi	r25, 0x95	; 149
    1202:	d0 f3       	brcs	.-12     	; 0x11f8 <round+0x1c>
    1204:	b6 2f       	mov	r27, r22
    1206:	b1 70       	andi	r27, 0x01	; 1
    1208:	6b 0f       	add	r22, r27
    120a:	71 1d       	adc	r23, r1
    120c:	81 1d       	adc	r24, r1
    120e:	20 f4       	brcc	.+8      	; 0x1218 <round+0x3c>
    1210:	87 95       	ror	r24
    1212:	77 95       	ror	r23
    1214:	67 95       	ror	r22
    1216:	93 95       	inc	r25
    1218:	0c 94 12 09 	jmp	0x1224	; 0x1224 <__fp_mintl>
    121c:	0c 94 2d 09 	jmp	0x125a	; 0x125a <__fp_mpack>
    1220:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__fp_szero>

00001224 <__fp_mintl>:
    1224:	88 23       	and	r24, r24
    1226:	71 f4       	brne	.+28     	; 0x1244 <__fp_mintl+0x20>
    1228:	77 23       	and	r23, r23
    122a:	21 f0       	breq	.+8      	; 0x1234 <__fp_mintl+0x10>
    122c:	98 50       	subi	r25, 0x08	; 8
    122e:	87 2b       	or	r24, r23
    1230:	76 2f       	mov	r23, r22
    1232:	07 c0       	rjmp	.+14     	; 0x1242 <__fp_mintl+0x1e>
    1234:	66 23       	and	r22, r22
    1236:	11 f4       	brne	.+4      	; 0x123c <__fp_mintl+0x18>
    1238:	99 27       	eor	r25, r25
    123a:	0d c0       	rjmp	.+26     	; 0x1256 <__fp_mintl+0x32>
    123c:	90 51       	subi	r25, 0x10	; 16
    123e:	86 2b       	or	r24, r22
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	2a f0       	brmi	.+10     	; 0x1250 <__fp_mintl+0x2c>
    1246:	9a 95       	dec	r25
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	da f7       	brpl	.-10     	; 0x1246 <__fp_mintl+0x22>
    1250:	88 0f       	add	r24, r24
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	97 f9       	bld	r25, 7
    1258:	08 95       	ret

0000125a <__fp_mpack>:
    125a:	9f 3f       	cpi	r25, 0xFF	; 255
    125c:	31 f0       	breq	.+12     	; 0x126a <__fp_mpack_finite+0xc>

0000125e <__fp_mpack_finite>:
    125e:	91 50       	subi	r25, 0x01	; 1
    1260:	20 f4       	brcc	.+8      	; 0x126a <__fp_mpack_finite+0xc>
    1262:	87 95       	ror	r24
    1264:	77 95       	ror	r23
    1266:	67 95       	ror	r22
    1268:	b7 95       	ror	r27
    126a:	88 0f       	add	r24, r24
    126c:	91 1d       	adc	r25, r1
    126e:	96 95       	lsr	r25
    1270:	87 95       	ror	r24
    1272:	97 f9       	bld	r25, 7
    1274:	08 95       	ret

00001276 <__umulhisi3>:
    1276:	a2 9f       	mul	r26, r18
    1278:	b0 01       	movw	r22, r0
    127a:	b3 9f       	mul	r27, r19
    127c:	c0 01       	movw	r24, r0
    127e:	a3 9f       	mul	r26, r19
    1280:	70 0d       	add	r23, r0
    1282:	81 1d       	adc	r24, r1
    1284:	11 24       	eor	r1, r1
    1286:	91 1d       	adc	r25, r1
    1288:	b2 9f       	mul	r27, r18
    128a:	70 0d       	add	r23, r0
    128c:	81 1d       	adc	r24, r1
    128e:	11 24       	eor	r1, r1
    1290:	91 1d       	adc	r25, r1
    1292:	08 95       	ret

00001294 <printf>:
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e0 e5       	ldi	r30, 0x50	; 80
    129a:	f9 e0       	ldi	r31, 0x09	; 9
    129c:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__prologue_saves__+0x20>
    12a0:	ae 01       	movw	r20, r28
    12a2:	4b 5f       	subi	r20, 0xFB	; 251
    12a4:	5f 4f       	sbci	r21, 0xFF	; 255
    12a6:	fa 01       	movw	r30, r20
    12a8:	61 91       	ld	r22, Z+
    12aa:	71 91       	ld	r23, Z+
    12ac:	af 01       	movw	r20, r30
    12ae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__iob+0x2>
    12b2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__iob+0x3>
    12b6:	0e 94 90 09 	call	0x1320	; 0x1320 <vfprintf>
    12ba:	e2 e0       	ldi	r30, 0x02	; 2
    12bc:	0c 94 66 0c 	jmp	0x18cc	; 0x18cc <__epilogue_restores__+0x20>

000012c0 <puts>:
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <__iob+0x2>
    12cc:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <__iob+0x3>
    12d0:	23 81       	ldd	r18, Z+3	; 0x03
    12d2:	21 ff       	sbrs	r18, 1
    12d4:	1b c0       	rjmp	.+54     	; 0x130c <puts+0x4c>
    12d6:	8c 01       	movw	r16, r24
    12d8:	d0 e0       	ldi	r29, 0x00	; 0
    12da:	c0 e0       	ldi	r28, 0x00	; 0
    12dc:	f8 01       	movw	r30, r16
    12de:	81 91       	ld	r24, Z+
    12e0:	8f 01       	movw	r16, r30
    12e2:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__iob+0x2>
    12e6:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__iob+0x3>
    12ea:	db 01       	movw	r26, r22
    12ec:	18 96       	adiw	r26, 0x08	; 8
    12ee:	ed 91       	ld	r30, X+
    12f0:	fc 91       	ld	r31, X
    12f2:	19 97       	sbiw	r26, 0x09	; 9
    12f4:	88 23       	and	r24, r24
    12f6:	31 f0       	breq	.+12     	; 0x1304 <puts+0x44>
    12f8:	09 95       	icall
    12fa:	89 2b       	or	r24, r25
    12fc:	79 f3       	breq	.-34     	; 0x12dc <puts+0x1c>
    12fe:	df ef       	ldi	r29, 0xFF	; 255
    1300:	cf ef       	ldi	r28, 0xFF	; 255
    1302:	ec cf       	rjmp	.-40     	; 0x12dc <puts+0x1c>
    1304:	8a e0       	ldi	r24, 0x0A	; 10
    1306:	09 95       	icall
    1308:	89 2b       	or	r24, r25
    130a:	19 f0       	breq	.+6      	; 0x1312 <puts+0x52>
    130c:	8f ef       	ldi	r24, 0xFF	; 255
    130e:	9f ef       	ldi	r25, 0xFF	; 255
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <puts+0x56>
    1312:	8d 2f       	mov	r24, r29
    1314:	9c 2f       	mov	r25, r28
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	08 95       	ret

00001320 <vfprintf>:
    1320:	ab e0       	ldi	r26, 0x0B	; 11
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e6 e9       	ldi	r30, 0x96	; 150
    1326:	f9 e0       	ldi	r31, 0x09	; 9
    1328:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <__prologue_saves__>
    132c:	6c 01       	movw	r12, r24
    132e:	7b 01       	movw	r14, r22
    1330:	8a 01       	movw	r16, r20
    1332:	fc 01       	movw	r30, r24
    1334:	17 82       	std	Z+7, r1	; 0x07
    1336:	16 82       	std	Z+6, r1	; 0x06
    1338:	83 81       	ldd	r24, Z+3	; 0x03
    133a:	81 ff       	sbrs	r24, 1
    133c:	cc c1       	rjmp	.+920    	; 0x16d6 <vfprintf+0x3b6>
    133e:	ce 01       	movw	r24, r28
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	3c 01       	movw	r6, r24
    1344:	f6 01       	movw	r30, r12
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	f7 01       	movw	r30, r14
    134a:	93 fd       	sbrc	r25, 3
    134c:	85 91       	lpm	r24, Z+
    134e:	93 ff       	sbrs	r25, 3
    1350:	81 91       	ld	r24, Z+
    1352:	7f 01       	movw	r14, r30
    1354:	88 23       	and	r24, r24
    1356:	09 f4       	brne	.+2      	; 0x135a <vfprintf+0x3a>
    1358:	ba c1       	rjmp	.+884    	; 0x16ce <vfprintf+0x3ae>
    135a:	85 32       	cpi	r24, 0x25	; 37
    135c:	39 f4       	brne	.+14     	; 0x136c <vfprintf+0x4c>
    135e:	93 fd       	sbrc	r25, 3
    1360:	85 91       	lpm	r24, Z+
    1362:	93 ff       	sbrs	r25, 3
    1364:	81 91       	ld	r24, Z+
    1366:	7f 01       	movw	r14, r30
    1368:	85 32       	cpi	r24, 0x25	; 37
    136a:	29 f4       	brne	.+10     	; 0x1376 <vfprintf+0x56>
    136c:	b6 01       	movw	r22, r12
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 87 0b 	call	0x170e	; 0x170e <fputc>
    1374:	e7 cf       	rjmp	.-50     	; 0x1344 <vfprintf+0x24>
    1376:	91 2c       	mov	r9, r1
    1378:	21 2c       	mov	r2, r1
    137a:	31 2c       	mov	r3, r1
    137c:	ff e1       	ldi	r31, 0x1F	; 31
    137e:	f3 15       	cp	r31, r3
    1380:	d8 f0       	brcs	.+54     	; 0x13b8 <vfprintf+0x98>
    1382:	8b 32       	cpi	r24, 0x2B	; 43
    1384:	79 f0       	breq	.+30     	; 0x13a4 <vfprintf+0x84>
    1386:	38 f4       	brcc	.+14     	; 0x1396 <vfprintf+0x76>
    1388:	80 32       	cpi	r24, 0x20	; 32
    138a:	79 f0       	breq	.+30     	; 0x13aa <vfprintf+0x8a>
    138c:	83 32       	cpi	r24, 0x23	; 35
    138e:	a1 f4       	brne	.+40     	; 0x13b8 <vfprintf+0x98>
    1390:	23 2d       	mov	r18, r3
    1392:	20 61       	ori	r18, 0x10	; 16
    1394:	1d c0       	rjmp	.+58     	; 0x13d0 <vfprintf+0xb0>
    1396:	8d 32       	cpi	r24, 0x2D	; 45
    1398:	61 f0       	breq	.+24     	; 0x13b2 <vfprintf+0x92>
    139a:	80 33       	cpi	r24, 0x30	; 48
    139c:	69 f4       	brne	.+26     	; 0x13b8 <vfprintf+0x98>
    139e:	23 2d       	mov	r18, r3
    13a0:	21 60       	ori	r18, 0x01	; 1
    13a2:	16 c0       	rjmp	.+44     	; 0x13d0 <vfprintf+0xb0>
    13a4:	83 2d       	mov	r24, r3
    13a6:	82 60       	ori	r24, 0x02	; 2
    13a8:	38 2e       	mov	r3, r24
    13aa:	e3 2d       	mov	r30, r3
    13ac:	e4 60       	ori	r30, 0x04	; 4
    13ae:	3e 2e       	mov	r3, r30
    13b0:	2a c0       	rjmp	.+84     	; 0x1406 <vfprintf+0xe6>
    13b2:	f3 2d       	mov	r31, r3
    13b4:	f8 60       	ori	r31, 0x08	; 8
    13b6:	1d c0       	rjmp	.+58     	; 0x13f2 <vfprintf+0xd2>
    13b8:	37 fc       	sbrc	r3, 7
    13ba:	2d c0       	rjmp	.+90     	; 0x1416 <vfprintf+0xf6>
    13bc:	20 ed       	ldi	r18, 0xD0	; 208
    13be:	28 0f       	add	r18, r24
    13c0:	2a 30       	cpi	r18, 0x0A	; 10
    13c2:	40 f0       	brcs	.+16     	; 0x13d4 <vfprintf+0xb4>
    13c4:	8e 32       	cpi	r24, 0x2E	; 46
    13c6:	b9 f4       	brne	.+46     	; 0x13f6 <vfprintf+0xd6>
    13c8:	36 fc       	sbrc	r3, 6
    13ca:	81 c1       	rjmp	.+770    	; 0x16ce <vfprintf+0x3ae>
    13cc:	23 2d       	mov	r18, r3
    13ce:	20 64       	ori	r18, 0x40	; 64
    13d0:	32 2e       	mov	r3, r18
    13d2:	19 c0       	rjmp	.+50     	; 0x1406 <vfprintf+0xe6>
    13d4:	36 fe       	sbrs	r3, 6
    13d6:	06 c0       	rjmp	.+12     	; 0x13e4 <vfprintf+0xc4>
    13d8:	8a e0       	ldi	r24, 0x0A	; 10
    13da:	98 9e       	mul	r9, r24
    13dc:	20 0d       	add	r18, r0
    13de:	11 24       	eor	r1, r1
    13e0:	92 2e       	mov	r9, r18
    13e2:	11 c0       	rjmp	.+34     	; 0x1406 <vfprintf+0xe6>
    13e4:	ea e0       	ldi	r30, 0x0A	; 10
    13e6:	2e 9e       	mul	r2, r30
    13e8:	20 0d       	add	r18, r0
    13ea:	11 24       	eor	r1, r1
    13ec:	22 2e       	mov	r2, r18
    13ee:	f3 2d       	mov	r31, r3
    13f0:	f0 62       	ori	r31, 0x20	; 32
    13f2:	3f 2e       	mov	r3, r31
    13f4:	08 c0       	rjmp	.+16     	; 0x1406 <vfprintf+0xe6>
    13f6:	8c 36       	cpi	r24, 0x6C	; 108
    13f8:	21 f4       	brne	.+8      	; 0x1402 <vfprintf+0xe2>
    13fa:	83 2d       	mov	r24, r3
    13fc:	80 68       	ori	r24, 0x80	; 128
    13fe:	38 2e       	mov	r3, r24
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <vfprintf+0xe6>
    1402:	88 36       	cpi	r24, 0x68	; 104
    1404:	41 f4       	brne	.+16     	; 0x1416 <vfprintf+0xf6>
    1406:	f7 01       	movw	r30, r14
    1408:	93 fd       	sbrc	r25, 3
    140a:	85 91       	lpm	r24, Z+
    140c:	93 ff       	sbrs	r25, 3
    140e:	81 91       	ld	r24, Z+
    1410:	7f 01       	movw	r14, r30
    1412:	81 11       	cpse	r24, r1
    1414:	b3 cf       	rjmp	.-154    	; 0x137c <vfprintf+0x5c>
    1416:	98 2f       	mov	r25, r24
    1418:	9f 7d       	andi	r25, 0xDF	; 223
    141a:	95 54       	subi	r25, 0x45	; 69
    141c:	93 30       	cpi	r25, 0x03	; 3
    141e:	28 f4       	brcc	.+10     	; 0x142a <vfprintf+0x10a>
    1420:	0c 5f       	subi	r16, 0xFC	; 252
    1422:	1f 4f       	sbci	r17, 0xFF	; 255
    1424:	9f e3       	ldi	r25, 0x3F	; 63
    1426:	99 83       	std	Y+1, r25	; 0x01
    1428:	0d c0       	rjmp	.+26     	; 0x1444 <vfprintf+0x124>
    142a:	83 36       	cpi	r24, 0x63	; 99
    142c:	31 f0       	breq	.+12     	; 0x143a <vfprintf+0x11a>
    142e:	83 37       	cpi	r24, 0x73	; 115
    1430:	71 f0       	breq	.+28     	; 0x144e <vfprintf+0x12e>
    1432:	83 35       	cpi	r24, 0x53	; 83
    1434:	09 f0       	breq	.+2      	; 0x1438 <vfprintf+0x118>
    1436:	59 c0       	rjmp	.+178    	; 0x14ea <vfprintf+0x1ca>
    1438:	21 c0       	rjmp	.+66     	; 0x147c <vfprintf+0x15c>
    143a:	f8 01       	movw	r30, r16
    143c:	80 81       	ld	r24, Z
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	0e 5f       	subi	r16, 0xFE	; 254
    1442:	1f 4f       	sbci	r17, 0xFF	; 255
    1444:	88 24       	eor	r8, r8
    1446:	83 94       	inc	r8
    1448:	91 2c       	mov	r9, r1
    144a:	53 01       	movw	r10, r6
    144c:	13 c0       	rjmp	.+38     	; 0x1474 <vfprintf+0x154>
    144e:	28 01       	movw	r4, r16
    1450:	f2 e0       	ldi	r31, 0x02	; 2
    1452:	4f 0e       	add	r4, r31
    1454:	51 1c       	adc	r5, r1
    1456:	f8 01       	movw	r30, r16
    1458:	a0 80       	ld	r10, Z
    145a:	b1 80       	ldd	r11, Z+1	; 0x01
    145c:	36 fe       	sbrs	r3, 6
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <vfprintf+0x146>
    1460:	69 2d       	mov	r22, r9
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <vfprintf+0x14a>
    1466:	6f ef       	ldi	r22, 0xFF	; 255
    1468:	7f ef       	ldi	r23, 0xFF	; 255
    146a:	c5 01       	movw	r24, r10
    146c:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <strnlen>
    1470:	4c 01       	movw	r8, r24
    1472:	82 01       	movw	r16, r4
    1474:	f3 2d       	mov	r31, r3
    1476:	ff 77       	andi	r31, 0x7F	; 127
    1478:	3f 2e       	mov	r3, r31
    147a:	16 c0       	rjmp	.+44     	; 0x14a8 <vfprintf+0x188>
    147c:	28 01       	movw	r4, r16
    147e:	22 e0       	ldi	r18, 0x02	; 2
    1480:	42 0e       	add	r4, r18
    1482:	51 1c       	adc	r5, r1
    1484:	f8 01       	movw	r30, r16
    1486:	a0 80       	ld	r10, Z
    1488:	b1 80       	ldd	r11, Z+1	; 0x01
    148a:	36 fe       	sbrs	r3, 6
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <vfprintf+0x174>
    148e:	69 2d       	mov	r22, r9
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <vfprintf+0x178>
    1494:	6f ef       	ldi	r22, 0xFF	; 255
    1496:	7f ef       	ldi	r23, 0xFF	; 255
    1498:	c5 01       	movw	r24, r10
    149a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <strnlen_P>
    149e:	4c 01       	movw	r8, r24
    14a0:	f3 2d       	mov	r31, r3
    14a2:	f0 68       	ori	r31, 0x80	; 128
    14a4:	3f 2e       	mov	r3, r31
    14a6:	82 01       	movw	r16, r4
    14a8:	33 fc       	sbrc	r3, 3
    14aa:	1b c0       	rjmp	.+54     	; 0x14e2 <vfprintf+0x1c2>
    14ac:	82 2d       	mov	r24, r2
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	88 16       	cp	r8, r24
    14b2:	99 06       	cpc	r9, r25
    14b4:	b0 f4       	brcc	.+44     	; 0x14e2 <vfprintf+0x1c2>
    14b6:	b6 01       	movw	r22, r12
    14b8:	80 e2       	ldi	r24, 0x20	; 32
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	0e 94 87 0b 	call	0x170e	; 0x170e <fputc>
    14c0:	2a 94       	dec	r2
    14c2:	f4 cf       	rjmp	.-24     	; 0x14ac <vfprintf+0x18c>
    14c4:	f5 01       	movw	r30, r10
    14c6:	37 fc       	sbrc	r3, 7
    14c8:	85 91       	lpm	r24, Z+
    14ca:	37 fe       	sbrs	r3, 7
    14cc:	81 91       	ld	r24, Z+
    14ce:	5f 01       	movw	r10, r30
    14d0:	b6 01       	movw	r22, r12
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 87 0b 	call	0x170e	; 0x170e <fputc>
    14d8:	21 10       	cpse	r2, r1
    14da:	2a 94       	dec	r2
    14dc:	21 e0       	ldi	r18, 0x01	; 1
    14de:	82 1a       	sub	r8, r18
    14e0:	91 08       	sbc	r9, r1
    14e2:	81 14       	cp	r8, r1
    14e4:	91 04       	cpc	r9, r1
    14e6:	71 f7       	brne	.-36     	; 0x14c4 <vfprintf+0x1a4>
    14e8:	e8 c0       	rjmp	.+464    	; 0x16ba <vfprintf+0x39a>
    14ea:	84 36       	cpi	r24, 0x64	; 100
    14ec:	11 f0       	breq	.+4      	; 0x14f2 <vfprintf+0x1d2>
    14ee:	89 36       	cpi	r24, 0x69	; 105
    14f0:	41 f5       	brne	.+80     	; 0x1542 <vfprintf+0x222>
    14f2:	f8 01       	movw	r30, r16
    14f4:	37 fe       	sbrs	r3, 7
    14f6:	07 c0       	rjmp	.+14     	; 0x1506 <vfprintf+0x1e6>
    14f8:	60 81       	ld	r22, Z
    14fa:	71 81       	ldd	r23, Z+1	; 0x01
    14fc:	82 81       	ldd	r24, Z+2	; 0x02
    14fe:	93 81       	ldd	r25, Z+3	; 0x03
    1500:	0c 5f       	subi	r16, 0xFC	; 252
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <vfprintf+0x1f6>
    1506:	60 81       	ld	r22, Z
    1508:	71 81       	ldd	r23, Z+1	; 0x01
    150a:	07 2e       	mov	r0, r23
    150c:	00 0c       	add	r0, r0
    150e:	88 0b       	sbc	r24, r24
    1510:	99 0b       	sbc	r25, r25
    1512:	0e 5f       	subi	r16, 0xFE	; 254
    1514:	1f 4f       	sbci	r17, 0xFF	; 255
    1516:	f3 2d       	mov	r31, r3
    1518:	ff 76       	andi	r31, 0x6F	; 111
    151a:	3f 2e       	mov	r3, r31
    151c:	97 ff       	sbrs	r25, 7
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <vfprintf+0x212>
    1520:	90 95       	com	r25
    1522:	80 95       	com	r24
    1524:	70 95       	com	r23
    1526:	61 95       	neg	r22
    1528:	7f 4f       	sbci	r23, 0xFF	; 255
    152a:	8f 4f       	sbci	r24, 0xFF	; 255
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	f0 68       	ori	r31, 0x80	; 128
    1530:	3f 2e       	mov	r3, r31
    1532:	2a e0       	ldi	r18, 0x0A	; 10
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	a3 01       	movw	r20, r6
    1538:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__ultoa_invert>
    153c:	88 2e       	mov	r8, r24
    153e:	86 18       	sub	r8, r6
    1540:	45 c0       	rjmp	.+138    	; 0x15cc <vfprintf+0x2ac>
    1542:	85 37       	cpi	r24, 0x75	; 117
    1544:	31 f4       	brne	.+12     	; 0x1552 <vfprintf+0x232>
    1546:	23 2d       	mov	r18, r3
    1548:	2f 7e       	andi	r18, 0xEF	; 239
    154a:	b2 2e       	mov	r11, r18
    154c:	2a e0       	ldi	r18, 0x0A	; 10
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	25 c0       	rjmp	.+74     	; 0x159c <vfprintf+0x27c>
    1552:	93 2d       	mov	r25, r3
    1554:	99 7f       	andi	r25, 0xF9	; 249
    1556:	b9 2e       	mov	r11, r25
    1558:	8f 36       	cpi	r24, 0x6F	; 111
    155a:	c1 f0       	breq	.+48     	; 0x158c <vfprintf+0x26c>
    155c:	18 f4       	brcc	.+6      	; 0x1564 <vfprintf+0x244>
    155e:	88 35       	cpi	r24, 0x58	; 88
    1560:	79 f0       	breq	.+30     	; 0x1580 <vfprintf+0x260>
    1562:	b5 c0       	rjmp	.+362    	; 0x16ce <vfprintf+0x3ae>
    1564:	80 37       	cpi	r24, 0x70	; 112
    1566:	19 f0       	breq	.+6      	; 0x156e <vfprintf+0x24e>
    1568:	88 37       	cpi	r24, 0x78	; 120
    156a:	21 f0       	breq	.+8      	; 0x1574 <vfprintf+0x254>
    156c:	b0 c0       	rjmp	.+352    	; 0x16ce <vfprintf+0x3ae>
    156e:	e9 2f       	mov	r30, r25
    1570:	e0 61       	ori	r30, 0x10	; 16
    1572:	be 2e       	mov	r11, r30
    1574:	b4 fe       	sbrs	r11, 4
    1576:	0d c0       	rjmp	.+26     	; 0x1592 <vfprintf+0x272>
    1578:	fb 2d       	mov	r31, r11
    157a:	f4 60       	ori	r31, 0x04	; 4
    157c:	bf 2e       	mov	r11, r31
    157e:	09 c0       	rjmp	.+18     	; 0x1592 <vfprintf+0x272>
    1580:	34 fe       	sbrs	r3, 4
    1582:	0a c0       	rjmp	.+20     	; 0x1598 <vfprintf+0x278>
    1584:	29 2f       	mov	r18, r25
    1586:	26 60       	ori	r18, 0x06	; 6
    1588:	b2 2e       	mov	r11, r18
    158a:	06 c0       	rjmp	.+12     	; 0x1598 <vfprintf+0x278>
    158c:	28 e0       	ldi	r18, 0x08	; 8
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	05 c0       	rjmp	.+10     	; 0x159c <vfprintf+0x27c>
    1592:	20 e1       	ldi	r18, 0x10	; 16
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	02 c0       	rjmp	.+4      	; 0x159c <vfprintf+0x27c>
    1598:	20 e1       	ldi	r18, 0x10	; 16
    159a:	32 e0       	ldi	r19, 0x02	; 2
    159c:	f8 01       	movw	r30, r16
    159e:	b7 fe       	sbrs	r11, 7
    15a0:	07 c0       	rjmp	.+14     	; 0x15b0 <vfprintf+0x290>
    15a2:	60 81       	ld	r22, Z
    15a4:	71 81       	ldd	r23, Z+1	; 0x01
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	0c 5f       	subi	r16, 0xFC	; 252
    15ac:	1f 4f       	sbci	r17, 0xFF	; 255
    15ae:	06 c0       	rjmp	.+12     	; 0x15bc <vfprintf+0x29c>
    15b0:	60 81       	ld	r22, Z
    15b2:	71 81       	ldd	r23, Z+1	; 0x01
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 5f       	subi	r16, 0xFE	; 254
    15ba:	1f 4f       	sbci	r17, 0xFF	; 255
    15bc:	a3 01       	movw	r20, r6
    15be:	0e 94 c3 0b 	call	0x1786	; 0x1786 <__ultoa_invert>
    15c2:	88 2e       	mov	r8, r24
    15c4:	86 18       	sub	r8, r6
    15c6:	fb 2d       	mov	r31, r11
    15c8:	ff 77       	andi	r31, 0x7F	; 127
    15ca:	3f 2e       	mov	r3, r31
    15cc:	36 fe       	sbrs	r3, 6
    15ce:	0d c0       	rjmp	.+26     	; 0x15ea <vfprintf+0x2ca>
    15d0:	23 2d       	mov	r18, r3
    15d2:	2e 7f       	andi	r18, 0xFE	; 254
    15d4:	a2 2e       	mov	r10, r18
    15d6:	89 14       	cp	r8, r9
    15d8:	58 f4       	brcc	.+22     	; 0x15f0 <vfprintf+0x2d0>
    15da:	34 fe       	sbrs	r3, 4
    15dc:	0b c0       	rjmp	.+22     	; 0x15f4 <vfprintf+0x2d4>
    15de:	32 fc       	sbrc	r3, 2
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <vfprintf+0x2d4>
    15e2:	83 2d       	mov	r24, r3
    15e4:	8e 7e       	andi	r24, 0xEE	; 238
    15e6:	a8 2e       	mov	r10, r24
    15e8:	05 c0       	rjmp	.+10     	; 0x15f4 <vfprintf+0x2d4>
    15ea:	b8 2c       	mov	r11, r8
    15ec:	a3 2c       	mov	r10, r3
    15ee:	03 c0       	rjmp	.+6      	; 0x15f6 <vfprintf+0x2d6>
    15f0:	b8 2c       	mov	r11, r8
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <vfprintf+0x2d6>
    15f4:	b9 2c       	mov	r11, r9
    15f6:	a4 fe       	sbrs	r10, 4
    15f8:	0f c0       	rjmp	.+30     	; 0x1618 <vfprintf+0x2f8>
    15fa:	fe 01       	movw	r30, r28
    15fc:	e8 0d       	add	r30, r8
    15fe:	f1 1d       	adc	r31, r1
    1600:	80 81       	ld	r24, Z
    1602:	80 33       	cpi	r24, 0x30	; 48
    1604:	21 f4       	brne	.+8      	; 0x160e <vfprintf+0x2ee>
    1606:	9a 2d       	mov	r25, r10
    1608:	99 7e       	andi	r25, 0xE9	; 233
    160a:	a9 2e       	mov	r10, r25
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <vfprintf+0x300>
    160e:	a2 fe       	sbrs	r10, 2
    1610:	06 c0       	rjmp	.+12     	; 0x161e <vfprintf+0x2fe>
    1612:	b3 94       	inc	r11
    1614:	b3 94       	inc	r11
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <vfprintf+0x300>
    1618:	8a 2d       	mov	r24, r10
    161a:	86 78       	andi	r24, 0x86	; 134
    161c:	09 f0       	breq	.+2      	; 0x1620 <vfprintf+0x300>
    161e:	b3 94       	inc	r11
    1620:	a3 fc       	sbrc	r10, 3
    1622:	11 c0       	rjmp	.+34     	; 0x1646 <vfprintf+0x326>
    1624:	a0 fe       	sbrs	r10, 0
    1626:	06 c0       	rjmp	.+12     	; 0x1634 <vfprintf+0x314>
    1628:	b2 14       	cp	r11, r2
    162a:	88 f4       	brcc	.+34     	; 0x164e <vfprintf+0x32e>
    162c:	28 0c       	add	r2, r8
    162e:	92 2c       	mov	r9, r2
    1630:	9b 18       	sub	r9, r11
    1632:	0e c0       	rjmp	.+28     	; 0x1650 <vfprintf+0x330>
    1634:	b2 14       	cp	r11, r2
    1636:	60 f4       	brcc	.+24     	; 0x1650 <vfprintf+0x330>
    1638:	b6 01       	movw	r22, r12
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 87 0b 	call	0x170e	; 0x170e <fputc>
    1642:	b3 94       	inc	r11
    1644:	f7 cf       	rjmp	.-18     	; 0x1634 <vfprintf+0x314>
    1646:	b2 14       	cp	r11, r2
    1648:	18 f4       	brcc	.+6      	; 0x1650 <vfprintf+0x330>
    164a:	2b 18       	sub	r2, r11
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <vfprintf+0x332>
    164e:	98 2c       	mov	r9, r8
    1650:	21 2c       	mov	r2, r1
    1652:	a4 fe       	sbrs	r10, 4
    1654:	10 c0       	rjmp	.+32     	; 0x1676 <vfprintf+0x356>
    1656:	b6 01       	movw	r22, r12
    1658:	80 e3       	ldi	r24, 0x30	; 48
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 87 0b 	call	0x170e	; 0x170e <fputc>
    1660:	a2 fe       	sbrs	r10, 2
    1662:	17 c0       	rjmp	.+46     	; 0x1692 <vfprintf+0x372>
    1664:	a1 fc       	sbrc	r10, 1
    1666:	03 c0       	rjmp	.+6      	; 0x166e <vfprintf+0x34e>
    1668:	88 e7       	ldi	r24, 0x78	; 120
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0x352>
    166e:	88 e5       	ldi	r24, 0x58	; 88
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	b6 01       	movw	r22, r12
    1674:	0c c0       	rjmp	.+24     	; 0x168e <vfprintf+0x36e>
    1676:	8a 2d       	mov	r24, r10
    1678:	86 78       	andi	r24, 0x86	; 134
    167a:	59 f0       	breq	.+22     	; 0x1692 <vfprintf+0x372>
    167c:	a1 fe       	sbrs	r10, 1
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <vfprintf+0x364>
    1680:	8b e2       	ldi	r24, 0x2B	; 43
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <vfprintf+0x366>
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	a7 fc       	sbrc	r10, 7
    1688:	8d e2       	ldi	r24, 0x2D	; 45
    168a:	b6 01       	movw	r22, r12
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 87 0b 	call	0x170e	; 0x170e <fputc>
    1692:	89 14       	cp	r8, r9
    1694:	38 f4       	brcc	.+14     	; 0x16a4 <vfprintf+0x384>
    1696:	b6 01       	movw	r22, r12
    1698:	80 e3       	ldi	r24, 0x30	; 48
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 87 0b 	call	0x170e	; 0x170e <fputc>
    16a0:	9a 94       	dec	r9
    16a2:	f7 cf       	rjmp	.-18     	; 0x1692 <vfprintf+0x372>
    16a4:	8a 94       	dec	r8
    16a6:	f3 01       	movw	r30, r6
    16a8:	e8 0d       	add	r30, r8
    16aa:	f1 1d       	adc	r31, r1
    16ac:	80 81       	ld	r24, Z
    16ae:	b6 01       	movw	r22, r12
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	0e 94 87 0b 	call	0x170e	; 0x170e <fputc>
    16b6:	81 10       	cpse	r8, r1
    16b8:	f5 cf       	rjmp	.-22     	; 0x16a4 <vfprintf+0x384>
    16ba:	22 20       	and	r2, r2
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <vfprintf+0x3a0>
    16be:	42 ce       	rjmp	.-892    	; 0x1344 <vfprintf+0x24>
    16c0:	b6 01       	movw	r22, r12
    16c2:	80 e2       	ldi	r24, 0x20	; 32
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 87 0b 	call	0x170e	; 0x170e <fputc>
    16ca:	2a 94       	dec	r2
    16cc:	f6 cf       	rjmp	.-20     	; 0x16ba <vfprintf+0x39a>
    16ce:	f6 01       	movw	r30, r12
    16d0:	86 81       	ldd	r24, Z+6	; 0x06
    16d2:	97 81       	ldd	r25, Z+7	; 0x07
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <vfprintf+0x3ba>
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	9f ef       	ldi	r25, 0xFF	; 255
    16da:	2b 96       	adiw	r28, 0x0b	; 11
    16dc:	e2 e1       	ldi	r30, 0x12	; 18
    16de:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__epilogue_restores__>

000016e2 <strnlen_P>:
    16e2:	fc 01       	movw	r30, r24
    16e4:	05 90       	lpm	r0, Z+
    16e6:	61 50       	subi	r22, 0x01	; 1
    16e8:	70 40       	sbci	r23, 0x00	; 0
    16ea:	01 10       	cpse	r0, r1
    16ec:	d8 f7       	brcc	.-10     	; 0x16e4 <strnlen_P+0x2>
    16ee:	80 95       	com	r24
    16f0:	90 95       	com	r25
    16f2:	8e 0f       	add	r24, r30
    16f4:	9f 1f       	adc	r25, r31
    16f6:	08 95       	ret

000016f8 <strnlen>:
    16f8:	fc 01       	movw	r30, r24
    16fa:	61 50       	subi	r22, 0x01	; 1
    16fc:	70 40       	sbci	r23, 0x00	; 0
    16fe:	01 90       	ld	r0, Z+
    1700:	01 10       	cpse	r0, r1
    1702:	d8 f7       	brcc	.-10     	; 0x16fa <strnlen+0x2>
    1704:	80 95       	com	r24
    1706:	90 95       	com	r25
    1708:	8e 0f       	add	r24, r30
    170a:	9f 1f       	adc	r25, r31
    170c:	08 95       	ret

0000170e <fputc>:
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	fb 01       	movw	r30, r22
    1718:	23 81       	ldd	r18, Z+3	; 0x03
    171a:	21 fd       	sbrc	r18, 1
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <fputc+0x16>
    171e:	8f ef       	ldi	r24, 0xFF	; 255
    1720:	9f ef       	ldi	r25, 0xFF	; 255
    1722:	2c c0       	rjmp	.+88     	; 0x177c <fputc+0x6e>
    1724:	22 ff       	sbrs	r18, 2
    1726:	16 c0       	rjmp	.+44     	; 0x1754 <fputc+0x46>
    1728:	46 81       	ldd	r20, Z+6	; 0x06
    172a:	57 81       	ldd	r21, Z+7	; 0x07
    172c:	24 81       	ldd	r18, Z+4	; 0x04
    172e:	35 81       	ldd	r19, Z+5	; 0x05
    1730:	42 17       	cp	r20, r18
    1732:	53 07       	cpc	r21, r19
    1734:	44 f4       	brge	.+16     	; 0x1746 <fputc+0x38>
    1736:	a0 81       	ld	r26, Z
    1738:	b1 81       	ldd	r27, Z+1	; 0x01
    173a:	9d 01       	movw	r18, r26
    173c:	2f 5f       	subi	r18, 0xFF	; 255
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	31 83       	std	Z+1, r19	; 0x01
    1742:	20 83       	st	Z, r18
    1744:	8c 93       	st	X, r24
    1746:	26 81       	ldd	r18, Z+6	; 0x06
    1748:	37 81       	ldd	r19, Z+7	; 0x07
    174a:	2f 5f       	subi	r18, 0xFF	; 255
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	37 83       	std	Z+7, r19	; 0x07
    1750:	26 83       	std	Z+6, r18	; 0x06
    1752:	14 c0       	rjmp	.+40     	; 0x177c <fputc+0x6e>
    1754:	8b 01       	movw	r16, r22
    1756:	ec 01       	movw	r28, r24
    1758:	fb 01       	movw	r30, r22
    175a:	00 84       	ldd	r0, Z+8	; 0x08
    175c:	f1 85       	ldd	r31, Z+9	; 0x09
    175e:	e0 2d       	mov	r30, r0
    1760:	09 95       	icall
    1762:	89 2b       	or	r24, r25
    1764:	e1 f6       	brne	.-72     	; 0x171e <fputc+0x10>
    1766:	d8 01       	movw	r26, r16
    1768:	16 96       	adiw	r26, 0x06	; 6
    176a:	8d 91       	ld	r24, X+
    176c:	9c 91       	ld	r25, X
    176e:	17 97       	sbiw	r26, 0x07	; 7
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	17 96       	adiw	r26, 0x07	; 7
    1774:	9c 93       	st	X, r25
    1776:	8e 93       	st	-X, r24
    1778:	16 97       	sbiw	r26, 0x06	; 6
    177a:	ce 01       	movw	r24, r28
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	08 95       	ret

00001786 <__ultoa_invert>:
    1786:	fa 01       	movw	r30, r20
    1788:	aa 27       	eor	r26, r26
    178a:	28 30       	cpi	r18, 0x08	; 8
    178c:	51 f1       	breq	.+84     	; 0x17e2 <__ultoa_invert+0x5c>
    178e:	20 31       	cpi	r18, 0x10	; 16
    1790:	81 f1       	breq	.+96     	; 0x17f2 <__ultoa_invert+0x6c>
    1792:	e8 94       	clt
    1794:	6f 93       	push	r22
    1796:	6e 7f       	andi	r22, 0xFE	; 254
    1798:	6e 5f       	subi	r22, 0xFE	; 254
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	8f 4f       	sbci	r24, 0xFF	; 255
    179e:	9f 4f       	sbci	r25, 0xFF	; 255
    17a0:	af 4f       	sbci	r26, 0xFF	; 255
    17a2:	b1 e0       	ldi	r27, 0x01	; 1
    17a4:	3e d0       	rcall	.+124    	; 0x1822 <__ultoa_invert+0x9c>
    17a6:	b4 e0       	ldi	r27, 0x04	; 4
    17a8:	3c d0       	rcall	.+120    	; 0x1822 <__ultoa_invert+0x9c>
    17aa:	67 0f       	add	r22, r23
    17ac:	78 1f       	adc	r23, r24
    17ae:	89 1f       	adc	r24, r25
    17b0:	9a 1f       	adc	r25, r26
    17b2:	a1 1d       	adc	r26, r1
    17b4:	68 0f       	add	r22, r24
    17b6:	79 1f       	adc	r23, r25
    17b8:	8a 1f       	adc	r24, r26
    17ba:	91 1d       	adc	r25, r1
    17bc:	a1 1d       	adc	r26, r1
    17be:	6a 0f       	add	r22, r26
    17c0:	71 1d       	adc	r23, r1
    17c2:	81 1d       	adc	r24, r1
    17c4:	91 1d       	adc	r25, r1
    17c6:	a1 1d       	adc	r26, r1
    17c8:	20 d0       	rcall	.+64     	; 0x180a <__ultoa_invert+0x84>
    17ca:	09 f4       	brne	.+2      	; 0x17ce <__ultoa_invert+0x48>
    17cc:	68 94       	set
    17ce:	3f 91       	pop	r19
    17d0:	2a e0       	ldi	r18, 0x0A	; 10
    17d2:	26 9f       	mul	r18, r22
    17d4:	11 24       	eor	r1, r1
    17d6:	30 19       	sub	r19, r0
    17d8:	30 5d       	subi	r19, 0xD0	; 208
    17da:	31 93       	st	Z+, r19
    17dc:	de f6       	brtc	.-74     	; 0x1794 <__ultoa_invert+0xe>
    17de:	cf 01       	movw	r24, r30
    17e0:	08 95       	ret
    17e2:	46 2f       	mov	r20, r22
    17e4:	47 70       	andi	r20, 0x07	; 7
    17e6:	40 5d       	subi	r20, 0xD0	; 208
    17e8:	41 93       	st	Z+, r20
    17ea:	b3 e0       	ldi	r27, 0x03	; 3
    17ec:	0f d0       	rcall	.+30     	; 0x180c <__ultoa_invert+0x86>
    17ee:	c9 f7       	brne	.-14     	; 0x17e2 <__ultoa_invert+0x5c>
    17f0:	f6 cf       	rjmp	.-20     	; 0x17de <__ultoa_invert+0x58>
    17f2:	46 2f       	mov	r20, r22
    17f4:	4f 70       	andi	r20, 0x0F	; 15
    17f6:	40 5d       	subi	r20, 0xD0	; 208
    17f8:	4a 33       	cpi	r20, 0x3A	; 58
    17fa:	18 f0       	brcs	.+6      	; 0x1802 <__ultoa_invert+0x7c>
    17fc:	49 5d       	subi	r20, 0xD9	; 217
    17fe:	31 fd       	sbrc	r19, 1
    1800:	40 52       	subi	r20, 0x20	; 32
    1802:	41 93       	st	Z+, r20
    1804:	02 d0       	rcall	.+4      	; 0x180a <__ultoa_invert+0x84>
    1806:	a9 f7       	brne	.-22     	; 0x17f2 <__ultoa_invert+0x6c>
    1808:	ea cf       	rjmp	.-44     	; 0x17de <__ultoa_invert+0x58>
    180a:	b4 e0       	ldi	r27, 0x04	; 4
    180c:	a6 95       	lsr	r26
    180e:	97 95       	ror	r25
    1810:	87 95       	ror	r24
    1812:	77 95       	ror	r23
    1814:	67 95       	ror	r22
    1816:	ba 95       	dec	r27
    1818:	c9 f7       	brne	.-14     	; 0x180c <__ultoa_invert+0x86>
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	61 05       	cpc	r22, r1
    181e:	71 05       	cpc	r23, r1
    1820:	08 95       	ret
    1822:	9b 01       	movw	r18, r22
    1824:	ac 01       	movw	r20, r24
    1826:	0a 2e       	mov	r0, r26
    1828:	06 94       	lsr	r0
    182a:	57 95       	ror	r21
    182c:	47 95       	ror	r20
    182e:	37 95       	ror	r19
    1830:	27 95       	ror	r18
    1832:	ba 95       	dec	r27
    1834:	c9 f7       	brne	.-14     	; 0x1828 <__ultoa_invert+0xa2>
    1836:	62 0f       	add	r22, r18
    1838:	73 1f       	adc	r23, r19
    183a:	84 1f       	adc	r24, r20
    183c:	95 1f       	adc	r25, r21
    183e:	a0 1d       	adc	r26, r0
    1840:	08 95       	ret

00001842 <eeprom_read_byte>:
    1842:	e1 99       	sbic	0x1c, 1	; 28
    1844:	fe cf       	rjmp	.-4      	; 0x1842 <eeprom_read_byte>
    1846:	9f bb       	out	0x1f, r25	; 31
    1848:	8e bb       	out	0x1e, r24	; 30
    184a:	e0 9a       	sbi	0x1c, 0	; 28
    184c:	99 27       	eor	r25, r25
    184e:	8d b3       	in	r24, 0x1d	; 29
    1850:	08 95       	ret

00001852 <eeprom_update_byte>:
    1852:	26 2f       	mov	r18, r22

00001854 <eeprom_update_r18>:
    1854:	e1 99       	sbic	0x1c, 1	; 28
    1856:	fe cf       	rjmp	.-4      	; 0x1854 <eeprom_update_r18>
    1858:	9f bb       	out	0x1f, r25	; 31
    185a:	8e bb       	out	0x1e, r24	; 30
    185c:	e0 9a       	sbi	0x1c, 0	; 28
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	0d b2       	in	r0, 0x1d	; 29
    1862:	02 16       	cp	r0, r18
    1864:	31 f0       	breq	.+12     	; 0x1872 <eeprom_update_r18+0x1e>
    1866:	2d bb       	out	0x1d, r18	; 29
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	e2 9a       	sbi	0x1c, 2	; 28
    186e:	e1 9a       	sbi	0x1c, 1	; 28
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	08 95       	ret

00001874 <__prologue_saves__>:
    1874:	2f 92       	push	r2
    1876:	3f 92       	push	r3
    1878:	4f 92       	push	r4
    187a:	5f 92       	push	r5
    187c:	6f 92       	push	r6
    187e:	7f 92       	push	r7
    1880:	8f 92       	push	r8
    1882:	9f 92       	push	r9
    1884:	af 92       	push	r10
    1886:	bf 92       	push	r11
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	ca 1b       	sub	r28, r26
    189e:	db 0b       	sbc	r29, r27
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	09 94       	ijmp

000018ac <__epilogue_restores__>:
    18ac:	2a 88       	ldd	r2, Y+18	; 0x12
    18ae:	39 88       	ldd	r3, Y+17	; 0x11
    18b0:	48 88       	ldd	r4, Y+16	; 0x10
    18b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    18b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    18b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    18b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    18ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    18bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    18be:	b9 84       	ldd	r11, Y+9	; 0x09
    18c0:	c8 84       	ldd	r12, Y+8	; 0x08
    18c2:	df 80       	ldd	r13, Y+7	; 0x07
    18c4:	ee 80       	ldd	r14, Y+6	; 0x06
    18c6:	fd 80       	ldd	r15, Y+5	; 0x05
    18c8:	0c 81       	ldd	r16, Y+4	; 0x04
    18ca:	1b 81       	ldd	r17, Y+3	; 0x03
    18cc:	aa 81       	ldd	r26, Y+2	; 0x02
    18ce:	b9 81       	ldd	r27, Y+1	; 0x01
    18d0:	ce 0f       	add	r28, r30
    18d2:	d1 1d       	adc	r29, r1
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	ed 01       	movw	r28, r26
    18e0:	08 95       	ret

000018e2 <_exit>:
    18e2:	f8 94       	cli

000018e4 <__stop_program>:
    18e4:	ff cf       	rjmp	.-2      	; 0x18e4 <__stop_program>
