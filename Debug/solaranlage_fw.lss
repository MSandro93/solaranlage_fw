
solaranlage_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000020a6  0000213a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080008e  0080008e  00002168  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000021c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00002200  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ba  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a77  00000000  00000000  0000346a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000190c  00000000  00000000  00003ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  000057f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f5c  00000000  00000000  00005d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab6  00000000  00000000  0000ccb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000d76a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d41  00000000  00000000  0000d87a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_1>
       8:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_2>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__vector_5>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_9>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_11>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e6 ea       	ldi	r30, 0xA6	; 166
     16a:	f0 e2       	ldi	r31, 0x20	; 32
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	ae 38       	cpi	r26, 0x8E	; 142
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	ae e8       	ldi	r26, 0x8E	; 142
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a3 3b       	cpi	r26, 0xB3	; 179
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 a8 03 	call	0x750	; 0x750 <main>
     18c:	0c 94 51 10 	jmp	0x20a2	; 0x20a2 <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <SevenSeg_init>:
uint16_t kessel_anzeige = 0;
uint8_t on = 0;


void SevenSeg_init()
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);	//enable overflow-interrupt
     19c:	89 e5       	ldi	r24, 0x59	; 89
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	29 e5       	ldi	r18, 0x59	; 89
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	21 60       	ori	r18, 0x01	; 1
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
	
	sei();
     1ae:	78 94       	sei
}
     1b0:	00 00       	nop
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <SevenSeg_set_val>:

//seg: 1=dach; 0=kessel;   val: 0-9: 0-9; 10: off; 11: '-' at left segment (for negative values)
void SevenSeg_set_val(uint8_t seg, int16_t val)
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	27 97       	sbiw	r28, 0x07	; 7
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
     1cc:	8d 83       	std	Y+5, r24	; 0x05
     1ce:	7f 83       	std	Y+7, r23	; 0x07
     1d0:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t neg = 0;											//flag for negative values
     1d2:	19 82       	std	Y+1, r1	; 0x01
	
	if(seg == 1)												
     1d4:	8d 81       	ldd	r24, Y+5	; 0x05
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	51 f4       	brne	.+20     	; 0x1ee <SevenSeg_set_val+0x36>
	{
		if (val == dach_anzeige)								//if the value to set is not new, leave function
     1da:	2e 81       	ldd	r18, Y+6	; 0x06
     1dc:	3f 81       	ldd	r19, Y+7	; 0x07
     1de:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <dach_anzeige>
     1e2:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <dach_anzeige+0x1>
     1e6:	28 17       	cp	r18, r24
     1e8:	39 07       	cpc	r19, r25
     1ea:	71 f4       	brne	.+28     	; 0x208 <SevenSeg_set_val+0x50>
		{
			return;
     1ec:	b9 c0       	rjmp	.+370    	; 0x360 <SevenSeg_set_val+0x1a8>
		}
	}
	
	else if(seg == 0)		
     1ee:	8d 81       	ldd	r24, Y+5	; 0x05
     1f0:	88 23       	and	r24, r24
     1f2:	51 f4       	brne	.+20     	; 0x208 <SevenSeg_set_val+0x50>
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
     1f4:	2e 81       	ldd	r18, Y+6	; 0x06
     1f6:	3f 81       	ldd	r19, Y+7	; 0x07
     1f8:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <kessel_anzeige>
     1fc:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <kessel_anzeige+0x1>
     200:	28 17       	cp	r18, r24
     202:	39 07       	cpc	r19, r25
     204:	09 f4       	brne	.+2      	; 0x208 <SevenSeg_set_val+0x50>
     206:	ab c0       	rjmp	.+342    	; 0x35e <SevenSeg_set_val+0x1a6>
		{
			return;
		}
	}
	
	if(val==1000)												//if this display shall be switched off
     208:	8e 81       	ldd	r24, Y+6	; 0x06
     20a:	9f 81       	ldd	r25, Y+7	; 0x07
     20c:	88 3e       	cpi	r24, 0xE8	; 232
     20e:	93 40       	sbci	r25, 0x03	; 3
     210:	39 f5       	brne	.+78     	; 0x260 <SevenSeg_set_val+0xa8>
	{
		segs[seg]   = 10;
     212:	8d 81       	ldd	r24, Y+5	; 0x05
     214:	88 2f       	mov	r24, r24
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	82 57       	subi	r24, 0x72	; 114
     21e:	9f 4f       	sbci	r25, 0xFF	; 255
     220:	2a e0       	ldi	r18, 0x0A	; 10
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	31 83       	std	Z+1, r19	; 0x01
     228:	20 83       	st	Z, r18
		segs[seg+2] = 10;
     22a:	8d 81       	ldd	r24, Y+5	; 0x05
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	02 96       	adiw	r24, 0x02	; 2
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	82 57       	subi	r24, 0x72	; 114
     238:	9f 4f       	sbci	r25, 0xFF	; 255
     23a:	2a e0       	ldi	r18, 0x0A	; 10
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	fc 01       	movw	r30, r24
     240:	31 83       	std	Z+1, r19	; 0x01
     242:	20 83       	st	Z, r18
		segs[seg+4] = 10;
     244:	8d 81       	ldd	r24, Y+5	; 0x05
     246:	88 2f       	mov	r24, r24
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	04 96       	adiw	r24, 0x04	; 4
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	82 57       	subi	r24, 0x72	; 114
     252:	9f 4f       	sbci	r25, 0xFF	; 255
     254:	2a e0       	ldi	r18, 0x0A	; 10
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	fc 01       	movw	r30, r24
     25a:	31 83       	std	Z+1, r19	; 0x01
     25c:	20 83       	st	Z, r18
		return;
     25e:	80 c0       	rjmp	.+256    	; 0x360 <SevenSeg_set_val+0x1a8>
	}

	
	if(val < 0)													//if the value to set is negative
     260:	8e 81       	ldd	r24, Y+6	; 0x06
     262:	9f 81       	ldd	r25, Y+7	; 0x07
     264:	99 23       	and	r25, r25
     266:	94 f4       	brge	.+36     	; 0x28c <SevenSeg_set_val+0xd4>
	{
		val *= -1;												//calculate absolute value
     268:	8e 81       	ldd	r24, Y+6	; 0x06
     26a:	9f 81       	ldd	r25, Y+7	; 0x07
     26c:	91 95       	neg	r25
     26e:	81 95       	neg	r24
     270:	91 09       	sbc	r25, r1
     272:	9f 83       	std	Y+7, r25	; 0x07
     274:	8e 83       	std	Y+6, r24	; 0x06
		neg = 1;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	89 83       	std	Y+1, r24	; 0x01
		
		if(val > 99)											//because one segment is needed for the sign, only two digits are allowed
     27a:	8e 81       	ldd	r24, Y+6	; 0x06
     27c:	9f 81       	ldd	r25, Y+7	; 0x07
     27e:	84 36       	cpi	r24, 0x64	; 100
     280:	91 05       	cpc	r25, r1
     282:	24 f0       	brlt	.+8      	; 0x28c <SevenSeg_set_val+0xd4>
		{
			val = 99;
     284:	83 e6       	ldi	r24, 0x63	; 99
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	9f 83       	std	Y+7, r25	; 0x07
     28a:	8e 83       	std	Y+6, r24	; 0x06
		}
	}
	
	
	uint8_t h = (uint8_t) (val/100);							//separate the digits of the value
     28c:	8e 81       	ldd	r24, Y+6	; 0x06
     28e:	9f 81       	ldd	r25, Y+7	; 0x07
     290:	24 e6       	ldi	r18, 0x64	; 100
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	b9 01       	movw	r22, r18
     296:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__divmodhi4>
     29a:	cb 01       	movw	r24, r22
     29c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t z = (uint8_t) ((val- (h*100)) / 10 );
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	88 2f       	mov	r24, r24
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	4c e9       	ldi	r20, 0x9C	; 156
     2a6:	bc 01       	movw	r22, r24
     2a8:	46 03       	mulsu	r20, r22
     2aa:	90 01       	movw	r18, r0
     2ac:	47 9f       	mul	r20, r23
     2ae:	30 0d       	add	r19, r0
     2b0:	11 24       	eor	r1, r1
     2b2:	8e 81       	ldd	r24, Y+6	; 0x06
     2b4:	9f 81       	ldd	r25, Y+7	; 0x07
     2b6:	82 0f       	add	r24, r18
     2b8:	93 1f       	adc	r25, r19
     2ba:	2a e0       	ldi	r18, 0x0A	; 10
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	b9 01       	movw	r22, r18
     2c0:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__divmodhi4>
     2c4:	cb 01       	movw	r24, r22
     2c6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t e = (uint8_t)  (val- (h*100)- (z*10));
     2c8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ca:	2a 81       	ldd	r18, Y+2	; 0x02
     2cc:	84 e6       	ldi	r24, 0x64	; 100
     2ce:	28 9f       	mul	r18, r24
     2d0:	80 2d       	mov	r24, r0
     2d2:	11 24       	eor	r1, r1
     2d4:	98 1b       	sub	r25, r24
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	88 0f       	add	r24, r24
     2da:	28 2f       	mov	r18, r24
     2dc:	22 0f       	add	r18, r18
     2de:	22 0f       	add	r18, r18
     2e0:	82 0f       	add	r24, r18
     2e2:	79 2f       	mov	r23, r25
     2e4:	78 1b       	sub	r23, r24
     2e6:	87 2f       	mov	r24, r23
     2e8:	8c 83       	std	Y+4, r24	; 0x04

	
	segs[seg]   = e;											//set the digits at the propper position in the segment array
     2ea:	8d 81       	ldd	r24, Y+5	; 0x05
     2ec:	88 2f       	mov	r24, r24
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2c 81       	ldd	r18, Y+4	; 0x04
     2f2:	22 2f       	mov	r18, r18
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	82 57       	subi	r24, 0x72	; 114
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	fc 01       	movw	r30, r24
     300:	31 83       	std	Z+1, r19	; 0x01
     302:	20 83       	st	Z, r18
	segs[seg+2] = z;
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	88 2f       	mov	r24, r24
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 96       	adiw	r24, 0x02	; 2
     30c:	2b 81       	ldd	r18, Y+3	; 0x03
     30e:	22 2f       	mov	r18, r18
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	82 57       	subi	r24, 0x72	; 114
     318:	9f 4f       	sbci	r25, 0xFF	; 255
     31a:	fc 01       	movw	r30, r24
     31c:	31 83       	std	Z+1, r19	; 0x01
     31e:	20 83       	st	Z, r18
	segs[seg+4] = h;
     320:	8d 81       	ldd	r24, Y+5	; 0x05
     322:	88 2f       	mov	r24, r24
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	04 96       	adiw	r24, 0x04	; 4
     328:	2a 81       	ldd	r18, Y+2	; 0x02
     32a:	22 2f       	mov	r18, r18
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	82 57       	subi	r24, 0x72	; 114
     334:	9f 4f       	sbci	r25, 0xFF	; 255
     336:	fc 01       	movw	r30, r24
     338:	31 83       	std	Z+1, r19	; 0x01
     33a:	20 83       	st	Z, r18
	
	if(neg == 1)												//if this is a negative value..
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	81 30       	cpi	r24, 0x01	; 1
     340:	79 f4       	brne	.+30     	; 0x360 <SevenSeg_set_val+0x1a8>
	{
		segs[seg+4] = 11;										//overwrite the left segment with sign	
     342:	8d 81       	ldd	r24, Y+5	; 0x05
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	04 96       	adiw	r24, 0x04	; 4
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	82 57       	subi	r24, 0x72	; 114
     350:	9f 4f       	sbci	r25, 0xFF	; 255
     352:	2b e0       	ldi	r18, 0x0B	; 11
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	fc 01       	movw	r30, r24
     358:	31 83       	std	Z+1, r19	; 0x01
     35a:	20 83       	st	Z, r18
     35c:	01 c0       	rjmp	.+2      	; 0x360 <SevenSeg_set_val+0x1a8>
	
	else if(seg == 0)		
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
		{
			return;
     35e:	00 00       	nop
	
	if(neg == 1)												//if this is a negative value..
	{
		segs[seg+4] = 11;										//overwrite the left segment with sign	
	}
}
     360:	27 96       	adiw	r28, 0x07	; 7
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	ef 93       	push	r30
     388:	ff 93       	push	r31
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	1f 92       	push	r1
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
	cli();
     394:	f8 94       	cli
	
	if(segs[seg_cnt] != 10)					//if the current digit to display is valid (0..9)..
     396:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     39a:	88 2f       	mov	r24, r24
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	82 57       	subi	r24, 0x72	; 114
     3a4:	9f 4f       	sbci	r25, 0xFF	; 255
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	91 81       	ldd	r25, Z+1	; 0x01
     3ac:	0a 97       	sbiw	r24, 0x0a	; 10
     3ae:	a1 f0       	breq	.+40     	; 0x3d8 <__vector_11+0x66>
	{
		PORTB = patterns[segs[seg_cnt]];	//set the propper pattern to the anodes.
     3b0:	88 e3       	ldi	r24, 0x38	; 56
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <seg_cnt>
     3b8:	22 2f       	mov	r18, r18
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	22 57       	subi	r18, 0x72	; 114
     3c2:	3f 4f       	sbci	r19, 0xFF	; 255
     3c4:	f9 01       	movw	r30, r18
     3c6:	20 81       	ld	r18, Z
     3c8:	31 81       	ldd	r19, Z+1	; 0x01
     3ca:	20 5a       	subi	r18, 0xA0	; 160
     3cc:	3f 4f       	sbci	r19, 0xFF	; 255
     3ce:	f9 01       	movw	r30, r18
     3d0:	20 81       	ld	r18, Z
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
     3d6:	1e c0       	rjmp	.+60     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	}
	else if	(segs[seg_cnt] == 10)			//if the current digit is 10, the segment shall be switched off.
     3d8:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	82 57       	subi	r24, 0x72	; 114
     3e6:	9f 4f       	sbci	r25, 0xFF	; 255
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	0a 97       	sbiw	r24, 0x0a	; 10
     3f0:	89 f4       	brne	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		PORTB = 0x00;						//therefore clear the anodes
     3f2:	88 e3       	ldi	r24, 0x38	; 56
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fc 01       	movw	r30, r24
     3f8:	10 82       	st	Z, r1
		seg_cnt ++;							//switch to next segment
     3fa:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <seg_cnt>
		
		if(seg_cnt == 6)	//looping
     404:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     408:	86 30       	cpi	r24, 0x06	; 6
     40a:	11 f4       	brne	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			seg_cnt = 0;
     40c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <seg_cnt>
		}
		sei();
     410:	78 94       	sei
		return;								//leave. The common cathode of this segment shall not be activated.
     412:	2b c0       	rjmp	.+86     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	}
	
	
	//if digit for this segment is valid..
	uint8_t a = (uint8_t) (~(1<<(seg_cnt + 2)));
     414:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9c 01       	movw	r18, r24
     41e:	2e 5f       	subi	r18, 0xFE	; 254
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	2a 95       	dec	r18
     42e:	e2 f7       	brpl	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     430:	80 95       	com	r24
     432:	89 83       	std	Y+1, r24	; 0x01
	PORTA = a & 0xFC;						//mask to avoid ADC-channels 0 and 1
     434:	8b e3       	ldi	r24, 0x3B	; 59
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	29 81       	ldd	r18, Y+1	; 0x01
     43a:	2c 7f       	andi	r18, 0xFC	; 252
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
	seg_cnt ++;								//switching to next segment
     440:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     444:	8f 5f       	subi	r24, 0xFF	; 255
     446:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <seg_cnt>
	
	if(seg_cnt == 6)						//loop segment counter
     44a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     44e:	86 30       	cpi	r24, 0x06	; 6
     450:	11 f4       	brne	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		seg_cnt = 0;
     452:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <seg_cnt>
	}
	
	TIFR &= ~(1<<TOV0);	//clear timer0 overflow interrupt flag
     456:	88 e5       	ldi	r24, 0x58	; 88
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	28 e5       	ldi	r18, 0x58	; 88
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	2e 7f       	andi	r18, 0xFE	; 254
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18
	
	sei();
     468:	78 94       	sei
}
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	ff 91       	pop	r31
     472:	ef 91       	pop	r30
     474:	9f 91       	pop	r25
     476:	8f 91       	pop	r24
     478:	3f 91       	pop	r19
     47a:	2f 91       	pop	r18
     47c:	0f 90       	pop	r0
     47e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <SevenSeg_on>:


void SevenSeg_on()
{
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01) | (1<<CS00);		//setting prescaler to /256
     490:	83 e5       	ldi	r24, 0x53	; 83
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	23 e0       	ldi	r18, 0x03	; 3
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	on = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <on>
}
     4a0:	00 00       	nop
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <SevenSeg_off>:

void SevenSeg_off()
{
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~((1<<CS01) | (1<<CS00));	//disable timer
     4b0:	83 e5       	ldi	r24, 0x53	; 83
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	23 e5       	ldi	r18, 0x53	; 83
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	f9 01       	movw	r30, r18
     4ba:	20 81       	ld	r18, Z
     4bc:	2c 7f       	andi	r18, 0xFC	; 252
     4be:	fc 01       	movw	r30, r24
     4c0:	20 83       	st	Z, r18
	TCNT0 = 0;							//resetting counter
     4c2:	82 e5       	ldi	r24, 0x52	; 82
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	fc 01       	movw	r30, r24
     4c8:	10 82       	st	Z, r1
	PORTB = 0x00;
     4ca:	88 e3       	ldi	r24, 0x38	; 56
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	fc 01       	movw	r30, r24
     4d0:	10 82       	st	Z, r1
	PORTA = 0xFC;
     4d2:	8b e3       	ldi	r24, 0x3B	; 59
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	2c ef       	ldi	r18, 0xFC	; 252
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
	on = 0;
     4dc:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <on>
}
     4e0:	00 00       	nop
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <SevenSeg_get_state>:


uint8_t SevenSeg_get_state()
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	return on;
     4f0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <on>
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <Encoder_init>:

uint8_t selected_seg = 1;


void Encoder_init()
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	ENC_PORT &= ~((1<<ENC_A_PIN) | (1<<ENC_A_PIN));							//setting encoder terminals to input
     502:	82 e3       	ldi	r24, 0x32	; 50
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	22 e3       	ldi	r18, 0x32	; 50
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	2b 7f       	andi	r18, 0xFB	; 251
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
	MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11);							//setting ext-int0 to sensitive at rising edge
     514:	85 e5       	ldi	r24, 0x55	; 85
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	25 e5       	ldi	r18, 0x55	; 85
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	f9 01       	movw	r30, r18
     51e:	20 81       	ld	r18, Z
     520:	2b 60       	ori	r18, 0x0B	; 11
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1);											//enable external interrupt 0 (ENC_A_PIN)
     526:	8b e5       	ldi	r24, 0x5B	; 91
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	2b e5       	ldi	r18, 0x5B	; 91
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	f9 01       	movw	r30, r18
     530:	20 81       	ld	r18, Z
     532:	20 6c       	ori	r18, 0xC0	; 192
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
	sei();
     538:	78 94       	sei
}
     53a:	00 00       	nop
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <__vector_1>:



ISR(INT0_vect)
{	
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	2f 93       	push	r18
     550:	3f 93       	push	r19
     552:	4f 93       	push	r20
     554:	5f 93       	push	r21
     556:	6f 93       	push	r22
     558:	7f 93       	push	r23
     55a:	8f 93       	push	r24
     55c:	9f 93       	push	r25
     55e:	af 93       	push	r26
     560:	bf 93       	push	r27
     562:	ef 93       	push	r30
     564:	ff 93       	push	r31
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
	cli();
     56e:	f8 94       	cli
	
	switch(getState())
     570:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getState>
     574:	88 2f       	mov	r24, r24
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	83 30       	cpi	r24, 0x03	; 3
     57a:	91 05       	cpc	r25, r1
     57c:	19 f0       	breq	.+6      	; 0x584 <__vector_1+0x42>
     57e:	04 97       	sbiw	r24, 0x04	; 4
     580:	01 f1       	breq	.+64     	; 0x5c2 <__vector_1+0x80>
			}
			break;
		}
		
		default:
			break;
     582:	41 c0       	rjmp	.+130    	; 0x606 <__vector_1+0xc4>
	
	switch(getState())
	{
		case 3:	
		{	
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //gegen den Uhrzeigersinn
     584:	80 e3       	ldi	r24, 0x30	; 48
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	80 71       	andi	r24, 0x10	; 16
     592:	99 27       	eor	r25, r25
     594:	18 16       	cp	r1, r24
     596:	19 06       	cpc	r1, r25
     598:	54 f4       	brge	.+20     	; 0x5ae <__vector_1+0x6c>
			{
				if(get_delta(1) > 0)
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     5a0:	18 16       	cp	r1, r24
     5a2:	19 06       	cpc	r1, r25
     5a4:	6c f5       	brge	.+90     	; 0x600 <__vector_1+0xbe>
					dec_delta(1);					//prevent delta1 from becoming negative
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <dec_delta>
			else									//im Uhrzeigersinn
			{	
				if(get_delta(1) < 70)
					inc_delta(1);					//prevent delta2 from becoming lager than 70
			}
			break;
     5ac:	29 c0       	rjmp	.+82     	; 0x600 <__vector_1+0xbe>
				if(get_delta(1) > 0)
					dec_delta(1);					//prevent delta1 from becoming negative
			}		
			else									//im Uhrzeigersinn
			{	
				if(get_delta(1) < 70)
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     5b4:	86 34       	cpi	r24, 0x46	; 70
     5b6:	91 05       	cpc	r25, r1
     5b8:	1c f5       	brge	.+70     	; 0x600 <__vector_1+0xbe>
					inc_delta(1);					//prevent delta2 from becoming lager than 70
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0e 94 cf 04 	call	0x99e	; 0x99e <inc_delta>
			}
			break;
     5c0:	1f c0       	rjmp	.+62     	; 0x600 <__vector_1+0xbe>
		}
		
		case 4:
		{
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //gegen den Uhrzeigersinn
     5c2:	80 e3       	ldi	r24, 0x30	; 48
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	fc 01       	movw	r30, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	88 2f       	mov	r24, r24
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	80 71       	andi	r24, 0x10	; 16
     5d0:	99 27       	eor	r25, r25
     5d2:	18 16       	cp	r1, r24
     5d4:	19 06       	cpc	r1, r25
     5d6:	54 f4       	brge	.+20     	; 0x5ec <__vector_1+0xaa>
			{
				if(get_delta(2) > 0)
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     5de:	18 16       	cp	r1, r24
     5e0:	19 06       	cpc	r1, r25
     5e2:	84 f4       	brge	.+32     	; 0x604 <__vector_1+0xc2>
					dec_delta(2);					//prevent delta2 from becoming negative
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <dec_delta>
			else									//im Uhrzeigersinn
			{
				if(get_delta(2) < 70)
					inc_delta(2);					//prevent delta2 from becoming lager than 70
			}
			break;
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <__vector_1+0xc2>
				if(get_delta(2) > 0)
					dec_delta(2);					//prevent delta2 from becoming negative
			}
			else									//im Uhrzeigersinn
			{
				if(get_delta(2) < 70)
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     5f2:	86 34       	cpi	r24, 0x46	; 70
     5f4:	91 05       	cpc	r25, r1
     5f6:	34 f4       	brge	.+12     	; 0x604 <__vector_1+0xc2>
					inc_delta(2);					//prevent delta2 from becoming lager than 70
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0e 94 cf 04 	call	0x99e	; 0x99e <inc_delta>
			}
			break;
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <__vector_1+0xc2>
			else									//im Uhrzeigersinn
			{	
				if(get_delta(1) < 70)
					inc_delta(1);					//prevent delta2 from becoming lager than 70
			}
			break;
     600:	00 00       	nop
     602:	01 c0       	rjmp	.+2      	; 0x606 <__vector_1+0xc4>
			else									//im Uhrzeigersinn
			{
				if(get_delta(2) < 70)
					inc_delta(2);					//prevent delta2 from becoming lager than 70
			}
			break;
     604:	00 00       	nop
		
		default:
			break;
	}
	
	stop_timeout_timer();
     606:	0e 94 53 07 	call	0xea6	; 0xea6 <stop_timeout_timer>
	start_timeout_timer();
     60a:	0e 94 41 07 	call	0xe82	; 0xe82 <start_timeout_timer>
	
	
	GIFR &= ~(1<<INTF0);  //clear ext-interrupt-0 flag
     60e:	8a e5       	ldi	r24, 0x5A	; 90
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	2a e5       	ldi	r18, 0x5A	; 90
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	f9 01       	movw	r30, r18
     618:	20 81       	ld	r18, Z
     61a:	2f 7b       	andi	r18, 0xBF	; 191
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	
	sei();
     620:	78 94       	sei
}
     622:	00 00       	nop
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <__vector_2>:


ISR(INT1_vect)  //if the encoder got pushed
{
     64c:	1f 92       	push	r1
     64e:	0f 92       	push	r0
     650:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	2f 93       	push	r18
     65e:	3f 93       	push	r19
     660:	4f 93       	push	r20
     662:	5f 93       	push	r21
     664:	6f 93       	push	r22
     666:	7f 93       	push	r23
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	af 93       	push	r26
     66e:	bf 93       	push	r27
     670:	ef 93       	push	r30
     672:	ff 93       	push	r31
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
	cli();
     67c:	f8 94       	cli
	
	switch(getState())
     67e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getState>
     682:	88 2f       	mov	r24, r24
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	91 05       	cpc	r25, r1
     68a:	a1 f0       	breq	.+40     	; 0x6b4 <__vector_2+0x68>
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	91 05       	cpc	r25, r1
     690:	1c f4       	brge	.+6      	; 0x698 <__vector_2+0x4c>
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	39 f0       	breq	.+14     	; 0x6a4 <__vector_2+0x58>
     696:	44 c0       	rjmp	.+136    	; 0x720 <__vector_2+0xd4>
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	91 05       	cpc	r25, r1
     69c:	89 f0       	breq	.+34     	; 0x6c0 <__vector_2+0x74>
     69e:	04 97       	sbiw	r24, 0x04	; 4
     6a0:	39 f1       	breq	.+78     	; 0x6f0 <__vector_2+0xa4>
     6a2:	3e c0       	rjmp	.+124    	; 0x720 <__vector_2+0xd4>
	{
		case 1:
		{
			setState(SHOW_TEMPS);
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
			stop_timeout_timer();
     6aa:	0e 94 53 07 	call	0xea6	; 0xea6 <stop_timeout_timer>
			start_timeout_timer();
     6ae:	0e 94 41 07 	call	0xe82	; 0xe82 <start_timeout_timer>
			break;
     6b2:	36 c0       	rjmp	.+108    	; 0x720 <__vector_2+0xd4>
		}
		case 2:
		{
			setState(MODIFY_DELTA1);
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
			start_timeout_timer();
     6ba:	0e 94 41 07 	call	0xe82	; 0xe82 <start_timeout_timer>
			break;
     6be:	30 c0       	rjmp	.+96     	; 0x720 <__vector_2+0xd4>
		}
		case 3:
		{
			if(eeprom_read_byte((uint8_t*)0) != get_delta(1))
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 38 10 	call	0x2070	; 0x2070 <eeprom_read_byte>
     6c8:	08 2f       	mov	r16, r24
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     6d2:	08 17       	cp	r16, r24
     6d4:	19 07       	cpc	r17, r25
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <__vector_2+0x9c>
			{
				eeprom_update_byte((uint8_t*)0, get_delta(1));
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     6de:	68 2f       	mov	r22, r24
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 40 10 	call	0x2080	; 0x2080 <eeprom_update_byte>
			}
			setState(MODIFY_DELTA2);
     6e8:	84 e0       	ldi	r24, 0x04	; 4
     6ea:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
			break;
     6ee:	18 c0       	rjmp	.+48     	; 0x720 <__vector_2+0xd4>
		}
		case 4:
		{
			if(eeprom_read_byte((uint8_t*)1) != get_delta(2))
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 38 10 	call	0x2070	; 0x2070 <eeprom_read_byte>
     6f8:	08 2f       	mov	r16, r24
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     702:	08 17       	cp	r16, r24
     704:	19 07       	cpc	r17, r25
     706:	41 f0       	breq	.+16     	; 0x718 <__vector_2+0xcc>
			{
				eeprom_update_byte((uint8_t*)1, get_delta(2));
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     70e:	68 2f       	mov	r22, r24
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 40 10 	call	0x2080	; 0x2080 <eeprom_update_byte>
			}
			setState(SHOW_TEMPS);
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
			break;
     71e:	00 00       	nop
		}
	}
	
	sei();
     720:	78 94       	sei
     722:	00 00       	nop
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	ff 91       	pop	r31
     72a:	ef 91       	pop	r30
     72c:	bf 91       	pop	r27
     72e:	af 91       	pop	r26
     730:	9f 91       	pop	r25
     732:	8f 91       	pop	r24
     734:	7f 91       	pop	r23
     736:	6f 91       	pop	r22
     738:	5f 91       	pop	r21
     73a:	4f 91       	pop	r20
     73c:	3f 91       	pop	r19
     73e:	2f 91       	pop	r18
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	0f 90       	pop	r0
     746:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <main>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);



int main(void)
{
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
     758:	8b e3       	ldi	r24, 0x3B	; 59
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	fc 01       	movw	r30, r24
     75e:	10 82       	st	Z, r1
	PORTB = 0x00;
     760:	88 e3       	ldi	r24, 0x38	; 56
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	fc 01       	movw	r30, r24
     766:	10 82       	st	Z, r1
	
	DDRA = 0xFC;
     768:	8a e3       	ldi	r24, 0x3A	; 58
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	2c ef       	ldi	r18, 0xFC	; 252
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
	DDRB = 0xFF;
     772:	87 e3       	ldi	r24, 0x37	; 55
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
	DDRC |= (1<<WDI_PIN);
     77c:	84 e3       	ldi	r24, 0x34	; 52
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	24 e3       	ldi	r18, 0x34	; 52
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	f9 01       	movw	r30, r18
     786:	20 81       	ld	r18, Z
     788:	20 64       	ori	r18, 0x40	; 64
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
	DDRD |= (1<<PD5);
     78e:	81 e3       	ldi	r24, 0x31	; 49
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	21 e3       	ldi	r18, 0x31	; 49
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	20 62       	ori	r18, 0x20	; 32
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
	
	uart_init(0);
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 df 07 	call	0xfbe	; 0xfbe <uart_init>
	
	
	stdout = &mystdout;
     7a8:	8c e6       	ldi	r24, 0x6C	; 108
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__iob+0x3>
     7b0:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__iob+0x2>
	
	printf("startup!\n");
     7b4:	8b e7       	ldi	r24, 0x7B	; 123
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <puts>
	
	regulator_init();
     7bc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <regulator_init>
	SevenSeg_init();
     7c0:	0e 94 ca 00 	call	0x194	; 0x194 <SevenSeg_init>
	Timeout_init();
     7c4:	0e 94 2b 07 	call	0xe56	; 0xe56 <Timeout_init>
	Encoder_init();
     7c8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Encoder_init>
	
	
	while(1)	
	{	
		switch(state)
     7cc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <state>
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	91 05       	cpc	r25, r1
     7d8:	01 f1       	breq	.+64     	; 0x81a <main+0xca>
     7da:	83 30       	cpi	r24, 0x03	; 3
     7dc:	91 05       	cpc	r25, r1
     7de:	2c f4       	brge	.+10     	; 0x7ea <main+0x9a>
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	49 f0       	breq	.+18     	; 0x7f6 <main+0xa6>
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	89 f0       	breq	.+34     	; 0x80a <main+0xba>
     7e8:	5a c0       	rjmp	.+180    	; 0x89e <__stack+0x3f>
     7ea:	83 30       	cpi	r24, 0x03	; 3
     7ec:	91 05       	cpc	r25, r1
     7ee:	51 f1       	breq	.+84     	; 0x844 <main+0xf4>
     7f0:	04 97       	sbiw	r24, 0x04	; 4
     7f2:	d9 f1       	breq	.+118    	; 0x86a <__stack+0xb>
     7f4:	54 c0       	rjmp	.+168    	; 0x89e <__stack+0x3f>
		{
			case INIT:
			{
				if(SevenSeg_get_state() == 1)						//disable display only if it is on
     7f6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	11 f4       	brne	.+4      	; 0x802 <main+0xb2>
				{
					SevenSeg_off();
     7fe:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SevenSeg_off>
				}
				setState(DISPLAY_OFF);
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
				break;
     808:	4a c0       	rjmp	.+148    	; 0x89e <__stack+0x3f>
			}
			
			case DISPLAY_OFF:
			{
				if(SevenSeg_get_state() == 1)						//disable display only if it is on
     80a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	09 f0       	breq	.+2      	; 0x814 <main+0xc4>
     812:	3e c0       	rjmp	.+124    	; 0x890 <__stack+0x31>
				{
					SevenSeg_off();
     814:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SevenSeg_off>
				}
				break;
     818:	3b c0       	rjmp	.+118    	; 0x890 <__stack+0x31>
			}
				
			case SHOW_TEMPS:
			{
				SevenSeg_set_val(0, get_temp(0));
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <get_temp>
     820:	bc 01       	movw	r22, r24
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				SevenSeg_set_val(1, get_temp(1));
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	0e 94 e6 05 	call	0xbcc	; 0xbcc <get_temp>
     82e:	bc 01       	movw	r22, r24
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>

				if(SevenSeg_get_state() == 0)						//enable display only if it is off
     836:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     83a:	88 23       	and	r24, r24
     83c:	59 f5       	brne	.+86     	; 0x894 <__stack+0x35>
				{
					SevenSeg_on();
     83e:	0e 94 44 02 	call	0x488	; 0x488 <SevenSeg_on>
				}
				break;
     842:	28 c0       	rjmp	.+80     	; 0x894 <__stack+0x35>
			}
			
			case MODIFY_DELTA1: 
			{
				SevenSeg_set_val(1, get_delta(1));
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     84a:	bc 01       	movw	r22, r24
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				SevenSeg_set_val(0, 1000);							//set Kessel-display off
     852:	68 ee       	ldi	r22, 0xE8	; 232
     854:	73 e0       	ldi	r23, 0x03	; 3
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
     85c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     860:	88 23       	and	r24, r24
     862:	d1 f4       	brne	.+52     	; 0x898 <__stack+0x39>
				{
					SevenSeg_on();
     864:	0e 94 44 02 	call	0x488	; 0x488 <SevenSeg_on>
				}
				break;
     868:	17 c0       	rjmp	.+46     	; 0x898 <__stack+0x39>
			}
			
			case MODIFY_DELTA2:
			{
				SevenSeg_set_val(1, 1000);							//set Dach-display off
     86a:	68 ee       	ldi	r22, 0xE8	; 232
     86c:	73 e0       	ldi	r23, 0x03	; 3
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				SevenSeg_set_val(0, get_delta(2));
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     87a:	bc 01       	movw	r22, r24
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
     882:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     886:	88 23       	and	r24, r24
     888:	49 f4       	brne	.+18     	; 0x89c <__stack+0x3d>
				{
					SevenSeg_on();
     88a:	0e 94 44 02 	call	0x488	; 0x488 <SevenSeg_on>
				}
				break;
     88e:	06 c0       	rjmp	.+12     	; 0x89c <__stack+0x3d>
			{
				if(SevenSeg_get_state() == 1)						//disable display only if it is on
				{
					SevenSeg_off();
				}
				break;
     890:	00 00       	nop
     892:	05 c0       	rjmp	.+10     	; 0x89e <__stack+0x3f>

				if(SevenSeg_get_state() == 0)						//enable display only if it is off
				{
					SevenSeg_on();
				}
				break;
     894:	00 00       	nop
     896:	03 c0       	rjmp	.+6      	; 0x89e <__stack+0x3f>
				SevenSeg_set_val(0, 1000);							//set Kessel-display off
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
				{
					SevenSeg_on();
				}
				break;
     898:	00 00       	nop
     89a:	01 c0       	rjmp	.+2      	; 0x89e <__stack+0x3f>
				SevenSeg_set_val(0, get_delta(2));
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
				{
					SevenSeg_on();
				}
				break;
     89c:	00 00       	nop
			}
		}
		WDI_PORT ^= (1<<WDI_PIN);
     89e:	85 e3       	ldi	r24, 0x35	; 53
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	25 e3       	ldi	r18, 0x35	; 53
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	f9 01       	movw	r30, r18
     8a8:	30 81       	ld	r19, Z
     8aa:	20 e4       	ldi	r18, 0x40	; 64
     8ac:	23 27       	eor	r18, r19
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18
	}
     8b2:	8c cf       	rjmp	.-232    	; 0x7cc <main+0x7c>

000008b4 <setState>:
}

void setState(uint8_t s)
{
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	1f 92       	push	r1
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	89 83       	std	Y+1, r24	; 0x01
	state = s;
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <state>
//	printf("state -> %d\n", state);
}
     8c6:	00 00       	nop
     8c8:	0f 90       	pop	r0
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <getState>:

uint8_t getState()
{
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
	return state;
     8d8:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <state>
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <regulator_init>:
}

void disable_show_temps(void)
{
	show_temps = 0;
}
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 38 10 	call	0x2070	; 0x2070 <eeprom_read_byte>
     8f2:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <delta1>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 38 10 	call	0x2070	; 0x2070 <eeprom_read_byte>
     8fe:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <delta2>
     902:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     906:	87 34       	cpi	r24, 0x47	; 71
     908:	40 f0       	brcs	.+16     	; 0x91a <regulator_init+0x38>
     90a:	86 e4       	ldi	r24, 0x46	; 70
     90c:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <delta1>
     910:	66 e4       	ldi	r22, 0x46	; 70
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 40 10 	call	0x2080	; 0x2080 <eeprom_update_byte>
     91a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     91e:	87 34       	cpi	r24, 0x47	; 71
     920:	40 f0       	brcs	.+16     	; 0x932 <regulator_init+0x50>
     922:	86 e4       	ldi	r24, 0x46	; 70
     924:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <delta1>
     928:	66 e4       	ldi	r22, 0x46	; 70
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 40 10 	call	0x2080	; 0x2080 <eeprom_update_byte>
     932:	87 e2       	ldi	r24, 0x27	; 39
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	fc 01       	movw	r30, r24
     938:	10 82       	st	Z, r1
     93a:	87 e2       	ldi	r24, 0x27	; 39
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	27 e2       	ldi	r18, 0x27	; 39
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	f9 01       	movw	r30, r18
     944:	20 81       	ld	r18, Z
     946:	2f 7d       	andi	r18, 0xDF	; 223
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
     94c:	86 e2       	ldi	r24, 0x26	; 38
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	26 e2       	ldi	r18, 0x26	; 38
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	f9 01       	movw	r30, r18
     956:	20 81       	ld	r18, Z
     958:	20 68       	ori	r18, 0x80	; 128
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18
     95e:	85 e4       	ldi	r24, 0x45	; 69
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	25 e4       	ldi	r18, 0x45	; 69
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	2f 66       	ori	r18, 0x6F	; 111
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
     970:	89 e5       	ldi	r24, 0x59	; 89
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	29 e5       	ldi	r18, 0x59	; 89
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	f9 01       	movw	r30, r18
     97a:	20 81       	ld	r18, Z
     97c:	20 64       	ori	r18, 0x40	; 64
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
     982:	81 e3       	ldi	r24, 0x31	; 49
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	21 e3       	ldi	r18, 0x31	; 49
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	f9 01       	movw	r30, r18
     98c:	20 81       	ld	r18, Z
     98e:	20 68       	ori	r18, 0x80	; 128
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
     994:	78 94       	sei
     996:	00 00       	nop
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <inc_delta>:

void inc_delta(uint8_t i_)
{
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	1f 92       	push	r1
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	49 f4       	brne	.+18     	; 0x9c2 <inc_delta+0x24>
	{
		if(delta1<100)
     9b0:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     9b4:	84 36       	cpi	r24, 0x64	; 100
     9b6:	28 f4       	brcc	.+10     	; 0x9c2 <inc_delta+0x24>
			delta1++;
     9b8:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <delta1>
	}
	
	if(i_==2)
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	82 30       	cpi	r24, 0x02	; 2
     9c6:	49 f4       	brne	.+18     	; 0x9da <inc_delta+0x3c>
	{
		if(delta2<100)
     9c8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     9cc:	84 36       	cpi	r24, 0x64	; 100
     9ce:	28 f4       	brcc	.+10     	; 0x9da <inc_delta+0x3c>
			delta2++;
     9d0:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <delta2>
	}			
}
     9da:	00 00       	nop
     9dc:	0f 90       	pop	r0
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <dec_delta>:

void dec_delta(uint8_t i_)
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	1f 92       	push	r1
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	49 f4       	brne	.+18     	; 0xa08 <dec_delta+0x24>
	{
		if(delta1>0)
     9f6:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     9fa:	88 23       	and	r24, r24
     9fc:	29 f0       	breq	.+10     	; 0xa08 <dec_delta+0x24>
			delta1--;
     9fe:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     a02:	81 50       	subi	r24, 0x01	; 1
     a04:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <delta1>
	}
	
	if(i_==2)
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	49 f4       	brne	.+18     	; 0xa20 <dec_delta+0x3c>
	{
		if(delta2>0)
     a0e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     a12:	88 23       	and	r24, r24
     a14:	29 f0       	breq	.+10     	; 0xa20 <dec_delta+0x3c>
			delta2--;
     a16:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <delta2>
	}
}
     a20:	00 00       	nop
     a22:	0f 90       	pop	r0
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <get_delta>:

uint8_t get_delta(uint8_t i_)
{
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	19 f4       	brne	.+6      	; 0xa42 <get_delta+0x18>
	{
		return delta1;
     a3c:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     a40:	07 c0       	rjmp	.+14     	; 0xa50 <get_delta+0x26>
	}
	if(i_==2)
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	19 f4       	brne	.+6      	; 0xa4e <get_delta+0x24>
	{
		return delta2;
     a48:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <get_delta+0x26>
	}
	return 255;
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
}
     a50:	0f 90       	pop	r0
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <measure_temp>:


//sensor: 1=dach; 0=kessel
int16_t measure_temp(uint8_t sensor)
{
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	2d 97       	sbiw	r28, 0x0d	; 13
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	8d 87       	std	Y+13, r24	; 0x0d
	ADMUX &= ~0x1F;							//clear MUX4:0
     a76:	87 e2       	ldi	r24, 0x27	; 39
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	27 e2       	ldi	r18, 0x27	; 39
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	f9 01       	movw	r30, r18
     a80:	20 81       	ld	r18, Z
     a82:	20 7e       	andi	r18, 0xE0	; 224
     a84:	fc 01       	movw	r30, r24
     a86:	20 83       	st	Z, r18
	
	if(sensor == 0)
     a88:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8a:	88 23       	and	r24, r24
     a8c:	49 f4       	brne	.+18     	; 0xaa0 <measure_temp+0x48>
		ADMUX |= (1<<MUX0);					//set ADC to CH1. If CH2 has to be sampled MUX[4:0] is alreadyy 0, because it was rsetted above
     a8e:	87 e2       	ldi	r24, 0x27	; 39
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	27 e2       	ldi	r18, 0x27	; 39
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	f9 01       	movw	r30, r18
     a98:	20 81       	ld	r18, Z
     a9a:	21 60       	ori	r18, 0x01	; 1
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18
		
	ADCSRA |= (1<<ADSC);					//start conversion
     aa0:	86 e2       	ldi	r24, 0x26	; 38
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	26 e2       	ldi	r18, 0x26	; 38
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	f9 01       	movw	r30, r18
     aaa:	20 81       	ld	r18, Z
     aac:	20 64       	ori	r18, 0x40	; 64
     aae:	fc 01       	movw	r30, r24
     ab0:	20 83       	st	Z, r18
	
	while( (ADCSRA & (1<<ADSC)) > 0 )		//wait for end of conversion
     ab2:	00 00       	nop
     ab4:	86 e2       	ldi	r24, 0x26	; 38
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	fc 01       	movw	r30, r24
     aba:	80 81       	ld	r24, Z
     abc:	88 2f       	mov	r24, r24
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	80 74       	andi	r24, 0x40	; 64
     ac2:	99 27       	eor	r25, r25
     ac4:	18 16       	cp	r1, r24
     ac6:	19 06       	cpc	r1, r25
     ac8:	ac f3       	brlt	.-22     	; 0xab4 <measure_temp+0x5c>
	{
	}
	
	uint16_t adc_val = ADCL;				//get conversion result low-byte
     aca:	84 e2       	ldi	r24, 0x24	; 36
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	fc 01       	movw	r30, r24
     ad0:	80 81       	ld	r24, Z
     ad2:	88 2f       	mov	r24, r24
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	9a 83       	std	Y+2, r25	; 0x02
     ad8:	89 83       	std	Y+1, r24	; 0x01
	adc_val += (ADCH<<8);					//and high-byte
     ada:	85 e2       	ldi	r24, 0x25	; 37
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	88 2f       	mov	r24, r24
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	98 2f       	mov	r25, r24
     ae8:	88 27       	eor	r24, r24
     aea:	9c 01       	movw	r18, r24
     aec:	89 81       	ldd	r24, Y+1	; 0x01
     aee:	9a 81       	ldd	r25, Y+2	; 0x02
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	9a 83       	std	Y+2, r25	; 0x02
     af6:	89 83       	std	Y+1, r24	; 0x01
	
	
	float voltage = adc_val * 4.854e-3f;									//get voltage from ADC-values	
     af8:	89 81       	ldd	r24, Y+1	; 0x01
     afa:	9a 81       	ldd	r25, Y+2	; 0x02
     afc:	cc 01       	movw	r24, r24
     afe:	a0 e0       	ldi	r26, 0x00	; 0
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	bc 01       	movw	r22, r24
     b04:	cd 01       	movw	r24, r26
     b06:	0e 94 46 09 	call	0x128c	; 0x128c <__floatunsisf>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	2e e4       	ldi	r18, 0x4E	; 78
     b10:	3e e0       	ldi	r19, 0x0E	; 14
     b12:	4f e9       	ldi	r20, 0x9F	; 159
     b14:	5b e3       	ldi	r21, 0x3B	; 59
     b16:	bc 01       	movw	r22, r24
     b18:	cd 01       	movw	r24, r26
     b1a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__mulsf3>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	8b 83       	std	Y+3, r24	; 0x03
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	ad 83       	std	Y+5, r26	; 0x05
     b28:	be 83       	std	Y+6, r27	; 0x06
	float temp_f = (7382.06f - voltage*2751.75f)/(voltage - 29.323f);		//get temperature from voltage	
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	3c ef       	ldi	r19, 0xFC	; 252
     b2e:	4b e2       	ldi	r20, 0x2B	; 43
     b30:	55 e4       	ldi	r21, 0x45	; 69
     b32:	6b 81       	ldd	r22, Y+3	; 0x03
     b34:	7c 81       	ldd	r23, Y+4	; 0x04
     b36:	8d 81       	ldd	r24, Y+5	; 0x05
     b38:	9e 81       	ldd	r25, Y+6	; 0x06
     b3a:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__mulsf3>
     b3e:	dc 01       	movw	r26, r24
     b40:	cb 01       	movw	r24, r22
     b42:	9c 01       	movw	r18, r24
     b44:	ad 01       	movw	r20, r26
     b46:	6b e7       	ldi	r22, 0x7B	; 123
     b48:	70 eb       	ldi	r23, 0xB0	; 176
     b4a:	86 ee       	ldi	r24, 0xE6	; 230
     b4c:	95 e4       	ldi	r25, 0x45	; 69
     b4e:	0e 94 31 08 	call	0x1062	; 0x1062 <__subsf3>
     b52:	dc 01       	movw	r26, r24
     b54:	cb 01       	movw	r24, r22
     b56:	6c 01       	movw	r12, r24
     b58:	7d 01       	movw	r14, r26
     b5a:	21 e8       	ldi	r18, 0x81	; 129
     b5c:	35 e9       	ldi	r19, 0x95	; 149
     b5e:	4a ee       	ldi	r20, 0xEA	; 234
     b60:	51 e4       	ldi	r21, 0x41	; 65
     b62:	6b 81       	ldd	r22, Y+3	; 0x03
     b64:	7c 81       	ldd	r23, Y+4	; 0x04
     b66:	8d 81       	ldd	r24, Y+5	; 0x05
     b68:	9e 81       	ldd	r25, Y+6	; 0x06
     b6a:	0e 94 31 08 	call	0x1062	; 0x1062 <__subsf3>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	9c 01       	movw	r18, r24
     b74:	ad 01       	movw	r20, r26
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	0e 94 9e 08 	call	0x113c	; 0x113c <__divsf3>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	8f 83       	std	Y+7, r24	; 0x07
     b84:	98 87       	std	Y+8, r25	; 0x08
     b86:	a9 87       	std	Y+9, r26	; 0x09
     b88:	ba 87       	std	Y+10, r27	; 0x0a
	int16_t temp = (int16_t) roundf( temp_f );								//round temperature and cast it to int
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	98 85       	ldd	r25, Y+8	; 0x08
     b8e:	a9 85       	ldd	r26, Y+9	; 0x09
     b90:	ba 85       	ldd	r27, Y+10	; 0x0a
     b92:	bc 01       	movw	r22, r24
     b94:	cd 01       	movw	r24, r26
     b96:	0e 94 41 0a 	call	0x1482	; 0x1482 <round>
     b9a:	dc 01       	movw	r26, r24
     b9c:	cb 01       	movw	r24, r22
     b9e:	bc 01       	movw	r22, r24
     ba0:	cd 01       	movw	r24, r26
     ba2:	0e 94 10 09 	call	0x1220	; 0x1220 <__fixsfsi>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	9c 87       	std	Y+12, r25	; 0x0c
     bac:	8b 87       	std	Y+11, r24	; 0x0b
	

	return temp;
     bae:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb0:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     bb2:	2d 96       	adiw	r28, 0x0d	; 13
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	ff 90       	pop	r15
     bc4:	ef 90       	pop	r14
     bc6:	df 90       	pop	r13
     bc8:	cf 90       	pop	r12
     bca:	08 95       	ret

00000bcc <get_temp>:

//sensor: 1=dach; 0=kessel
int16_t get_temp(uint8_t sensor)
{
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	1f 92       	push	r1
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == 1)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	29 f4       	brne	.+10     	; 0xbe8 <get_temp+0x1c>
	{
		return temp_dach;
     bde:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <temp_dach>
     be2:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <temp_dach+0x1>
     be6:	0a c0       	rjmp	.+20     	; 0xbfc <get_temp+0x30>
	}
	else if(sensor == 0)
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	88 23       	and	r24, r24
     bec:	29 f4       	brne	.+10     	; 0xbf8 <get_temp+0x2c>
	{
		return temp_kessel;
     bee:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <temp_kessel>
     bf2:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <temp_kessel+0x1>
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <get_temp+0x30>
	}
	else
	{
		return -999;
     bf8:	89 e1       	ldi	r24, 0x19	; 25
     bfa:	9c ef       	ldi	r25, 0xFC	; 252
	}
}
     bfc:	0f 90       	pop	r0
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <set_PWM>:


//sets duty cycle; 0-100%
void set_PWM(uint8_t duty)
{
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	1f 92       	push	r1
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = (uint8_t)((duty/100.0f)*255);
     c14:	03 e4       	ldi	r16, 0x43	; 67
     c16:	10 e0       	ldi	r17, 0x00	; 0
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	09 2e       	mov	r0, r25
     c20:	00 0c       	add	r0, r0
     c22:	aa 0b       	sbc	r26, r26
     c24:	bb 0b       	sbc	r27, r27
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 48 09 	call	0x1290	; 0x1290 <__floatsisf>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	48 ec       	ldi	r20, 0xC8	; 200
     c38:	52 e4       	ldi	r21, 0x42	; 66
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	0e 94 9e 08 	call	0x113c	; 0x113c <__divsf3>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	4f e7       	ldi	r20, 0x7F	; 127
     c4c:	53 e4       	ldi	r21, 0x43	; 67
     c4e:	bc 01       	movw	r22, r24
     c50:	cd 01       	movw	r24, r26
     c52:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__mulsf3>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	bc 01       	movw	r22, r24
     c5c:	cd 01       	movw	r24, r26
     c5e:	0e 94 17 09 	call	0x122e	; 0x122e <__fixunssfsi>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	f8 01       	movw	r30, r16
     c68:	80 83       	st	Z, r24
}
     c6a:	00 00       	nop
     c6c:	0f 90       	pop	r0
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	08 95       	ret

00000c78 <__vector_5>:



ISR(TIMER2_OVF_vect)
{	
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c80:	0f 92       	push	r0
     c82:	11 24       	eor	r1, r1
     c84:	2f 93       	push	r18
     c86:	3f 93       	push	r19
     c88:	4f 93       	push	r20
     c8a:	5f 93       	push	r21
     c8c:	6f 93       	push	r22
     c8e:	7f 93       	push	r23
     c90:	8f 93       	push	r24
     c92:	9f 93       	push	r25
     c94:	af 93       	push	r26
     c96:	bf 93       	push	r27
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
	
	cli();
     ca4:	f8 94       	cli
	
	if(loop_cnt < 62) //if 2s are not passed
     ca6:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <loop_cnt>
     caa:	8e 33       	cpi	r24, 0x3E	; 62
     cac:	30 f4       	brcc	.+12     	; 0xcba <__vector_5+0x42>
	{
		loop_cnt++;
     cae:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <loop_cnt>
     cb2:	8f 5f       	subi	r24, 0xFF	; 255
     cb4:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <loop_cnt>
     cb8:	af c0       	rjmp	.+350    	; 0xe18 <__vector_5+0x1a0>
	}
	
	else	//if it is time to work...
	{
		if (log_counter == 255)
     cba:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <log_counter>
     cbe:	8f 3f       	cpi	r24, 0xFF	; 255
     cc0:	11 f4       	brne	.+4      	; 0xcc6 <__vector_5+0x4e>
		{
			log_counter = 0;
     cc2:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <log_counter>
		}
		
		PORTD ^= (1<<PD5);
     cc6:	82 e3       	ldi	r24, 0x32	; 50
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	22 e3       	ldi	r18, 0x32	; 50
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	f9 01       	movw	r30, r18
     cd0:	30 81       	ld	r19, Z
     cd2:	20 e2       	ldi	r18, 0x20	; 32
     cd4:	23 27       	eor	r18, r19
     cd6:	fc 01       	movw	r30, r24
     cd8:	20 83       	st	Z, r18

		temp_dach   = measure_temp(1) - 3; //-3 to compensate the wires
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	0e 94 2c 05 	call	0xa58	; 0xa58 <measure_temp>
     ce0:	03 97       	sbiw	r24, 0x03	; 3
     ce2:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <temp_dach+0x1>
     ce6:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <temp_dach>
		temp_kessel = measure_temp(0);
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	0e 94 2c 05 	call	0xa58	; 0xa58 <measure_temp>
     cf0:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <temp_kessel+0x1>
     cf4:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <temp_kessel>
		
		
		d_teta = temp_dach - temp_kessel;
     cf8:	20 91 a1 00 	lds	r18, 0x00A1	; 0x8000a1 <temp_dach>
     cfc:	30 91 a2 00 	lds	r19, 0x00A2	; 0x8000a2 <temp_dach+0x1>
     d00:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <temp_kessel>
     d04:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <temp_kessel+0x1>
     d08:	a9 01       	movw	r20, r18
     d0a:	48 1b       	sub	r20, r24
     d0c:	59 0b       	sbc	r21, r25
     d0e:	ca 01       	movw	r24, r20
     d10:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <d_teta+0x1>
     d14:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <d_teta>
		
		if(d_teta > delta1)									
     d18:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <d_teta>
     d24:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <d_teta+0x1>
     d28:	28 17       	cp	r18, r24
     d2a:	39 07       	cpc	r19, r25
     d2c:	1c f4       	brge	.+6      	; 0xd34 <__vector_5+0xbc>
		{	
			comming_from_high_temp = 1;						//if we are coming from a temperature difference higher than delta1, set flag
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <comming_from_high_temp>
		}
	
		if(comming_from_high_temp == 1)						//if we are coming from a temperature difference higher than delta1
     d34:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <comming_from_high_temp>
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	b9 f5       	brne	.+110    	; 0xdaa <__vector_5+0x132>
		{
			if( d_teta >= delta2)							//if we are still above delta 2
     d3c:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <d_teta>
     d48:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <d_teta+0x1>
     d4c:	82 17       	cp	r24, r18
     d4e:	93 07       	cpc	r25, r19
     d50:	44 f1       	brlt	.+80     	; 0xda2 <__vector_5+0x12a>
			{
				if((d_teta * k) >= 0)						//if d_teta is negative the multiplication with k will lead to a negative duty cycle, so thsi has to be handled
     d52:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <k>
     d56:	48 2f       	mov	r20, r24
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <d_teta>
     d5e:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <d_teta+0x1>
     d62:	42 9f       	mul	r20, r18
     d64:	c0 01       	movw	r24, r0
     d66:	43 9f       	mul	r20, r19
     d68:	90 0d       	add	r25, r0
     d6a:	52 9f       	mul	r21, r18
     d6c:	90 0d       	add	r25, r0
     d6e:	11 24       	eor	r1, r1
     d70:	99 23       	and	r25, r25
     d72:	a4 f0       	brlt	.+40     	; 0xd9c <__vector_5+0x124>
				{
					duty = (uint8_t) d_teta * k;			//50 Kevlin -> 100% PWM
     d74:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <d_teta>
     d78:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <d_teta+0x1>
     d7c:	98 2f       	mov	r25, r24
     d7e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <k>
     d82:	98 9f       	mul	r25, r24
     d84:	80 2d       	mov	r24, r0
     d86:	11 24       	eor	r1, r1
     d88:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <duty>
					if( duty > 100)
     d8c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <duty>
     d90:	85 36       	cpi	r24, 0x65	; 101
     d92:	58 f0       	brcs	.+22     	; 0xdaa <__vector_5+0x132>
					{
						duty = 100;
     d94:	84 e6       	ldi	r24, 0x64	; 100
     d96:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <duty>
     d9a:	07 c0       	rjmp	.+14     	; 0xdaa <__vector_5+0x132>
					}
				}
				else										//if we are finally at delta2 or lower, reset flag. Only if we get above delta1 again, the pump is going to be activatda gain
				{
					duty = 0;
     d9c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <duty>
     da0:	04 c0       	rjmp	.+8      	; 0xdaa <__vector_5+0x132>
				}
			}
			else
			{
				duty = 0;
     da2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <duty>
				comming_from_high_temp = 0;
     da6:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <comming_from_high_temp>
			}
		}
		
		set_PWM(duty);
     daa:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <duty>
     dae:	0e 94 02 06 	call	0xc04	; 0xc04 <set_PWM>
	
		loop_cnt = 0;
     db2:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <loop_cnt>
		log_counter ++;
     db6:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <log_counter>
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <log_counter>
		
		
		#ifdef LOGGING
		if(log_counter==15) //every 30 secounds
     dc0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <log_counter>
     dc4:	8f 30       	cpi	r24, 0x0F	; 15
     dc6:	41 f5       	brne	.+80     	; 0xe18 <__vector_5+0x1a0>
		{
			log_counter = 0;
     dc8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <log_counter>
			printf("%d;%d;%d\n", temp_dach, temp_kessel, duty);
     dcc:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <duty>
     dd0:	48 2f       	mov	r20, r24
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <temp_kessel>
     dd8:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <temp_kessel+0x1>
     ddc:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <temp_dach>
     de0:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <temp_dach+0x1>
     de4:	65 2f       	mov	r22, r21
     de6:	6f 93       	push	r22
     de8:	4f 93       	push	r20
     dea:	43 2f       	mov	r20, r19
     dec:	4f 93       	push	r20
     dee:	2f 93       	push	r18
     df0:	29 2f       	mov	r18, r25
     df2:	2f 93       	push	r18
     df4:	8f 93       	push	r24
     df6:	84 e8       	ldi	r24, 0x84	; 132
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	89 2f       	mov	r24, r25
     dfc:	8f 93       	push	r24
     dfe:	84 e8       	ldi	r24, 0x84	; 132
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	8f 93       	push	r24
     e04:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <printf>
     e08:	8d b7       	in	r24, 0x3d	; 61
     e0a:	9e b7       	in	r25, 0x3e	; 62
     e0c:	08 96       	adiw	r24, 0x08	; 8
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
	}
	
	
	
	
	TIFR &= ~(1<<TOV2);			//clear flag
     e18:	88 e5       	ldi	r24, 0x58	; 88
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	28 e5       	ldi	r18, 0x58	; 88
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	f9 01       	movw	r30, r18
     e22:	20 81       	ld	r18, Z
     e24:	2f 7b       	andi	r18, 0xBF	; 191
     e26:	fc 01       	movw	r30, r24
     e28:	20 83       	st	Z, r18
		
	sei();
     e2a:	78 94       	sei
}
     e2c:	00 00       	nop
     e2e:	df 91       	pop	r29
     e30:	cf 91       	pop	r28
     e32:	ff 91       	pop	r31
     e34:	ef 91       	pop	r30
     e36:	bf 91       	pop	r27
     e38:	af 91       	pop	r26
     e3a:	9f 91       	pop	r25
     e3c:	8f 91       	pop	r24
     e3e:	7f 91       	pop	r23
     e40:	6f 91       	pop	r22
     e42:	5f 91       	pop	r21
     e44:	4f 91       	pop	r20
     e46:	3f 91       	pop	r19
     e48:	2f 91       	pop	r18
     e4a:	0f 90       	pop	r0
     e4c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <Timeout_init>:
#include "main.h"
#include "regulator.h"
#include "uart.h"

void Timeout_init()
{
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00;
     e5e:	8f e4       	ldi	r24, 0x4F	; 79
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	fc 01       	movw	r30, r24
     e64:	10 82       	st	Z, r1
	
	TIMSK |= (1<<TOIE1);			//enable overflow-event
     e66:	89 e5       	ldi	r24, 0x59	; 89
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	29 e5       	ldi	r18, 0x59	; 89
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	f9 01       	movw	r30, r18
     e70:	20 81       	ld	r18, Z
     e72:	24 60       	ori	r18, 0x04	; 4
     e74:	fc 01       	movw	r30, r24
     e76:	20 83       	st	Z, r18
	sei();
     e78:	78 94       	sei
}
     e7a:	00 00       	nop
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <start_timeout_timer>:
void start_timeout_timer()
{
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						 //reset timer counter value
     e8a:	8c e4       	ldi	r24, 0x4C	; 76
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	fc 01       	movw	r30, r24
     e90:	11 82       	std	Z+1, r1	; 0x01
     e92:	10 82       	st	Z, r1
	TCCR1B = (1<<CS12) | (1<<CS10);  //start timer at prescaler /1024
     e94:	8e e4       	ldi	r24, 0x4E	; 78
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	25 e0       	ldi	r18, 0x05	; 5
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 83       	st	Z, r18
}
     e9e:	00 00       	nop
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	08 95       	ret

00000ea6 <stop_timeout_timer>:

void stop_timeout_timer()
{
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     eae:	8e e4       	ldi	r24, 0x4E	; 78
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	2e e4       	ldi	r18, 0x4E	; 78
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	f9 01       	movw	r30, r18
     eb8:	20 81       	ld	r18, Z
     eba:	2a 7f       	andi	r18, 0xFA	; 250
     ebc:	fc 01       	movw	r30, r24
     ebe:	20 83       	st	Z, r18
}
     ec0:	00 00       	nop
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	08 95       	ret

00000ec8 <__vector_9>:



//timeouted
ISR(TIMER1_OVF_vect)
{	
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	2f 93       	push	r18
     eda:	3f 93       	push	r19
     edc:	4f 93       	push	r20
     ede:	5f 93       	push	r21
     ee0:	6f 93       	push	r22
     ee2:	7f 93       	push	r23
     ee4:	8f 93       	push	r24
     ee6:	9f 93       	push	r25
     ee8:	af 93       	push	r26
     eea:	bf 93       	push	r27
     eec:	ef 93       	push	r30
     eee:	ff 93       	push	r31
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	cli();
     ef8:	f8 94       	cli
	
	if((getState() == 3) && (eeprom_read_byte((uint8_t*)0) != get_delta(1)))
     efa:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getState>
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	a1 f4       	brne	.+40     	; 0xf2a <__vector_9+0x62>
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 38 10 	call	0x2070	; 0x2070 <eeprom_read_byte>
     f0a:	08 2f       	mov	r16, r24
     f0c:	10 e0       	ldi	r17, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     f14:	08 17       	cp	r16, r24
     f16:	19 07       	cpc	r17, r25
     f18:	41 f0       	breq	.+16     	; 0xf2a <__vector_9+0x62>
	{
		eeprom_update_byte((uint8_t*)(0), (uint8_t)get_delta(1));
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     f20:	68 2f       	mov	r22, r24
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 40 10 	call	0x2080	; 0x2080 <eeprom_update_byte>
	}
	
	if((getState() == 4) && (eeprom_read_byte((uint8_t*)1) != get_delta(2)))
     f2a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getState>
     f2e:	84 30       	cpi	r24, 0x04	; 4
     f30:	a1 f4       	brne	.+40     	; 0xf5a <__vector_9+0x92>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 38 10 	call	0x2070	; 0x2070 <eeprom_read_byte>
     f3a:	08 2f       	mov	r16, r24
     f3c:	10 e0       	ldi	r17, 0x00	; 0
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     f44:	08 17       	cp	r16, r24
     f46:	19 07       	cpc	r17, r25
     f48:	41 f0       	breq	.+16     	; 0xf5a <__vector_9+0x92>
	{
		eeprom_update_byte((uint8_t*)(1), (uint8_t)get_delta(2));
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     f50:	68 2f       	mov	r22, r24
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 40 10 	call	0x2080	; 0x2080 <eeprom_update_byte>
	}
	
	setState(DISPLAY_OFF);
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
	
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     f60:	8e e4       	ldi	r24, 0x4E	; 78
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	2e e4       	ldi	r18, 0x4E	; 78
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	f9 01       	movw	r30, r18
     f6a:	20 81       	ld	r18, Z
     f6c:	2a 7f       	andi	r18, 0xFA	; 250
     f6e:	fc 01       	movw	r30, r24
     f70:	20 83       	st	Z, r18
	TCNT1 = 0;						   //resetting counter register
     f72:	8c e4       	ldi	r24, 0x4C	; 76
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	fc 01       	movw	r30, r24
     f78:	11 82       	std	Z+1, r1	; 0x01
     f7a:	10 82       	st	Z, r1
	
	
	TIFR &= ~(1<<TOV1);
     f7c:	88 e5       	ldi	r24, 0x58	; 88
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	28 e5       	ldi	r18, 0x58	; 88
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	f9 01       	movw	r30, r18
     f86:	20 81       	ld	r18, Z
     f88:	2b 7f       	andi	r18, 0xFB	; 251
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 83       	st	Z, r18
	sei();
     f8e:	78 94       	sei
     f90:	00 00       	nop
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	ff 91       	pop	r31
     f98:	ef 91       	pop	r30
     f9a:	bf 91       	pop	r27
     f9c:	af 91       	pop	r26
     f9e:	9f 91       	pop	r25
     fa0:	8f 91       	pop	r24
     fa2:	7f 91       	pop	r23
     fa4:	6f 91       	pop	r22
     fa6:	5f 91       	pop	r21
     fa8:	4f 91       	pop	r20
     faa:	3f 91       	pop	r19
     fac:	2f 91       	pop	r18
     fae:	1f 91       	pop	r17
     fb0:	0f 91       	pop	r16
     fb2:	0f 90       	pop	r0
     fb4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     fb8:	0f 90       	pop	r0
     fba:	1f 90       	pop	r1
     fbc:	18 95       	reti

00000fbe <uart_init>:
#include <avr/io.h>
#include <stdio.h>


void uart_init()
{
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<RXEN) | (1<<TXEN);  //enable receive and transmit
     fc6:	8a e2       	ldi	r24, 0x2A	; 42
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	2a e2       	ldi	r18, 0x2A	; 42
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	f9 01       	movw	r30, r18
     fd0:	20 81       	ld	r18, Z
     fd2:	28 61       	ori	r18, 0x18	; 24
     fd4:	fc 01       	movw	r30, r24
     fd6:	20 83       	st	Z, r18
	UBRRL = 51;						 //setting datarate to 9600 baud/s
     fd8:	89 e2       	ldi	r24, 0x29	; 41
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	23 e3       	ldi	r18, 0x33	; 51
     fde:	fc 01       	movw	r30, r24
     fe0:	20 83       	st	Z, r18

	UCSRB |= (1<<RXEN) | (1<<TXEN);
     fe2:	8a e2       	ldi	r24, 0x2A	; 42
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	2a e2       	ldi	r18, 0x2A	; 42
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	f9 01       	movw	r30, r18
     fec:	20 81       	ld	r18, Z
     fee:	28 61       	ori	r18, 0x18	; 24
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18

	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     ff4:	80 e4       	ldi	r24, 0x40	; 64
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	20 e4       	ldi	r18, 0x40	; 64
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	f9 01       	movw	r30, r18
     ffe:	20 81       	ld	r18, Z
    1000:	26 68       	ori	r18, 0x86	; 134
    1002:	fc 01       	movw	r30, r24
    1004:	20 83       	st	Z, r18
}
    1006:	00 00       	nop
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	00 d0       	rcall	.+0      	; 0x1014 <uart_putchar+0x6>
    1014:	1f 92       	push	r1
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	7b 83       	std	Y+3, r23	; 0x03
    101e:	6a 83       	std	Y+2, r22	; 0x02
	if(c=='\n')
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	8a 30       	cpi	r24, 0x0A	; 10
    1024:	31 f4       	brne	.+12     	; 0x1032 <uart_putchar+0x24>
		uart_putchar('\r', stream);
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	9b 81       	ldd	r25, Y+3	; 0x03
    102a:	bc 01       	movw	r22, r24
    102c:	8d e0       	ldi	r24, 0x0D	; 13
    102e:	0e 94 07 08 	call	0x100e	; 0x100e <uart_putchar>
		
		
	while( (UCSRA & (1<<UDRE)) ==0 )
    1032:	00 00       	nop
    1034:	8b e2       	ldi	r24, 0x2B	; 43
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	fc 01       	movw	r30, r24
    103a:	80 81       	ld	r24, Z
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	80 72       	andi	r24, 0x20	; 32
    1042:	99 27       	eor	r25, r25
    1044:	89 2b       	or	r24, r25
    1046:	b1 f3       	breq	.-20     	; 0x1034 <uart_putchar+0x26>
	{
	}
		
	UDR = c;
    1048:	8c e2       	ldi	r24, 0x2C	; 44
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	29 81       	ldd	r18, Y+1	; 0x01
    104e:	fc 01       	movw	r30, r24
    1050:	20 83       	st	Z, r18
	
	return 0;
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	08 95       	ret

00001062 <__subsf3>:
    1062:	50 58       	subi	r21, 0x80	; 128

00001064 <__addsf3>:
    1064:	bb 27       	eor	r27, r27
    1066:	aa 27       	eor	r26, r26
    1068:	0e 94 49 08 	call	0x1092	; 0x1092 <__addsf3x>
    106c:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_round>
    1070:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_pscA>
    1074:	38 f0       	brcs	.+14     	; 0x1084 <__addsf3+0x20>
    1076:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_pscB>
    107a:	20 f0       	brcs	.+8      	; 0x1084 <__addsf3+0x20>
    107c:	39 f4       	brne	.+14     	; 0x108c <__addsf3+0x28>
    107e:	9f 3f       	cpi	r25, 0xFF	; 255
    1080:	19 f4       	brne	.+6      	; 0x1088 <__addsf3+0x24>
    1082:	26 f4       	brtc	.+8      	; 0x108c <__addsf3+0x28>
    1084:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__fp_nan>
    1088:	0e f4       	brtc	.+2      	; 0x108c <__addsf3+0x28>
    108a:	e0 95       	com	r30
    108c:	e7 fb       	bst	r30, 7
    108e:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_inf>

00001092 <__addsf3x>:
    1092:	e9 2f       	mov	r30, r25
    1094:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_split3>
    1098:	58 f3       	brcs	.-42     	; 0x1070 <__addsf3+0xc>
    109a:	ba 17       	cp	r27, r26
    109c:	62 07       	cpc	r22, r18
    109e:	73 07       	cpc	r23, r19
    10a0:	84 07       	cpc	r24, r20
    10a2:	95 07       	cpc	r25, r21
    10a4:	20 f0       	brcs	.+8      	; 0x10ae <__addsf3x+0x1c>
    10a6:	79 f4       	brne	.+30     	; 0x10c6 <__addsf3x+0x34>
    10a8:	a6 f5       	brtc	.+104    	; 0x1112 <__addsf3x+0x80>
    10aa:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_zero>
    10ae:	0e f4       	brtc	.+2      	; 0x10b2 <__addsf3x+0x20>
    10b0:	e0 95       	com	r30
    10b2:	0b 2e       	mov	r0, r27
    10b4:	ba 2f       	mov	r27, r26
    10b6:	a0 2d       	mov	r26, r0
    10b8:	0b 01       	movw	r0, r22
    10ba:	b9 01       	movw	r22, r18
    10bc:	90 01       	movw	r18, r0
    10be:	0c 01       	movw	r0, r24
    10c0:	ca 01       	movw	r24, r20
    10c2:	a0 01       	movw	r20, r0
    10c4:	11 24       	eor	r1, r1
    10c6:	ff 27       	eor	r31, r31
    10c8:	59 1b       	sub	r21, r25
    10ca:	99 f0       	breq	.+38     	; 0x10f2 <__addsf3x+0x60>
    10cc:	59 3f       	cpi	r21, 0xF9	; 249
    10ce:	50 f4       	brcc	.+20     	; 0x10e4 <__addsf3x+0x52>
    10d0:	50 3e       	cpi	r21, 0xE0	; 224
    10d2:	68 f1       	brcs	.+90     	; 0x112e <__addsf3x+0x9c>
    10d4:	1a 16       	cp	r1, r26
    10d6:	f0 40       	sbci	r31, 0x00	; 0
    10d8:	a2 2f       	mov	r26, r18
    10da:	23 2f       	mov	r18, r19
    10dc:	34 2f       	mov	r19, r20
    10de:	44 27       	eor	r20, r20
    10e0:	58 5f       	subi	r21, 0xF8	; 248
    10e2:	f3 cf       	rjmp	.-26     	; 0x10ca <__addsf3x+0x38>
    10e4:	46 95       	lsr	r20
    10e6:	37 95       	ror	r19
    10e8:	27 95       	ror	r18
    10ea:	a7 95       	ror	r26
    10ec:	f0 40       	sbci	r31, 0x00	; 0
    10ee:	53 95       	inc	r21
    10f0:	c9 f7       	brne	.-14     	; 0x10e4 <__addsf3x+0x52>
    10f2:	7e f4       	brtc	.+30     	; 0x1112 <__addsf3x+0x80>
    10f4:	1f 16       	cp	r1, r31
    10f6:	ba 0b       	sbc	r27, r26
    10f8:	62 0b       	sbc	r22, r18
    10fa:	73 0b       	sbc	r23, r19
    10fc:	84 0b       	sbc	r24, r20
    10fe:	ba f0       	brmi	.+46     	; 0x112e <__addsf3x+0x9c>
    1100:	91 50       	subi	r25, 0x01	; 1
    1102:	a1 f0       	breq	.+40     	; 0x112c <__addsf3x+0x9a>
    1104:	ff 0f       	add	r31, r31
    1106:	bb 1f       	adc	r27, r27
    1108:	66 1f       	adc	r22, r22
    110a:	77 1f       	adc	r23, r23
    110c:	88 1f       	adc	r24, r24
    110e:	c2 f7       	brpl	.-16     	; 0x1100 <__addsf3x+0x6e>
    1110:	0e c0       	rjmp	.+28     	; 0x112e <__addsf3x+0x9c>
    1112:	ba 0f       	add	r27, r26
    1114:	62 1f       	adc	r22, r18
    1116:	73 1f       	adc	r23, r19
    1118:	84 1f       	adc	r24, r20
    111a:	48 f4       	brcc	.+18     	; 0x112e <__addsf3x+0x9c>
    111c:	87 95       	ror	r24
    111e:	77 95       	ror	r23
    1120:	67 95       	ror	r22
    1122:	b7 95       	ror	r27
    1124:	f7 95       	ror	r31
    1126:	9e 3f       	cpi	r25, 0xFE	; 254
    1128:	08 f0       	brcs	.+2      	; 0x112c <__addsf3x+0x9a>
    112a:	b0 cf       	rjmp	.-160    	; 0x108c <__addsf3+0x28>
    112c:	93 95       	inc	r25
    112e:	88 0f       	add	r24, r24
    1130:	08 f0       	brcs	.+2      	; 0x1134 <__addsf3x+0xa2>
    1132:	99 27       	eor	r25, r25
    1134:	ee 0f       	add	r30, r30
    1136:	97 95       	ror	r25
    1138:	87 95       	ror	r24
    113a:	08 95       	ret

0000113c <__divsf3>:
    113c:	0e 94 b2 08 	call	0x1164	; 0x1164 <__divsf3x>
    1140:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_round>
    1144:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_pscB>
    1148:	58 f0       	brcs	.+22     	; 0x1160 <__divsf3+0x24>
    114a:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_pscA>
    114e:	40 f0       	brcs	.+16     	; 0x1160 <__divsf3+0x24>
    1150:	29 f4       	brne	.+10     	; 0x115c <__divsf3+0x20>
    1152:	5f 3f       	cpi	r21, 0xFF	; 255
    1154:	29 f0       	breq	.+10     	; 0x1160 <__divsf3+0x24>
    1156:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_inf>
    115a:	51 11       	cpse	r21, r1
    115c:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__fp_szero>
    1160:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__fp_nan>

00001164 <__divsf3x>:
    1164:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_split3>
    1168:	68 f3       	brcs	.-38     	; 0x1144 <__divsf3+0x8>

0000116a <__divsf3_pse>:
    116a:	99 23       	and	r25, r25
    116c:	b1 f3       	breq	.-20     	; 0x115a <__divsf3+0x1e>
    116e:	55 23       	and	r21, r21
    1170:	91 f3       	breq	.-28     	; 0x1156 <__divsf3+0x1a>
    1172:	95 1b       	sub	r25, r21
    1174:	55 0b       	sbc	r21, r21
    1176:	bb 27       	eor	r27, r27
    1178:	aa 27       	eor	r26, r26
    117a:	62 17       	cp	r22, r18
    117c:	73 07       	cpc	r23, r19
    117e:	84 07       	cpc	r24, r20
    1180:	38 f0       	brcs	.+14     	; 0x1190 <__divsf3_pse+0x26>
    1182:	9f 5f       	subi	r25, 0xFF	; 255
    1184:	5f 4f       	sbci	r21, 0xFF	; 255
    1186:	22 0f       	add	r18, r18
    1188:	33 1f       	adc	r19, r19
    118a:	44 1f       	adc	r20, r20
    118c:	aa 1f       	adc	r26, r26
    118e:	a9 f3       	breq	.-22     	; 0x117a <__divsf3_pse+0x10>
    1190:	35 d0       	rcall	.+106    	; 0x11fc <__divsf3_pse+0x92>
    1192:	0e 2e       	mov	r0, r30
    1194:	3a f0       	brmi	.+14     	; 0x11a4 <__divsf3_pse+0x3a>
    1196:	e0 e8       	ldi	r30, 0x80	; 128
    1198:	32 d0       	rcall	.+100    	; 0x11fe <__divsf3_pse+0x94>
    119a:	91 50       	subi	r25, 0x01	; 1
    119c:	50 40       	sbci	r21, 0x00	; 0
    119e:	e6 95       	lsr	r30
    11a0:	00 1c       	adc	r0, r0
    11a2:	ca f7       	brpl	.-14     	; 0x1196 <__divsf3_pse+0x2c>
    11a4:	2b d0       	rcall	.+86     	; 0x11fc <__divsf3_pse+0x92>
    11a6:	fe 2f       	mov	r31, r30
    11a8:	29 d0       	rcall	.+82     	; 0x11fc <__divsf3_pse+0x92>
    11aa:	66 0f       	add	r22, r22
    11ac:	77 1f       	adc	r23, r23
    11ae:	88 1f       	adc	r24, r24
    11b0:	bb 1f       	adc	r27, r27
    11b2:	26 17       	cp	r18, r22
    11b4:	37 07       	cpc	r19, r23
    11b6:	48 07       	cpc	r20, r24
    11b8:	ab 07       	cpc	r26, r27
    11ba:	b0 e8       	ldi	r27, 0x80	; 128
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <__divsf3_pse+0x56>
    11be:	bb 0b       	sbc	r27, r27
    11c0:	80 2d       	mov	r24, r0
    11c2:	bf 01       	movw	r22, r30
    11c4:	ff 27       	eor	r31, r31
    11c6:	93 58       	subi	r25, 0x83	; 131
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	3a f0       	brmi	.+14     	; 0x11da <__divsf3_pse+0x70>
    11cc:	9e 3f       	cpi	r25, 0xFE	; 254
    11ce:	51 05       	cpc	r21, r1
    11d0:	78 f0       	brcs	.+30     	; 0x11f0 <__divsf3_pse+0x86>
    11d2:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_inf>
    11d6:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__fp_szero>
    11da:	5f 3f       	cpi	r21, 0xFF	; 255
    11dc:	e4 f3       	brlt	.-8      	; 0x11d6 <__divsf3_pse+0x6c>
    11de:	98 3e       	cpi	r25, 0xE8	; 232
    11e0:	d4 f3       	brlt	.-12     	; 0x11d6 <__divsf3_pse+0x6c>
    11e2:	86 95       	lsr	r24
    11e4:	77 95       	ror	r23
    11e6:	67 95       	ror	r22
    11e8:	b7 95       	ror	r27
    11ea:	f7 95       	ror	r31
    11ec:	9f 5f       	subi	r25, 0xFF	; 255
    11ee:	c9 f7       	brne	.-14     	; 0x11e2 <__divsf3_pse+0x78>
    11f0:	88 0f       	add	r24, r24
    11f2:	91 1d       	adc	r25, r1
    11f4:	96 95       	lsr	r25
    11f6:	87 95       	ror	r24
    11f8:	97 f9       	bld	r25, 7
    11fa:	08 95       	ret
    11fc:	e1 e0       	ldi	r30, 0x01	; 1
    11fe:	66 0f       	add	r22, r22
    1200:	77 1f       	adc	r23, r23
    1202:	88 1f       	adc	r24, r24
    1204:	bb 1f       	adc	r27, r27
    1206:	62 17       	cp	r22, r18
    1208:	73 07       	cpc	r23, r19
    120a:	84 07       	cpc	r24, r20
    120c:	ba 07       	cpc	r27, r26
    120e:	20 f0       	brcs	.+8      	; 0x1218 <__divsf3_pse+0xae>
    1210:	62 1b       	sub	r22, r18
    1212:	73 0b       	sbc	r23, r19
    1214:	84 0b       	sbc	r24, r20
    1216:	ba 0b       	sbc	r27, r26
    1218:	ee 1f       	adc	r30, r30
    121a:	88 f7       	brcc	.-30     	; 0x11fe <__divsf3_pse+0x94>
    121c:	e0 95       	com	r30
    121e:	08 95       	ret

00001220 <__fixsfsi>:
    1220:	0e 94 17 09 	call	0x122e	; 0x122e <__fixunssfsi>
    1224:	68 94       	set
    1226:	b1 11       	cpse	r27, r1
    1228:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__fp_szero>
    122c:	08 95       	ret

0000122e <__fixunssfsi>:
    122e:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_splitA>
    1232:	88 f0       	brcs	.+34     	; 0x1256 <__fixunssfsi+0x28>
    1234:	9f 57       	subi	r25, 0x7F	; 127
    1236:	98 f0       	brcs	.+38     	; 0x125e <__fixunssfsi+0x30>
    1238:	b9 2f       	mov	r27, r25
    123a:	99 27       	eor	r25, r25
    123c:	b7 51       	subi	r27, 0x17	; 23
    123e:	b0 f0       	brcs	.+44     	; 0x126c <__fixunssfsi+0x3e>
    1240:	e1 f0       	breq	.+56     	; 0x127a <__fixunssfsi+0x4c>
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	1a f0       	brmi	.+6      	; 0x1252 <__fixunssfsi+0x24>
    124c:	ba 95       	dec	r27
    124e:	c9 f7       	brne	.-14     	; 0x1242 <__fixunssfsi+0x14>
    1250:	14 c0       	rjmp	.+40     	; 0x127a <__fixunssfsi+0x4c>
    1252:	b1 30       	cpi	r27, 0x01	; 1
    1254:	91 f0       	breq	.+36     	; 0x127a <__fixunssfsi+0x4c>
    1256:	0e 94 cd 09 	call	0x139a	; 0x139a <__fp_zero>
    125a:	b1 e0       	ldi	r27, 0x01	; 1
    125c:	08 95       	ret
    125e:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__fp_zero>
    1262:	67 2f       	mov	r22, r23
    1264:	78 2f       	mov	r23, r24
    1266:	88 27       	eor	r24, r24
    1268:	b8 5f       	subi	r27, 0xF8	; 248
    126a:	39 f0       	breq	.+14     	; 0x127a <__fixunssfsi+0x4c>
    126c:	b9 3f       	cpi	r27, 0xF9	; 249
    126e:	cc f3       	brlt	.-14     	; 0x1262 <__fixunssfsi+0x34>
    1270:	86 95       	lsr	r24
    1272:	77 95       	ror	r23
    1274:	67 95       	ror	r22
    1276:	b3 95       	inc	r27
    1278:	d9 f7       	brne	.-10     	; 0x1270 <__fixunssfsi+0x42>
    127a:	3e f4       	brtc	.+14     	; 0x128a <__fixunssfsi+0x5c>
    127c:	90 95       	com	r25
    127e:	80 95       	com	r24
    1280:	70 95       	com	r23
    1282:	61 95       	neg	r22
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	8f 4f       	sbci	r24, 0xFF	; 255
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	08 95       	ret

0000128c <__floatunsisf>:
    128c:	e8 94       	clt
    128e:	09 c0       	rjmp	.+18     	; 0x12a2 <__floatsisf+0x12>

00001290 <__floatsisf>:
    1290:	97 fb       	bst	r25, 7
    1292:	3e f4       	brtc	.+14     	; 0x12a2 <__floatsisf+0x12>
    1294:	90 95       	com	r25
    1296:	80 95       	com	r24
    1298:	70 95       	com	r23
    129a:	61 95       	neg	r22
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	8f 4f       	sbci	r24, 0xFF	; 255
    12a0:	9f 4f       	sbci	r25, 0xFF	; 255
    12a2:	99 23       	and	r25, r25
    12a4:	a9 f0       	breq	.+42     	; 0x12d0 <__floatsisf+0x40>
    12a6:	f9 2f       	mov	r31, r25
    12a8:	96 e9       	ldi	r25, 0x96	; 150
    12aa:	bb 27       	eor	r27, r27
    12ac:	93 95       	inc	r25
    12ae:	f6 95       	lsr	r31
    12b0:	87 95       	ror	r24
    12b2:	77 95       	ror	r23
    12b4:	67 95       	ror	r22
    12b6:	b7 95       	ror	r27
    12b8:	f1 11       	cpse	r31, r1
    12ba:	f8 cf       	rjmp	.-16     	; 0x12ac <__floatsisf+0x1c>
    12bc:	fa f4       	brpl	.+62     	; 0x12fc <__floatsisf+0x6c>
    12be:	bb 0f       	add	r27, r27
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <__floatsisf+0x36>
    12c2:	60 ff       	sbrs	r22, 0
    12c4:	1b c0       	rjmp	.+54     	; 0x12fc <__floatsisf+0x6c>
    12c6:	6f 5f       	subi	r22, 0xFF	; 255
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	8f 4f       	sbci	r24, 0xFF	; 255
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	16 c0       	rjmp	.+44     	; 0x12fc <__floatsisf+0x6c>
    12d0:	88 23       	and	r24, r24
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <__floatsisf+0x48>
    12d4:	96 e9       	ldi	r25, 0x96	; 150
    12d6:	11 c0       	rjmp	.+34     	; 0x12fa <__floatsisf+0x6a>
    12d8:	77 23       	and	r23, r23
    12da:	21 f0       	breq	.+8      	; 0x12e4 <__floatsisf+0x54>
    12dc:	9e e8       	ldi	r25, 0x8E	; 142
    12de:	87 2f       	mov	r24, r23
    12e0:	76 2f       	mov	r23, r22
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <__floatsisf+0x5e>
    12e4:	66 23       	and	r22, r22
    12e6:	71 f0       	breq	.+28     	; 0x1304 <__floatsisf+0x74>
    12e8:	96 e8       	ldi	r25, 0x86	; 134
    12ea:	86 2f       	mov	r24, r22
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	2a f0       	brmi	.+10     	; 0x12fc <__floatsisf+0x6c>
    12f2:	9a 95       	dec	r25
    12f4:	66 0f       	add	r22, r22
    12f6:	77 1f       	adc	r23, r23
    12f8:	88 1f       	adc	r24, r24
    12fa:	da f7       	brpl	.-10     	; 0x12f2 <__floatsisf+0x62>
    12fc:	88 0f       	add	r24, r24
    12fe:	96 95       	lsr	r25
    1300:	87 95       	ror	r24
    1302:	97 f9       	bld	r25, 7
    1304:	08 95       	ret

00001306 <__fp_inf>:
    1306:	97 f9       	bld	r25, 7
    1308:	9f 67       	ori	r25, 0x7F	; 127
    130a:	80 e8       	ldi	r24, 0x80	; 128
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	08 95       	ret

00001312 <__fp_nan>:
    1312:	9f ef       	ldi	r25, 0xFF	; 255
    1314:	80 ec       	ldi	r24, 0xC0	; 192
    1316:	08 95       	ret

00001318 <__fp_pscA>:
    1318:	00 24       	eor	r0, r0
    131a:	0a 94       	dec	r0
    131c:	16 16       	cp	r1, r22
    131e:	17 06       	cpc	r1, r23
    1320:	18 06       	cpc	r1, r24
    1322:	09 06       	cpc	r0, r25
    1324:	08 95       	ret

00001326 <__fp_pscB>:
    1326:	00 24       	eor	r0, r0
    1328:	0a 94       	dec	r0
    132a:	12 16       	cp	r1, r18
    132c:	13 06       	cpc	r1, r19
    132e:	14 06       	cpc	r1, r20
    1330:	05 06       	cpc	r0, r21
    1332:	08 95       	ret

00001334 <__fp_round>:
    1334:	09 2e       	mov	r0, r25
    1336:	03 94       	inc	r0
    1338:	00 0c       	add	r0, r0
    133a:	11 f4       	brne	.+4      	; 0x1340 <__fp_round+0xc>
    133c:	88 23       	and	r24, r24
    133e:	52 f0       	brmi	.+20     	; 0x1354 <__fp_round+0x20>
    1340:	bb 0f       	add	r27, r27
    1342:	40 f4       	brcc	.+16     	; 0x1354 <__fp_round+0x20>
    1344:	bf 2b       	or	r27, r31
    1346:	11 f4       	brne	.+4      	; 0x134c <__fp_round+0x18>
    1348:	60 ff       	sbrs	r22, 0
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <__fp_round+0x20>
    134c:	6f 5f       	subi	r22, 0xFF	; 255
    134e:	7f 4f       	sbci	r23, 0xFF	; 255
    1350:	8f 4f       	sbci	r24, 0xFF	; 255
    1352:	9f 4f       	sbci	r25, 0xFF	; 255
    1354:	08 95       	ret

00001356 <__fp_split3>:
    1356:	57 fd       	sbrc	r21, 7
    1358:	90 58       	subi	r25, 0x80	; 128
    135a:	44 0f       	add	r20, r20
    135c:	55 1f       	adc	r21, r21
    135e:	59 f0       	breq	.+22     	; 0x1376 <__fp_splitA+0x10>
    1360:	5f 3f       	cpi	r21, 0xFF	; 255
    1362:	71 f0       	breq	.+28     	; 0x1380 <__fp_splitA+0x1a>
    1364:	47 95       	ror	r20

00001366 <__fp_splitA>:
    1366:	88 0f       	add	r24, r24
    1368:	97 fb       	bst	r25, 7
    136a:	99 1f       	adc	r25, r25
    136c:	61 f0       	breq	.+24     	; 0x1386 <__fp_splitA+0x20>
    136e:	9f 3f       	cpi	r25, 0xFF	; 255
    1370:	79 f0       	breq	.+30     	; 0x1390 <__fp_splitA+0x2a>
    1372:	87 95       	ror	r24
    1374:	08 95       	ret
    1376:	12 16       	cp	r1, r18
    1378:	13 06       	cpc	r1, r19
    137a:	14 06       	cpc	r1, r20
    137c:	55 1f       	adc	r21, r21
    137e:	f2 cf       	rjmp	.-28     	; 0x1364 <__fp_split3+0xe>
    1380:	46 95       	lsr	r20
    1382:	f1 df       	rcall	.-30     	; 0x1366 <__fp_splitA>
    1384:	08 c0       	rjmp	.+16     	; 0x1396 <__fp_splitA+0x30>
    1386:	16 16       	cp	r1, r22
    1388:	17 06       	cpc	r1, r23
    138a:	18 06       	cpc	r1, r24
    138c:	99 1f       	adc	r25, r25
    138e:	f1 cf       	rjmp	.-30     	; 0x1372 <__fp_splitA+0xc>
    1390:	86 95       	lsr	r24
    1392:	71 05       	cpc	r23, r1
    1394:	61 05       	cpc	r22, r1
    1396:	08 94       	sec
    1398:	08 95       	ret

0000139a <__fp_zero>:
    139a:	e8 94       	clt

0000139c <__fp_szero>:
    139c:	bb 27       	eor	r27, r27
    139e:	66 27       	eor	r22, r22
    13a0:	77 27       	eor	r23, r23
    13a2:	cb 01       	movw	r24, r22
    13a4:	97 f9       	bld	r25, 7
    13a6:	08 95       	ret

000013a8 <__mulsf3>:
    13a8:	0e 94 e7 09 	call	0x13ce	; 0x13ce <__mulsf3x>
    13ac:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_round>
    13b0:	0e 94 8c 09 	call	0x1318	; 0x1318 <__fp_pscA>
    13b4:	38 f0       	brcs	.+14     	; 0x13c4 <__mulsf3+0x1c>
    13b6:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_pscB>
    13ba:	20 f0       	brcs	.+8      	; 0x13c4 <__mulsf3+0x1c>
    13bc:	95 23       	and	r25, r21
    13be:	11 f0       	breq	.+4      	; 0x13c4 <__mulsf3+0x1c>
    13c0:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_inf>
    13c4:	0c 94 89 09 	jmp	0x1312	; 0x1312 <__fp_nan>
    13c8:	11 24       	eor	r1, r1
    13ca:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__fp_szero>

000013ce <__mulsf3x>:
    13ce:	0e 94 ab 09 	call	0x1356	; 0x1356 <__fp_split3>
    13d2:	70 f3       	brcs	.-36     	; 0x13b0 <__mulsf3+0x8>

000013d4 <__mulsf3_pse>:
    13d4:	95 9f       	mul	r25, r21
    13d6:	c1 f3       	breq	.-16     	; 0x13c8 <__mulsf3+0x20>
    13d8:	95 0f       	add	r25, r21
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	55 1f       	adc	r21, r21
    13de:	62 9f       	mul	r22, r18
    13e0:	f0 01       	movw	r30, r0
    13e2:	72 9f       	mul	r23, r18
    13e4:	bb 27       	eor	r27, r27
    13e6:	f0 0d       	add	r31, r0
    13e8:	b1 1d       	adc	r27, r1
    13ea:	63 9f       	mul	r22, r19
    13ec:	aa 27       	eor	r26, r26
    13ee:	f0 0d       	add	r31, r0
    13f0:	b1 1d       	adc	r27, r1
    13f2:	aa 1f       	adc	r26, r26
    13f4:	64 9f       	mul	r22, r20
    13f6:	66 27       	eor	r22, r22
    13f8:	b0 0d       	add	r27, r0
    13fa:	a1 1d       	adc	r26, r1
    13fc:	66 1f       	adc	r22, r22
    13fe:	82 9f       	mul	r24, r18
    1400:	22 27       	eor	r18, r18
    1402:	b0 0d       	add	r27, r0
    1404:	a1 1d       	adc	r26, r1
    1406:	62 1f       	adc	r22, r18
    1408:	73 9f       	mul	r23, r19
    140a:	b0 0d       	add	r27, r0
    140c:	a1 1d       	adc	r26, r1
    140e:	62 1f       	adc	r22, r18
    1410:	83 9f       	mul	r24, r19
    1412:	a0 0d       	add	r26, r0
    1414:	61 1d       	adc	r22, r1
    1416:	22 1f       	adc	r18, r18
    1418:	74 9f       	mul	r23, r20
    141a:	33 27       	eor	r19, r19
    141c:	a0 0d       	add	r26, r0
    141e:	61 1d       	adc	r22, r1
    1420:	23 1f       	adc	r18, r19
    1422:	84 9f       	mul	r24, r20
    1424:	60 0d       	add	r22, r0
    1426:	21 1d       	adc	r18, r1
    1428:	82 2f       	mov	r24, r18
    142a:	76 2f       	mov	r23, r22
    142c:	6a 2f       	mov	r22, r26
    142e:	11 24       	eor	r1, r1
    1430:	9f 57       	subi	r25, 0x7F	; 127
    1432:	50 40       	sbci	r21, 0x00	; 0
    1434:	9a f0       	brmi	.+38     	; 0x145c <__mulsf3_pse+0x88>
    1436:	f1 f0       	breq	.+60     	; 0x1474 <__mulsf3_pse+0xa0>
    1438:	88 23       	and	r24, r24
    143a:	4a f0       	brmi	.+18     	; 0x144e <__mulsf3_pse+0x7a>
    143c:	ee 0f       	add	r30, r30
    143e:	ff 1f       	adc	r31, r31
    1440:	bb 1f       	adc	r27, r27
    1442:	66 1f       	adc	r22, r22
    1444:	77 1f       	adc	r23, r23
    1446:	88 1f       	adc	r24, r24
    1448:	91 50       	subi	r25, 0x01	; 1
    144a:	50 40       	sbci	r21, 0x00	; 0
    144c:	a9 f7       	brne	.-22     	; 0x1438 <__mulsf3_pse+0x64>
    144e:	9e 3f       	cpi	r25, 0xFE	; 254
    1450:	51 05       	cpc	r21, r1
    1452:	80 f0       	brcs	.+32     	; 0x1474 <__mulsf3_pse+0xa0>
    1454:	0c 94 83 09 	jmp	0x1306	; 0x1306 <__fp_inf>
    1458:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__fp_szero>
    145c:	5f 3f       	cpi	r21, 0xFF	; 255
    145e:	e4 f3       	brlt	.-8      	; 0x1458 <__mulsf3_pse+0x84>
    1460:	98 3e       	cpi	r25, 0xE8	; 232
    1462:	d4 f3       	brlt	.-12     	; 0x1458 <__mulsf3_pse+0x84>
    1464:	86 95       	lsr	r24
    1466:	77 95       	ror	r23
    1468:	67 95       	ror	r22
    146a:	b7 95       	ror	r27
    146c:	f7 95       	ror	r31
    146e:	e7 95       	ror	r30
    1470:	9f 5f       	subi	r25, 0xFF	; 255
    1472:	c1 f7       	brne	.-16     	; 0x1464 <__mulsf3_pse+0x90>
    1474:	fe 2b       	or	r31, r30
    1476:	88 0f       	add	r24, r24
    1478:	91 1d       	adc	r25, r1
    147a:	96 95       	lsr	r25
    147c:	87 95       	ror	r24
    147e:	97 f9       	bld	r25, 7
    1480:	08 95       	ret

00001482 <round>:
    1482:	0e 94 b3 09 	call	0x1366	; 0x1366 <__fp_splitA>
    1486:	e8 f0       	brcs	.+58     	; 0x14c2 <round+0x40>
    1488:	9e 37       	cpi	r25, 0x7E	; 126
    148a:	e8 f0       	brcs	.+58     	; 0x14c6 <round+0x44>
    148c:	96 39       	cpi	r25, 0x96	; 150
    148e:	b8 f4       	brcc	.+46     	; 0x14be <round+0x3c>
    1490:	9e 38       	cpi	r25, 0x8E	; 142
    1492:	48 f4       	brcc	.+18     	; 0x14a6 <round+0x24>
    1494:	67 2f       	mov	r22, r23
    1496:	78 2f       	mov	r23, r24
    1498:	88 27       	eor	r24, r24
    149a:	98 5f       	subi	r25, 0xF8	; 248
    149c:	f9 cf       	rjmp	.-14     	; 0x1490 <round+0xe>
    149e:	86 95       	lsr	r24
    14a0:	77 95       	ror	r23
    14a2:	67 95       	ror	r22
    14a4:	93 95       	inc	r25
    14a6:	95 39       	cpi	r25, 0x95	; 149
    14a8:	d0 f3       	brcs	.-12     	; 0x149e <round+0x1c>
    14aa:	b6 2f       	mov	r27, r22
    14ac:	b1 70       	andi	r27, 0x01	; 1
    14ae:	6b 0f       	add	r22, r27
    14b0:	71 1d       	adc	r23, r1
    14b2:	81 1d       	adc	r24, r1
    14b4:	20 f4       	brcc	.+8      	; 0x14be <round+0x3c>
    14b6:	87 95       	ror	r24
    14b8:	77 95       	ror	r23
    14ba:	67 95       	ror	r22
    14bc:	93 95       	inc	r25
    14be:	0c 94 65 0a 	jmp	0x14ca	; 0x14ca <__fp_mintl>
    14c2:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__fp_mpack>
    14c6:	0c 94 ce 09 	jmp	0x139c	; 0x139c <__fp_szero>

000014ca <__fp_mintl>:
    14ca:	88 23       	and	r24, r24
    14cc:	71 f4       	brne	.+28     	; 0x14ea <__fp_mintl+0x20>
    14ce:	77 23       	and	r23, r23
    14d0:	21 f0       	breq	.+8      	; 0x14da <__fp_mintl+0x10>
    14d2:	98 50       	subi	r25, 0x08	; 8
    14d4:	87 2b       	or	r24, r23
    14d6:	76 2f       	mov	r23, r22
    14d8:	07 c0       	rjmp	.+14     	; 0x14e8 <__fp_mintl+0x1e>
    14da:	66 23       	and	r22, r22
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <__fp_mintl+0x18>
    14de:	99 27       	eor	r25, r25
    14e0:	0d c0       	rjmp	.+26     	; 0x14fc <__fp_mintl+0x32>
    14e2:	90 51       	subi	r25, 0x10	; 16
    14e4:	86 2b       	or	r24, r22
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	2a f0       	brmi	.+10     	; 0x14f6 <__fp_mintl+0x2c>
    14ec:	9a 95       	dec	r25
    14ee:	66 0f       	add	r22, r22
    14f0:	77 1f       	adc	r23, r23
    14f2:	88 1f       	adc	r24, r24
    14f4:	da f7       	brpl	.-10     	; 0x14ec <__fp_mintl+0x22>
    14f6:	88 0f       	add	r24, r24
    14f8:	96 95       	lsr	r25
    14fa:	87 95       	ror	r24
    14fc:	97 f9       	bld	r25, 7
    14fe:	08 95       	ret

00001500 <__fp_mpack>:
    1500:	9f 3f       	cpi	r25, 0xFF	; 255
    1502:	31 f0       	breq	.+12     	; 0x1510 <__fp_mpack_finite+0xc>

00001504 <__fp_mpack_finite>:
    1504:	91 50       	subi	r25, 0x01	; 1
    1506:	20 f4       	brcc	.+8      	; 0x1510 <__fp_mpack_finite+0xc>
    1508:	87 95       	ror	r24
    150a:	77 95       	ror	r23
    150c:	67 95       	ror	r22
    150e:	b7 95       	ror	r27
    1510:	88 0f       	add	r24, r24
    1512:	91 1d       	adc	r25, r1
    1514:	96 95       	lsr	r25
    1516:	87 95       	ror	r24
    1518:	97 f9       	bld	r25, 7
    151a:	08 95       	ret

0000151c <vfprintf>:
    151c:	a0 e1       	ldi	r26, 0x10	; 16
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e4 e9       	ldi	r30, 0x94	; 148
    1522:	fa e0       	ldi	r31, 0x0A	; 10
    1524:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__prologue_saves__>
    1528:	7c 01       	movw	r14, r24
    152a:	1b 01       	movw	r2, r22
    152c:	6a 01       	movw	r12, r20
    152e:	fc 01       	movw	r30, r24
    1530:	17 82       	std	Z+7, r1	; 0x07
    1532:	16 82       	std	Z+6, r1	; 0x06
    1534:	83 81       	ldd	r24, Z+3	; 0x03
    1536:	81 ff       	sbrs	r24, 1
    1538:	44 c3       	rjmp	.+1672   	; 0x1bc2 <vfprintf+0x6a6>
    153a:	9e 01       	movw	r18, r28
    153c:	2f 5f       	subi	r18, 0xFF	; 255
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	39 01       	movw	r6, r18
    1542:	f7 01       	movw	r30, r14
    1544:	93 81       	ldd	r25, Z+3	; 0x03
    1546:	f1 01       	movw	r30, r2
    1548:	93 fd       	sbrc	r25, 3
    154a:	85 91       	lpm	r24, Z+
    154c:	93 ff       	sbrs	r25, 3
    154e:	81 91       	ld	r24, Z+
    1550:	1f 01       	movw	r2, r30
    1552:	88 23       	and	r24, r24
    1554:	09 f4       	brne	.+2      	; 0x1558 <vfprintf+0x3c>
    1556:	31 c3       	rjmp	.+1634   	; 0x1bba <vfprintf+0x69e>
    1558:	85 32       	cpi	r24, 0x25	; 37
    155a:	39 f4       	brne	.+14     	; 0x156a <vfprintf+0x4e>
    155c:	93 fd       	sbrc	r25, 3
    155e:	85 91       	lpm	r24, Z+
    1560:	93 ff       	sbrs	r25, 3
    1562:	81 91       	ld	r24, Z+
    1564:	1f 01       	movw	r2, r30
    1566:	85 32       	cpi	r24, 0x25	; 37
    1568:	39 f4       	brne	.+14     	; 0x1578 <vfprintf+0x5c>
    156a:	b7 01       	movw	r22, r14
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1572:	56 01       	movw	r10, r12
    1574:	65 01       	movw	r12, r10
    1576:	e5 cf       	rjmp	.-54     	; 0x1542 <vfprintf+0x26>
    1578:	10 e0       	ldi	r17, 0x00	; 0
    157a:	51 2c       	mov	r5, r1
    157c:	91 2c       	mov	r9, r1
    157e:	ff e1       	ldi	r31, 0x1F	; 31
    1580:	f9 15       	cp	r31, r9
    1582:	d8 f0       	brcs	.+54     	; 0x15ba <vfprintf+0x9e>
    1584:	8b 32       	cpi	r24, 0x2B	; 43
    1586:	79 f0       	breq	.+30     	; 0x15a6 <vfprintf+0x8a>
    1588:	38 f4       	brcc	.+14     	; 0x1598 <vfprintf+0x7c>
    158a:	80 32       	cpi	r24, 0x20	; 32
    158c:	79 f0       	breq	.+30     	; 0x15ac <vfprintf+0x90>
    158e:	83 32       	cpi	r24, 0x23	; 35
    1590:	a1 f4       	brne	.+40     	; 0x15ba <vfprintf+0x9e>
    1592:	f9 2d       	mov	r31, r9
    1594:	f0 61       	ori	r31, 0x10	; 16
    1596:	2e c0       	rjmp	.+92     	; 0x15f4 <vfprintf+0xd8>
    1598:	8d 32       	cpi	r24, 0x2D	; 45
    159a:	61 f0       	breq	.+24     	; 0x15b4 <vfprintf+0x98>
    159c:	80 33       	cpi	r24, 0x30	; 48
    159e:	69 f4       	brne	.+26     	; 0x15ba <vfprintf+0x9e>
    15a0:	29 2d       	mov	r18, r9
    15a2:	21 60       	ori	r18, 0x01	; 1
    15a4:	2d c0       	rjmp	.+90     	; 0x1600 <vfprintf+0xe4>
    15a6:	39 2d       	mov	r19, r9
    15a8:	32 60       	ori	r19, 0x02	; 2
    15aa:	93 2e       	mov	r9, r19
    15ac:	89 2d       	mov	r24, r9
    15ae:	84 60       	ori	r24, 0x04	; 4
    15b0:	98 2e       	mov	r9, r24
    15b2:	2a c0       	rjmp	.+84     	; 0x1608 <vfprintf+0xec>
    15b4:	e9 2d       	mov	r30, r9
    15b6:	e8 60       	ori	r30, 0x08	; 8
    15b8:	15 c0       	rjmp	.+42     	; 0x15e4 <vfprintf+0xc8>
    15ba:	97 fc       	sbrc	r9, 7
    15bc:	2d c0       	rjmp	.+90     	; 0x1618 <vfprintf+0xfc>
    15be:	20 ed       	ldi	r18, 0xD0	; 208
    15c0:	28 0f       	add	r18, r24
    15c2:	2a 30       	cpi	r18, 0x0A	; 10
    15c4:	88 f4       	brcc	.+34     	; 0x15e8 <vfprintf+0xcc>
    15c6:	96 fe       	sbrs	r9, 6
    15c8:	06 c0       	rjmp	.+12     	; 0x15d6 <vfprintf+0xba>
    15ca:	3a e0       	ldi	r19, 0x0A	; 10
    15cc:	13 9f       	mul	r17, r19
    15ce:	20 0d       	add	r18, r0
    15d0:	11 24       	eor	r1, r1
    15d2:	12 2f       	mov	r17, r18
    15d4:	19 c0       	rjmp	.+50     	; 0x1608 <vfprintf+0xec>
    15d6:	8a e0       	ldi	r24, 0x0A	; 10
    15d8:	58 9e       	mul	r5, r24
    15da:	20 0d       	add	r18, r0
    15dc:	11 24       	eor	r1, r1
    15de:	52 2e       	mov	r5, r18
    15e0:	e9 2d       	mov	r30, r9
    15e2:	e0 62       	ori	r30, 0x20	; 32
    15e4:	9e 2e       	mov	r9, r30
    15e6:	10 c0       	rjmp	.+32     	; 0x1608 <vfprintf+0xec>
    15e8:	8e 32       	cpi	r24, 0x2E	; 46
    15ea:	31 f4       	brne	.+12     	; 0x15f8 <vfprintf+0xdc>
    15ec:	96 fc       	sbrc	r9, 6
    15ee:	e5 c2       	rjmp	.+1482   	; 0x1bba <vfprintf+0x69e>
    15f0:	f9 2d       	mov	r31, r9
    15f2:	f0 64       	ori	r31, 0x40	; 64
    15f4:	9f 2e       	mov	r9, r31
    15f6:	08 c0       	rjmp	.+16     	; 0x1608 <vfprintf+0xec>
    15f8:	8c 36       	cpi	r24, 0x6C	; 108
    15fa:	21 f4       	brne	.+8      	; 0x1604 <vfprintf+0xe8>
    15fc:	29 2d       	mov	r18, r9
    15fe:	20 68       	ori	r18, 0x80	; 128
    1600:	92 2e       	mov	r9, r18
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <vfprintf+0xec>
    1604:	88 36       	cpi	r24, 0x68	; 104
    1606:	41 f4       	brne	.+16     	; 0x1618 <vfprintf+0xfc>
    1608:	f1 01       	movw	r30, r2
    160a:	93 fd       	sbrc	r25, 3
    160c:	85 91       	lpm	r24, Z+
    160e:	93 ff       	sbrs	r25, 3
    1610:	81 91       	ld	r24, Z+
    1612:	1f 01       	movw	r2, r30
    1614:	81 11       	cpse	r24, r1
    1616:	b3 cf       	rjmp	.-154    	; 0x157e <vfprintf+0x62>
    1618:	9b eb       	ldi	r25, 0xBB	; 187
    161a:	98 0f       	add	r25, r24
    161c:	93 30       	cpi	r25, 0x03	; 3
    161e:	20 f4       	brcc	.+8      	; 0x1628 <vfprintf+0x10c>
    1620:	99 2d       	mov	r25, r9
    1622:	90 61       	ori	r25, 0x10	; 16
    1624:	80 5e       	subi	r24, 0xE0	; 224
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <vfprintf+0x11a>
    1628:	9b e9       	ldi	r25, 0x9B	; 155
    162a:	98 0f       	add	r25, r24
    162c:	93 30       	cpi	r25, 0x03	; 3
    162e:	08 f0       	brcs	.+2      	; 0x1632 <vfprintf+0x116>
    1630:	66 c1       	rjmp	.+716    	; 0x18fe <vfprintf+0x3e2>
    1632:	99 2d       	mov	r25, r9
    1634:	9f 7e       	andi	r25, 0xEF	; 239
    1636:	96 ff       	sbrs	r25, 6
    1638:	16 e0       	ldi	r17, 0x06	; 6
    163a:	9f 73       	andi	r25, 0x3F	; 63
    163c:	99 2e       	mov	r9, r25
    163e:	85 36       	cpi	r24, 0x65	; 101
    1640:	19 f4       	brne	.+6      	; 0x1648 <vfprintf+0x12c>
    1642:	90 64       	ori	r25, 0x40	; 64
    1644:	99 2e       	mov	r9, r25
    1646:	08 c0       	rjmp	.+16     	; 0x1658 <vfprintf+0x13c>
    1648:	86 36       	cpi	r24, 0x66	; 102
    164a:	21 f4       	brne	.+8      	; 0x1654 <vfprintf+0x138>
    164c:	39 2f       	mov	r19, r25
    164e:	30 68       	ori	r19, 0x80	; 128
    1650:	93 2e       	mov	r9, r19
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <vfprintf+0x13c>
    1654:	11 11       	cpse	r17, r1
    1656:	11 50       	subi	r17, 0x01	; 1
    1658:	97 fe       	sbrs	r9, 7
    165a:	07 c0       	rjmp	.+14     	; 0x166a <vfprintf+0x14e>
    165c:	1c 33       	cpi	r17, 0x3C	; 60
    165e:	50 f4       	brcc	.+20     	; 0x1674 <vfprintf+0x158>
    1660:	44 24       	eor	r4, r4
    1662:	43 94       	inc	r4
    1664:	41 0e       	add	r4, r17
    1666:	27 e0       	ldi	r18, 0x07	; 7
    1668:	0b c0       	rjmp	.+22     	; 0x1680 <vfprintf+0x164>
    166a:	18 30       	cpi	r17, 0x08	; 8
    166c:	38 f0       	brcs	.+14     	; 0x167c <vfprintf+0x160>
    166e:	27 e0       	ldi	r18, 0x07	; 7
    1670:	17 e0       	ldi	r17, 0x07	; 7
    1672:	05 c0       	rjmp	.+10     	; 0x167e <vfprintf+0x162>
    1674:	27 e0       	ldi	r18, 0x07	; 7
    1676:	9c e3       	ldi	r25, 0x3C	; 60
    1678:	49 2e       	mov	r4, r25
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <vfprintf+0x164>
    167c:	21 2f       	mov	r18, r17
    167e:	41 2c       	mov	r4, r1
    1680:	56 01       	movw	r10, r12
    1682:	84 e0       	ldi	r24, 0x04	; 4
    1684:	a8 0e       	add	r10, r24
    1686:	b1 1c       	adc	r11, r1
    1688:	f6 01       	movw	r30, r12
    168a:	60 81       	ld	r22, Z
    168c:	71 81       	ldd	r23, Z+1	; 0x01
    168e:	82 81       	ldd	r24, Z+2	; 0x02
    1690:	93 81       	ldd	r25, Z+3	; 0x03
    1692:	04 2d       	mov	r16, r4
    1694:	a3 01       	movw	r20, r6
    1696:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__ftoa_engine>
    169a:	6c 01       	movw	r12, r24
    169c:	f9 81       	ldd	r31, Y+1	; 0x01
    169e:	fc 87       	std	Y+12, r31	; 0x0c
    16a0:	f0 ff       	sbrs	r31, 0
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <vfprintf+0x18c>
    16a4:	f3 ff       	sbrs	r31, 3
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <vfprintf+0x198>
    16a8:	91 fc       	sbrc	r9, 1
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <vfprintf+0x19c>
    16ac:	92 fe       	sbrs	r9, 2
    16ae:	06 c0       	rjmp	.+12     	; 0x16bc <vfprintf+0x1a0>
    16b0:	00 e2       	ldi	r16, 0x20	; 32
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <vfprintf+0x1a2>
    16b4:	0d e2       	ldi	r16, 0x2D	; 45
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <vfprintf+0x1a2>
    16b8:	0b e2       	ldi	r16, 0x2B	; 43
    16ba:	01 c0       	rjmp	.+2      	; 0x16be <vfprintf+0x1a2>
    16bc:	00 e0       	ldi	r16, 0x00	; 0
    16be:	8c 85       	ldd	r24, Y+12	; 0x0c
    16c0:	8c 70       	andi	r24, 0x0C	; 12
    16c2:	19 f0       	breq	.+6      	; 0x16ca <vfprintf+0x1ae>
    16c4:	01 11       	cpse	r16, r1
    16c6:	5a c2       	rjmp	.+1204   	; 0x1b7c <vfprintf+0x660>
    16c8:	9b c2       	rjmp	.+1334   	; 0x1c00 <vfprintf+0x6e4>
    16ca:	97 fe       	sbrs	r9, 7
    16cc:	10 c0       	rjmp	.+32     	; 0x16ee <vfprintf+0x1d2>
    16ce:	4c 0c       	add	r4, r12
    16d0:	fc 85       	ldd	r31, Y+12	; 0x0c
    16d2:	f4 ff       	sbrs	r31, 4
    16d4:	04 c0       	rjmp	.+8      	; 0x16de <vfprintf+0x1c2>
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	81 33       	cpi	r24, 0x31	; 49
    16da:	09 f4       	brne	.+2      	; 0x16de <vfprintf+0x1c2>
    16dc:	4a 94       	dec	r4
    16de:	14 14       	cp	r1, r4
    16e0:	74 f5       	brge	.+92     	; 0x173e <vfprintf+0x222>
    16e2:	28 e0       	ldi	r18, 0x08	; 8
    16e4:	24 15       	cp	r18, r4
    16e6:	78 f5       	brcc	.+94     	; 0x1746 <vfprintf+0x22a>
    16e8:	88 e0       	ldi	r24, 0x08	; 8
    16ea:	48 2e       	mov	r4, r24
    16ec:	2c c0       	rjmp	.+88     	; 0x1746 <vfprintf+0x22a>
    16ee:	96 fc       	sbrc	r9, 6
    16f0:	2a c0       	rjmp	.+84     	; 0x1746 <vfprintf+0x22a>
    16f2:	81 2f       	mov	r24, r17
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	8c 15       	cp	r24, r12
    16f8:	9d 05       	cpc	r25, r13
    16fa:	9c f0       	brlt	.+38     	; 0x1722 <vfprintf+0x206>
    16fc:	3c ef       	ldi	r19, 0xFC	; 252
    16fe:	c3 16       	cp	r12, r19
    1700:	3f ef       	ldi	r19, 0xFF	; 255
    1702:	d3 06       	cpc	r13, r19
    1704:	74 f0       	brlt	.+28     	; 0x1722 <vfprintf+0x206>
    1706:	89 2d       	mov	r24, r9
    1708:	80 68       	ori	r24, 0x80	; 128
    170a:	98 2e       	mov	r9, r24
    170c:	0a c0       	rjmp	.+20     	; 0x1722 <vfprintf+0x206>
    170e:	e2 e0       	ldi	r30, 0x02	; 2
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	ec 0f       	add	r30, r28
    1714:	fd 1f       	adc	r31, r29
    1716:	e1 0f       	add	r30, r17
    1718:	f1 1d       	adc	r31, r1
    171a:	80 81       	ld	r24, Z
    171c:	80 33       	cpi	r24, 0x30	; 48
    171e:	19 f4       	brne	.+6      	; 0x1726 <vfprintf+0x20a>
    1720:	11 50       	subi	r17, 0x01	; 1
    1722:	11 11       	cpse	r17, r1
    1724:	f4 cf       	rjmp	.-24     	; 0x170e <vfprintf+0x1f2>
    1726:	97 fe       	sbrs	r9, 7
    1728:	0e c0       	rjmp	.+28     	; 0x1746 <vfprintf+0x22a>
    172a:	44 24       	eor	r4, r4
    172c:	43 94       	inc	r4
    172e:	41 0e       	add	r4, r17
    1730:	81 2f       	mov	r24, r17
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	c8 16       	cp	r12, r24
    1736:	d9 06       	cpc	r13, r25
    1738:	2c f4       	brge	.+10     	; 0x1744 <vfprintf+0x228>
    173a:	1c 19       	sub	r17, r12
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <vfprintf+0x22a>
    173e:	44 24       	eor	r4, r4
    1740:	43 94       	inc	r4
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <vfprintf+0x22a>
    1744:	10 e0       	ldi	r17, 0x00	; 0
    1746:	97 fe       	sbrs	r9, 7
    1748:	06 c0       	rjmp	.+12     	; 0x1756 <vfprintf+0x23a>
    174a:	1c 14       	cp	r1, r12
    174c:	1d 04       	cpc	r1, r13
    174e:	34 f4       	brge	.+12     	; 0x175c <vfprintf+0x240>
    1750:	c6 01       	movw	r24, r12
    1752:	01 96       	adiw	r24, 0x01	; 1
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <vfprintf+0x244>
    1756:	85 e0       	ldi	r24, 0x05	; 5
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x244>
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	01 11       	cpse	r16, r1
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	11 23       	and	r17, r17
    1766:	31 f0       	breq	.+12     	; 0x1774 <vfprintf+0x258>
    1768:	21 2f       	mov	r18, r17
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	2f 5f       	subi	r18, 0xFF	; 255
    176e:	3f 4f       	sbci	r19, 0xFF	; 255
    1770:	82 0f       	add	r24, r18
    1772:	93 1f       	adc	r25, r19
    1774:	25 2d       	mov	r18, r5
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	82 17       	cp	r24, r18
    177a:	93 07       	cpc	r25, r19
    177c:	14 f4       	brge	.+4      	; 0x1782 <vfprintf+0x266>
    177e:	58 1a       	sub	r5, r24
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <vfprintf+0x268>
    1782:	51 2c       	mov	r5, r1
    1784:	89 2d       	mov	r24, r9
    1786:	89 70       	andi	r24, 0x09	; 9
    1788:	49 f4       	brne	.+18     	; 0x179c <vfprintf+0x280>
    178a:	55 20       	and	r5, r5
    178c:	39 f0       	breq	.+14     	; 0x179c <vfprintf+0x280>
    178e:	b7 01       	movw	r22, r14
    1790:	80 e2       	ldi	r24, 0x20	; 32
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1798:	5a 94       	dec	r5
    179a:	f7 cf       	rjmp	.-18     	; 0x178a <vfprintf+0x26e>
    179c:	00 23       	and	r16, r16
    179e:	29 f0       	breq	.+10     	; 0x17aa <vfprintf+0x28e>
    17a0:	b7 01       	movw	r22, r14
    17a2:	80 2f       	mov	r24, r16
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    17aa:	93 fc       	sbrc	r9, 3
    17ac:	09 c0       	rjmp	.+18     	; 0x17c0 <vfprintf+0x2a4>
    17ae:	55 20       	and	r5, r5
    17b0:	39 f0       	breq	.+14     	; 0x17c0 <vfprintf+0x2a4>
    17b2:	b7 01       	movw	r22, r14
    17b4:	80 e3       	ldi	r24, 0x30	; 48
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    17bc:	5a 94       	dec	r5
    17be:	f7 cf       	rjmp	.-18     	; 0x17ae <vfprintf+0x292>
    17c0:	97 fe       	sbrs	r9, 7
    17c2:	4c c0       	rjmp	.+152    	; 0x185c <vfprintf+0x340>
    17c4:	46 01       	movw	r8, r12
    17c6:	d7 fe       	sbrs	r13, 7
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <vfprintf+0x2b2>
    17ca:	81 2c       	mov	r8, r1
    17cc:	91 2c       	mov	r9, r1
    17ce:	c6 01       	movw	r24, r12
    17d0:	88 19       	sub	r24, r8
    17d2:	99 09       	sbc	r25, r9
    17d4:	f3 01       	movw	r30, r6
    17d6:	e8 0f       	add	r30, r24
    17d8:	f9 1f       	adc	r31, r25
    17da:	fe 87       	std	Y+14, r31	; 0x0e
    17dc:	ed 87       	std	Y+13, r30	; 0x0d
    17de:	96 01       	movw	r18, r12
    17e0:	24 19       	sub	r18, r4
    17e2:	31 09       	sbc	r19, r1
    17e4:	38 8b       	std	Y+16, r19	; 0x10
    17e6:	2f 87       	std	Y+15, r18	; 0x0f
    17e8:	01 2f       	mov	r16, r17
    17ea:	10 e0       	ldi	r17, 0x00	; 0
    17ec:	11 95       	neg	r17
    17ee:	01 95       	neg	r16
    17f0:	11 09       	sbc	r17, r1
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	83 16       	cp	r8, r19
    17f6:	93 06       	cpc	r9, r19
    17f8:	29 f4       	brne	.+10     	; 0x1804 <vfprintf+0x2e8>
    17fa:	b7 01       	movw	r22, r14
    17fc:	8e e2       	ldi	r24, 0x2E	; 46
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1804:	c8 14       	cp	r12, r8
    1806:	d9 04       	cpc	r13, r9
    1808:	4c f0       	brlt	.+18     	; 0x181c <vfprintf+0x300>
    180a:	8f 85       	ldd	r24, Y+15	; 0x0f
    180c:	98 89       	ldd	r25, Y+16	; 0x10
    180e:	88 15       	cp	r24, r8
    1810:	99 05       	cpc	r25, r9
    1812:	24 f4       	brge	.+8      	; 0x181c <vfprintf+0x300>
    1814:	ed 85       	ldd	r30, Y+13	; 0x0d
    1816:	fe 85       	ldd	r31, Y+14	; 0x0e
    1818:	81 81       	ldd	r24, Z+1	; 0x01
    181a:	01 c0       	rjmp	.+2      	; 0x181e <vfprintf+0x302>
    181c:	80 e3       	ldi	r24, 0x30	; 48
    181e:	f1 e0       	ldi	r31, 0x01	; 1
    1820:	8f 1a       	sub	r8, r31
    1822:	91 08       	sbc	r9, r1
    1824:	2d 85       	ldd	r18, Y+13	; 0x0d
    1826:	3e 85       	ldd	r19, Y+14	; 0x0e
    1828:	2f 5f       	subi	r18, 0xFF	; 255
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	3e 87       	std	Y+14, r19	; 0x0e
    182e:	2d 87       	std	Y+13, r18	; 0x0d
    1830:	80 16       	cp	r8, r16
    1832:	91 06       	cpc	r9, r17
    1834:	2c f0       	brlt	.+10     	; 0x1840 <vfprintf+0x324>
    1836:	b7 01       	movw	r22, r14
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    183e:	d9 cf       	rjmp	.-78     	; 0x17f2 <vfprintf+0x2d6>
    1840:	c8 14       	cp	r12, r8
    1842:	d9 04       	cpc	r13, r9
    1844:	41 f4       	brne	.+16     	; 0x1856 <vfprintf+0x33a>
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	96 33       	cpi	r25, 0x36	; 54
    184a:	20 f4       	brcc	.+8      	; 0x1854 <vfprintf+0x338>
    184c:	95 33       	cpi	r25, 0x35	; 53
    184e:	19 f4       	brne	.+6      	; 0x1856 <vfprintf+0x33a>
    1850:	3c 85       	ldd	r19, Y+12	; 0x0c
    1852:	34 ff       	sbrs	r19, 4
    1854:	81 e3       	ldi	r24, 0x31	; 49
    1856:	b7 01       	movw	r22, r14
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	4e c0       	rjmp	.+156    	; 0x18f8 <vfprintf+0x3dc>
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	81 33       	cpi	r24, 0x31	; 49
    1860:	19 f0       	breq	.+6      	; 0x1868 <vfprintf+0x34c>
    1862:	9c 85       	ldd	r25, Y+12	; 0x0c
    1864:	9f 7e       	andi	r25, 0xEF	; 239
    1866:	9c 87       	std	Y+12, r25	; 0x0c
    1868:	b7 01       	movw	r22, r14
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1870:	11 11       	cpse	r17, r1
    1872:	05 c0       	rjmp	.+10     	; 0x187e <vfprintf+0x362>
    1874:	94 fc       	sbrc	r9, 4
    1876:	18 c0       	rjmp	.+48     	; 0x18a8 <vfprintf+0x38c>
    1878:	85 e6       	ldi	r24, 0x65	; 101
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	17 c0       	rjmp	.+46     	; 0x18ac <vfprintf+0x390>
    187e:	b7 01       	movw	r22, r14
    1880:	8e e2       	ldi	r24, 0x2E	; 46
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1888:	1e 5f       	subi	r17, 0xFE	; 254
    188a:	82 e0       	ldi	r24, 0x02	; 2
    188c:	01 e0       	ldi	r16, 0x01	; 1
    188e:	08 0f       	add	r16, r24
    1890:	f3 01       	movw	r30, r6
    1892:	e8 0f       	add	r30, r24
    1894:	f1 1d       	adc	r31, r1
    1896:	80 81       	ld	r24, Z
    1898:	b7 01       	movw	r22, r14
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    18a0:	80 2f       	mov	r24, r16
    18a2:	01 13       	cpse	r16, r17
    18a4:	f3 cf       	rjmp	.-26     	; 0x188c <vfprintf+0x370>
    18a6:	e6 cf       	rjmp	.-52     	; 0x1874 <vfprintf+0x358>
    18a8:	85 e4       	ldi	r24, 0x45	; 69
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	b7 01       	movw	r22, r14
    18ae:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    18b2:	d7 fc       	sbrc	r13, 7
    18b4:	06 c0       	rjmp	.+12     	; 0x18c2 <vfprintf+0x3a6>
    18b6:	c1 14       	cp	r12, r1
    18b8:	d1 04       	cpc	r13, r1
    18ba:	41 f4       	brne	.+16     	; 0x18cc <vfprintf+0x3b0>
    18bc:	ec 85       	ldd	r30, Y+12	; 0x0c
    18be:	e4 ff       	sbrs	r30, 4
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <vfprintf+0x3b0>
    18c2:	d1 94       	neg	r13
    18c4:	c1 94       	neg	r12
    18c6:	d1 08       	sbc	r13, r1
    18c8:	8d e2       	ldi	r24, 0x2D	; 45
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <vfprintf+0x3b2>
    18cc:	8b e2       	ldi	r24, 0x2B	; 43
    18ce:	b7 01       	movw	r22, r14
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    18d6:	80 e3       	ldi	r24, 0x30	; 48
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	c2 16       	cp	r12, r18
    18dc:	d1 04       	cpc	r13, r1
    18de:	2c f0       	brlt	.+10     	; 0x18ea <vfprintf+0x3ce>
    18e0:	8f 5f       	subi	r24, 0xFF	; 255
    18e2:	fa e0       	ldi	r31, 0x0A	; 10
    18e4:	cf 1a       	sub	r12, r31
    18e6:	d1 08       	sbc	r13, r1
    18e8:	f7 cf       	rjmp	.-18     	; 0x18d8 <vfprintf+0x3bc>
    18ea:	b7 01       	movw	r22, r14
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    18f2:	b7 01       	movw	r22, r14
    18f4:	c6 01       	movw	r24, r12
    18f6:	c0 96       	adiw	r24, 0x30	; 48
    18f8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    18fc:	54 c1       	rjmp	.+680    	; 0x1ba6 <vfprintf+0x68a>
    18fe:	83 36       	cpi	r24, 0x63	; 99
    1900:	31 f0       	breq	.+12     	; 0x190e <vfprintf+0x3f2>
    1902:	83 37       	cpi	r24, 0x73	; 115
    1904:	79 f0       	breq	.+30     	; 0x1924 <vfprintf+0x408>
    1906:	83 35       	cpi	r24, 0x53	; 83
    1908:	09 f0       	breq	.+2      	; 0x190c <vfprintf+0x3f0>
    190a:	56 c0       	rjmp	.+172    	; 0x19b8 <vfprintf+0x49c>
    190c:	20 c0       	rjmp	.+64     	; 0x194e <vfprintf+0x432>
    190e:	56 01       	movw	r10, r12
    1910:	32 e0       	ldi	r19, 0x02	; 2
    1912:	a3 0e       	add	r10, r19
    1914:	b1 1c       	adc	r11, r1
    1916:	f6 01       	movw	r30, r12
    1918:	80 81       	ld	r24, Z
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	01 e0       	ldi	r16, 0x01	; 1
    191e:	10 e0       	ldi	r17, 0x00	; 0
    1920:	63 01       	movw	r12, r6
    1922:	12 c0       	rjmp	.+36     	; 0x1948 <vfprintf+0x42c>
    1924:	56 01       	movw	r10, r12
    1926:	f2 e0       	ldi	r31, 0x02	; 2
    1928:	af 0e       	add	r10, r31
    192a:	b1 1c       	adc	r11, r1
    192c:	f6 01       	movw	r30, r12
    192e:	c0 80       	ld	r12, Z
    1930:	d1 80       	ldd	r13, Z+1	; 0x01
    1932:	96 fe       	sbrs	r9, 6
    1934:	03 c0       	rjmp	.+6      	; 0x193c <vfprintf+0x420>
    1936:	61 2f       	mov	r22, r17
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <vfprintf+0x424>
    193c:	6f ef       	ldi	r22, 0xFF	; 255
    193e:	7f ef       	ldi	r23, 0xFF	; 255
    1940:	c6 01       	movw	r24, r12
    1942:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <strnlen>
    1946:	8c 01       	movw	r16, r24
    1948:	f9 2d       	mov	r31, r9
    194a:	ff 77       	andi	r31, 0x7F	; 127
    194c:	14 c0       	rjmp	.+40     	; 0x1976 <vfprintf+0x45a>
    194e:	56 01       	movw	r10, r12
    1950:	22 e0       	ldi	r18, 0x02	; 2
    1952:	a2 0e       	add	r10, r18
    1954:	b1 1c       	adc	r11, r1
    1956:	f6 01       	movw	r30, r12
    1958:	c0 80       	ld	r12, Z
    195a:	d1 80       	ldd	r13, Z+1	; 0x01
    195c:	96 fe       	sbrs	r9, 6
    195e:	03 c0       	rjmp	.+6      	; 0x1966 <vfprintf+0x44a>
    1960:	61 2f       	mov	r22, r17
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	02 c0       	rjmp	.+4      	; 0x196a <vfprintf+0x44e>
    1966:	6f ef       	ldi	r22, 0xFF	; 255
    1968:	7f ef       	ldi	r23, 0xFF	; 255
    196a:	c6 01       	movw	r24, r12
    196c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <strnlen_P>
    1970:	8c 01       	movw	r16, r24
    1972:	f9 2d       	mov	r31, r9
    1974:	f0 68       	ori	r31, 0x80	; 128
    1976:	9f 2e       	mov	r9, r31
    1978:	f3 fd       	sbrc	r31, 3
    197a:	1a c0       	rjmp	.+52     	; 0x19b0 <vfprintf+0x494>
    197c:	85 2d       	mov	r24, r5
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	08 17       	cp	r16, r24
    1982:	19 07       	cpc	r17, r25
    1984:	a8 f4       	brcc	.+42     	; 0x19b0 <vfprintf+0x494>
    1986:	b7 01       	movw	r22, r14
    1988:	80 e2       	ldi	r24, 0x20	; 32
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1990:	5a 94       	dec	r5
    1992:	f4 cf       	rjmp	.-24     	; 0x197c <vfprintf+0x460>
    1994:	f6 01       	movw	r30, r12
    1996:	97 fc       	sbrc	r9, 7
    1998:	85 91       	lpm	r24, Z+
    199a:	97 fe       	sbrs	r9, 7
    199c:	81 91       	ld	r24, Z+
    199e:	6f 01       	movw	r12, r30
    19a0:	b7 01       	movw	r22, r14
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    19a8:	51 10       	cpse	r5, r1
    19aa:	5a 94       	dec	r5
    19ac:	01 50       	subi	r16, 0x01	; 1
    19ae:	11 09       	sbc	r17, r1
    19b0:	01 15       	cp	r16, r1
    19b2:	11 05       	cpc	r17, r1
    19b4:	79 f7       	brne	.-34     	; 0x1994 <vfprintf+0x478>
    19b6:	f7 c0       	rjmp	.+494    	; 0x1ba6 <vfprintf+0x68a>
    19b8:	84 36       	cpi	r24, 0x64	; 100
    19ba:	11 f0       	breq	.+4      	; 0x19c0 <vfprintf+0x4a4>
    19bc:	89 36       	cpi	r24, 0x69	; 105
    19be:	61 f5       	brne	.+88     	; 0x1a18 <vfprintf+0x4fc>
    19c0:	56 01       	movw	r10, r12
    19c2:	97 fe       	sbrs	r9, 7
    19c4:	09 c0       	rjmp	.+18     	; 0x19d8 <vfprintf+0x4bc>
    19c6:	24 e0       	ldi	r18, 0x04	; 4
    19c8:	a2 0e       	add	r10, r18
    19ca:	b1 1c       	adc	r11, r1
    19cc:	f6 01       	movw	r30, r12
    19ce:	60 81       	ld	r22, Z
    19d0:	71 81       	ldd	r23, Z+1	; 0x01
    19d2:	82 81       	ldd	r24, Z+2	; 0x02
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <vfprintf+0x4d0>
    19d8:	f2 e0       	ldi	r31, 0x02	; 2
    19da:	af 0e       	add	r10, r31
    19dc:	b1 1c       	adc	r11, r1
    19de:	f6 01       	movw	r30, r12
    19e0:	60 81       	ld	r22, Z
    19e2:	71 81       	ldd	r23, Z+1	; 0x01
    19e4:	07 2e       	mov	r0, r23
    19e6:	00 0c       	add	r0, r0
    19e8:	88 0b       	sbc	r24, r24
    19ea:	99 0b       	sbc	r25, r25
    19ec:	f9 2d       	mov	r31, r9
    19ee:	ff 76       	andi	r31, 0x6F	; 111
    19f0:	9f 2e       	mov	r9, r31
    19f2:	97 ff       	sbrs	r25, 7
    19f4:	09 c0       	rjmp	.+18     	; 0x1a08 <vfprintf+0x4ec>
    19f6:	90 95       	com	r25
    19f8:	80 95       	com	r24
    19fa:	70 95       	com	r23
    19fc:	61 95       	neg	r22
    19fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1a00:	8f 4f       	sbci	r24, 0xFF	; 255
    1a02:	9f 4f       	sbci	r25, 0xFF	; 255
    1a04:	f0 68       	ori	r31, 0x80	; 128
    1a06:	9f 2e       	mov	r9, r31
    1a08:	2a e0       	ldi	r18, 0x0A	; 10
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	a3 01       	movw	r20, r6
    1a0e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__ultoa_invert>
    1a12:	c8 2e       	mov	r12, r24
    1a14:	c6 18       	sub	r12, r6
    1a16:	3f c0       	rjmp	.+126    	; 0x1a96 <vfprintf+0x57a>
    1a18:	09 2d       	mov	r16, r9
    1a1a:	85 37       	cpi	r24, 0x75	; 117
    1a1c:	21 f4       	brne	.+8      	; 0x1a26 <vfprintf+0x50a>
    1a1e:	0f 7e       	andi	r16, 0xEF	; 239
    1a20:	2a e0       	ldi	r18, 0x0A	; 10
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	1d c0       	rjmp	.+58     	; 0x1a60 <vfprintf+0x544>
    1a26:	09 7f       	andi	r16, 0xF9	; 249
    1a28:	8f 36       	cpi	r24, 0x6F	; 111
    1a2a:	91 f0       	breq	.+36     	; 0x1a50 <vfprintf+0x534>
    1a2c:	18 f4       	brcc	.+6      	; 0x1a34 <vfprintf+0x518>
    1a2e:	88 35       	cpi	r24, 0x58	; 88
    1a30:	59 f0       	breq	.+22     	; 0x1a48 <vfprintf+0x52c>
    1a32:	c3 c0       	rjmp	.+390    	; 0x1bba <vfprintf+0x69e>
    1a34:	80 37       	cpi	r24, 0x70	; 112
    1a36:	19 f0       	breq	.+6      	; 0x1a3e <vfprintf+0x522>
    1a38:	88 37       	cpi	r24, 0x78	; 120
    1a3a:	11 f0       	breq	.+4      	; 0x1a40 <vfprintf+0x524>
    1a3c:	be c0       	rjmp	.+380    	; 0x1bba <vfprintf+0x69e>
    1a3e:	00 61       	ori	r16, 0x10	; 16
    1a40:	04 ff       	sbrs	r16, 4
    1a42:	09 c0       	rjmp	.+18     	; 0x1a56 <vfprintf+0x53a>
    1a44:	04 60       	ori	r16, 0x04	; 4
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <vfprintf+0x53a>
    1a48:	94 fe       	sbrs	r9, 4
    1a4a:	08 c0       	rjmp	.+16     	; 0x1a5c <vfprintf+0x540>
    1a4c:	06 60       	ori	r16, 0x06	; 6
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <vfprintf+0x540>
    1a50:	28 e0       	ldi	r18, 0x08	; 8
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	05 c0       	rjmp	.+10     	; 0x1a60 <vfprintf+0x544>
    1a56:	20 e1       	ldi	r18, 0x10	; 16
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <vfprintf+0x544>
    1a5c:	20 e1       	ldi	r18, 0x10	; 16
    1a5e:	32 e0       	ldi	r19, 0x02	; 2
    1a60:	56 01       	movw	r10, r12
    1a62:	07 ff       	sbrs	r16, 7
    1a64:	09 c0       	rjmp	.+18     	; 0x1a78 <vfprintf+0x55c>
    1a66:	84 e0       	ldi	r24, 0x04	; 4
    1a68:	a8 0e       	add	r10, r24
    1a6a:	b1 1c       	adc	r11, r1
    1a6c:	f6 01       	movw	r30, r12
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	08 c0       	rjmp	.+16     	; 0x1a88 <vfprintf+0x56c>
    1a78:	f2 e0       	ldi	r31, 0x02	; 2
    1a7a:	af 0e       	add	r10, r31
    1a7c:	b1 1c       	adc	r11, r1
    1a7e:	f6 01       	movw	r30, r12
    1a80:	60 81       	ld	r22, Z
    1a82:	71 81       	ldd	r23, Z+1	; 0x01
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a3 01       	movw	r20, r6
    1a8a:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <__ultoa_invert>
    1a8e:	c8 2e       	mov	r12, r24
    1a90:	c6 18       	sub	r12, r6
    1a92:	0f 77       	andi	r16, 0x7F	; 127
    1a94:	90 2e       	mov	r9, r16
    1a96:	96 fe       	sbrs	r9, 6
    1a98:	0b c0       	rjmp	.+22     	; 0x1ab0 <vfprintf+0x594>
    1a9a:	09 2d       	mov	r16, r9
    1a9c:	0e 7f       	andi	r16, 0xFE	; 254
    1a9e:	c1 16       	cp	r12, r17
    1aa0:	50 f4       	brcc	.+20     	; 0x1ab6 <vfprintf+0x59a>
    1aa2:	94 fe       	sbrs	r9, 4
    1aa4:	0a c0       	rjmp	.+20     	; 0x1aba <vfprintf+0x59e>
    1aa6:	92 fc       	sbrc	r9, 2
    1aa8:	08 c0       	rjmp	.+16     	; 0x1aba <vfprintf+0x59e>
    1aaa:	09 2d       	mov	r16, r9
    1aac:	0e 7e       	andi	r16, 0xEE	; 238
    1aae:	05 c0       	rjmp	.+10     	; 0x1aba <vfprintf+0x59e>
    1ab0:	dc 2c       	mov	r13, r12
    1ab2:	09 2d       	mov	r16, r9
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <vfprintf+0x5a0>
    1ab6:	dc 2c       	mov	r13, r12
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <vfprintf+0x5a0>
    1aba:	d1 2e       	mov	r13, r17
    1abc:	04 ff       	sbrs	r16, 4
    1abe:	0d c0       	rjmp	.+26     	; 0x1ada <vfprintf+0x5be>
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	ec 0d       	add	r30, r12
    1ac4:	f1 1d       	adc	r31, r1
    1ac6:	80 81       	ld	r24, Z
    1ac8:	80 33       	cpi	r24, 0x30	; 48
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <vfprintf+0x5b4>
    1acc:	09 7e       	andi	r16, 0xE9	; 233
    1ace:	09 c0       	rjmp	.+18     	; 0x1ae2 <vfprintf+0x5c6>
    1ad0:	02 ff       	sbrs	r16, 2
    1ad2:	06 c0       	rjmp	.+12     	; 0x1ae0 <vfprintf+0x5c4>
    1ad4:	d3 94       	inc	r13
    1ad6:	d3 94       	inc	r13
    1ad8:	04 c0       	rjmp	.+8      	; 0x1ae2 <vfprintf+0x5c6>
    1ada:	80 2f       	mov	r24, r16
    1adc:	86 78       	andi	r24, 0x86	; 134
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <vfprintf+0x5c6>
    1ae0:	d3 94       	inc	r13
    1ae2:	03 fd       	sbrc	r16, 3
    1ae4:	11 c0       	rjmp	.+34     	; 0x1b08 <vfprintf+0x5ec>
    1ae6:	00 ff       	sbrs	r16, 0
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <vfprintf+0x5da>
    1aea:	1c 2d       	mov	r17, r12
    1aec:	d5 14       	cp	r13, r5
    1aee:	80 f4       	brcc	.+32     	; 0x1b10 <vfprintf+0x5f4>
    1af0:	15 0d       	add	r17, r5
    1af2:	1d 19       	sub	r17, r13
    1af4:	0d c0       	rjmp	.+26     	; 0x1b10 <vfprintf+0x5f4>
    1af6:	d5 14       	cp	r13, r5
    1af8:	58 f4       	brcc	.+22     	; 0x1b10 <vfprintf+0x5f4>
    1afa:	b7 01       	movw	r22, r14
    1afc:	80 e2       	ldi	r24, 0x20	; 32
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1b04:	d3 94       	inc	r13
    1b06:	f7 cf       	rjmp	.-18     	; 0x1af6 <vfprintf+0x5da>
    1b08:	d5 14       	cp	r13, r5
    1b0a:	10 f4       	brcc	.+4      	; 0x1b10 <vfprintf+0x5f4>
    1b0c:	5d 18       	sub	r5, r13
    1b0e:	01 c0       	rjmp	.+2      	; 0x1b12 <vfprintf+0x5f6>
    1b10:	51 2c       	mov	r5, r1
    1b12:	04 ff       	sbrs	r16, 4
    1b14:	10 c0       	rjmp	.+32     	; 0x1b36 <vfprintf+0x61a>
    1b16:	b7 01       	movw	r22, r14
    1b18:	80 e3       	ldi	r24, 0x30	; 48
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1b20:	02 ff       	sbrs	r16, 2
    1b22:	17 c0       	rjmp	.+46     	; 0x1b52 <vfprintf+0x636>
    1b24:	01 fd       	sbrc	r16, 1
    1b26:	03 c0       	rjmp	.+6      	; 0x1b2e <vfprintf+0x612>
    1b28:	88 e7       	ldi	r24, 0x78	; 120
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <vfprintf+0x616>
    1b2e:	88 e5       	ldi	r24, 0x58	; 88
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	b7 01       	movw	r22, r14
    1b34:	0c c0       	rjmp	.+24     	; 0x1b4e <vfprintf+0x632>
    1b36:	80 2f       	mov	r24, r16
    1b38:	86 78       	andi	r24, 0x86	; 134
    1b3a:	59 f0       	breq	.+22     	; 0x1b52 <vfprintf+0x636>
    1b3c:	01 ff       	sbrs	r16, 1
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <vfprintf+0x628>
    1b40:	8b e2       	ldi	r24, 0x2B	; 43
    1b42:	01 c0       	rjmp	.+2      	; 0x1b46 <vfprintf+0x62a>
    1b44:	80 e2       	ldi	r24, 0x20	; 32
    1b46:	07 fd       	sbrc	r16, 7
    1b48:	8d e2       	ldi	r24, 0x2D	; 45
    1b4a:	b7 01       	movw	r22, r14
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1b52:	c1 16       	cp	r12, r17
    1b54:	38 f4       	brcc	.+14     	; 0x1b64 <vfprintf+0x648>
    1b56:	b7 01       	movw	r22, r14
    1b58:	80 e3       	ldi	r24, 0x30	; 48
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1b60:	11 50       	subi	r17, 0x01	; 1
    1b62:	f7 cf       	rjmp	.-18     	; 0x1b52 <vfprintf+0x636>
    1b64:	ca 94       	dec	r12
    1b66:	f3 01       	movw	r30, r6
    1b68:	ec 0d       	add	r30, r12
    1b6a:	f1 1d       	adc	r31, r1
    1b6c:	80 81       	ld	r24, Z
    1b6e:	b7 01       	movw	r22, r14
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1b76:	c1 10       	cpse	r12, r1
    1b78:	f5 cf       	rjmp	.-22     	; 0x1b64 <vfprintf+0x648>
    1b7a:	15 c0       	rjmp	.+42     	; 0x1ba6 <vfprintf+0x68a>
    1b7c:	f4 e0       	ldi	r31, 0x04	; 4
    1b7e:	f5 15       	cp	r31, r5
    1b80:	60 f5       	brcc	.+88     	; 0x1bda <vfprintf+0x6be>
    1b82:	84 e0       	ldi	r24, 0x04	; 4
    1b84:	58 1a       	sub	r5, r24
    1b86:	93 fe       	sbrs	r9, 3
    1b88:	1f c0       	rjmp	.+62     	; 0x1bc8 <vfprintf+0x6ac>
    1b8a:	01 11       	cpse	r16, r1
    1b8c:	27 c0       	rjmp	.+78     	; 0x1bdc <vfprintf+0x6c0>
    1b8e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b90:	23 ff       	sbrs	r18, 3
    1b92:	2a c0       	rjmp	.+84     	; 0x1be8 <vfprintf+0x6cc>
    1b94:	04 e5       	ldi	r16, 0x54	; 84
    1b96:	10 e0       	ldi	r17, 0x00	; 0
    1b98:	39 2d       	mov	r19, r9
    1b9a:	30 71       	andi	r19, 0x10	; 16
    1b9c:	93 2e       	mov	r9, r19
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	84 91       	lpm	r24, Z
    1ba2:	81 11       	cpse	r24, r1
    1ba4:	24 c0       	rjmp	.+72     	; 0x1bee <vfprintf+0x6d2>
    1ba6:	55 20       	and	r5, r5
    1ba8:	09 f4       	brne	.+2      	; 0x1bac <vfprintf+0x690>
    1baa:	e4 cc       	rjmp	.-1592   	; 0x1574 <vfprintf+0x58>
    1bac:	b7 01       	movw	r22, r14
    1bae:	80 e2       	ldi	r24, 0x20	; 32
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1bb6:	5a 94       	dec	r5
    1bb8:	f6 cf       	rjmp	.-20     	; 0x1ba6 <vfprintf+0x68a>
    1bba:	f7 01       	movw	r30, r14
    1bbc:	86 81       	ldd	r24, Z+6	; 0x06
    1bbe:	97 81       	ldd	r25, Z+7	; 0x07
    1bc0:	26 c0       	rjmp	.+76     	; 0x1c0e <vfprintf+0x6f2>
    1bc2:	8f ef       	ldi	r24, 0xFF	; 255
    1bc4:	9f ef       	ldi	r25, 0xFF	; 255
    1bc6:	23 c0       	rjmp	.+70     	; 0x1c0e <vfprintf+0x6f2>
    1bc8:	b7 01       	movw	r22, r14
    1bca:	80 e2       	ldi	r24, 0x20	; 32
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1bd2:	5a 94       	dec	r5
    1bd4:	51 10       	cpse	r5, r1
    1bd6:	f8 cf       	rjmp	.-16     	; 0x1bc8 <vfprintf+0x6ac>
    1bd8:	d8 cf       	rjmp	.-80     	; 0x1b8a <vfprintf+0x66e>
    1bda:	51 2c       	mov	r5, r1
    1bdc:	b7 01       	movw	r22, r14
    1bde:	80 2f       	mov	r24, r16
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1be6:	d3 cf       	rjmp	.-90     	; 0x1b8e <vfprintf+0x672>
    1be8:	08 e5       	ldi	r16, 0x58	; 88
    1bea:	10 e0       	ldi	r17, 0x00	; 0
    1bec:	d5 cf       	rjmp	.-86     	; 0x1b98 <vfprintf+0x67c>
    1bee:	91 10       	cpse	r9, r1
    1bf0:	80 52       	subi	r24, 0x20	; 32
    1bf2:	b7 01       	movw	r22, r14
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <fputc>
    1bfa:	0f 5f       	subi	r16, 0xFF	; 255
    1bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfe:	cf cf       	rjmp	.-98     	; 0x1b9e <vfprintf+0x682>
    1c00:	23 e0       	ldi	r18, 0x03	; 3
    1c02:	25 15       	cp	r18, r5
    1c04:	10 f4       	brcc	.+4      	; 0x1c0a <vfprintf+0x6ee>
    1c06:	83 e0       	ldi	r24, 0x03	; 3
    1c08:	bd cf       	rjmp	.-134    	; 0x1b84 <vfprintf+0x668>
    1c0a:	51 2c       	mov	r5, r1
    1c0c:	c0 cf       	rjmp	.-128    	; 0x1b8e <vfprintf+0x672>
    1c0e:	60 96       	adiw	r28, 0x10	; 16
    1c10:	e2 e1       	ldi	r30, 0x12	; 18
    1c12:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__epilogue_restores__>

00001c16 <__divmodhi4>:
    1c16:	97 fb       	bst	r25, 7
    1c18:	07 2e       	mov	r0, r23
    1c1a:	16 f4       	brtc	.+4      	; 0x1c20 <__divmodhi4+0xa>
    1c1c:	00 94       	com	r0
    1c1e:	07 d0       	rcall	.+14     	; 0x1c2e <__divmodhi4_neg1>
    1c20:	77 fd       	sbrc	r23, 7
    1c22:	09 d0       	rcall	.+18     	; 0x1c36 <__divmodhi4_neg2>
    1c24:	0e 94 56 0e 	call	0x1cac	; 0x1cac <__udivmodhi4>
    1c28:	07 fc       	sbrc	r0, 7
    1c2a:	05 d0       	rcall	.+10     	; 0x1c36 <__divmodhi4_neg2>
    1c2c:	3e f4       	brtc	.+14     	; 0x1c3c <__divmodhi4_exit>

00001c2e <__divmodhi4_neg1>:
    1c2e:	90 95       	com	r25
    1c30:	81 95       	neg	r24
    1c32:	9f 4f       	sbci	r25, 0xFF	; 255
    1c34:	08 95       	ret

00001c36 <__divmodhi4_neg2>:
    1c36:	70 95       	com	r23
    1c38:	61 95       	neg	r22
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255

00001c3c <__divmodhi4_exit>:
    1c3c:	08 95       	ret

00001c3e <__prologue_saves__>:
    1c3e:	2f 92       	push	r2
    1c40:	3f 92       	push	r3
    1c42:	4f 92       	push	r4
    1c44:	5f 92       	push	r5
    1c46:	6f 92       	push	r6
    1c48:	7f 92       	push	r7
    1c4a:	8f 92       	push	r8
    1c4c:	9f 92       	push	r9
    1c4e:	af 92       	push	r10
    1c50:	bf 92       	push	r11
    1c52:	cf 92       	push	r12
    1c54:	df 92       	push	r13
    1c56:	ef 92       	push	r14
    1c58:	ff 92       	push	r15
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	ca 1b       	sub	r28, r26
    1c68:	db 0b       	sbc	r29, r27
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	09 94       	ijmp

00001c76 <__epilogue_restores__>:
    1c76:	2a 88       	ldd	r2, Y+18	; 0x12
    1c78:	39 88       	ldd	r3, Y+17	; 0x11
    1c7a:	48 88       	ldd	r4, Y+16	; 0x10
    1c7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c80:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c82:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c84:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c86:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c88:	b9 84       	ldd	r11, Y+9	; 0x09
    1c8a:	c8 84       	ldd	r12, Y+8	; 0x08
    1c8c:	df 80       	ldd	r13, Y+7	; 0x07
    1c8e:	ee 80       	ldd	r14, Y+6	; 0x06
    1c90:	fd 80       	ldd	r15, Y+5	; 0x05
    1c92:	0c 81       	ldd	r16, Y+4	; 0x04
    1c94:	1b 81       	ldd	r17, Y+3	; 0x03
    1c96:	aa 81       	ldd	r26, Y+2	; 0x02
    1c98:	b9 81       	ldd	r27, Y+1	; 0x01
    1c9a:	ce 0f       	add	r28, r30
    1c9c:	d1 1d       	adc	r29, r1
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	ed 01       	movw	r28, r26
    1caa:	08 95       	ret

00001cac <__udivmodhi4>:
    1cac:	aa 1b       	sub	r26, r26
    1cae:	bb 1b       	sub	r27, r27
    1cb0:	51 e1       	ldi	r21, 0x11	; 17
    1cb2:	07 c0       	rjmp	.+14     	; 0x1cc2 <__udivmodhi4_ep>

00001cb4 <__udivmodhi4_loop>:
    1cb4:	aa 1f       	adc	r26, r26
    1cb6:	bb 1f       	adc	r27, r27
    1cb8:	a6 17       	cp	r26, r22
    1cba:	b7 07       	cpc	r27, r23
    1cbc:	10 f0       	brcs	.+4      	; 0x1cc2 <__udivmodhi4_ep>
    1cbe:	a6 1b       	sub	r26, r22
    1cc0:	b7 0b       	sbc	r27, r23

00001cc2 <__udivmodhi4_ep>:
    1cc2:	88 1f       	adc	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	5a 95       	dec	r21
    1cc8:	a9 f7       	brne	.-22     	; 0x1cb4 <__udivmodhi4_loop>
    1cca:	80 95       	com	r24
    1ccc:	90 95       	com	r25
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	08 95       	ret

00001cd4 <__ftoa_engine>:
    1cd4:	28 30       	cpi	r18, 0x08	; 8
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <__ftoa_engine+0x6>
    1cd8:	27 e0       	ldi	r18, 0x07	; 7
    1cda:	33 27       	eor	r19, r19
    1cdc:	da 01       	movw	r26, r20
    1cde:	99 0f       	add	r25, r25
    1ce0:	31 1d       	adc	r19, r1
    1ce2:	87 fd       	sbrc	r24, 7
    1ce4:	91 60       	ori	r25, 0x01	; 1
    1ce6:	00 96       	adiw	r24, 0x00	; 0
    1ce8:	61 05       	cpc	r22, r1
    1cea:	71 05       	cpc	r23, r1
    1cec:	39 f4       	brne	.+14     	; 0x1cfc <__ftoa_engine+0x28>
    1cee:	32 60       	ori	r19, 0x02	; 2
    1cf0:	2e 5f       	subi	r18, 0xFE	; 254
    1cf2:	3d 93       	st	X+, r19
    1cf4:	30 e3       	ldi	r19, 0x30	; 48
    1cf6:	2a 95       	dec	r18
    1cf8:	e1 f7       	brne	.-8      	; 0x1cf2 <__ftoa_engine+0x1e>
    1cfa:	08 95       	ret
    1cfc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cfe:	30 f0       	brcs	.+12     	; 0x1d0c <__ftoa_engine+0x38>
    1d00:	80 38       	cpi	r24, 0x80	; 128
    1d02:	71 05       	cpc	r23, r1
    1d04:	61 05       	cpc	r22, r1
    1d06:	09 f0       	breq	.+2      	; 0x1d0a <__ftoa_engine+0x36>
    1d08:	3c 5f       	subi	r19, 0xFC	; 252
    1d0a:	3c 5f       	subi	r19, 0xFC	; 252
    1d0c:	3d 93       	st	X+, r19
    1d0e:	91 30       	cpi	r25, 0x01	; 1
    1d10:	08 f0       	brcs	.+2      	; 0x1d14 <__ftoa_engine+0x40>
    1d12:	80 68       	ori	r24, 0x80	; 128
    1d14:	91 1d       	adc	r25, r1
    1d16:	df 93       	push	r29
    1d18:	cf 93       	push	r28
    1d1a:	1f 93       	push	r17
    1d1c:	0f 93       	push	r16
    1d1e:	ff 92       	push	r15
    1d20:	ef 92       	push	r14
    1d22:	19 2f       	mov	r17, r25
    1d24:	98 7f       	andi	r25, 0xF8	; 248
    1d26:	96 95       	lsr	r25
    1d28:	e9 2f       	mov	r30, r25
    1d2a:	96 95       	lsr	r25
    1d2c:	96 95       	lsr	r25
    1d2e:	e9 0f       	add	r30, r25
    1d30:	ff 27       	eor	r31, r31
    1d32:	ea 54       	subi	r30, 0x4A	; 74
    1d34:	ff 4f       	sbci	r31, 0xFF	; 255
    1d36:	99 27       	eor	r25, r25
    1d38:	33 27       	eor	r19, r19
    1d3a:	ee 24       	eor	r14, r14
    1d3c:	ff 24       	eor	r15, r15
    1d3e:	a7 01       	movw	r20, r14
    1d40:	e7 01       	movw	r28, r14
    1d42:	05 90       	lpm	r0, Z+
    1d44:	08 94       	sec
    1d46:	07 94       	ror	r0
    1d48:	28 f4       	brcc	.+10     	; 0x1d54 <__ftoa_engine+0x80>
    1d4a:	36 0f       	add	r19, r22
    1d4c:	e7 1e       	adc	r14, r23
    1d4e:	f8 1e       	adc	r15, r24
    1d50:	49 1f       	adc	r20, r25
    1d52:	51 1d       	adc	r21, r1
    1d54:	66 0f       	add	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	88 1f       	adc	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	06 94       	lsr	r0
    1d5e:	a1 f7       	brne	.-24     	; 0x1d48 <__ftoa_engine+0x74>
    1d60:	05 90       	lpm	r0, Z+
    1d62:	07 94       	ror	r0
    1d64:	28 f4       	brcc	.+10     	; 0x1d70 <__ftoa_engine+0x9c>
    1d66:	e7 0e       	add	r14, r23
    1d68:	f8 1e       	adc	r15, r24
    1d6a:	49 1f       	adc	r20, r25
    1d6c:	56 1f       	adc	r21, r22
    1d6e:	c1 1d       	adc	r28, r1
    1d70:	77 0f       	add	r23, r23
    1d72:	88 1f       	adc	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	66 1f       	adc	r22, r22
    1d78:	06 94       	lsr	r0
    1d7a:	a1 f7       	brne	.-24     	; 0x1d64 <__ftoa_engine+0x90>
    1d7c:	05 90       	lpm	r0, Z+
    1d7e:	07 94       	ror	r0
    1d80:	28 f4       	brcc	.+10     	; 0x1d8c <__ftoa_engine+0xb8>
    1d82:	f8 0e       	add	r15, r24
    1d84:	49 1f       	adc	r20, r25
    1d86:	56 1f       	adc	r21, r22
    1d88:	c7 1f       	adc	r28, r23
    1d8a:	d1 1d       	adc	r29, r1
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	66 1f       	adc	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	06 94       	lsr	r0
    1d96:	a1 f7       	brne	.-24     	; 0x1d80 <__ftoa_engine+0xac>
    1d98:	05 90       	lpm	r0, Z+
    1d9a:	07 94       	ror	r0
    1d9c:	20 f4       	brcc	.+8      	; 0x1da6 <__ftoa_engine+0xd2>
    1d9e:	49 0f       	add	r20, r25
    1da0:	56 1f       	adc	r21, r22
    1da2:	c7 1f       	adc	r28, r23
    1da4:	d8 1f       	adc	r29, r24
    1da6:	99 0f       	add	r25, r25
    1da8:	66 1f       	adc	r22, r22
    1daa:	77 1f       	adc	r23, r23
    1dac:	88 1f       	adc	r24, r24
    1dae:	06 94       	lsr	r0
    1db0:	a9 f7       	brne	.-22     	; 0x1d9c <__ftoa_engine+0xc8>
    1db2:	84 91       	lpm	r24, Z
    1db4:	10 95       	com	r17
    1db6:	17 70       	andi	r17, 0x07	; 7
    1db8:	41 f0       	breq	.+16     	; 0x1dca <__ftoa_engine+0xf6>
    1dba:	d6 95       	lsr	r29
    1dbc:	c7 95       	ror	r28
    1dbe:	57 95       	ror	r21
    1dc0:	47 95       	ror	r20
    1dc2:	f7 94       	ror	r15
    1dc4:	e7 94       	ror	r14
    1dc6:	1a 95       	dec	r17
    1dc8:	c1 f7       	brne	.-16     	; 0x1dba <__ftoa_engine+0xe6>
    1dca:	ec e5       	ldi	r30, 0x5C	; 92
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	68 94       	set
    1dd0:	15 90       	lpm	r1, Z+
    1dd2:	15 91       	lpm	r17, Z+
    1dd4:	35 91       	lpm	r19, Z+
    1dd6:	65 91       	lpm	r22, Z+
    1dd8:	95 91       	lpm	r25, Z+
    1dda:	05 90       	lpm	r0, Z+
    1ddc:	7f e2       	ldi	r23, 0x2F	; 47
    1dde:	73 95       	inc	r23
    1de0:	e1 18       	sub	r14, r1
    1de2:	f1 0a       	sbc	r15, r17
    1de4:	43 0b       	sbc	r20, r19
    1de6:	56 0b       	sbc	r21, r22
    1de8:	c9 0b       	sbc	r28, r25
    1dea:	d0 09       	sbc	r29, r0
    1dec:	c0 f7       	brcc	.-16     	; 0x1dde <__ftoa_engine+0x10a>
    1dee:	e1 0c       	add	r14, r1
    1df0:	f1 1e       	adc	r15, r17
    1df2:	43 1f       	adc	r20, r19
    1df4:	56 1f       	adc	r21, r22
    1df6:	c9 1f       	adc	r28, r25
    1df8:	d0 1d       	adc	r29, r0
    1dfa:	7e f4       	brtc	.+30     	; 0x1e1a <__ftoa_engine+0x146>
    1dfc:	70 33       	cpi	r23, 0x30	; 48
    1dfe:	11 f4       	brne	.+4      	; 0x1e04 <__ftoa_engine+0x130>
    1e00:	8a 95       	dec	r24
    1e02:	e6 cf       	rjmp	.-52     	; 0x1dd0 <__ftoa_engine+0xfc>
    1e04:	e8 94       	clt
    1e06:	01 50       	subi	r16, 0x01	; 1
    1e08:	30 f0       	brcs	.+12     	; 0x1e16 <__ftoa_engine+0x142>
    1e0a:	08 0f       	add	r16, r24
    1e0c:	0a f4       	brpl	.+2      	; 0x1e10 <__ftoa_engine+0x13c>
    1e0e:	00 27       	eor	r16, r16
    1e10:	02 17       	cp	r16, r18
    1e12:	08 f4       	brcc	.+2      	; 0x1e16 <__ftoa_engine+0x142>
    1e14:	20 2f       	mov	r18, r16
    1e16:	23 95       	inc	r18
    1e18:	02 2f       	mov	r16, r18
    1e1a:	7a 33       	cpi	r23, 0x3A	; 58
    1e1c:	28 f0       	brcs	.+10     	; 0x1e28 <__ftoa_engine+0x154>
    1e1e:	79 e3       	ldi	r23, 0x39	; 57
    1e20:	7d 93       	st	X+, r23
    1e22:	2a 95       	dec	r18
    1e24:	e9 f7       	brne	.-6      	; 0x1e20 <__ftoa_engine+0x14c>
    1e26:	10 c0       	rjmp	.+32     	; 0x1e48 <__ftoa_engine+0x174>
    1e28:	7d 93       	st	X+, r23
    1e2a:	2a 95       	dec	r18
    1e2c:	89 f6       	brne	.-94     	; 0x1dd0 <__ftoa_engine+0xfc>
    1e2e:	06 94       	lsr	r0
    1e30:	97 95       	ror	r25
    1e32:	67 95       	ror	r22
    1e34:	37 95       	ror	r19
    1e36:	17 95       	ror	r17
    1e38:	17 94       	ror	r1
    1e3a:	e1 18       	sub	r14, r1
    1e3c:	f1 0a       	sbc	r15, r17
    1e3e:	43 0b       	sbc	r20, r19
    1e40:	56 0b       	sbc	r21, r22
    1e42:	c9 0b       	sbc	r28, r25
    1e44:	d0 09       	sbc	r29, r0
    1e46:	98 f0       	brcs	.+38     	; 0x1e6e <__ftoa_engine+0x19a>
    1e48:	23 95       	inc	r18
    1e4a:	7e 91       	ld	r23, -X
    1e4c:	73 95       	inc	r23
    1e4e:	7a 33       	cpi	r23, 0x3A	; 58
    1e50:	08 f0       	brcs	.+2      	; 0x1e54 <__ftoa_engine+0x180>
    1e52:	70 e3       	ldi	r23, 0x30	; 48
    1e54:	7c 93       	st	X, r23
    1e56:	20 13       	cpse	r18, r16
    1e58:	b8 f7       	brcc	.-18     	; 0x1e48 <__ftoa_engine+0x174>
    1e5a:	7e 91       	ld	r23, -X
    1e5c:	70 61       	ori	r23, 0x10	; 16
    1e5e:	7d 93       	st	X+, r23
    1e60:	30 f0       	brcs	.+12     	; 0x1e6e <__ftoa_engine+0x19a>
    1e62:	83 95       	inc	r24
    1e64:	71 e3       	ldi	r23, 0x31	; 49
    1e66:	7d 93       	st	X+, r23
    1e68:	70 e3       	ldi	r23, 0x30	; 48
    1e6a:	2a 95       	dec	r18
    1e6c:	e1 f7       	brne	.-8      	; 0x1e66 <__ftoa_engine+0x192>
    1e6e:	11 24       	eor	r1, r1
    1e70:	ef 90       	pop	r14
    1e72:	ff 90       	pop	r15
    1e74:	0f 91       	pop	r16
    1e76:	1f 91       	pop	r17
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	99 27       	eor	r25, r25
    1e7e:	87 fd       	sbrc	r24, 7
    1e80:	90 95       	com	r25
    1e82:	08 95       	ret

00001e84 <strnlen_P>:
    1e84:	fc 01       	movw	r30, r24
    1e86:	05 90       	lpm	r0, Z+
    1e88:	61 50       	subi	r22, 0x01	; 1
    1e8a:	70 40       	sbci	r23, 0x00	; 0
    1e8c:	01 10       	cpse	r0, r1
    1e8e:	d8 f7       	brcc	.-10     	; 0x1e86 <strnlen_P+0x2>
    1e90:	80 95       	com	r24
    1e92:	90 95       	com	r25
    1e94:	8e 0f       	add	r24, r30
    1e96:	9f 1f       	adc	r25, r31
    1e98:	08 95       	ret

00001e9a <strnlen>:
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	61 50       	subi	r22, 0x01	; 1
    1e9e:	70 40       	sbci	r23, 0x00	; 0
    1ea0:	01 90       	ld	r0, Z+
    1ea2:	01 10       	cpse	r0, r1
    1ea4:	d8 f7       	brcc	.-10     	; 0x1e9c <strnlen+0x2>
    1ea6:	80 95       	com	r24
    1ea8:	90 95       	com	r25
    1eaa:	8e 0f       	add	r24, r30
    1eac:	9f 1f       	adc	r25, r31
    1eae:	08 95       	ret

00001eb0 <fputc>:
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	fb 01       	movw	r30, r22
    1eba:	23 81       	ldd	r18, Z+3	; 0x03
    1ebc:	21 fd       	sbrc	r18, 1
    1ebe:	03 c0       	rjmp	.+6      	; 0x1ec6 <fputc+0x16>
    1ec0:	8f ef       	ldi	r24, 0xFF	; 255
    1ec2:	9f ef       	ldi	r25, 0xFF	; 255
    1ec4:	2c c0       	rjmp	.+88     	; 0x1f1e <fputc+0x6e>
    1ec6:	22 ff       	sbrs	r18, 2
    1ec8:	16 c0       	rjmp	.+44     	; 0x1ef6 <fputc+0x46>
    1eca:	46 81       	ldd	r20, Z+6	; 0x06
    1ecc:	57 81       	ldd	r21, Z+7	; 0x07
    1ece:	24 81       	ldd	r18, Z+4	; 0x04
    1ed0:	35 81       	ldd	r19, Z+5	; 0x05
    1ed2:	42 17       	cp	r20, r18
    1ed4:	53 07       	cpc	r21, r19
    1ed6:	44 f4       	brge	.+16     	; 0x1ee8 <fputc+0x38>
    1ed8:	a0 81       	ld	r26, Z
    1eda:	b1 81       	ldd	r27, Z+1	; 0x01
    1edc:	9d 01       	movw	r18, r26
    1ede:	2f 5f       	subi	r18, 0xFF	; 255
    1ee0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee2:	31 83       	std	Z+1, r19	; 0x01
    1ee4:	20 83       	st	Z, r18
    1ee6:	8c 93       	st	X, r24
    1ee8:	26 81       	ldd	r18, Z+6	; 0x06
    1eea:	37 81       	ldd	r19, Z+7	; 0x07
    1eec:	2f 5f       	subi	r18, 0xFF	; 255
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	37 83       	std	Z+7, r19	; 0x07
    1ef2:	26 83       	std	Z+6, r18	; 0x06
    1ef4:	14 c0       	rjmp	.+40     	; 0x1f1e <fputc+0x6e>
    1ef6:	8b 01       	movw	r16, r22
    1ef8:	ec 01       	movw	r28, r24
    1efa:	fb 01       	movw	r30, r22
    1efc:	00 84       	ldd	r0, Z+8	; 0x08
    1efe:	f1 85       	ldd	r31, Z+9	; 0x09
    1f00:	e0 2d       	mov	r30, r0
    1f02:	09 95       	icall
    1f04:	89 2b       	or	r24, r25
    1f06:	e1 f6       	brne	.-72     	; 0x1ec0 <fputc+0x10>
    1f08:	d8 01       	movw	r26, r16
    1f0a:	16 96       	adiw	r26, 0x06	; 6
    1f0c:	8d 91       	ld	r24, X+
    1f0e:	9c 91       	ld	r25, X
    1f10:	17 97       	sbiw	r26, 0x07	; 7
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	17 96       	adiw	r26, 0x07	; 7
    1f16:	9c 93       	st	X, r25
    1f18:	8e 93       	st	-X, r24
    1f1a:	16 97       	sbiw	r26, 0x06	; 6
    1f1c:	ce 01       	movw	r24, r28
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	08 95       	ret

00001f28 <printf>:
    1f28:	a0 e0       	ldi	r26, 0x00	; 0
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	ea e9       	ldi	r30, 0x9A	; 154
    1f2e:	ff e0       	ldi	r31, 0x0F	; 15
    1f30:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__prologue_saves__+0x20>
    1f34:	ae 01       	movw	r20, r28
    1f36:	4b 5f       	subi	r20, 0xFB	; 251
    1f38:	5f 4f       	sbci	r21, 0xFF	; 255
    1f3a:	fa 01       	movw	r30, r20
    1f3c:	61 91       	ld	r22, Z+
    1f3e:	71 91       	ld	r23, Z+
    1f40:	af 01       	movw	r20, r30
    1f42:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__iob+0x2>
    1f46:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__iob+0x3>
    1f4a:	0e 94 8e 0a 	call	0x151c	; 0x151c <vfprintf>
    1f4e:	e2 e0       	ldi	r30, 0x02	; 2
    1f50:	0c 94 4b 0e 	jmp	0x1c96	; 0x1c96 <__epilogue_restores__+0x20>

00001f54 <puts>:
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <__iob+0x2>
    1f60:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <__iob+0x3>
    1f64:	23 81       	ldd	r18, Z+3	; 0x03
    1f66:	21 ff       	sbrs	r18, 1
    1f68:	1b c0       	rjmp	.+54     	; 0x1fa0 <puts+0x4c>
    1f6a:	8c 01       	movw	r16, r24
    1f6c:	d0 e0       	ldi	r29, 0x00	; 0
    1f6e:	c0 e0       	ldi	r28, 0x00	; 0
    1f70:	f8 01       	movw	r30, r16
    1f72:	81 91       	ld	r24, Z+
    1f74:	8f 01       	movw	r16, r30
    1f76:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <__iob+0x2>
    1f7a:	70 91 b0 00 	lds	r23, 0x00B0	; 0x8000b0 <__iob+0x3>
    1f7e:	db 01       	movw	r26, r22
    1f80:	18 96       	adiw	r26, 0x08	; 8
    1f82:	ed 91       	ld	r30, X+
    1f84:	fc 91       	ld	r31, X
    1f86:	19 97       	sbiw	r26, 0x09	; 9
    1f88:	88 23       	and	r24, r24
    1f8a:	31 f0       	breq	.+12     	; 0x1f98 <puts+0x44>
    1f8c:	09 95       	icall
    1f8e:	89 2b       	or	r24, r25
    1f90:	79 f3       	breq	.-34     	; 0x1f70 <puts+0x1c>
    1f92:	df ef       	ldi	r29, 0xFF	; 255
    1f94:	cf ef       	ldi	r28, 0xFF	; 255
    1f96:	ec cf       	rjmp	.-40     	; 0x1f70 <puts+0x1c>
    1f98:	8a e0       	ldi	r24, 0x0A	; 10
    1f9a:	09 95       	icall
    1f9c:	89 2b       	or	r24, r25
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <puts+0x52>
    1fa0:	8f ef       	ldi	r24, 0xFF	; 255
    1fa2:	9f ef       	ldi	r25, 0xFF	; 255
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <puts+0x56>
    1fa6:	8d 2f       	mov	r24, r29
    1fa8:	9c 2f       	mov	r25, r28
    1faa:	df 91       	pop	r29
    1fac:	cf 91       	pop	r28
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	08 95       	ret

00001fb4 <__ultoa_invert>:
    1fb4:	fa 01       	movw	r30, r20
    1fb6:	aa 27       	eor	r26, r26
    1fb8:	28 30       	cpi	r18, 0x08	; 8
    1fba:	51 f1       	breq	.+84     	; 0x2010 <__ultoa_invert+0x5c>
    1fbc:	20 31       	cpi	r18, 0x10	; 16
    1fbe:	81 f1       	breq	.+96     	; 0x2020 <__ultoa_invert+0x6c>
    1fc0:	e8 94       	clt
    1fc2:	6f 93       	push	r22
    1fc4:	6e 7f       	andi	r22, 0xFE	; 254
    1fc6:	6e 5f       	subi	r22, 0xFE	; 254
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	8f 4f       	sbci	r24, 0xFF	; 255
    1fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fce:	af 4f       	sbci	r26, 0xFF	; 255
    1fd0:	b1 e0       	ldi	r27, 0x01	; 1
    1fd2:	3e d0       	rcall	.+124    	; 0x2050 <__ultoa_invert+0x9c>
    1fd4:	b4 e0       	ldi	r27, 0x04	; 4
    1fd6:	3c d0       	rcall	.+120    	; 0x2050 <__ultoa_invert+0x9c>
    1fd8:	67 0f       	add	r22, r23
    1fda:	78 1f       	adc	r23, r24
    1fdc:	89 1f       	adc	r24, r25
    1fde:	9a 1f       	adc	r25, r26
    1fe0:	a1 1d       	adc	r26, r1
    1fe2:	68 0f       	add	r22, r24
    1fe4:	79 1f       	adc	r23, r25
    1fe6:	8a 1f       	adc	r24, r26
    1fe8:	91 1d       	adc	r25, r1
    1fea:	a1 1d       	adc	r26, r1
    1fec:	6a 0f       	add	r22, r26
    1fee:	71 1d       	adc	r23, r1
    1ff0:	81 1d       	adc	r24, r1
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	a1 1d       	adc	r26, r1
    1ff6:	20 d0       	rcall	.+64     	; 0x2038 <__ultoa_invert+0x84>
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <__ultoa_invert+0x48>
    1ffa:	68 94       	set
    1ffc:	3f 91       	pop	r19
    1ffe:	2a e0       	ldi	r18, 0x0A	; 10
    2000:	26 9f       	mul	r18, r22
    2002:	11 24       	eor	r1, r1
    2004:	30 19       	sub	r19, r0
    2006:	30 5d       	subi	r19, 0xD0	; 208
    2008:	31 93       	st	Z+, r19
    200a:	de f6       	brtc	.-74     	; 0x1fc2 <__ultoa_invert+0xe>
    200c:	cf 01       	movw	r24, r30
    200e:	08 95       	ret
    2010:	46 2f       	mov	r20, r22
    2012:	47 70       	andi	r20, 0x07	; 7
    2014:	40 5d       	subi	r20, 0xD0	; 208
    2016:	41 93       	st	Z+, r20
    2018:	b3 e0       	ldi	r27, 0x03	; 3
    201a:	0f d0       	rcall	.+30     	; 0x203a <__ultoa_invert+0x86>
    201c:	c9 f7       	brne	.-14     	; 0x2010 <__ultoa_invert+0x5c>
    201e:	f6 cf       	rjmp	.-20     	; 0x200c <__ultoa_invert+0x58>
    2020:	46 2f       	mov	r20, r22
    2022:	4f 70       	andi	r20, 0x0F	; 15
    2024:	40 5d       	subi	r20, 0xD0	; 208
    2026:	4a 33       	cpi	r20, 0x3A	; 58
    2028:	18 f0       	brcs	.+6      	; 0x2030 <__ultoa_invert+0x7c>
    202a:	49 5d       	subi	r20, 0xD9	; 217
    202c:	31 fd       	sbrc	r19, 1
    202e:	40 52       	subi	r20, 0x20	; 32
    2030:	41 93       	st	Z+, r20
    2032:	02 d0       	rcall	.+4      	; 0x2038 <__ultoa_invert+0x84>
    2034:	a9 f7       	brne	.-22     	; 0x2020 <__ultoa_invert+0x6c>
    2036:	ea cf       	rjmp	.-44     	; 0x200c <__ultoa_invert+0x58>
    2038:	b4 e0       	ldi	r27, 0x04	; 4
    203a:	a6 95       	lsr	r26
    203c:	97 95       	ror	r25
    203e:	87 95       	ror	r24
    2040:	77 95       	ror	r23
    2042:	67 95       	ror	r22
    2044:	ba 95       	dec	r27
    2046:	c9 f7       	brne	.-14     	; 0x203a <__ultoa_invert+0x86>
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	61 05       	cpc	r22, r1
    204c:	71 05       	cpc	r23, r1
    204e:	08 95       	ret
    2050:	9b 01       	movw	r18, r22
    2052:	ac 01       	movw	r20, r24
    2054:	0a 2e       	mov	r0, r26
    2056:	06 94       	lsr	r0
    2058:	57 95       	ror	r21
    205a:	47 95       	ror	r20
    205c:	37 95       	ror	r19
    205e:	27 95       	ror	r18
    2060:	ba 95       	dec	r27
    2062:	c9 f7       	brne	.-14     	; 0x2056 <__ultoa_invert+0xa2>
    2064:	62 0f       	add	r22, r18
    2066:	73 1f       	adc	r23, r19
    2068:	84 1f       	adc	r24, r20
    206a:	95 1f       	adc	r25, r21
    206c:	a0 1d       	adc	r26, r0
    206e:	08 95       	ret

00002070 <eeprom_read_byte>:
    2070:	e1 99       	sbic	0x1c, 1	; 28
    2072:	fe cf       	rjmp	.-4      	; 0x2070 <eeprom_read_byte>
    2074:	9f bb       	out	0x1f, r25	; 31
    2076:	8e bb       	out	0x1e, r24	; 30
    2078:	e0 9a       	sbi	0x1c, 0	; 28
    207a:	99 27       	eor	r25, r25
    207c:	8d b3       	in	r24, 0x1d	; 29
    207e:	08 95       	ret

00002080 <eeprom_update_byte>:
    2080:	26 2f       	mov	r18, r22

00002082 <eeprom_update_r18>:
    2082:	e1 99       	sbic	0x1c, 1	; 28
    2084:	fe cf       	rjmp	.-4      	; 0x2082 <eeprom_update_r18>
    2086:	9f bb       	out	0x1f, r25	; 31
    2088:	8e bb       	out	0x1e, r24	; 30
    208a:	e0 9a       	sbi	0x1c, 0	; 28
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	0d b2       	in	r0, 0x1d	; 29
    2090:	02 16       	cp	r0, r18
    2092:	31 f0       	breq	.+12     	; 0x20a0 <eeprom_update_r18+0x1e>
    2094:	2d bb       	out	0x1d, r18	; 29
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	e2 9a       	sbi	0x1c, 2	; 28
    209c:	e1 9a       	sbi	0x1c, 1	; 28
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	08 95       	ret

000020a2 <_exit>:
    20a2:	f8 94       	cli

000020a4 <__stop_program>:
    20a4:	ff cf       	rjmp	.-2      	; 0x20a4 <__stop_program>
