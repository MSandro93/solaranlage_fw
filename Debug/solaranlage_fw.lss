
solaranlage_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  000016a2  00001736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  008000e8  008000e8  000017be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000181c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001858  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f4d  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a33  00000000  00000000  00002955  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001714  00000000  00000000  00003388  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00004a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006ee6  00000000  00000000  00004fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4f  00000000  00000000  0000bece  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000c91d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d3b  00000000  00000000  0000ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ed 01 	jmp	0x3da	; 0x3da <__vector_1>
       8:	0c 94 3f 02 	jmp	0x47e	; 0x47e <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ad 04 	jmp	0x95a	; 0x95a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 30       	cpi	r26, 0x03	; 3
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 02 	call	0x53c	; 0x53c <main>
      8a:	0c 94 4f 0b 	jmp	0x169e	; 0x169e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SevenSeg_init>:
uint8_t kessel_anzeige = 0;
uint8_t on = 0;


void SevenSeg_init()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);	//enable overflow-interrupt
      9a:	89 e5       	ldi	r24, 0x59	; 89
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	29 e5       	ldi	r18, 0x59	; 89
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	f9 01       	movw	r30, r18
      a4:	20 81       	ld	r18, Z
      a6:	21 60       	ori	r18, 0x01	; 1
      a8:	fc 01       	movw	r30, r24
      aa:	20 83       	st	Z, r18
	
	sei();
      ac:	78 94       	sei
}
      ae:	00 00       	nop
      b0:	df 91       	pop	r29
      b2:	cf 91       	pop	r28
      b4:	08 95       	ret

000000b6 <SevenSeg_set_val>:

//seg: 1=dach; 0=kessel;   val: 0-9: 0-9; 10: off
void SevenSeg_set_val(uint8_t seg, uint16_t val)
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	00 d0       	rcall	.+0      	; 0xbc <SevenSeg_set_val+0x6>
      bc:	00 d0       	rcall	.+0      	; 0xbe <SevenSeg_set_val+0x8>
      be:	00 d0       	rcall	.+0      	; 0xc0 <SevenSeg_set_val+0xa>
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	8c 83       	std	Y+4, r24	; 0x04
      c6:	7e 83       	std	Y+6, r23	; 0x06
      c8:	6d 83       	std	Y+5, r22	; 0x05
	if(seg==1)
      ca:	8c 81       	ldd	r24, Y+4	; 0x04
      cc:	81 30       	cpi	r24, 0x01	; 1
      ce:	f1 f4       	brne	.+60     	; 0x10c <SevenSeg_set_val+0x56>
	{
		dach_anzeige = val;
      d0:	8d 81       	ldd	r24, Y+5	; 0x05
      d2:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <dach_anzeige>
		if (val!=dach_anzeige)
      d6:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <dach_anzeige>
      da:	28 2f       	mov	r18, r24
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	8d 81       	ldd	r24, Y+5	; 0x05
      e0:	9e 81       	ldd	r25, Y+6	; 0x06
      e2:	28 17       	cp	r18, r24
      e4:	39 07       	cpc	r19, r25
      e6:	91 f1       	breq	.+100    	; 0x14c <SevenSeg_set_val+0x96>
			printf("segment 'dach' set to %d\n", val);
      e8:	8e 81       	ldd	r24, Y+6	; 0x06
      ea:	8f 93       	push	r24
      ec:	8d 81       	ldd	r24, Y+5	; 0x05
      ee:	8f 93       	push	r24
      f0:	89 e7       	ldi	r24, 0x79	; 121
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	89 2f       	mov	r24, r25
      f6:	8f 93       	push	r24
      f8:	89 e7       	ldi	r24, 0x79	; 121
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	8f 93       	push	r24
      fe:	0e 94 28 08 	call	0x1050	; 0x1050 <printf>
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	20 c0       	rjmp	.+64     	; 0x14c <SevenSeg_set_val+0x96>
	}
	else if(seg==0)
     10c:	8c 81       	ldd	r24, Y+4	; 0x04
     10e:	88 23       	and	r24, r24
     110:	e9 f4       	brne	.+58     	; 0x14c <SevenSeg_set_val+0x96>
	{
		kessel_anzeige = val;
     112:	8d 81       	ldd	r24, Y+5	; 0x05
     114:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <kessel_anzeige>
		if(val!=kessel_anzeige)
     118:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <kessel_anzeige>
     11c:	28 2f       	mov	r18, r24
     11e:	30 e0       	ldi	r19, 0x00	; 0
     120:	8d 81       	ldd	r24, Y+5	; 0x05
     122:	9e 81       	ldd	r25, Y+6	; 0x06
     124:	28 17       	cp	r18, r24
     126:	39 07       	cpc	r19, r25
     128:	89 f0       	breq	.+34     	; 0x14c <SevenSeg_set_val+0x96>
			printf("segment 'kessel' set to %d\n", val);
     12a:	8e 81       	ldd	r24, Y+6	; 0x06
     12c:	8f 93       	push	r24
     12e:	8d 81       	ldd	r24, Y+5	; 0x05
     130:	8f 93       	push	r24
     132:	83 e9       	ldi	r24, 0x93	; 147
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	89 2f       	mov	r24, r25
     138:	8f 93       	push	r24
     13a:	83 e9       	ldi	r24, 0x93	; 147
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	8f 93       	push	r24
     140:	0e 94 28 08 	call	0x1050	; 0x1050 <printf>
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	0f 90       	pop	r0
	}
	
	uint8_t h = (uint8_t) (val/100);
     14c:	8d 81       	ldd	r24, Y+5	; 0x05
     14e:	9e 81       	ldd	r25, Y+6	; 0x06
     150:	96 95       	lsr	r25
     152:	87 95       	ror	r24
     154:	96 95       	lsr	r25
     156:	87 95       	ror	r24
     158:	9c 01       	movw	r18, r24
     15a:	ab e7       	ldi	r26, 0x7B	; 123
     15c:	b4 e1       	ldi	r27, 0x14	; 20
     15e:	0e 94 19 08 	call	0x1032	; 0x1032 <__umulhisi3>
     162:	96 95       	lsr	r25
     164:	87 95       	ror	r24
     166:	89 83       	std	Y+1, r24	; 0x01
	uint8_t z = (uint8_t) ((val- (h*100)) / 10 );
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	88 2f       	mov	r24, r24
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	4c e9       	ldi	r20, 0x9C	; 156
     170:	bc 01       	movw	r22, r24
     172:	46 03       	mulsu	r20, r22
     174:	90 01       	movw	r18, r0
     176:	47 9f       	mul	r20, r23
     178:	30 0d       	add	r19, r0
     17a:	11 24       	eor	r1, r1
     17c:	8d 81       	ldd	r24, Y+5	; 0x05
     17e:	9e 81       	ldd	r25, Y+6	; 0x06
     180:	82 0f       	add	r24, r18
     182:	93 1f       	adc	r25, r19
     184:	9c 01       	movw	r18, r24
     186:	ad ec       	ldi	r26, 0xCD	; 205
     188:	bc ec       	ldi	r27, 0xCC	; 204
     18a:	0e 94 19 08 	call	0x1032	; 0x1032 <__umulhisi3>
     18e:	96 95       	lsr	r25
     190:	87 95       	ror	r24
     192:	96 95       	lsr	r25
     194:	87 95       	ror	r24
     196:	96 95       	lsr	r25
     198:	87 95       	ror	r24
     19a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t e = (uint8_t)  (val- (h*100)- (z*10));
     19c:	9d 81       	ldd	r25, Y+5	; 0x05
     19e:	29 81       	ldd	r18, Y+1	; 0x01
     1a0:	84 e6       	ldi	r24, 0x64	; 100
     1a2:	28 9f       	mul	r18, r24
     1a4:	80 2d       	mov	r24, r0
     1a6:	11 24       	eor	r1, r1
     1a8:	98 1b       	sub	r25, r24
     1aa:	8a 81       	ldd	r24, Y+2	; 0x02
     1ac:	88 0f       	add	r24, r24
     1ae:	28 2f       	mov	r18, r24
     1b0:	22 0f       	add	r18, r18
     1b2:	22 0f       	add	r18, r18
     1b4:	82 0f       	add	r24, r18
     1b6:	79 2f       	mov	r23, r25
     1b8:	78 1b       	sub	r23, r24
     1ba:	87 2f       	mov	r24, r23
     1bc:	8b 83       	std	Y+3, r24	; 0x03
	
	if(val==1000)
     1be:	8d 81       	ldd	r24, Y+5	; 0x05
     1c0:	9e 81       	ldd	r25, Y+6	; 0x06
     1c2:	88 3e       	cpi	r24, 0xE8	; 232
     1c4:	93 40       	sbci	r25, 0x03	; 3
     1c6:	39 f5       	brne	.+78     	; 0x216 <SevenSeg_set_val+0x160>
	{
		segs[seg]   = 10;
     1c8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ca:	88 2f       	mov	r24, r24
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	88 51       	subi	r24, 0x18	; 24
     1d4:	9f 4f       	sbci	r25, 0xFF	; 255
     1d6:	2a e0       	ldi	r18, 0x0A	; 10
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	fc 01       	movw	r30, r24
     1dc:	31 83       	std	Z+1, r19	; 0x01
     1de:	20 83       	st	Z, r18
		segs[seg+2] = 10;
     1e0:	8c 81       	ldd	r24, Y+4	; 0x04
     1e2:	88 2f       	mov	r24, r24
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	02 96       	adiw	r24, 0x02	; 2
     1e8:	88 0f       	add	r24, r24
     1ea:	99 1f       	adc	r25, r25
     1ec:	88 51       	subi	r24, 0x18	; 24
     1ee:	9f 4f       	sbci	r25, 0xFF	; 255
     1f0:	2a e0       	ldi	r18, 0x0A	; 10
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	fc 01       	movw	r30, r24
     1f6:	31 83       	std	Z+1, r19	; 0x01
     1f8:	20 83       	st	Z, r18
		segs[seg+4] = 10;
     1fa:	8c 81       	ldd	r24, Y+4	; 0x04
     1fc:	88 2f       	mov	r24, r24
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	04 96       	adiw	r24, 0x04	; 4
     202:	88 0f       	add	r24, r24
     204:	99 1f       	adc	r25, r25
     206:	88 51       	subi	r24, 0x18	; 24
     208:	9f 4f       	sbci	r25, 0xFF	; 255
     20a:	2a e0       	ldi	r18, 0x0A	; 10
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	fc 01       	movw	r30, r24
     210:	31 83       	std	Z+1, r19	; 0x01
     212:	20 83       	st	Z, r18
		return;
     214:	29 c0       	rjmp	.+82     	; 0x268 <SevenSeg_set_val+0x1b2>
	}
	
	segs[seg]   = e;
     216:	8c 81       	ldd	r24, Y+4	; 0x04
     218:	88 2f       	mov	r24, r24
     21a:	90 e0       	ldi	r25, 0x00	; 0
     21c:	2b 81       	ldd	r18, Y+3	; 0x03
     21e:	22 2f       	mov	r18, r18
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	88 51       	subi	r24, 0x18	; 24
     228:	9f 4f       	sbci	r25, 0xFF	; 255
     22a:	fc 01       	movw	r30, r24
     22c:	31 83       	std	Z+1, r19	; 0x01
     22e:	20 83       	st	Z, r18
	segs[seg+2] = z;
     230:	8c 81       	ldd	r24, Y+4	; 0x04
     232:	88 2f       	mov	r24, r24
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	02 96       	adiw	r24, 0x02	; 2
     238:	2a 81       	ldd	r18, Y+2	; 0x02
     23a:	22 2f       	mov	r18, r18
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	88 0f       	add	r24, r24
     240:	99 1f       	adc	r25, r25
     242:	88 51       	subi	r24, 0x18	; 24
     244:	9f 4f       	sbci	r25, 0xFF	; 255
     246:	fc 01       	movw	r30, r24
     248:	31 83       	std	Z+1, r19	; 0x01
     24a:	20 83       	st	Z, r18
	segs[seg+4] = h;
     24c:	8c 81       	ldd	r24, Y+4	; 0x04
     24e:	88 2f       	mov	r24, r24
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	04 96       	adiw	r24, 0x04	; 4
     254:	29 81       	ldd	r18, Y+1	; 0x01
     256:	22 2f       	mov	r18, r18
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	88 51       	subi	r24, 0x18	; 24
     260:	9f 4f       	sbci	r25, 0xFF	; 255
     262:	fc 01       	movw	r30, r24
     264:	31 83       	std	Z+1, r19	; 0x01
     266:	20 83       	st	Z, r18
}
     268:	26 96       	adiw	r28, 0x06	; 6
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	f8 94       	cli
     26e:	de bf       	out	0x3e, r29	; 62
     270:	0f be       	out	0x3f, r0	; 63
     272:	cd bf       	out	0x3d, r28	; 61
     274:	df 91       	pop	r29
     276:	cf 91       	pop	r28
     278:	08 95       	ret

0000027a <__vector_11>:


ISR(TIMER0_OVF_vect)
{
     27a:	1f 92       	push	r1
     27c:	0f 92       	push	r0
     27e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     282:	0f 92       	push	r0
     284:	11 24       	eor	r1, r1
     286:	2f 93       	push	r18
     288:	3f 93       	push	r19
     28a:	8f 93       	push	r24
     28c:	9f 93       	push	r25
     28e:	ef 93       	push	r30
     290:	ff 93       	push	r31
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	1f 92       	push	r1
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
	cli();
     29c:	f8 94       	cli
	
	PORTB = patterns[segs[seg_cnt]];
     29e:	88 e3       	ldi	r24, 0x38	; 56
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <seg_cnt>
     2a6:	22 2f       	mov	r18, r18
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	22 0f       	add	r18, r18
     2ac:	33 1f       	adc	r19, r19
     2ae:	28 51       	subi	r18, 0x18	; 24
     2b0:	3f 4f       	sbci	r19, 0xFF	; 255
     2b2:	f9 01       	movw	r30, r18
     2b4:	20 81       	ld	r18, Z
     2b6:	31 81       	ldd	r19, Z+1	; 0x01
     2b8:	20 5a       	subi	r18, 0xA0	; 160
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
     2bc:	f9 01       	movw	r30, r18
     2be:	20 81       	ld	r18, Z
     2c0:	fc 01       	movw	r30, r24
     2c2:	20 83       	st	Z, r18
	
	uint8_t a = (uint8_t) (~(1<<(seg_cnt + 2)));
     2c4:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seg_cnt>
     2c8:	88 2f       	mov	r24, r24
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	9c 01       	movw	r18, r24
     2ce:	2e 5f       	subi	r18, 0xFE	; 254
     2d0:	3f 4f       	sbci	r19, 0xFF	; 255
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_11+0x62>
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	2a 95       	dec	r18
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_11+0x5e>
     2e0:	80 95       	com	r24
     2e2:	89 83       	std	Y+1, r24	; 0x01
	PORTA = a & 0xFC;  //mask to avoid the ADC-channels 0 an d1
     2e4:	8b e3       	ldi	r24, 0x3B	; 59
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	29 81       	ldd	r18, Y+1	; 0x01
     2ea:	2c 7f       	andi	r18, 0xFC	; 252
     2ec:	fc 01       	movw	r30, r24
     2ee:	20 83       	st	Z, r18
	seg_cnt ++;
     2f0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seg_cnt>
     2f4:	8f 5f       	subi	r24, 0xFF	; 255
     2f6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <seg_cnt>
	
	if(seg_cnt == 6)
     2fa:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <seg_cnt>
     2fe:	86 30       	cpi	r24, 0x06	; 6
     300:	11 f4       	brne	.+4      	; 0x306 <__vector_11+0x8c>
	{
		seg_cnt = 0;
     302:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <seg_cnt>
	}
	
	TIFR &= ~(1<<TOV0);
     306:	88 e5       	ldi	r24, 0x58	; 88
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	28 e5       	ldi	r18, 0x58	; 88
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	f9 01       	movw	r30, r18
     310:	20 81       	ld	r18, Z
     312:	2e 7f       	andi	r18, 0xFE	; 254
     314:	fc 01       	movw	r30, r24
     316:	20 83       	st	Z, r18
	
	sei();
     318:	78 94       	sei
}
     31a:	00 00       	nop
     31c:	0f 90       	pop	r0
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	ff 91       	pop	r31
     324:	ef 91       	pop	r30
     326:	9f 91       	pop	r25
     328:	8f 91       	pop	r24
     32a:	3f 91       	pop	r19
     32c:	2f 91       	pop	r18
     32e:	0f 90       	pop	r0
     330:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     334:	0f 90       	pop	r0
     336:	1f 90       	pop	r1
     338:	18 95       	reti

0000033a <SevenSeg_on>:


void SevenSeg_on()
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01) | (1<<CS00);		//setting prescaler to /256
     342:	83 e5       	ldi	r24, 0x53	; 83
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	23 e0       	ldi	r18, 0x03	; 3
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
	on = 1;
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <on>
}
     352:	00 00       	nop
     354:	df 91       	pop	r29
     356:	cf 91       	pop	r28
     358:	08 95       	ret

0000035a <SevenSeg_off>:

void SevenSeg_off()
{
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	cd b7       	in	r28, 0x3d	; 61
     360:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~((1<<CS01) | (1<<CS00));		//setting prescaler to /256
     362:	83 e5       	ldi	r24, 0x53	; 83
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	23 e5       	ldi	r18, 0x53	; 83
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	f9 01       	movw	r30, r18
     36c:	20 81       	ld	r18, Z
     36e:	2c 7f       	andi	r18, 0xFC	; 252
     370:	fc 01       	movw	r30, r24
     372:	20 83       	st	Z, r18
	PORTB = 0x00;
     374:	88 e3       	ldi	r24, 0x38	; 56
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	fc 01       	movw	r30, r24
     37a:	10 82       	st	Z, r1
	PORTA = 0xFC;
     37c:	8b e3       	ldi	r24, 0x3B	; 59
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	2c ef       	ldi	r18, 0xFC	; 252
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
	on = 0;
     386:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <on>
}
     38a:	00 00       	nop
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <Encoder_init>:

uint8_t selected_seg = 1;


void Encoder_init()
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	cd b7       	in	r28, 0x3d	; 61
     398:	de b7       	in	r29, 0x3e	; 62
	ENC_PORT &= ~((1<<ENC_A_PIN) | (1<<ENC_A_PIN));							//setting encoder terminals to input
     39a:	82 e3       	ldi	r24, 0x32	; 50
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	22 e3       	ldi	r18, 0x32	; 50
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	f9 01       	movw	r30, r18
     3a4:	20 81       	ld	r18, Z
     3a6:	2b 7f       	andi	r18, 0xFB	; 251
     3a8:	fc 01       	movw	r30, r24
     3aa:	20 83       	st	Z, r18
	MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11);				//setting ext-int0 to sensitive at rising edge
     3ac:	85 e5       	ldi	r24, 0x55	; 85
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	25 e5       	ldi	r18, 0x55	; 85
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	f9 01       	movw	r30, r18
     3b6:	20 81       	ld	r18, Z
     3b8:	2b 60       	ori	r18, 0x0B	; 11
     3ba:	fc 01       	movw	r30, r24
     3bc:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1);											//enable external interrupt 0 (ENC_A_PIN)
     3be:	8b e5       	ldi	r24, 0x5B	; 91
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	2b e5       	ldi	r18, 0x5B	; 91
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	f9 01       	movw	r30, r18
     3c8:	20 81       	ld	r18, Z
     3ca:	20 6c       	ori	r18, 0xC0	; 192
     3cc:	fc 01       	movw	r30, r24
     3ce:	20 83       	st	Z, r18
	sei();
     3d0:	78 94       	sei
}
     3d2:	00 00       	nop
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret

000003da <__vector_1>:



ISR(INT0_vect)
{	
     3da:	1f 92       	push	r1
     3dc:	0f 92       	push	r0
     3de:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
     3e6:	2f 93       	push	r18
     3e8:	3f 93       	push	r19
     3ea:	4f 93       	push	r20
     3ec:	5f 93       	push	r21
     3ee:	6f 93       	push	r22
     3f0:	7f 93       	push	r23
     3f2:	8f 93       	push	r24
     3f4:	9f 93       	push	r25
     3f6:	af 93       	push	r26
     3f8:	bf 93       	push	r27
     3fa:	ef 93       	push	r30
     3fc:	ff 93       	push	r31
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
	cli();
     406:	f8 94       	cli
	
	switch(getState())
     408:	0e 94 48 03 	call	0x690	; 0x690 <getState>
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	03 97       	sbiw	r24, 0x03	; 3
     412:	09 f0       	breq	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			{				
				inc_delta();
			}
		}
		default:
			break;
     414:	10 c0       	rjmp	.+32     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	
	switch(getState())
	{
		case 3:	
		{	
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     416:	80 e3       	ldi	r24, 0x30	; 48
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	fc 01       	movw	r30, r24
     41c:	80 81       	ld	r24, Z
     41e:	88 2f       	mov	r24, r24
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	80 71       	andi	r24, 0x10	; 16
     424:	99 27       	eor	r25, r25
     426:	18 16       	cp	r1, r24
     428:	19 06       	cpc	r1, r25
     42a:	1c f4       	brge	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
			{
				dec_delta();
     42c:	0e 94 99 03 	call	0x732	; 0x732 <dec_delta>
			{				
				inc_delta();
			}
		}
		default:
			break;
     430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
			{
				dec_delta();
			}		
			else									//im Uhrzeigersinn
			{				
				inc_delta();
     432:	0e 94 88 03 	call	0x710	; 0x710 <inc_delta>
			}
		}
		default:
			break;
     436:	00 00       	nop
	}
	
	stop_timeout_timer();
     438:	0e 94 15 05 	call	0xa2a	; 0xa2a <stop_timeout_timer>
	start_timeout_timer();
     43c:	0e 94 03 05 	call	0xa06	; 0xa06 <start_timeout_timer>
	
	
	GIFR &= ~(1<<INTF0);  //clear ext-interrupt-0 flag
     440:	8a e5       	ldi	r24, 0x5A	; 90
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	2a e5       	ldi	r18, 0x5A	; 90
     446:	30 e0       	ldi	r19, 0x00	; 0
     448:	f9 01       	movw	r30, r18
     44a:	20 81       	ld	r18, Z
     44c:	2f 7b       	andi	r18, 0xBF	; 191
     44e:	fc 01       	movw	r30, r24
     450:	20 83       	st	Z, r18
	
	sei();
     452:	78 94       	sei
}
     454:	00 00       	nop
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	ff 91       	pop	r31
     45c:	ef 91       	pop	r30
     45e:	bf 91       	pop	r27
     460:	af 91       	pop	r26
     462:	9f 91       	pop	r25
     464:	8f 91       	pop	r24
     466:	7f 91       	pop	r23
     468:	6f 91       	pop	r22
     46a:	5f 91       	pop	r21
     46c:	4f 91       	pop	r20
     46e:	3f 91       	pop	r19
     470:	2f 91       	pop	r18
     472:	0f 90       	pop	r0
     474:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <__vector_2>:

ISR(INT1_vect)  //if the encoder got pushed
{
     47e:	1f 92       	push	r1
     480:	0f 92       	push	r0
     482:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     486:	0f 92       	push	r0
     488:	11 24       	eor	r1, r1
     48a:	1f 93       	push	r17
     48c:	2f 93       	push	r18
     48e:	3f 93       	push	r19
     490:	4f 93       	push	r20
     492:	5f 93       	push	r21
     494:	6f 93       	push	r22
     496:	7f 93       	push	r23
     498:	8f 93       	push	r24
     49a:	9f 93       	push	r25
     49c:	af 93       	push	r26
     49e:	bf 93       	push	r27
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
	cli();
     4ac:	f8 94       	cli
	
	switch(getState())
     4ae:	0e 94 48 03 	call	0x690	; 0x690 <getState>
     4b2:	88 2f       	mov	r24, r24
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	82 30       	cpi	r24, 0x02	; 2
     4b8:	91 05       	cpc	r25, r1
     4ba:	59 f0       	breq	.+22     	; 0x4d2 <__vector_2+0x54>
     4bc:	83 30       	cpi	r24, 0x03	; 3
     4be:	91 05       	cpc	r25, r1
     4c0:	71 f0       	breq	.+28     	; 0x4de <__vector_2+0x60>
     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	21 f5       	brne	.+72     	; 0x50e <__vector_2+0x90>
	{
		case 1:
		{
			setState(2);
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	0e 94 26 03 	call	0x64c	; 0x64c <setState>
			start_timeout_timer();
     4cc:	0e 94 03 05 	call	0xa06	; 0xa06 <start_timeout_timer>
			break;
     4d0:	1e c0       	rjmp	.+60     	; 0x50e <__vector_2+0x90>
		}
		case 2:
		{
			setState(3);
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	0e 94 26 03 	call	0x64c	; 0x64c <setState>
			start_timeout_timer();
     4d8:	0e 94 03 05 	call	0xa06	; 0xa06 <start_timeout_timer>
			break;
     4dc:	18 c0       	rjmp	.+48     	; 0x50e <__vector_2+0x90>
		}
		case 3:
		{
			if((getState() == 3) && (eeprom_read_byte(0) != get_delta()))
     4de:	0e 94 48 03 	call	0x690	; 0x690 <getState>
     4e2:	83 30       	cpi	r24, 0x03	; 3
     4e4:	81 f4       	brne	.+32     	; 0x506 <__vector_2+0x88>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <eeprom_read_byte>
     4ee:	18 2f       	mov	r17, r24
     4f0:	0e 94 aa 03 	call	0x754	; 0x754 <get_delta>
     4f4:	18 17       	cp	r17, r24
     4f6:	39 f0       	breq	.+14     	; 0x506 <__vector_2+0x88>
			{
				eeprom_update_byte(0, get_delta());
     4f8:	0e 94 aa 03 	call	0x754	; 0x754 <get_delta>
     4fc:	68 2f       	mov	r22, r24
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 07 0b 	call	0x160e	; 0x160e <eeprom_update_byte>
			}
			setState(2);
     506:	82 e0       	ldi	r24, 0x02	; 2
     508:	0e 94 26 03 	call	0x64c	; 0x64c <setState>
			break;
     50c:	00 00       	nop
		}
	}
	
	sei();
     50e:	78 94       	sei
     510:	00 00       	nop
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	ff 91       	pop	r31
     518:	ef 91       	pop	r30
     51a:	bf 91       	pop	r27
     51c:	af 91       	pop	r26
     51e:	9f 91       	pop	r25
     520:	8f 91       	pop	r24
     522:	7f 91       	pop	r23
     524:	6f 91       	pop	r22
     526:	5f 91       	pop	r21
     528:	4f 91       	pop	r20
     52a:	3f 91       	pop	r19
     52c:	2f 91       	pop	r18
     52e:	1f 91       	pop	r17
     530:	0f 90       	pop	r0
     532:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     536:	0f 90       	pop	r0
     538:	1f 90       	pop	r1
     53a:	18 95       	reti

0000053c <main>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);



int main(void)
{
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	cd b7       	in	r28, 0x3d	; 61
     542:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
     544:	8b e3       	ldi	r24, 0x3B	; 59
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	fc 01       	movw	r30, r24
     54a:	10 82       	st	Z, r1
	PORTB = 0x00;
     54c:	88 e3       	ldi	r24, 0x38	; 56
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	fc 01       	movw	r30, r24
     552:	10 82       	st	Z, r1
	
	DDRA = 0xFC;
     554:	8a e3       	ldi	r24, 0x3A	; 58
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	2c ef       	ldi	r18, 0xFC	; 252
     55a:	fc 01       	movw	r30, r24
     55c:	20 83       	st	Z, r18
	DDRB = 0xFF;
     55e:	87 e3       	ldi	r24, 0x37	; 55
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	2f ef       	ldi	r18, 0xFF	; 255
     564:	fc 01       	movw	r30, r24
     566:	20 83       	st	Z, r18
	DDRC |= (1<<WDI_PIN);
     568:	84 e3       	ldi	r24, 0x34	; 52
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	24 e3       	ldi	r18, 0x34	; 52
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	f9 01       	movw	r30, r18
     572:	20 81       	ld	r18, Z
     574:	20 64       	ori	r18, 0x40	; 64
     576:	fc 01       	movw	r30, r24
     578:	20 83       	st	Z, r18
	DDRD |= (1<<PD5);
     57a:	81 e3       	ldi	r24, 0x31	; 49
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	21 e3       	ldi	r18, 0x31	; 49
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	f9 01       	movw	r30, r18
     584:	20 81       	ld	r18, Z
     586:	20 62       	ori	r18, 0x20	; 32
     588:	fc 01       	movw	r30, r24
     58a:	20 83       	st	Z, r18
	
	uart_init(0);
     58c:	80 e0       	ldi	r24, 0x00	; 0
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0e 94 71 05 	call	0xae2	; 0xae2 <uart_init>
	
	
	stdout = &mystdout;
     594:	8b e6       	ldi	r24, 0x6B	; 107
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__iob+0x3>
     59c:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <__iob+0x2>
	
	printf("startup!\n");
     5a0:	8f ea       	ldi	r24, 0xAF	; 175
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 3e 08 	call	0x107c	; 0x107c <puts>
	
	
	regulator_init();
     5a8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <regulator_init>
	
	SevenSeg_init();
     5ac:	0e 94 49 00 	call	0x92	; 0x92 <SevenSeg_init>
	
//	Timeout_init();
	Encoder_init();
     5b0:	0e 94 c9 01 	call	0x392	; 0x392 <Encoder_init>
	
    /* Replace with your application code */
    while (1) 
    {
		switch(state)
     5b4:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <state>
     5b8:	88 2f       	mov	r24, r24
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	91 05       	cpc	r25, r1
     5c0:	91 f0       	breq	.+36     	; 0x5e6 <main+0xaa>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	91 05       	cpc	r25, r1
     5c6:	1c f4       	brge	.+6      	; 0x5ce <main+0x92>
     5c8:	89 2b       	or	r24, r25
     5ca:	39 f0       	breq	.+14     	; 0x5da <main+0x9e>
     5cc:	34 c0       	rjmp	.+104    	; 0x636 <main+0xfa>
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	91 05       	cpc	r25, r1
     5d2:	61 f0       	breq	.+24     	; 0x5ec <main+0xb0>
     5d4:	03 97       	sbiw	r24, 0x03	; 3
     5d6:	f9 f0       	breq	.+62     	; 0x616 <main+0xda>
     5d8:	2e c0       	rjmp	.+92     	; 0x636 <main+0xfa>
		{
			case 0:
			{
				SevenSeg_off();
     5da:	0e 94 ad 01 	call	0x35a	; 0x35a <SevenSeg_off>
				setState(1);
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 26 03 	call	0x64c	; 0x64c <setState>
				break;
     5e4:	28 c0       	rjmp	.+80     	; 0x636 <main+0xfa>
			}
			
			case 1:
			{
				SevenSeg_off();
     5e6:	0e 94 ad 01 	call	0x35a	; 0x35a <SevenSeg_off>
				break;
     5ea:	25 c0       	rjmp	.+74     	; 0x636 <main+0xfa>
			}
				
			case 2:
			{
				SevenSeg_set_val(1, get_temp(1));
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 96 04 	call	0x92c	; 0x92c <get_temp>
     5f2:	88 2f       	mov	r24, r24
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	bc 01       	movw	r22, r24
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, get_temp(0));
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0e 94 96 04 	call	0x92c	; 0x92c <get_temp>
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	bc 01       	movw	r22, r24
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_on();
     610:	0e 94 9d 01 	call	0x33a	; 0x33a <SevenSeg_on>
				break;
     614:	10 c0       	rjmp	.+32     	; 0x636 <main+0xfa>
			}
			
			case 3: 
			{
				SevenSeg_set_val(1, get_delta());
     616:	0e 94 aa 03 	call	0x754	; 0x754 <get_delta>
     61a:	88 2f       	mov	r24, r24
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	bc 01       	movw	r22, r24
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_set_val(0, 1000); //set Kessel-display off
     626:	68 ee       	ldi	r22, 0xE8	; 232
     628:	73 e0       	ldi	r23, 0x03	; 3
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
				SevenSeg_on();
     630:	0e 94 9d 01 	call	0x33a	; 0x33a <SevenSeg_on>
				break;
     634:	00 00       	nop
			}
		}
		
		WDI_PORT ^= (1<<WDI_PIN);
     636:	85 e3       	ldi	r24, 0x35	; 53
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	25 e3       	ldi	r18, 0x35	; 53
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	f9 01       	movw	r30, r18
     640:	30 81       	ld	r19, Z
     642:	20 e4       	ldi	r18, 0x40	; 64
     644:	23 27       	eor	r18, r19
     646:	fc 01       	movw	r30, r24
     648:	20 83       	st	Z, r18
    }
     64a:	b4 cf       	rjmp	.-152    	; 0x5b4 <main+0x78>

0000064c <setState>:
}

void setState(uint8_t s)
{
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	1f 92       	push	r1
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	89 83       	std	Y+1, r24	; 0x01
	state = s;
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <state>
	printf("state -> %d\n", state);
     65e:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <state>
     662:	88 2f       	mov	r24, r24
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	29 2f       	mov	r18, r25
     668:	2f 93       	push	r18
     66a:	8f 93       	push	r24
     66c:	88 eb       	ldi	r24, 0xB8	; 184
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	89 2f       	mov	r24, r25
     672:	8f 93       	push	r24
     674:	88 eb       	ldi	r24, 0xB8	; 184
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	8f 93       	push	r24
     67a:	0e 94 28 08 	call	0x1050	; 0x1050 <printf>
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
}
     686:	00 00       	nop
     688:	0f 90       	pop	r0
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <getState>:

uint8_t getState()
{
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
	return state;
     698:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <state>
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <regulator_init>:
}

void disable_show_temps(void)
{
	show_temps = 0;
}
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <eeprom_read_byte>
     6b2:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <delta>
     6b6:	87 e2       	ldi	r24, 0x27	; 39
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	fc 01       	movw	r30, r24
     6bc:	10 82       	st	Z, r1
     6be:	87 e2       	ldi	r24, 0x27	; 39
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	27 e2       	ldi	r18, 0x27	; 39
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	f9 01       	movw	r30, r18
     6c8:	20 81       	ld	r18, Z
     6ca:	2f 7d       	andi	r18, 0xDF	; 223
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 83       	st	Z, r18
     6d0:	86 e2       	ldi	r24, 0x26	; 38
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	26 e2       	ldi	r18, 0x26	; 38
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	f9 01       	movw	r30, r18
     6da:	20 81       	ld	r18, Z
     6dc:	20 68       	ori	r18, 0x80	; 128
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
     6e2:	85 e4       	ldi	r24, 0x45	; 69
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	25 e4       	ldi	r18, 0x45	; 69
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	f9 01       	movw	r30, r18
     6ec:	20 81       	ld	r18, Z
     6ee:	27 60       	ori	r18, 0x07	; 7
     6f0:	fc 01       	movw	r30, r24
     6f2:	20 83       	st	Z, r18
     6f4:	89 e5       	ldi	r24, 0x59	; 89
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	29 e5       	ldi	r18, 0x59	; 89
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	20 64       	ori	r18, 0x40	; 64
     702:	fc 01       	movw	r30, r24
     704:	20 83       	st	Z, r18
     706:	78 94       	sei
     708:	00 00       	nop
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	08 95       	ret

00000710 <inc_delta>:

void inc_delta()
{
     710:	cf 93       	push	r28
     712:	df 93       	push	r29
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
	if(delta<100)
     718:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <delta>
     71c:	84 36       	cpi	r24, 0x64	; 100
     71e:	28 f4       	brcc	.+10     	; 0x72a <inc_delta+0x1a>
		delta++;
     720:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <delta>
     724:	8f 5f       	subi	r24, 0xFF	; 255
     726:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <delta>
}
     72a:	00 00       	nop
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <dec_delta>:

void dec_delta()
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
	if(delta>0)
     73a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <delta>
     73e:	88 23       	and	r24, r24
     740:	29 f0       	breq	.+10     	; 0x74c <dec_delta+0x1a>
		delta --;
     742:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <delta>
     746:	81 50       	subi	r24, 0x01	; 1
     748:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <delta>
}
     74c:	00 00       	nop
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <get_delta>:

uint8_t get_delta()
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
	return delta;
     75c:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <delta>
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <measure_temp>:


//sensor: 1=dach; 0=kessel
uint8_t measure_temp(uint8_t sensor)
{
     766:	cf 92       	push	r12
     768:	df 92       	push	r13
     76a:	ef 92       	push	r14
     76c:	ff 92       	push	r15
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	2c 97       	sbiw	r28, 0x0c	; 12
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	8c 87       	std	Y+12, r24	; 0x0c
	ADMUX &= ~0x1F; //clear MUX4:0
     784:	87 e2       	ldi	r24, 0x27	; 39
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	27 e2       	ldi	r18, 0x27	; 39
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	f9 01       	movw	r30, r18
     78e:	20 81       	ld	r18, Z
     790:	20 7e       	andi	r18, 0xE0	; 224
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18
	
	if(sensor == 0)
     796:	8c 85       	ldd	r24, Y+12	; 0x0c
     798:	88 23       	and	r24, r24
     79a:	49 f4       	brne	.+18     	; 0x7ae <measure_temp+0x48>
		ADMUX |= (1<<MUX0);	//set ADC to CH1
     79c:	87 e2       	ldi	r24, 0x27	; 39
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	27 e2       	ldi	r18, 0x27	; 39
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	f9 01       	movw	r30, r18
     7a6:	20 81       	ld	r18, Z
     7a8:	21 60       	ori	r18, 0x01	; 1
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
		
	ADCSRA |= (1<<ADSC);				  //start conversion
     7ae:	86 e2       	ldi	r24, 0x26	; 38
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	26 e2       	ldi	r18, 0x26	; 38
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	20 64       	ori	r18, 0x40	; 64
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
	
	while( (ADCSRA & (1<<ADSC)) > 0 ) //wait for end of conversion
     7c0:	00 00       	nop
     7c2:	86 e2       	ldi	r24, 0x26	; 38
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	fc 01       	movw	r30, r24
     7c8:	80 81       	ld	r24, Z
     7ca:	88 2f       	mov	r24, r24
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	80 74       	andi	r24, 0x40	; 64
     7d0:	99 27       	eor	r25, r25
     7d2:	18 16       	cp	r1, r24
     7d4:	19 06       	cpc	r1, r25
     7d6:	ac f3       	brlt	.-22     	; 0x7c2 <measure_temp+0x5c>
	{
	}
	
	uint16_t adc_val = ADCL;
     7d8:	84 e2       	ldi	r24, 0x24	; 36
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	fc 01       	movw	r30, r24
     7de:	80 81       	ld	r24, Z
     7e0:	88 2f       	mov	r24, r24
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	9a 83       	std	Y+2, r25	; 0x02
     7e6:	89 83       	std	Y+1, r24	; 0x01
	adc_val += (ADCH<<8);
     7e8:	85 e2       	ldi	r24, 0x25	; 37
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	fc 01       	movw	r30, r24
     7ee:	80 81       	ld	r24, Z
     7f0:	88 2f       	mov	r24, r24
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	98 2f       	mov	r25, r24
     7f6:	88 27       	eor	r24, r24
     7f8:	9c 01       	movw	r18, r24
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	9a 81       	ldd	r25, Y+2	; 0x02
     7fe:	82 0f       	add	r24, r18
     800:	93 1f       	adc	r25, r19
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	89 83       	std	Y+1, r24	; 0x01
	
	
	float voltage = adc_val * 4.8828e-3f;
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	9a 81       	ldd	r25, Y+2	; 0x02
     80a:	cc 01       	movw	r24, r24
     80c:	a0 e0       	ldi	r26, 0x00	; 0
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	bc 01       	movw	r22, r24
     812:	cd 01       	movw	r24, r26
     814:	0e 94 d1 06 	call	0xda2	; 0xda2 <__floatunsisf>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	25 ee       	ldi	r18, 0xE5	; 229
     81e:	3f ef       	ldi	r19, 0xFF	; 255
     820:	4f e9       	ldi	r20, 0x9F	; 159
     822:	5b e3       	ldi	r21, 0x3B	; 59
     824:	bc 01       	movw	r22, r24
     826:	cd 01       	movw	r24, r26
     828:	0e 94 5f 07 	call	0xebe	; 0xebe <__mulsf3>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	8b 83       	std	Y+3, r24	; 0x03
     832:	9c 83       	std	Y+4, r25	; 0x04
     834:	ad 83       	std	Y+5, r26	; 0x05
     836:	be 83       	std	Y+6, r27	; 0x06
	
	float temp_f = 2.5f*((1000*voltage)/(5-voltage)) - 251.75f;
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	4a e7       	ldi	r20, 0x7A	; 122
     83e:	54 e4       	ldi	r21, 0x44	; 68
     840:	6b 81       	ldd	r22, Y+3	; 0x03
     842:	7c 81       	ldd	r23, Y+4	; 0x04
     844:	8d 81       	ldd	r24, Y+5	; 0x05
     846:	9e 81       	ldd	r25, Y+6	; 0x06
     848:	0e 94 5f 07 	call	0xebe	; 0xebe <__mulsf3>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	6c 01       	movw	r12, r24
     852:	7d 01       	movw	r14, r26
     854:	2b 81       	ldd	r18, Y+3	; 0x03
     856:	3c 81       	ldd	r19, Y+4	; 0x04
     858:	4d 81       	ldd	r20, Y+5	; 0x05
     85a:	5e 81       	ldd	r21, Y+6	; 0x06
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	80 ea       	ldi	r24, 0xA0	; 160
     862:	90 e4       	ldi	r25, 0x40	; 64
     864:	0e 94 c3 05 	call	0xb86	; 0xb86 <__subsf3>
     868:	dc 01       	movw	r26, r24
     86a:	cb 01       	movw	r24, r22
     86c:	9c 01       	movw	r18, r24
     86e:	ad 01       	movw	r20, r26
     870:	c7 01       	movw	r24, r14
     872:	b6 01       	movw	r22, r12
     874:	0e 94 30 06 	call	0xc60	; 0xc60 <__divsf3>
     878:	dc 01       	movw	r26, r24
     87a:	cb 01       	movw	r24, r22
     87c:	20 e0       	ldi	r18, 0x00	; 0
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	40 e2       	ldi	r20, 0x20	; 32
     882:	50 e4       	ldi	r21, 0x40	; 64
     884:	bc 01       	movw	r22, r24
     886:	cd 01       	movw	r24, r26
     888:	0e 94 5f 07 	call	0xebe	; 0xebe <__mulsf3>
     88c:	dc 01       	movw	r26, r24
     88e:	cb 01       	movw	r24, r22
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 ec       	ldi	r19, 0xC0	; 192
     894:	4b e7       	ldi	r20, 0x7B	; 123
     896:	53 e4       	ldi	r21, 0x43	; 67
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 c3 05 	call	0xb86	; 0xb86 <__subsf3>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	8f 83       	std	Y+7, r24	; 0x07
     8a6:	98 87       	std	Y+8, r25	; 0x08
     8a8:	a9 87       	std	Y+9, r26	; 0x09
     8aa:	ba 87       	std	Y+10, r27	; 0x0a
	
	uint8_t temp = (uint8_t) roundf( temp_f );
     8ac:	8f 81       	ldd	r24, Y+7	; 0x07
     8ae:	98 85       	ldd	r25, Y+8	; 0x08
     8b0:	a9 85       	ldd	r26, Y+9	; 0x09
     8b2:	ba 85       	ldd	r27, Y+10	; 0x0a
     8b4:	bc 01       	movw	r22, r24
     8b6:	cd 01       	movw	r24, r26
     8b8:	0e 94 cc 07 	call	0xf98	; 0xf98 <round>
     8bc:	dc 01       	movw	r26, r24
     8be:	cb 01       	movw	r24, r22
     8c0:	bc 01       	movw	r22, r24
     8c2:	cd 01       	movw	r24, r26
     8c4:	0e 94 a2 06 	call	0xd44	; 0xd44 <__fixunssfsi>
     8c8:	dc 01       	movw	r26, r24
     8ca:	cb 01       	movw	r24, r22
     8cc:	8b 87       	std	Y+11, r24	; 0x0b
	
	printf("sensor %d: ADC-val= %d, temp= %d\n", sensor, adc_val, temp);
     8ce:	8b 85       	ldd	r24, Y+11	; 0x0b
     8d0:	28 2f       	mov	r18, r24
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     8d6:	88 2f       	mov	r24, r24
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	43 2f       	mov	r20, r19
     8dc:	4f 93       	push	r20
     8de:	2f 93       	push	r18
     8e0:	2a 81       	ldd	r18, Y+2	; 0x02
     8e2:	2f 93       	push	r18
     8e4:	29 81       	ldd	r18, Y+1	; 0x01
     8e6:	2f 93       	push	r18
     8e8:	29 2f       	mov	r18, r25
     8ea:	2f 93       	push	r18
     8ec:	8f 93       	push	r24
     8ee:	85 ec       	ldi	r24, 0xC5	; 197
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	89 2f       	mov	r24, r25
     8f4:	8f 93       	push	r24
     8f6:	85 ec       	ldi	r24, 0xC5	; 197
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	8f 93       	push	r24
     8fc:	0e 94 28 08 	call	0x1050	; 0x1050 <printf>
     900:	8d b7       	in	r24, 0x3d	; 61
     902:	9e b7       	in	r25, 0x3e	; 62
     904:	08 96       	adiw	r24, 0x08	; 8
     906:	0f b6       	in	r0, 0x3f	; 63
     908:	f8 94       	cli
     90a:	de bf       	out	0x3e, r29	; 62
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	cd bf       	out	0x3d, r28	; 61
		
	return temp;
     910:	8b 85       	ldd	r24, Y+11	; 0x0b
}
     912:	2c 96       	adiw	r28, 0x0c	; 12
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	ff 90       	pop	r15
     924:	ef 90       	pop	r14
     926:	df 90       	pop	r13
     928:	cf 90       	pop	r12
     92a:	08 95       	ret

0000092c <get_temp>:

//sensor: 1=dach; 0=kessel
uint8_t get_temp(uint8_t sensor)
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	1f 92       	push	r1
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == 1)
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	19 f4       	brne	.+6      	; 0x944 <get_temp+0x18>
		return temp_dach;
     93e:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <temp_dach>
     942:	07 c0       	rjmp	.+14     	; 0x952 <get_temp+0x26>
	else if(sensor == 0)
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	88 23       	and	r24, r24
     948:	19 f4       	brne	.+6      	; 0x950 <get_temp+0x24>
		return temp_kessel;
     94a:	80 91 fa 00 	lds	r24, 0x00FA	; 0x8000fa <temp_kessel>
     94e:	01 c0       	rjmp	.+2      	; 0x952 <get_temp+0x26>
	else
		return 1000;
     950:	88 ee       	ldi	r24, 0xE8	; 232
}
     952:	0f 90       	pop	r0
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <__vector_5>:



ISR(TIMER2_OVF_vect)
{
     95a:	1f 92       	push	r1
     95c:	0f 92       	push	r0
     95e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     962:	0f 92       	push	r0
     964:	11 24       	eor	r1, r1
     966:	2f 93       	push	r18
     968:	3f 93       	push	r19
     96a:	4f 93       	push	r20
     96c:	5f 93       	push	r21
     96e:	6f 93       	push	r22
     970:	7f 93       	push	r23
     972:	8f 93       	push	r24
     974:	9f 93       	push	r25
     976:	af 93       	push	r26
     978:	bf 93       	push	r27
     97a:	ef 93       	push	r30
     97c:	ff 93       	push	r31
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
	cli();
     986:	f8 94       	cli
	
	if(loop_cnt < 62) //if 2s are not passed
     988:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <loop_cnt>
     98c:	8e 33       	cpi	r24, 0x3E	; 62
     98e:	30 f4       	brcc	.+12     	; 0x99c <__vector_5+0x42>
	{
		loop_cnt++;
     990:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <loop_cnt>
     994:	8f 5f       	subi	r24, 0xFF	; 255
     996:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <loop_cnt>
     99a:	16 c0       	rjmp	.+44     	; 0x9c8 <__vector_5+0x6e>
	}
	
	else	//if it is time to work...
	{
		PORTD ^= (1<<PD5);
     99c:	82 e3       	ldi	r24, 0x32	; 50
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	22 e3       	ldi	r18, 0x32	; 50
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	f9 01       	movw	r30, r18
     9a6:	30 81       	ld	r19, Z
     9a8:	20 e2       	ldi	r18, 0x20	; 32
     9aa:	23 27       	eor	r18, r19
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18

		temp_dach   = measure_temp(1);
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	0e 94 b3 03 	call	0x766	; 0x766 <measure_temp>
     9b6:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <temp_dach>
		temp_kessel = measure_temp(0);
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	0e 94 b3 03 	call	0x766	; 0x766 <measure_temp>
     9c0:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <temp_kessel>
		
		loop_cnt = 0;
     9c4:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <loop_cnt>
	}
	
	
	TIFR &= ~(1<<TOV2);			//clear flag
     9c8:	88 e5       	ldi	r24, 0x58	; 88
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	28 e5       	ldi	r18, 0x58	; 88
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	f9 01       	movw	r30, r18
     9d2:	20 81       	ld	r18, Z
     9d4:	2f 7b       	andi	r18, 0xBF	; 191
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
		
	sei();
     9da:	78 94       	sei
     9dc:	00 00       	nop
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	ff 91       	pop	r31
     9e4:	ef 91       	pop	r30
     9e6:	bf 91       	pop	r27
     9e8:	af 91       	pop	r26
     9ea:	9f 91       	pop	r25
     9ec:	8f 91       	pop	r24
     9ee:	7f 91       	pop	r23
     9f0:	6f 91       	pop	r22
     9f2:	5f 91       	pop	r21
     9f4:	4f 91       	pop	r20
     9f6:	3f 91       	pop	r19
     9f8:	2f 91       	pop	r18
     9fa:	0f 90       	pop	r0
     9fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <start_timeout_timer>:
	
	TIMSK |= (1<<TOIE1);			//enable overflow-event
	sei();
}
void start_timeout_timer()
{
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						 //reset timer counter value
     a0e:	8c e4       	ldi	r24, 0x4C	; 76
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	fc 01       	movw	r30, r24
     a14:	11 82       	std	Z+1, r1	; 0x01
     a16:	10 82       	st	Z, r1
	TCCR1B = (1<<CS12) | (1<<CS10);  //start timer at prescaler /1024
     a18:	8e e4       	ldi	r24, 0x4E	; 78
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	25 e0       	ldi	r18, 0x05	; 5
     a1e:	fc 01       	movw	r30, r24
     a20:	20 83       	st	Z, r18
}
     a22:	00 00       	nop
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <stop_timeout_timer>:

void stop_timeout_timer()
{
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = ~((1<<CS12) | (1<<CS10)); //stop timer
     a32:	8e e4       	ldi	r24, 0x4E	; 78
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	2a ef       	ldi	r18, 0xFA	; 250
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
}
     a3c:	00 00       	nop
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <__vector_9>:




ISR(TIMER1_OVF_vect)
{	
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	1f 93       	push	r17
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
	cli();
     a72:	f8 94       	cli
	
	if((getState() == 3) && (eeprom_read_byte(0) != get_delta()))
     a74:	0e 94 48 03 	call	0x690	; 0x690 <getState>
     a78:	83 30       	cpi	r24, 0x03	; 3
     a7a:	81 f4       	brne	.+32     	; 0xa9c <__vector_9+0x58>
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <eeprom_read_byte>
     a84:	18 2f       	mov	r17, r24
     a86:	0e 94 aa 03 	call	0x754	; 0x754 <get_delta>
     a8a:	18 17       	cp	r17, r24
     a8c:	39 f0       	breq	.+14     	; 0xa9c <__vector_9+0x58>
	{
		eeprom_update_byte((uint8_t*)(0), (uint8_t)get_delta());
     a8e:	0e 94 aa 03 	call	0x754	; 0x754 <get_delta>
     a92:	68 2f       	mov	r22, r24
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 07 0b 	call	0x160e	; 0x160e <eeprom_update_byte>
//		uart_send_blocking('s');
	}
	
	setState(1);
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 26 03 	call	0x64c	; 0x64c <setState>
	
	TIFR &= ~(1<<TOV1);
     aa2:	88 e5       	ldi	r24, 0x58	; 88
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	28 e5       	ldi	r18, 0x58	; 88
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	f9 01       	movw	r30, r18
     aac:	20 81       	ld	r18, Z
     aae:	2b 7f       	andi	r18, 0xFB	; 251
     ab0:	fc 01       	movw	r30, r24
     ab2:	20 83       	st	Z, r18
	sei();
     ab4:	78 94       	sei
     ab6:	00 00       	nop
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	bf 91       	pop	r27
     ac2:	af 91       	pop	r26
     ac4:	9f 91       	pop	r25
     ac6:	8f 91       	pop	r24
     ac8:	7f 91       	pop	r23
     aca:	6f 91       	pop	r22
     acc:	5f 91       	pop	r21
     ace:	4f 91       	pop	r20
     ad0:	3f 91       	pop	r19
     ad2:	2f 91       	pop	r18
     ad4:	1f 91       	pop	r17
     ad6:	0f 90       	pop	r0
     ad8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     adc:	0f 90       	pop	r0
     ade:	1f 90       	pop	r1
     ae0:	18 95       	reti

00000ae2 <uart_init>:
#include <avr/io.h>
#include <stdio.h>


void uart_init()
{
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	cd b7       	in	r28, 0x3d	; 61
     ae8:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<RXEN) | (1<<TXEN);  //enable receive and transmit
     aea:	8a e2       	ldi	r24, 0x2A	; 42
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	2a e2       	ldi	r18, 0x2A	; 42
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	f9 01       	movw	r30, r18
     af4:	20 81       	ld	r18, Z
     af6:	28 61       	ori	r18, 0x18	; 24
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
	UBRRL = 51;						 //setting datarate to 9600 baud/s
     afc:	89 e2       	ldi	r24, 0x29	; 41
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	23 e3       	ldi	r18, 0x33	; 51
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18

	UCSRB |= (1<<RXEN) | (1<<TXEN);
     b06:	8a e2       	ldi	r24, 0x2A	; 42
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	2a e2       	ldi	r18, 0x2A	; 42
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	20 81       	ld	r18, Z
     b12:	28 61       	ori	r18, 0x18	; 24
     b14:	fc 01       	movw	r30, r24
     b16:	20 83       	st	Z, r18

	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     b18:	80 e4       	ldi	r24, 0x40	; 64
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	20 e4       	ldi	r18, 0x40	; 64
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	f9 01       	movw	r30, r18
     b22:	20 81       	ld	r18, Z
     b24:	26 68       	ori	r18, 0x86	; 134
     b26:	fc 01       	movw	r30, r24
     b28:	20 83       	st	Z, r18
}
     b2a:	00 00       	nop
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	00 d0       	rcall	.+0      	; 0xb38 <uart_putchar+0x6>
     b38:	1f 92       	push	r1
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	7b 83       	std	Y+3, r23	; 0x03
     b42:	6a 83       	std	Y+2, r22	; 0x02
	if(c=='\n')
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	8a 30       	cpi	r24, 0x0A	; 10
     b48:	31 f4       	brne	.+12     	; 0xb56 <uart_putchar+0x24>
		uart_putchar('\r', stream);
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	9b 81       	ldd	r25, Y+3	; 0x03
     b4e:	bc 01       	movw	r22, r24
     b50:	8d e0       	ldi	r24, 0x0D	; 13
     b52:	0e 94 99 05 	call	0xb32	; 0xb32 <uart_putchar>
		
		
	while( (UCSRA & (1<<UDRE)) ==0 )
     b56:	00 00       	nop
     b58:	8b e2       	ldi	r24, 0x2B	; 43
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	fc 01       	movw	r30, r24
     b5e:	80 81       	ld	r24, Z
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	80 72       	andi	r24, 0x20	; 32
     b66:	99 27       	eor	r25, r25
     b68:	89 2b       	or	r24, r25
     b6a:	b1 f3       	breq	.-20     	; 0xb58 <uart_putchar+0x26>
	{
	}
		
	UDR = c;
     b6c:	8c e2       	ldi	r24, 0x2C	; 44
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	29 81       	ldd	r18, Y+1	; 0x01
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
	
	return 0;
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <__subsf3>:
     b86:	50 58       	subi	r21, 0x80	; 128

00000b88 <__addsf3>:
     b88:	bb 27       	eor	r27, r27
     b8a:	aa 27       	eor	r26, r26
     b8c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__addsf3x>
     b90:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_round>
     b94:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_pscA>
     b98:	38 f0       	brcs	.+14     	; 0xba8 <__addsf3+0x20>
     b9a:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_pscB>
     b9e:	20 f0       	brcs	.+8      	; 0xba8 <__addsf3+0x20>
     ba0:	39 f4       	brne	.+14     	; 0xbb0 <__addsf3+0x28>
     ba2:	9f 3f       	cpi	r25, 0xFF	; 255
     ba4:	19 f4       	brne	.+6      	; 0xbac <__addsf3+0x24>
     ba6:	26 f4       	brtc	.+8      	; 0xbb0 <__addsf3+0x28>
     ba8:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_nan>
     bac:	0e f4       	brtc	.+2      	; 0xbb0 <__addsf3+0x28>
     bae:	e0 95       	com	r30
     bb0:	e7 fb       	bst	r30, 7
     bb2:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>

00000bb6 <__addsf3x>:
     bb6:	e9 2f       	mov	r30, r25
     bb8:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_split3>
     bbc:	58 f3       	brcs	.-42     	; 0xb94 <__addsf3+0xc>
     bbe:	ba 17       	cp	r27, r26
     bc0:	62 07       	cpc	r22, r18
     bc2:	73 07       	cpc	r23, r19
     bc4:	84 07       	cpc	r24, r20
     bc6:	95 07       	cpc	r25, r21
     bc8:	20 f0       	brcs	.+8      	; 0xbd2 <__addsf3x+0x1c>
     bca:	79 f4       	brne	.+30     	; 0xbea <__addsf3x+0x34>
     bcc:	a6 f5       	brtc	.+104    	; 0xc36 <__addsf3x+0x80>
     bce:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_zero>
     bd2:	0e f4       	brtc	.+2      	; 0xbd6 <__addsf3x+0x20>
     bd4:	e0 95       	com	r30
     bd6:	0b 2e       	mov	r0, r27
     bd8:	ba 2f       	mov	r27, r26
     bda:	a0 2d       	mov	r26, r0
     bdc:	0b 01       	movw	r0, r22
     bde:	b9 01       	movw	r22, r18
     be0:	90 01       	movw	r18, r0
     be2:	0c 01       	movw	r0, r24
     be4:	ca 01       	movw	r24, r20
     be6:	a0 01       	movw	r20, r0
     be8:	11 24       	eor	r1, r1
     bea:	ff 27       	eor	r31, r31
     bec:	59 1b       	sub	r21, r25
     bee:	99 f0       	breq	.+38     	; 0xc16 <__addsf3x+0x60>
     bf0:	59 3f       	cpi	r21, 0xF9	; 249
     bf2:	50 f4       	brcc	.+20     	; 0xc08 <__addsf3x+0x52>
     bf4:	50 3e       	cpi	r21, 0xE0	; 224
     bf6:	68 f1       	brcs	.+90     	; 0xc52 <__addsf3x+0x9c>
     bf8:	1a 16       	cp	r1, r26
     bfa:	f0 40       	sbci	r31, 0x00	; 0
     bfc:	a2 2f       	mov	r26, r18
     bfe:	23 2f       	mov	r18, r19
     c00:	34 2f       	mov	r19, r20
     c02:	44 27       	eor	r20, r20
     c04:	58 5f       	subi	r21, 0xF8	; 248
     c06:	f3 cf       	rjmp	.-26     	; 0xbee <__addsf3x+0x38>
     c08:	46 95       	lsr	r20
     c0a:	37 95       	ror	r19
     c0c:	27 95       	ror	r18
     c0e:	a7 95       	ror	r26
     c10:	f0 40       	sbci	r31, 0x00	; 0
     c12:	53 95       	inc	r21
     c14:	c9 f7       	brne	.-14     	; 0xc08 <__addsf3x+0x52>
     c16:	7e f4       	brtc	.+30     	; 0xc36 <__addsf3x+0x80>
     c18:	1f 16       	cp	r1, r31
     c1a:	ba 0b       	sbc	r27, r26
     c1c:	62 0b       	sbc	r22, r18
     c1e:	73 0b       	sbc	r23, r19
     c20:	84 0b       	sbc	r24, r20
     c22:	ba f0       	brmi	.+46     	; 0xc52 <__addsf3x+0x9c>
     c24:	91 50       	subi	r25, 0x01	; 1
     c26:	a1 f0       	breq	.+40     	; 0xc50 <__addsf3x+0x9a>
     c28:	ff 0f       	add	r31, r31
     c2a:	bb 1f       	adc	r27, r27
     c2c:	66 1f       	adc	r22, r22
     c2e:	77 1f       	adc	r23, r23
     c30:	88 1f       	adc	r24, r24
     c32:	c2 f7       	brpl	.-16     	; 0xc24 <__addsf3x+0x6e>
     c34:	0e c0       	rjmp	.+28     	; 0xc52 <__addsf3x+0x9c>
     c36:	ba 0f       	add	r27, r26
     c38:	62 1f       	adc	r22, r18
     c3a:	73 1f       	adc	r23, r19
     c3c:	84 1f       	adc	r24, r20
     c3e:	48 f4       	brcc	.+18     	; 0xc52 <__addsf3x+0x9c>
     c40:	87 95       	ror	r24
     c42:	77 95       	ror	r23
     c44:	67 95       	ror	r22
     c46:	b7 95       	ror	r27
     c48:	f7 95       	ror	r31
     c4a:	9e 3f       	cpi	r25, 0xFE	; 254
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <__addsf3x+0x9a>
     c4e:	b0 cf       	rjmp	.-160    	; 0xbb0 <__addsf3+0x28>
     c50:	93 95       	inc	r25
     c52:	88 0f       	add	r24, r24
     c54:	08 f0       	brcs	.+2      	; 0xc58 <__addsf3x+0xa2>
     c56:	99 27       	eor	r25, r25
     c58:	ee 0f       	add	r30, r30
     c5a:	97 95       	ror	r25
     c5c:	87 95       	ror	r24
     c5e:	08 95       	ret

00000c60 <__divsf3>:
     c60:	0e 94 44 06 	call	0xc88	; 0xc88 <__divsf3x>
     c64:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_round>
     c68:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_pscB>
     c6c:	58 f0       	brcs	.+22     	; 0xc84 <__divsf3+0x24>
     c6e:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_pscA>
     c72:	40 f0       	brcs	.+16     	; 0xc84 <__divsf3+0x24>
     c74:	29 f4       	brne	.+10     	; 0xc80 <__divsf3+0x20>
     c76:	5f 3f       	cpi	r21, 0xFF	; 255
     c78:	29 f0       	breq	.+10     	; 0xc84 <__divsf3+0x24>
     c7a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
     c7e:	51 11       	cpse	r21, r1
     c80:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_szero>
     c84:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_nan>

00000c88 <__divsf3x>:
     c88:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_split3>
     c8c:	68 f3       	brcs	.-38     	; 0xc68 <__divsf3+0x8>

00000c8e <__divsf3_pse>:
     c8e:	99 23       	and	r25, r25
     c90:	b1 f3       	breq	.-20     	; 0xc7e <__divsf3+0x1e>
     c92:	55 23       	and	r21, r21
     c94:	91 f3       	breq	.-28     	; 0xc7a <__divsf3+0x1a>
     c96:	95 1b       	sub	r25, r21
     c98:	55 0b       	sbc	r21, r21
     c9a:	bb 27       	eor	r27, r27
     c9c:	aa 27       	eor	r26, r26
     c9e:	62 17       	cp	r22, r18
     ca0:	73 07       	cpc	r23, r19
     ca2:	84 07       	cpc	r24, r20
     ca4:	38 f0       	brcs	.+14     	; 0xcb4 <__divsf3_pse+0x26>
     ca6:	9f 5f       	subi	r25, 0xFF	; 255
     ca8:	5f 4f       	sbci	r21, 0xFF	; 255
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	aa 1f       	adc	r26, r26
     cb2:	a9 f3       	breq	.-22     	; 0xc9e <__divsf3_pse+0x10>
     cb4:	35 d0       	rcall	.+106    	; 0xd20 <__divsf3_pse+0x92>
     cb6:	0e 2e       	mov	r0, r30
     cb8:	3a f0       	brmi	.+14     	; 0xcc8 <__divsf3_pse+0x3a>
     cba:	e0 e8       	ldi	r30, 0x80	; 128
     cbc:	32 d0       	rcall	.+100    	; 0xd22 <__divsf3_pse+0x94>
     cbe:	91 50       	subi	r25, 0x01	; 1
     cc0:	50 40       	sbci	r21, 0x00	; 0
     cc2:	e6 95       	lsr	r30
     cc4:	00 1c       	adc	r0, r0
     cc6:	ca f7       	brpl	.-14     	; 0xcba <__divsf3_pse+0x2c>
     cc8:	2b d0       	rcall	.+86     	; 0xd20 <__divsf3_pse+0x92>
     cca:	fe 2f       	mov	r31, r30
     ccc:	29 d0       	rcall	.+82     	; 0xd20 <__divsf3_pse+0x92>
     cce:	66 0f       	add	r22, r22
     cd0:	77 1f       	adc	r23, r23
     cd2:	88 1f       	adc	r24, r24
     cd4:	bb 1f       	adc	r27, r27
     cd6:	26 17       	cp	r18, r22
     cd8:	37 07       	cpc	r19, r23
     cda:	48 07       	cpc	r20, r24
     cdc:	ab 07       	cpc	r26, r27
     cde:	b0 e8       	ldi	r27, 0x80	; 128
     ce0:	09 f0       	breq	.+2      	; 0xce4 <__divsf3_pse+0x56>
     ce2:	bb 0b       	sbc	r27, r27
     ce4:	80 2d       	mov	r24, r0
     ce6:	bf 01       	movw	r22, r30
     ce8:	ff 27       	eor	r31, r31
     cea:	93 58       	subi	r25, 0x83	; 131
     cec:	5f 4f       	sbci	r21, 0xFF	; 255
     cee:	3a f0       	brmi	.+14     	; 0xcfe <__divsf3_pse+0x70>
     cf0:	9e 3f       	cpi	r25, 0xFE	; 254
     cf2:	51 05       	cpc	r21, r1
     cf4:	78 f0       	brcs	.+30     	; 0xd14 <__divsf3_pse+0x86>
     cf6:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
     cfa:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_szero>
     cfe:	5f 3f       	cpi	r21, 0xFF	; 255
     d00:	e4 f3       	brlt	.-8      	; 0xcfa <__divsf3_pse+0x6c>
     d02:	98 3e       	cpi	r25, 0xE8	; 232
     d04:	d4 f3       	brlt	.-12     	; 0xcfa <__divsf3_pse+0x6c>
     d06:	86 95       	lsr	r24
     d08:	77 95       	ror	r23
     d0a:	67 95       	ror	r22
     d0c:	b7 95       	ror	r27
     d0e:	f7 95       	ror	r31
     d10:	9f 5f       	subi	r25, 0xFF	; 255
     d12:	c9 f7       	brne	.-14     	; 0xd06 <__divsf3_pse+0x78>
     d14:	88 0f       	add	r24, r24
     d16:	91 1d       	adc	r25, r1
     d18:	96 95       	lsr	r25
     d1a:	87 95       	ror	r24
     d1c:	97 f9       	bld	r25, 7
     d1e:	08 95       	ret
     d20:	e1 e0       	ldi	r30, 0x01	; 1
     d22:	66 0f       	add	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	88 1f       	adc	r24, r24
     d28:	bb 1f       	adc	r27, r27
     d2a:	62 17       	cp	r22, r18
     d2c:	73 07       	cpc	r23, r19
     d2e:	84 07       	cpc	r24, r20
     d30:	ba 07       	cpc	r27, r26
     d32:	20 f0       	brcs	.+8      	; 0xd3c <__divsf3_pse+0xae>
     d34:	62 1b       	sub	r22, r18
     d36:	73 0b       	sbc	r23, r19
     d38:	84 0b       	sbc	r24, r20
     d3a:	ba 0b       	sbc	r27, r26
     d3c:	ee 1f       	adc	r30, r30
     d3e:	88 f7       	brcc	.-30     	; 0xd22 <__divsf3_pse+0x94>
     d40:	e0 95       	com	r30
     d42:	08 95       	ret

00000d44 <__fixunssfsi>:
     d44:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_splitA>
     d48:	88 f0       	brcs	.+34     	; 0xd6c <__fixunssfsi+0x28>
     d4a:	9f 57       	subi	r25, 0x7F	; 127
     d4c:	98 f0       	brcs	.+38     	; 0xd74 <__fixunssfsi+0x30>
     d4e:	b9 2f       	mov	r27, r25
     d50:	99 27       	eor	r25, r25
     d52:	b7 51       	subi	r27, 0x17	; 23
     d54:	b0 f0       	brcs	.+44     	; 0xd82 <__fixunssfsi+0x3e>
     d56:	e1 f0       	breq	.+56     	; 0xd90 <__fixunssfsi+0x4c>
     d58:	66 0f       	add	r22, r22
     d5a:	77 1f       	adc	r23, r23
     d5c:	88 1f       	adc	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	1a f0       	brmi	.+6      	; 0xd68 <__fixunssfsi+0x24>
     d62:	ba 95       	dec	r27
     d64:	c9 f7       	brne	.-14     	; 0xd58 <__fixunssfsi+0x14>
     d66:	14 c0       	rjmp	.+40     	; 0xd90 <__fixunssfsi+0x4c>
     d68:	b1 30       	cpi	r27, 0x01	; 1
     d6a:	91 f0       	breq	.+36     	; 0xd90 <__fixunssfsi+0x4c>
     d6c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__fp_zero>
     d70:	b1 e0       	ldi	r27, 0x01	; 1
     d72:	08 95       	ret
     d74:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__fp_zero>
     d78:	67 2f       	mov	r22, r23
     d7a:	78 2f       	mov	r23, r24
     d7c:	88 27       	eor	r24, r24
     d7e:	b8 5f       	subi	r27, 0xF8	; 248
     d80:	39 f0       	breq	.+14     	; 0xd90 <__fixunssfsi+0x4c>
     d82:	b9 3f       	cpi	r27, 0xF9	; 249
     d84:	cc f3       	brlt	.-14     	; 0xd78 <__fixunssfsi+0x34>
     d86:	86 95       	lsr	r24
     d88:	77 95       	ror	r23
     d8a:	67 95       	ror	r22
     d8c:	b3 95       	inc	r27
     d8e:	d9 f7       	brne	.-10     	; 0xd86 <__fixunssfsi+0x42>
     d90:	3e f4       	brtc	.+14     	; 0xda0 <__fixunssfsi+0x5c>
     d92:	90 95       	com	r25
     d94:	80 95       	com	r24
     d96:	70 95       	com	r23
     d98:	61 95       	neg	r22
     d9a:	7f 4f       	sbci	r23, 0xFF	; 255
     d9c:	8f 4f       	sbci	r24, 0xFF	; 255
     d9e:	9f 4f       	sbci	r25, 0xFF	; 255
     da0:	08 95       	ret

00000da2 <__floatunsisf>:
     da2:	e8 94       	clt
     da4:	09 c0       	rjmp	.+18     	; 0xdb8 <__floatsisf+0x12>

00000da6 <__floatsisf>:
     da6:	97 fb       	bst	r25, 7
     da8:	3e f4       	brtc	.+14     	; 0xdb8 <__floatsisf+0x12>
     daa:	90 95       	com	r25
     dac:	80 95       	com	r24
     dae:	70 95       	com	r23
     db0:	61 95       	neg	r22
     db2:	7f 4f       	sbci	r23, 0xFF	; 255
     db4:	8f 4f       	sbci	r24, 0xFF	; 255
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	99 23       	and	r25, r25
     dba:	a9 f0       	breq	.+42     	; 0xde6 <__floatsisf+0x40>
     dbc:	f9 2f       	mov	r31, r25
     dbe:	96 e9       	ldi	r25, 0x96	; 150
     dc0:	bb 27       	eor	r27, r27
     dc2:	93 95       	inc	r25
     dc4:	f6 95       	lsr	r31
     dc6:	87 95       	ror	r24
     dc8:	77 95       	ror	r23
     dca:	67 95       	ror	r22
     dcc:	b7 95       	ror	r27
     dce:	f1 11       	cpse	r31, r1
     dd0:	f8 cf       	rjmp	.-16     	; 0xdc2 <__floatsisf+0x1c>
     dd2:	fa f4       	brpl	.+62     	; 0xe12 <__floatsisf+0x6c>
     dd4:	bb 0f       	add	r27, r27
     dd6:	11 f4       	brne	.+4      	; 0xddc <__floatsisf+0x36>
     dd8:	60 ff       	sbrs	r22, 0
     dda:	1b c0       	rjmp	.+54     	; 0xe12 <__floatsisf+0x6c>
     ddc:	6f 5f       	subi	r22, 0xFF	; 255
     dde:	7f 4f       	sbci	r23, 0xFF	; 255
     de0:	8f 4f       	sbci	r24, 0xFF	; 255
     de2:	9f 4f       	sbci	r25, 0xFF	; 255
     de4:	16 c0       	rjmp	.+44     	; 0xe12 <__floatsisf+0x6c>
     de6:	88 23       	and	r24, r24
     de8:	11 f0       	breq	.+4      	; 0xdee <__floatsisf+0x48>
     dea:	96 e9       	ldi	r25, 0x96	; 150
     dec:	11 c0       	rjmp	.+34     	; 0xe10 <__floatsisf+0x6a>
     dee:	77 23       	and	r23, r23
     df0:	21 f0       	breq	.+8      	; 0xdfa <__floatsisf+0x54>
     df2:	9e e8       	ldi	r25, 0x8E	; 142
     df4:	87 2f       	mov	r24, r23
     df6:	76 2f       	mov	r23, r22
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <__floatsisf+0x5e>
     dfa:	66 23       	and	r22, r22
     dfc:	71 f0       	breq	.+28     	; 0xe1a <__floatsisf+0x74>
     dfe:	96 e8       	ldi	r25, 0x86	; 134
     e00:	86 2f       	mov	r24, r22
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	2a f0       	brmi	.+10     	; 0xe12 <__floatsisf+0x6c>
     e08:	9a 95       	dec	r25
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	88 1f       	adc	r24, r24
     e10:	da f7       	brpl	.-10     	; 0xe08 <__floatsisf+0x62>
     e12:	88 0f       	add	r24, r24
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	97 f9       	bld	r25, 7
     e1a:	08 95       	ret

00000e1c <__fp_inf>:
     e1c:	97 f9       	bld	r25, 7
     e1e:	9f 67       	ori	r25, 0x7F	; 127
     e20:	80 e8       	ldi	r24, 0x80	; 128
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	08 95       	ret

00000e28 <__fp_nan>:
     e28:	9f ef       	ldi	r25, 0xFF	; 255
     e2a:	80 ec       	ldi	r24, 0xC0	; 192
     e2c:	08 95       	ret

00000e2e <__fp_pscA>:
     e2e:	00 24       	eor	r0, r0
     e30:	0a 94       	dec	r0
     e32:	16 16       	cp	r1, r22
     e34:	17 06       	cpc	r1, r23
     e36:	18 06       	cpc	r1, r24
     e38:	09 06       	cpc	r0, r25
     e3a:	08 95       	ret

00000e3c <__fp_pscB>:
     e3c:	00 24       	eor	r0, r0
     e3e:	0a 94       	dec	r0
     e40:	12 16       	cp	r1, r18
     e42:	13 06       	cpc	r1, r19
     e44:	14 06       	cpc	r1, r20
     e46:	05 06       	cpc	r0, r21
     e48:	08 95       	ret

00000e4a <__fp_round>:
     e4a:	09 2e       	mov	r0, r25
     e4c:	03 94       	inc	r0
     e4e:	00 0c       	add	r0, r0
     e50:	11 f4       	brne	.+4      	; 0xe56 <__fp_round+0xc>
     e52:	88 23       	and	r24, r24
     e54:	52 f0       	brmi	.+20     	; 0xe6a <__fp_round+0x20>
     e56:	bb 0f       	add	r27, r27
     e58:	40 f4       	brcc	.+16     	; 0xe6a <__fp_round+0x20>
     e5a:	bf 2b       	or	r27, r31
     e5c:	11 f4       	brne	.+4      	; 0xe62 <__fp_round+0x18>
     e5e:	60 ff       	sbrs	r22, 0
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <__fp_round+0x20>
     e62:	6f 5f       	subi	r22, 0xFF	; 255
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	8f 4f       	sbci	r24, 0xFF	; 255
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	08 95       	ret

00000e6c <__fp_split3>:
     e6c:	57 fd       	sbrc	r21, 7
     e6e:	90 58       	subi	r25, 0x80	; 128
     e70:	44 0f       	add	r20, r20
     e72:	55 1f       	adc	r21, r21
     e74:	59 f0       	breq	.+22     	; 0xe8c <__fp_splitA+0x10>
     e76:	5f 3f       	cpi	r21, 0xFF	; 255
     e78:	71 f0       	breq	.+28     	; 0xe96 <__fp_splitA+0x1a>
     e7a:	47 95       	ror	r20

00000e7c <__fp_splitA>:
     e7c:	88 0f       	add	r24, r24
     e7e:	97 fb       	bst	r25, 7
     e80:	99 1f       	adc	r25, r25
     e82:	61 f0       	breq	.+24     	; 0xe9c <__fp_splitA+0x20>
     e84:	9f 3f       	cpi	r25, 0xFF	; 255
     e86:	79 f0       	breq	.+30     	; 0xea6 <__fp_splitA+0x2a>
     e88:	87 95       	ror	r24
     e8a:	08 95       	ret
     e8c:	12 16       	cp	r1, r18
     e8e:	13 06       	cpc	r1, r19
     e90:	14 06       	cpc	r1, r20
     e92:	55 1f       	adc	r21, r21
     e94:	f2 cf       	rjmp	.-28     	; 0xe7a <__fp_split3+0xe>
     e96:	46 95       	lsr	r20
     e98:	f1 df       	rcall	.-30     	; 0xe7c <__fp_splitA>
     e9a:	08 c0       	rjmp	.+16     	; 0xeac <__fp_splitA+0x30>
     e9c:	16 16       	cp	r1, r22
     e9e:	17 06       	cpc	r1, r23
     ea0:	18 06       	cpc	r1, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	f1 cf       	rjmp	.-30     	; 0xe88 <__fp_splitA+0xc>
     ea6:	86 95       	lsr	r24
     ea8:	71 05       	cpc	r23, r1
     eaa:	61 05       	cpc	r22, r1
     eac:	08 94       	sec
     eae:	08 95       	ret

00000eb0 <__fp_zero>:
     eb0:	e8 94       	clt

00000eb2 <__fp_szero>:
     eb2:	bb 27       	eor	r27, r27
     eb4:	66 27       	eor	r22, r22
     eb6:	77 27       	eor	r23, r23
     eb8:	cb 01       	movw	r24, r22
     eba:	97 f9       	bld	r25, 7
     ebc:	08 95       	ret

00000ebe <__mulsf3>:
     ebe:	0e 94 72 07 	call	0xee4	; 0xee4 <__mulsf3x>
     ec2:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__fp_round>
     ec6:	0e 94 17 07 	call	0xe2e	; 0xe2e <__fp_pscA>
     eca:	38 f0       	brcs	.+14     	; 0xeda <__mulsf3+0x1c>
     ecc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <__fp_pscB>
     ed0:	20 f0       	brcs	.+8      	; 0xeda <__mulsf3+0x1c>
     ed2:	95 23       	and	r25, r21
     ed4:	11 f0       	breq	.+4      	; 0xeda <__mulsf3+0x1c>
     ed6:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
     eda:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__fp_nan>
     ede:	11 24       	eor	r1, r1
     ee0:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_szero>

00000ee4 <__mulsf3x>:
     ee4:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_split3>
     ee8:	70 f3       	brcs	.-36     	; 0xec6 <__mulsf3+0x8>

00000eea <__mulsf3_pse>:
     eea:	95 9f       	mul	r25, r21
     eec:	c1 f3       	breq	.-16     	; 0xede <__mulsf3+0x20>
     eee:	95 0f       	add	r25, r21
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	55 1f       	adc	r21, r21
     ef4:	62 9f       	mul	r22, r18
     ef6:	f0 01       	movw	r30, r0
     ef8:	72 9f       	mul	r23, r18
     efa:	bb 27       	eor	r27, r27
     efc:	f0 0d       	add	r31, r0
     efe:	b1 1d       	adc	r27, r1
     f00:	63 9f       	mul	r22, r19
     f02:	aa 27       	eor	r26, r26
     f04:	f0 0d       	add	r31, r0
     f06:	b1 1d       	adc	r27, r1
     f08:	aa 1f       	adc	r26, r26
     f0a:	64 9f       	mul	r22, r20
     f0c:	66 27       	eor	r22, r22
     f0e:	b0 0d       	add	r27, r0
     f10:	a1 1d       	adc	r26, r1
     f12:	66 1f       	adc	r22, r22
     f14:	82 9f       	mul	r24, r18
     f16:	22 27       	eor	r18, r18
     f18:	b0 0d       	add	r27, r0
     f1a:	a1 1d       	adc	r26, r1
     f1c:	62 1f       	adc	r22, r18
     f1e:	73 9f       	mul	r23, r19
     f20:	b0 0d       	add	r27, r0
     f22:	a1 1d       	adc	r26, r1
     f24:	62 1f       	adc	r22, r18
     f26:	83 9f       	mul	r24, r19
     f28:	a0 0d       	add	r26, r0
     f2a:	61 1d       	adc	r22, r1
     f2c:	22 1f       	adc	r18, r18
     f2e:	74 9f       	mul	r23, r20
     f30:	33 27       	eor	r19, r19
     f32:	a0 0d       	add	r26, r0
     f34:	61 1d       	adc	r22, r1
     f36:	23 1f       	adc	r18, r19
     f38:	84 9f       	mul	r24, r20
     f3a:	60 0d       	add	r22, r0
     f3c:	21 1d       	adc	r18, r1
     f3e:	82 2f       	mov	r24, r18
     f40:	76 2f       	mov	r23, r22
     f42:	6a 2f       	mov	r22, r26
     f44:	11 24       	eor	r1, r1
     f46:	9f 57       	subi	r25, 0x7F	; 127
     f48:	50 40       	sbci	r21, 0x00	; 0
     f4a:	9a f0       	brmi	.+38     	; 0xf72 <__mulsf3_pse+0x88>
     f4c:	f1 f0       	breq	.+60     	; 0xf8a <__mulsf3_pse+0xa0>
     f4e:	88 23       	and	r24, r24
     f50:	4a f0       	brmi	.+18     	; 0xf64 <__mulsf3_pse+0x7a>
     f52:	ee 0f       	add	r30, r30
     f54:	ff 1f       	adc	r31, r31
     f56:	bb 1f       	adc	r27, r27
     f58:	66 1f       	adc	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	91 50       	subi	r25, 0x01	; 1
     f60:	50 40       	sbci	r21, 0x00	; 0
     f62:	a9 f7       	brne	.-22     	; 0xf4e <__mulsf3_pse+0x64>
     f64:	9e 3f       	cpi	r25, 0xFE	; 254
     f66:	51 05       	cpc	r21, r1
     f68:	80 f0       	brcs	.+32     	; 0xf8a <__mulsf3_pse+0xa0>
     f6a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_inf>
     f6e:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_szero>
     f72:	5f 3f       	cpi	r21, 0xFF	; 255
     f74:	e4 f3       	brlt	.-8      	; 0xf6e <__mulsf3_pse+0x84>
     f76:	98 3e       	cpi	r25, 0xE8	; 232
     f78:	d4 f3       	brlt	.-12     	; 0xf6e <__mulsf3_pse+0x84>
     f7a:	86 95       	lsr	r24
     f7c:	77 95       	ror	r23
     f7e:	67 95       	ror	r22
     f80:	b7 95       	ror	r27
     f82:	f7 95       	ror	r31
     f84:	e7 95       	ror	r30
     f86:	9f 5f       	subi	r25, 0xFF	; 255
     f88:	c1 f7       	brne	.-16     	; 0xf7a <__mulsf3_pse+0x90>
     f8a:	fe 2b       	or	r31, r30
     f8c:	88 0f       	add	r24, r24
     f8e:	91 1d       	adc	r25, r1
     f90:	96 95       	lsr	r25
     f92:	87 95       	ror	r24
     f94:	97 f9       	bld	r25, 7
     f96:	08 95       	ret

00000f98 <round>:
     f98:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_splitA>
     f9c:	e8 f0       	brcs	.+58     	; 0xfd8 <round+0x40>
     f9e:	9e 37       	cpi	r25, 0x7E	; 126
     fa0:	e8 f0       	brcs	.+58     	; 0xfdc <round+0x44>
     fa2:	96 39       	cpi	r25, 0x96	; 150
     fa4:	b8 f4       	brcc	.+46     	; 0xfd4 <round+0x3c>
     fa6:	9e 38       	cpi	r25, 0x8E	; 142
     fa8:	48 f4       	brcc	.+18     	; 0xfbc <round+0x24>
     faa:	67 2f       	mov	r22, r23
     fac:	78 2f       	mov	r23, r24
     fae:	88 27       	eor	r24, r24
     fb0:	98 5f       	subi	r25, 0xF8	; 248
     fb2:	f9 cf       	rjmp	.-14     	; 0xfa6 <round+0xe>
     fb4:	86 95       	lsr	r24
     fb6:	77 95       	ror	r23
     fb8:	67 95       	ror	r22
     fba:	93 95       	inc	r25
     fbc:	95 39       	cpi	r25, 0x95	; 149
     fbe:	d0 f3       	brcs	.-12     	; 0xfb4 <round+0x1c>
     fc0:	b6 2f       	mov	r27, r22
     fc2:	b1 70       	andi	r27, 0x01	; 1
     fc4:	6b 0f       	add	r22, r27
     fc6:	71 1d       	adc	r23, r1
     fc8:	81 1d       	adc	r24, r1
     fca:	20 f4       	brcc	.+8      	; 0xfd4 <round+0x3c>
     fcc:	87 95       	ror	r24
     fce:	77 95       	ror	r23
     fd0:	67 95       	ror	r22
     fd2:	93 95       	inc	r25
     fd4:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__fp_mintl>
     fd8:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_mpack>
     fdc:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__fp_szero>

00000fe0 <__fp_mintl>:
     fe0:	88 23       	and	r24, r24
     fe2:	71 f4       	brne	.+28     	; 0x1000 <__fp_mintl+0x20>
     fe4:	77 23       	and	r23, r23
     fe6:	21 f0       	breq	.+8      	; 0xff0 <__fp_mintl+0x10>
     fe8:	98 50       	subi	r25, 0x08	; 8
     fea:	87 2b       	or	r24, r23
     fec:	76 2f       	mov	r23, r22
     fee:	07 c0       	rjmp	.+14     	; 0xffe <__fp_mintl+0x1e>
     ff0:	66 23       	and	r22, r22
     ff2:	11 f4       	brne	.+4      	; 0xff8 <__fp_mintl+0x18>
     ff4:	99 27       	eor	r25, r25
     ff6:	0d c0       	rjmp	.+26     	; 0x1012 <__fp_mintl+0x32>
     ff8:	90 51       	subi	r25, 0x10	; 16
     ffa:	86 2b       	or	r24, r22
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	2a f0       	brmi	.+10     	; 0x100c <__fp_mintl+0x2c>
    1002:	9a 95       	dec	r25
    1004:	66 0f       	add	r22, r22
    1006:	77 1f       	adc	r23, r23
    1008:	88 1f       	adc	r24, r24
    100a:	da f7       	brpl	.-10     	; 0x1002 <__fp_mintl+0x22>
    100c:	88 0f       	add	r24, r24
    100e:	96 95       	lsr	r25
    1010:	87 95       	ror	r24
    1012:	97 f9       	bld	r25, 7
    1014:	08 95       	ret

00001016 <__fp_mpack>:
    1016:	9f 3f       	cpi	r25, 0xFF	; 255
    1018:	31 f0       	breq	.+12     	; 0x1026 <__fp_mpack_finite+0xc>

0000101a <__fp_mpack_finite>:
    101a:	91 50       	subi	r25, 0x01	; 1
    101c:	20 f4       	brcc	.+8      	; 0x1026 <__fp_mpack_finite+0xc>
    101e:	87 95       	ror	r24
    1020:	77 95       	ror	r23
    1022:	67 95       	ror	r22
    1024:	b7 95       	ror	r27
    1026:	88 0f       	add	r24, r24
    1028:	91 1d       	adc	r25, r1
    102a:	96 95       	lsr	r25
    102c:	87 95       	ror	r24
    102e:	97 f9       	bld	r25, 7
    1030:	08 95       	ret

00001032 <__umulhisi3>:
    1032:	a2 9f       	mul	r26, r18
    1034:	b0 01       	movw	r22, r0
    1036:	b3 9f       	mul	r27, r19
    1038:	c0 01       	movw	r24, r0
    103a:	a3 9f       	mul	r26, r19
    103c:	70 0d       	add	r23, r0
    103e:	81 1d       	adc	r24, r1
    1040:	11 24       	eor	r1, r1
    1042:	91 1d       	adc	r25, r1
    1044:	b2 9f       	mul	r27, r18
    1046:	70 0d       	add	r23, r0
    1048:	81 1d       	adc	r24, r1
    104a:	11 24       	eor	r1, r1
    104c:	91 1d       	adc	r25, r1
    104e:	08 95       	ret

00001050 <printf>:
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	ee e2       	ldi	r30, 0x2E	; 46
    1056:	f8 e0       	ldi	r31, 0x08	; 8
    1058:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <__prologue_saves__+0x20>
    105c:	ae 01       	movw	r20, r28
    105e:	4b 5f       	subi	r20, 0xFB	; 251
    1060:	5f 4f       	sbci	r21, 0xFF	; 255
    1062:	fa 01       	movw	r30, r20
    1064:	61 91       	ld	r22, Z+
    1066:	71 91       	ld	r23, Z+
    1068:	af 01       	movw	r20, r30
    106a:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <__iob+0x2>
    106e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__iob+0x3>
    1072:	0e 94 6e 08 	call	0x10dc	; 0x10dc <vfprintf>
    1076:	e2 e0       	ldi	r30, 0x02	; 2
    1078:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__epilogue_restores__+0x20>

0000107c <puts>:
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	e0 91 ff 00 	lds	r30, 0x00FF	; 0x8000ff <__iob+0x2>
    1088:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <__iob+0x3>
    108c:	23 81       	ldd	r18, Z+3	; 0x03
    108e:	21 ff       	sbrs	r18, 1
    1090:	1b c0       	rjmp	.+54     	; 0x10c8 <puts+0x4c>
    1092:	8c 01       	movw	r16, r24
    1094:	d0 e0       	ldi	r29, 0x00	; 0
    1096:	c0 e0       	ldi	r28, 0x00	; 0
    1098:	f8 01       	movw	r30, r16
    109a:	81 91       	ld	r24, Z+
    109c:	8f 01       	movw	r16, r30
    109e:	60 91 ff 00 	lds	r22, 0x00FF	; 0x8000ff <__iob+0x2>
    10a2:	70 91 00 01 	lds	r23, 0x0100	; 0x800100 <__iob+0x3>
    10a6:	db 01       	movw	r26, r22
    10a8:	18 96       	adiw	r26, 0x08	; 8
    10aa:	ed 91       	ld	r30, X+
    10ac:	fc 91       	ld	r31, X
    10ae:	19 97       	sbiw	r26, 0x09	; 9
    10b0:	88 23       	and	r24, r24
    10b2:	31 f0       	breq	.+12     	; 0x10c0 <puts+0x44>
    10b4:	09 95       	icall
    10b6:	89 2b       	or	r24, r25
    10b8:	79 f3       	breq	.-34     	; 0x1098 <puts+0x1c>
    10ba:	df ef       	ldi	r29, 0xFF	; 255
    10bc:	cf ef       	ldi	r28, 0xFF	; 255
    10be:	ec cf       	rjmp	.-40     	; 0x1098 <puts+0x1c>
    10c0:	8a e0       	ldi	r24, 0x0A	; 10
    10c2:	09 95       	icall
    10c4:	89 2b       	or	r24, r25
    10c6:	19 f0       	breq	.+6      	; 0x10ce <puts+0x52>
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	9f ef       	ldi	r25, 0xFF	; 255
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <puts+0x56>
    10ce:	8d 2f       	mov	r24, r29
    10d0:	9c 2f       	mov	r25, r28
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	08 95       	ret

000010dc <vfprintf>:
    10dc:	ab e0       	ldi	r26, 0x0B	; 11
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e4 e7       	ldi	r30, 0x74	; 116
    10e2:	f8 e0       	ldi	r31, 0x08	; 8
    10e4:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <__prologue_saves__>
    10e8:	6c 01       	movw	r12, r24
    10ea:	7b 01       	movw	r14, r22
    10ec:	8a 01       	movw	r16, r20
    10ee:	fc 01       	movw	r30, r24
    10f0:	17 82       	std	Z+7, r1	; 0x07
    10f2:	16 82       	std	Z+6, r1	; 0x06
    10f4:	83 81       	ldd	r24, Z+3	; 0x03
    10f6:	81 ff       	sbrs	r24, 1
    10f8:	cc c1       	rjmp	.+920    	; 0x1492 <vfprintf+0x3b6>
    10fa:	ce 01       	movw	r24, r28
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	3c 01       	movw	r6, r24
    1100:	f6 01       	movw	r30, r12
    1102:	93 81       	ldd	r25, Z+3	; 0x03
    1104:	f7 01       	movw	r30, r14
    1106:	93 fd       	sbrc	r25, 3
    1108:	85 91       	lpm	r24, Z+
    110a:	93 ff       	sbrs	r25, 3
    110c:	81 91       	ld	r24, Z+
    110e:	7f 01       	movw	r14, r30
    1110:	88 23       	and	r24, r24
    1112:	09 f4       	brne	.+2      	; 0x1116 <vfprintf+0x3a>
    1114:	ba c1       	rjmp	.+884    	; 0x148a <vfprintf+0x3ae>
    1116:	85 32       	cpi	r24, 0x25	; 37
    1118:	39 f4       	brne	.+14     	; 0x1128 <vfprintf+0x4c>
    111a:	93 fd       	sbrc	r25, 3
    111c:	85 91       	lpm	r24, Z+
    111e:	93 ff       	sbrs	r25, 3
    1120:	81 91       	ld	r24, Z+
    1122:	7f 01       	movw	r14, r30
    1124:	85 32       	cpi	r24, 0x25	; 37
    1126:	29 f4       	brne	.+10     	; 0x1132 <vfprintf+0x56>
    1128:	b6 01       	movw	r22, r12
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    1130:	e7 cf       	rjmp	.-50     	; 0x1100 <vfprintf+0x24>
    1132:	91 2c       	mov	r9, r1
    1134:	21 2c       	mov	r2, r1
    1136:	31 2c       	mov	r3, r1
    1138:	ff e1       	ldi	r31, 0x1F	; 31
    113a:	f3 15       	cp	r31, r3
    113c:	d8 f0       	brcs	.+54     	; 0x1174 <vfprintf+0x98>
    113e:	8b 32       	cpi	r24, 0x2B	; 43
    1140:	79 f0       	breq	.+30     	; 0x1160 <vfprintf+0x84>
    1142:	38 f4       	brcc	.+14     	; 0x1152 <vfprintf+0x76>
    1144:	80 32       	cpi	r24, 0x20	; 32
    1146:	79 f0       	breq	.+30     	; 0x1166 <vfprintf+0x8a>
    1148:	83 32       	cpi	r24, 0x23	; 35
    114a:	a1 f4       	brne	.+40     	; 0x1174 <vfprintf+0x98>
    114c:	23 2d       	mov	r18, r3
    114e:	20 61       	ori	r18, 0x10	; 16
    1150:	1d c0       	rjmp	.+58     	; 0x118c <vfprintf+0xb0>
    1152:	8d 32       	cpi	r24, 0x2D	; 45
    1154:	61 f0       	breq	.+24     	; 0x116e <vfprintf+0x92>
    1156:	80 33       	cpi	r24, 0x30	; 48
    1158:	69 f4       	brne	.+26     	; 0x1174 <vfprintf+0x98>
    115a:	23 2d       	mov	r18, r3
    115c:	21 60       	ori	r18, 0x01	; 1
    115e:	16 c0       	rjmp	.+44     	; 0x118c <vfprintf+0xb0>
    1160:	83 2d       	mov	r24, r3
    1162:	82 60       	ori	r24, 0x02	; 2
    1164:	38 2e       	mov	r3, r24
    1166:	e3 2d       	mov	r30, r3
    1168:	e4 60       	ori	r30, 0x04	; 4
    116a:	3e 2e       	mov	r3, r30
    116c:	2a c0       	rjmp	.+84     	; 0x11c2 <vfprintf+0xe6>
    116e:	f3 2d       	mov	r31, r3
    1170:	f8 60       	ori	r31, 0x08	; 8
    1172:	1d c0       	rjmp	.+58     	; 0x11ae <vfprintf+0xd2>
    1174:	37 fc       	sbrc	r3, 7
    1176:	2d c0       	rjmp	.+90     	; 0x11d2 <vfprintf+0xf6>
    1178:	20 ed       	ldi	r18, 0xD0	; 208
    117a:	28 0f       	add	r18, r24
    117c:	2a 30       	cpi	r18, 0x0A	; 10
    117e:	40 f0       	brcs	.+16     	; 0x1190 <vfprintf+0xb4>
    1180:	8e 32       	cpi	r24, 0x2E	; 46
    1182:	b9 f4       	brne	.+46     	; 0x11b2 <vfprintf+0xd6>
    1184:	36 fc       	sbrc	r3, 6
    1186:	81 c1       	rjmp	.+770    	; 0x148a <vfprintf+0x3ae>
    1188:	23 2d       	mov	r18, r3
    118a:	20 64       	ori	r18, 0x40	; 64
    118c:	32 2e       	mov	r3, r18
    118e:	19 c0       	rjmp	.+50     	; 0x11c2 <vfprintf+0xe6>
    1190:	36 fe       	sbrs	r3, 6
    1192:	06 c0       	rjmp	.+12     	; 0x11a0 <vfprintf+0xc4>
    1194:	8a e0       	ldi	r24, 0x0A	; 10
    1196:	98 9e       	mul	r9, r24
    1198:	20 0d       	add	r18, r0
    119a:	11 24       	eor	r1, r1
    119c:	92 2e       	mov	r9, r18
    119e:	11 c0       	rjmp	.+34     	; 0x11c2 <vfprintf+0xe6>
    11a0:	ea e0       	ldi	r30, 0x0A	; 10
    11a2:	2e 9e       	mul	r2, r30
    11a4:	20 0d       	add	r18, r0
    11a6:	11 24       	eor	r1, r1
    11a8:	22 2e       	mov	r2, r18
    11aa:	f3 2d       	mov	r31, r3
    11ac:	f0 62       	ori	r31, 0x20	; 32
    11ae:	3f 2e       	mov	r3, r31
    11b0:	08 c0       	rjmp	.+16     	; 0x11c2 <vfprintf+0xe6>
    11b2:	8c 36       	cpi	r24, 0x6C	; 108
    11b4:	21 f4       	brne	.+8      	; 0x11be <vfprintf+0xe2>
    11b6:	83 2d       	mov	r24, r3
    11b8:	80 68       	ori	r24, 0x80	; 128
    11ba:	38 2e       	mov	r3, r24
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <vfprintf+0xe6>
    11be:	88 36       	cpi	r24, 0x68	; 104
    11c0:	41 f4       	brne	.+16     	; 0x11d2 <vfprintf+0xf6>
    11c2:	f7 01       	movw	r30, r14
    11c4:	93 fd       	sbrc	r25, 3
    11c6:	85 91       	lpm	r24, Z+
    11c8:	93 ff       	sbrs	r25, 3
    11ca:	81 91       	ld	r24, Z+
    11cc:	7f 01       	movw	r14, r30
    11ce:	81 11       	cpse	r24, r1
    11d0:	b3 cf       	rjmp	.-154    	; 0x1138 <vfprintf+0x5c>
    11d2:	98 2f       	mov	r25, r24
    11d4:	9f 7d       	andi	r25, 0xDF	; 223
    11d6:	95 54       	subi	r25, 0x45	; 69
    11d8:	93 30       	cpi	r25, 0x03	; 3
    11da:	28 f4       	brcc	.+10     	; 0x11e6 <vfprintf+0x10a>
    11dc:	0c 5f       	subi	r16, 0xFC	; 252
    11de:	1f 4f       	sbci	r17, 0xFF	; 255
    11e0:	9f e3       	ldi	r25, 0x3F	; 63
    11e2:	99 83       	std	Y+1, r25	; 0x01
    11e4:	0d c0       	rjmp	.+26     	; 0x1200 <vfprintf+0x124>
    11e6:	83 36       	cpi	r24, 0x63	; 99
    11e8:	31 f0       	breq	.+12     	; 0x11f6 <vfprintf+0x11a>
    11ea:	83 37       	cpi	r24, 0x73	; 115
    11ec:	71 f0       	breq	.+28     	; 0x120a <vfprintf+0x12e>
    11ee:	83 35       	cpi	r24, 0x53	; 83
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <vfprintf+0x118>
    11f2:	59 c0       	rjmp	.+178    	; 0x12a6 <vfprintf+0x1ca>
    11f4:	21 c0       	rjmp	.+66     	; 0x1238 <vfprintf+0x15c>
    11f6:	f8 01       	movw	r30, r16
    11f8:	80 81       	ld	r24, Z
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	0e 5f       	subi	r16, 0xFE	; 254
    11fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1200:	88 24       	eor	r8, r8
    1202:	83 94       	inc	r8
    1204:	91 2c       	mov	r9, r1
    1206:	53 01       	movw	r10, r6
    1208:	13 c0       	rjmp	.+38     	; 0x1230 <vfprintf+0x154>
    120a:	28 01       	movw	r4, r16
    120c:	f2 e0       	ldi	r31, 0x02	; 2
    120e:	4f 0e       	add	r4, r31
    1210:	51 1c       	adc	r5, r1
    1212:	f8 01       	movw	r30, r16
    1214:	a0 80       	ld	r10, Z
    1216:	b1 80       	ldd	r11, Z+1	; 0x01
    1218:	36 fe       	sbrs	r3, 6
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <vfprintf+0x146>
    121c:	69 2d       	mov	r22, r9
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <vfprintf+0x14a>
    1222:	6f ef       	ldi	r22, 0xFF	; 255
    1224:	7f ef       	ldi	r23, 0xFF	; 255
    1226:	c5 01       	movw	r24, r10
    1228:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <strnlen>
    122c:	4c 01       	movw	r8, r24
    122e:	82 01       	movw	r16, r4
    1230:	f3 2d       	mov	r31, r3
    1232:	ff 77       	andi	r31, 0x7F	; 127
    1234:	3f 2e       	mov	r3, r31
    1236:	16 c0       	rjmp	.+44     	; 0x1264 <vfprintf+0x188>
    1238:	28 01       	movw	r4, r16
    123a:	22 e0       	ldi	r18, 0x02	; 2
    123c:	42 0e       	add	r4, r18
    123e:	51 1c       	adc	r5, r1
    1240:	f8 01       	movw	r30, r16
    1242:	a0 80       	ld	r10, Z
    1244:	b1 80       	ldd	r11, Z+1	; 0x01
    1246:	36 fe       	sbrs	r3, 6
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <vfprintf+0x174>
    124a:	69 2d       	mov	r22, r9
    124c:	70 e0       	ldi	r23, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <vfprintf+0x178>
    1250:	6f ef       	ldi	r22, 0xFF	; 255
    1252:	7f ef       	ldi	r23, 0xFF	; 255
    1254:	c5 01       	movw	r24, r10
    1256:	0e 94 4f 0a 	call	0x149e	; 0x149e <strnlen_P>
    125a:	4c 01       	movw	r8, r24
    125c:	f3 2d       	mov	r31, r3
    125e:	f0 68       	ori	r31, 0x80	; 128
    1260:	3f 2e       	mov	r3, r31
    1262:	82 01       	movw	r16, r4
    1264:	33 fc       	sbrc	r3, 3
    1266:	1b c0       	rjmp	.+54     	; 0x129e <vfprintf+0x1c2>
    1268:	82 2d       	mov	r24, r2
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	88 16       	cp	r8, r24
    126e:	99 06       	cpc	r9, r25
    1270:	b0 f4       	brcc	.+44     	; 0x129e <vfprintf+0x1c2>
    1272:	b6 01       	movw	r22, r12
    1274:	80 e2       	ldi	r24, 0x20	; 32
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    127c:	2a 94       	dec	r2
    127e:	f4 cf       	rjmp	.-24     	; 0x1268 <vfprintf+0x18c>
    1280:	f5 01       	movw	r30, r10
    1282:	37 fc       	sbrc	r3, 7
    1284:	85 91       	lpm	r24, Z+
    1286:	37 fe       	sbrs	r3, 7
    1288:	81 91       	ld	r24, Z+
    128a:	5f 01       	movw	r10, r30
    128c:	b6 01       	movw	r22, r12
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    1294:	21 10       	cpse	r2, r1
    1296:	2a 94       	dec	r2
    1298:	21 e0       	ldi	r18, 0x01	; 1
    129a:	82 1a       	sub	r8, r18
    129c:	91 08       	sbc	r9, r1
    129e:	81 14       	cp	r8, r1
    12a0:	91 04       	cpc	r9, r1
    12a2:	71 f7       	brne	.-36     	; 0x1280 <vfprintf+0x1a4>
    12a4:	e8 c0       	rjmp	.+464    	; 0x1476 <vfprintf+0x39a>
    12a6:	84 36       	cpi	r24, 0x64	; 100
    12a8:	11 f0       	breq	.+4      	; 0x12ae <vfprintf+0x1d2>
    12aa:	89 36       	cpi	r24, 0x69	; 105
    12ac:	41 f5       	brne	.+80     	; 0x12fe <vfprintf+0x222>
    12ae:	f8 01       	movw	r30, r16
    12b0:	37 fe       	sbrs	r3, 7
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <vfprintf+0x1e6>
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	0c 5f       	subi	r16, 0xFC	; 252
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	08 c0       	rjmp	.+16     	; 0x12d2 <vfprintf+0x1f6>
    12c2:	60 81       	ld	r22, Z
    12c4:	71 81       	ldd	r23, Z+1	; 0x01
    12c6:	07 2e       	mov	r0, r23
    12c8:	00 0c       	add	r0, r0
    12ca:	88 0b       	sbc	r24, r24
    12cc:	99 0b       	sbc	r25, r25
    12ce:	0e 5f       	subi	r16, 0xFE	; 254
    12d0:	1f 4f       	sbci	r17, 0xFF	; 255
    12d2:	f3 2d       	mov	r31, r3
    12d4:	ff 76       	andi	r31, 0x6F	; 111
    12d6:	3f 2e       	mov	r3, r31
    12d8:	97 ff       	sbrs	r25, 7
    12da:	09 c0       	rjmp	.+18     	; 0x12ee <vfprintf+0x212>
    12dc:	90 95       	com	r25
    12de:	80 95       	com	r24
    12e0:	70 95       	com	r23
    12e2:	61 95       	neg	r22
    12e4:	7f 4f       	sbci	r23, 0xFF	; 255
    12e6:	8f 4f       	sbci	r24, 0xFF	; 255
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	f0 68       	ori	r31, 0x80	; 128
    12ec:	3f 2e       	mov	r3, r31
    12ee:	2a e0       	ldi	r18, 0x0A	; 10
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	a3 01       	movw	r20, r6
    12f4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__ultoa_invert>
    12f8:	88 2e       	mov	r8, r24
    12fa:	86 18       	sub	r8, r6
    12fc:	45 c0       	rjmp	.+138    	; 0x1388 <vfprintf+0x2ac>
    12fe:	85 37       	cpi	r24, 0x75	; 117
    1300:	31 f4       	brne	.+12     	; 0x130e <vfprintf+0x232>
    1302:	23 2d       	mov	r18, r3
    1304:	2f 7e       	andi	r18, 0xEF	; 239
    1306:	b2 2e       	mov	r11, r18
    1308:	2a e0       	ldi	r18, 0x0A	; 10
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	25 c0       	rjmp	.+74     	; 0x1358 <vfprintf+0x27c>
    130e:	93 2d       	mov	r25, r3
    1310:	99 7f       	andi	r25, 0xF9	; 249
    1312:	b9 2e       	mov	r11, r25
    1314:	8f 36       	cpi	r24, 0x6F	; 111
    1316:	c1 f0       	breq	.+48     	; 0x1348 <vfprintf+0x26c>
    1318:	18 f4       	brcc	.+6      	; 0x1320 <vfprintf+0x244>
    131a:	88 35       	cpi	r24, 0x58	; 88
    131c:	79 f0       	breq	.+30     	; 0x133c <vfprintf+0x260>
    131e:	b5 c0       	rjmp	.+362    	; 0x148a <vfprintf+0x3ae>
    1320:	80 37       	cpi	r24, 0x70	; 112
    1322:	19 f0       	breq	.+6      	; 0x132a <vfprintf+0x24e>
    1324:	88 37       	cpi	r24, 0x78	; 120
    1326:	21 f0       	breq	.+8      	; 0x1330 <vfprintf+0x254>
    1328:	b0 c0       	rjmp	.+352    	; 0x148a <vfprintf+0x3ae>
    132a:	e9 2f       	mov	r30, r25
    132c:	e0 61       	ori	r30, 0x10	; 16
    132e:	be 2e       	mov	r11, r30
    1330:	b4 fe       	sbrs	r11, 4
    1332:	0d c0       	rjmp	.+26     	; 0x134e <vfprintf+0x272>
    1334:	fb 2d       	mov	r31, r11
    1336:	f4 60       	ori	r31, 0x04	; 4
    1338:	bf 2e       	mov	r11, r31
    133a:	09 c0       	rjmp	.+18     	; 0x134e <vfprintf+0x272>
    133c:	34 fe       	sbrs	r3, 4
    133e:	0a c0       	rjmp	.+20     	; 0x1354 <vfprintf+0x278>
    1340:	29 2f       	mov	r18, r25
    1342:	26 60       	ori	r18, 0x06	; 6
    1344:	b2 2e       	mov	r11, r18
    1346:	06 c0       	rjmp	.+12     	; 0x1354 <vfprintf+0x278>
    1348:	28 e0       	ldi	r18, 0x08	; 8
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <vfprintf+0x27c>
    134e:	20 e1       	ldi	r18, 0x10	; 16
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <vfprintf+0x27c>
    1354:	20 e1       	ldi	r18, 0x10	; 16
    1356:	32 e0       	ldi	r19, 0x02	; 2
    1358:	f8 01       	movw	r30, r16
    135a:	b7 fe       	sbrs	r11, 7
    135c:	07 c0       	rjmp	.+14     	; 0x136c <vfprintf+0x290>
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	0c 5f       	subi	r16, 0xFC	; 252
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <vfprintf+0x29c>
    136c:	60 81       	ld	r22, Z
    136e:	71 81       	ldd	r23, Z+1	; 0x01
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 5f       	subi	r16, 0xFE	; 254
    1376:	1f 4f       	sbci	r17, 0xFF	; 255
    1378:	a3 01       	movw	r20, r6
    137a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <__ultoa_invert>
    137e:	88 2e       	mov	r8, r24
    1380:	86 18       	sub	r8, r6
    1382:	fb 2d       	mov	r31, r11
    1384:	ff 77       	andi	r31, 0x7F	; 127
    1386:	3f 2e       	mov	r3, r31
    1388:	36 fe       	sbrs	r3, 6
    138a:	0d c0       	rjmp	.+26     	; 0x13a6 <vfprintf+0x2ca>
    138c:	23 2d       	mov	r18, r3
    138e:	2e 7f       	andi	r18, 0xFE	; 254
    1390:	a2 2e       	mov	r10, r18
    1392:	89 14       	cp	r8, r9
    1394:	58 f4       	brcc	.+22     	; 0x13ac <vfprintf+0x2d0>
    1396:	34 fe       	sbrs	r3, 4
    1398:	0b c0       	rjmp	.+22     	; 0x13b0 <vfprintf+0x2d4>
    139a:	32 fc       	sbrc	r3, 2
    139c:	09 c0       	rjmp	.+18     	; 0x13b0 <vfprintf+0x2d4>
    139e:	83 2d       	mov	r24, r3
    13a0:	8e 7e       	andi	r24, 0xEE	; 238
    13a2:	a8 2e       	mov	r10, r24
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <vfprintf+0x2d4>
    13a6:	b8 2c       	mov	r11, r8
    13a8:	a3 2c       	mov	r10, r3
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <vfprintf+0x2d6>
    13ac:	b8 2c       	mov	r11, r8
    13ae:	01 c0       	rjmp	.+2      	; 0x13b2 <vfprintf+0x2d6>
    13b0:	b9 2c       	mov	r11, r9
    13b2:	a4 fe       	sbrs	r10, 4
    13b4:	0f c0       	rjmp	.+30     	; 0x13d4 <vfprintf+0x2f8>
    13b6:	fe 01       	movw	r30, r28
    13b8:	e8 0d       	add	r30, r8
    13ba:	f1 1d       	adc	r31, r1
    13bc:	80 81       	ld	r24, Z
    13be:	80 33       	cpi	r24, 0x30	; 48
    13c0:	21 f4       	brne	.+8      	; 0x13ca <vfprintf+0x2ee>
    13c2:	9a 2d       	mov	r25, r10
    13c4:	99 7e       	andi	r25, 0xE9	; 233
    13c6:	a9 2e       	mov	r10, r25
    13c8:	09 c0       	rjmp	.+18     	; 0x13dc <vfprintf+0x300>
    13ca:	a2 fe       	sbrs	r10, 2
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <vfprintf+0x2fe>
    13ce:	b3 94       	inc	r11
    13d0:	b3 94       	inc	r11
    13d2:	04 c0       	rjmp	.+8      	; 0x13dc <vfprintf+0x300>
    13d4:	8a 2d       	mov	r24, r10
    13d6:	86 78       	andi	r24, 0x86	; 134
    13d8:	09 f0       	breq	.+2      	; 0x13dc <vfprintf+0x300>
    13da:	b3 94       	inc	r11
    13dc:	a3 fc       	sbrc	r10, 3
    13de:	11 c0       	rjmp	.+34     	; 0x1402 <vfprintf+0x326>
    13e0:	a0 fe       	sbrs	r10, 0
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <vfprintf+0x314>
    13e4:	b2 14       	cp	r11, r2
    13e6:	88 f4       	brcc	.+34     	; 0x140a <vfprintf+0x32e>
    13e8:	28 0c       	add	r2, r8
    13ea:	92 2c       	mov	r9, r2
    13ec:	9b 18       	sub	r9, r11
    13ee:	0e c0       	rjmp	.+28     	; 0x140c <vfprintf+0x330>
    13f0:	b2 14       	cp	r11, r2
    13f2:	60 f4       	brcc	.+24     	; 0x140c <vfprintf+0x330>
    13f4:	b6 01       	movw	r22, r12
    13f6:	80 e2       	ldi	r24, 0x20	; 32
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    13fe:	b3 94       	inc	r11
    1400:	f7 cf       	rjmp	.-18     	; 0x13f0 <vfprintf+0x314>
    1402:	b2 14       	cp	r11, r2
    1404:	18 f4       	brcc	.+6      	; 0x140c <vfprintf+0x330>
    1406:	2b 18       	sub	r2, r11
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x332>
    140a:	98 2c       	mov	r9, r8
    140c:	21 2c       	mov	r2, r1
    140e:	a4 fe       	sbrs	r10, 4
    1410:	10 c0       	rjmp	.+32     	; 0x1432 <vfprintf+0x356>
    1412:	b6 01       	movw	r22, r12
    1414:	80 e3       	ldi	r24, 0x30	; 48
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    141c:	a2 fe       	sbrs	r10, 2
    141e:	17 c0       	rjmp	.+46     	; 0x144e <vfprintf+0x372>
    1420:	a1 fc       	sbrc	r10, 1
    1422:	03 c0       	rjmp	.+6      	; 0x142a <vfprintf+0x34e>
    1424:	88 e7       	ldi	r24, 0x78	; 120
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	02 c0       	rjmp	.+4      	; 0x142e <vfprintf+0x352>
    142a:	88 e5       	ldi	r24, 0x58	; 88
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	b6 01       	movw	r22, r12
    1430:	0c c0       	rjmp	.+24     	; 0x144a <vfprintf+0x36e>
    1432:	8a 2d       	mov	r24, r10
    1434:	86 78       	andi	r24, 0x86	; 134
    1436:	59 f0       	breq	.+22     	; 0x144e <vfprintf+0x372>
    1438:	a1 fe       	sbrs	r10, 1
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <vfprintf+0x364>
    143c:	8b e2       	ldi	r24, 0x2B	; 43
    143e:	01 c0       	rjmp	.+2      	; 0x1442 <vfprintf+0x366>
    1440:	80 e2       	ldi	r24, 0x20	; 32
    1442:	a7 fc       	sbrc	r10, 7
    1444:	8d e2       	ldi	r24, 0x2D	; 45
    1446:	b6 01       	movw	r22, r12
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    144e:	89 14       	cp	r8, r9
    1450:	38 f4       	brcc	.+14     	; 0x1460 <vfprintf+0x384>
    1452:	b6 01       	movw	r22, r12
    1454:	80 e3       	ldi	r24, 0x30	; 48
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    145c:	9a 94       	dec	r9
    145e:	f7 cf       	rjmp	.-18     	; 0x144e <vfprintf+0x372>
    1460:	8a 94       	dec	r8
    1462:	f3 01       	movw	r30, r6
    1464:	e8 0d       	add	r30, r8
    1466:	f1 1d       	adc	r31, r1
    1468:	80 81       	ld	r24, Z
    146a:	b6 01       	movw	r22, r12
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    1472:	81 10       	cpse	r8, r1
    1474:	f5 cf       	rjmp	.-22     	; 0x1460 <vfprintf+0x384>
    1476:	22 20       	and	r2, r2
    1478:	09 f4       	brne	.+2      	; 0x147c <vfprintf+0x3a0>
    147a:	42 ce       	rjmp	.-892    	; 0x1100 <vfprintf+0x24>
    147c:	b6 01       	movw	r22, r12
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fputc>
    1486:	2a 94       	dec	r2
    1488:	f6 cf       	rjmp	.-20     	; 0x1476 <vfprintf+0x39a>
    148a:	f6 01       	movw	r30, r12
    148c:	86 81       	ldd	r24, Z+6	; 0x06
    148e:	97 81       	ldd	r25, Z+7	; 0x07
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0x3ba>
    1492:	8f ef       	ldi	r24, 0xFF	; 255
    1494:	9f ef       	ldi	r25, 0xFF	; 255
    1496:	2b 96       	adiw	r28, 0x0b	; 11
    1498:	e2 e1       	ldi	r30, 0x12	; 18
    149a:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__epilogue_restores__>

0000149e <strnlen_P>:
    149e:	fc 01       	movw	r30, r24
    14a0:	05 90       	lpm	r0, Z+
    14a2:	61 50       	subi	r22, 0x01	; 1
    14a4:	70 40       	sbci	r23, 0x00	; 0
    14a6:	01 10       	cpse	r0, r1
    14a8:	d8 f7       	brcc	.-10     	; 0x14a0 <strnlen_P+0x2>
    14aa:	80 95       	com	r24
    14ac:	90 95       	com	r25
    14ae:	8e 0f       	add	r24, r30
    14b0:	9f 1f       	adc	r25, r31
    14b2:	08 95       	ret

000014b4 <strnlen>:
    14b4:	fc 01       	movw	r30, r24
    14b6:	61 50       	subi	r22, 0x01	; 1
    14b8:	70 40       	sbci	r23, 0x00	; 0
    14ba:	01 90       	ld	r0, Z+
    14bc:	01 10       	cpse	r0, r1
    14be:	d8 f7       	brcc	.-10     	; 0x14b6 <strnlen+0x2>
    14c0:	80 95       	com	r24
    14c2:	90 95       	com	r25
    14c4:	8e 0f       	add	r24, r30
    14c6:	9f 1f       	adc	r25, r31
    14c8:	08 95       	ret

000014ca <fputc>:
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	fb 01       	movw	r30, r22
    14d4:	23 81       	ldd	r18, Z+3	; 0x03
    14d6:	21 fd       	sbrc	r18, 1
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <fputc+0x16>
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	9f ef       	ldi	r25, 0xFF	; 255
    14de:	2c c0       	rjmp	.+88     	; 0x1538 <fputc+0x6e>
    14e0:	22 ff       	sbrs	r18, 2
    14e2:	16 c0       	rjmp	.+44     	; 0x1510 <fputc+0x46>
    14e4:	46 81       	ldd	r20, Z+6	; 0x06
    14e6:	57 81       	ldd	r21, Z+7	; 0x07
    14e8:	24 81       	ldd	r18, Z+4	; 0x04
    14ea:	35 81       	ldd	r19, Z+5	; 0x05
    14ec:	42 17       	cp	r20, r18
    14ee:	53 07       	cpc	r21, r19
    14f0:	44 f4       	brge	.+16     	; 0x1502 <fputc+0x38>
    14f2:	a0 81       	ld	r26, Z
    14f4:	b1 81       	ldd	r27, Z+1	; 0x01
    14f6:	9d 01       	movw	r18, r26
    14f8:	2f 5f       	subi	r18, 0xFF	; 255
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
    14fc:	31 83       	std	Z+1, r19	; 0x01
    14fe:	20 83       	st	Z, r18
    1500:	8c 93       	st	X, r24
    1502:	26 81       	ldd	r18, Z+6	; 0x06
    1504:	37 81       	ldd	r19, Z+7	; 0x07
    1506:	2f 5f       	subi	r18, 0xFF	; 255
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	37 83       	std	Z+7, r19	; 0x07
    150c:	26 83       	std	Z+6, r18	; 0x06
    150e:	14 c0       	rjmp	.+40     	; 0x1538 <fputc+0x6e>
    1510:	8b 01       	movw	r16, r22
    1512:	ec 01       	movw	r28, r24
    1514:	fb 01       	movw	r30, r22
    1516:	00 84       	ldd	r0, Z+8	; 0x08
    1518:	f1 85       	ldd	r31, Z+9	; 0x09
    151a:	e0 2d       	mov	r30, r0
    151c:	09 95       	icall
    151e:	89 2b       	or	r24, r25
    1520:	e1 f6       	brne	.-72     	; 0x14da <fputc+0x10>
    1522:	d8 01       	movw	r26, r16
    1524:	16 96       	adiw	r26, 0x06	; 6
    1526:	8d 91       	ld	r24, X+
    1528:	9c 91       	ld	r25, X
    152a:	17 97       	sbiw	r26, 0x07	; 7
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	17 96       	adiw	r26, 0x07	; 7
    1530:	9c 93       	st	X, r25
    1532:	8e 93       	st	-X, r24
    1534:	16 97       	sbiw	r26, 0x06	; 6
    1536:	ce 01       	movw	r24, r28
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	08 95       	ret

00001542 <__ultoa_invert>:
    1542:	fa 01       	movw	r30, r20
    1544:	aa 27       	eor	r26, r26
    1546:	28 30       	cpi	r18, 0x08	; 8
    1548:	51 f1       	breq	.+84     	; 0x159e <__ultoa_invert+0x5c>
    154a:	20 31       	cpi	r18, 0x10	; 16
    154c:	81 f1       	breq	.+96     	; 0x15ae <__ultoa_invert+0x6c>
    154e:	e8 94       	clt
    1550:	6f 93       	push	r22
    1552:	6e 7f       	andi	r22, 0xFE	; 254
    1554:	6e 5f       	subi	r22, 0xFE	; 254
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	8f 4f       	sbci	r24, 0xFF	; 255
    155a:	9f 4f       	sbci	r25, 0xFF	; 255
    155c:	af 4f       	sbci	r26, 0xFF	; 255
    155e:	b1 e0       	ldi	r27, 0x01	; 1
    1560:	3e d0       	rcall	.+124    	; 0x15de <__ultoa_invert+0x9c>
    1562:	b4 e0       	ldi	r27, 0x04	; 4
    1564:	3c d0       	rcall	.+120    	; 0x15de <__ultoa_invert+0x9c>
    1566:	67 0f       	add	r22, r23
    1568:	78 1f       	adc	r23, r24
    156a:	89 1f       	adc	r24, r25
    156c:	9a 1f       	adc	r25, r26
    156e:	a1 1d       	adc	r26, r1
    1570:	68 0f       	add	r22, r24
    1572:	79 1f       	adc	r23, r25
    1574:	8a 1f       	adc	r24, r26
    1576:	91 1d       	adc	r25, r1
    1578:	a1 1d       	adc	r26, r1
    157a:	6a 0f       	add	r22, r26
    157c:	71 1d       	adc	r23, r1
    157e:	81 1d       	adc	r24, r1
    1580:	91 1d       	adc	r25, r1
    1582:	a1 1d       	adc	r26, r1
    1584:	20 d0       	rcall	.+64     	; 0x15c6 <__ultoa_invert+0x84>
    1586:	09 f4       	brne	.+2      	; 0x158a <__ultoa_invert+0x48>
    1588:	68 94       	set
    158a:	3f 91       	pop	r19
    158c:	2a e0       	ldi	r18, 0x0A	; 10
    158e:	26 9f       	mul	r18, r22
    1590:	11 24       	eor	r1, r1
    1592:	30 19       	sub	r19, r0
    1594:	30 5d       	subi	r19, 0xD0	; 208
    1596:	31 93       	st	Z+, r19
    1598:	de f6       	brtc	.-74     	; 0x1550 <__ultoa_invert+0xe>
    159a:	cf 01       	movw	r24, r30
    159c:	08 95       	ret
    159e:	46 2f       	mov	r20, r22
    15a0:	47 70       	andi	r20, 0x07	; 7
    15a2:	40 5d       	subi	r20, 0xD0	; 208
    15a4:	41 93       	st	Z+, r20
    15a6:	b3 e0       	ldi	r27, 0x03	; 3
    15a8:	0f d0       	rcall	.+30     	; 0x15c8 <__ultoa_invert+0x86>
    15aa:	c9 f7       	brne	.-14     	; 0x159e <__ultoa_invert+0x5c>
    15ac:	f6 cf       	rjmp	.-20     	; 0x159a <__ultoa_invert+0x58>
    15ae:	46 2f       	mov	r20, r22
    15b0:	4f 70       	andi	r20, 0x0F	; 15
    15b2:	40 5d       	subi	r20, 0xD0	; 208
    15b4:	4a 33       	cpi	r20, 0x3A	; 58
    15b6:	18 f0       	brcs	.+6      	; 0x15be <__ultoa_invert+0x7c>
    15b8:	49 5d       	subi	r20, 0xD9	; 217
    15ba:	31 fd       	sbrc	r19, 1
    15bc:	40 52       	subi	r20, 0x20	; 32
    15be:	41 93       	st	Z+, r20
    15c0:	02 d0       	rcall	.+4      	; 0x15c6 <__ultoa_invert+0x84>
    15c2:	a9 f7       	brne	.-22     	; 0x15ae <__ultoa_invert+0x6c>
    15c4:	ea cf       	rjmp	.-44     	; 0x159a <__ultoa_invert+0x58>
    15c6:	b4 e0       	ldi	r27, 0x04	; 4
    15c8:	a6 95       	lsr	r26
    15ca:	97 95       	ror	r25
    15cc:	87 95       	ror	r24
    15ce:	77 95       	ror	r23
    15d0:	67 95       	ror	r22
    15d2:	ba 95       	dec	r27
    15d4:	c9 f7       	brne	.-14     	; 0x15c8 <__ultoa_invert+0x86>
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	61 05       	cpc	r22, r1
    15da:	71 05       	cpc	r23, r1
    15dc:	08 95       	ret
    15de:	9b 01       	movw	r18, r22
    15e0:	ac 01       	movw	r20, r24
    15e2:	0a 2e       	mov	r0, r26
    15e4:	06 94       	lsr	r0
    15e6:	57 95       	ror	r21
    15e8:	47 95       	ror	r20
    15ea:	37 95       	ror	r19
    15ec:	27 95       	ror	r18
    15ee:	ba 95       	dec	r27
    15f0:	c9 f7       	brne	.-14     	; 0x15e4 <__ultoa_invert+0xa2>
    15f2:	62 0f       	add	r22, r18
    15f4:	73 1f       	adc	r23, r19
    15f6:	84 1f       	adc	r24, r20
    15f8:	95 1f       	adc	r25, r21
    15fa:	a0 1d       	adc	r26, r0
    15fc:	08 95       	ret

000015fe <eeprom_read_byte>:
    15fe:	e1 99       	sbic	0x1c, 1	; 28
    1600:	fe cf       	rjmp	.-4      	; 0x15fe <eeprom_read_byte>
    1602:	9f bb       	out	0x1f, r25	; 31
    1604:	8e bb       	out	0x1e, r24	; 30
    1606:	e0 9a       	sbi	0x1c, 0	; 28
    1608:	99 27       	eor	r25, r25
    160a:	8d b3       	in	r24, 0x1d	; 29
    160c:	08 95       	ret

0000160e <eeprom_update_byte>:
    160e:	26 2f       	mov	r18, r22

00001610 <eeprom_update_r18>:
    1610:	e1 99       	sbic	0x1c, 1	; 28
    1612:	fe cf       	rjmp	.-4      	; 0x1610 <eeprom_update_r18>
    1614:	9f bb       	out	0x1f, r25	; 31
    1616:	8e bb       	out	0x1e, r24	; 30
    1618:	e0 9a       	sbi	0x1c, 0	; 28
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	0d b2       	in	r0, 0x1d	; 29
    161e:	02 16       	cp	r0, r18
    1620:	31 f0       	breq	.+12     	; 0x162e <eeprom_update_r18+0x1e>
    1622:	2d bb       	out	0x1d, r18	; 29
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	e2 9a       	sbi	0x1c, 2	; 28
    162a:	e1 9a       	sbi	0x1c, 1	; 28
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	08 95       	ret

00001630 <__prologue_saves__>:
    1630:	2f 92       	push	r2
    1632:	3f 92       	push	r3
    1634:	4f 92       	push	r4
    1636:	5f 92       	push	r5
    1638:	6f 92       	push	r6
    163a:	7f 92       	push	r7
    163c:	8f 92       	push	r8
    163e:	9f 92       	push	r9
    1640:	af 92       	push	r10
    1642:	bf 92       	push	r11
    1644:	cf 92       	push	r12
    1646:	df 92       	push	r13
    1648:	ef 92       	push	r14
    164a:	ff 92       	push	r15
    164c:	0f 93       	push	r16
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	ca 1b       	sub	r28, r26
    165a:	db 0b       	sbc	r29, r27
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	09 94       	ijmp

00001668 <__epilogue_restores__>:
    1668:	2a 88       	ldd	r2, Y+18	; 0x12
    166a:	39 88       	ldd	r3, Y+17	; 0x11
    166c:	48 88       	ldd	r4, Y+16	; 0x10
    166e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1670:	6e 84       	ldd	r6, Y+14	; 0x0e
    1672:	7d 84       	ldd	r7, Y+13	; 0x0d
    1674:	8c 84       	ldd	r8, Y+12	; 0x0c
    1676:	9b 84       	ldd	r9, Y+11	; 0x0b
    1678:	aa 84       	ldd	r10, Y+10	; 0x0a
    167a:	b9 84       	ldd	r11, Y+9	; 0x09
    167c:	c8 84       	ldd	r12, Y+8	; 0x08
    167e:	df 80       	ldd	r13, Y+7	; 0x07
    1680:	ee 80       	ldd	r14, Y+6	; 0x06
    1682:	fd 80       	ldd	r15, Y+5	; 0x05
    1684:	0c 81       	ldd	r16, Y+4	; 0x04
    1686:	1b 81       	ldd	r17, Y+3	; 0x03
    1688:	aa 81       	ldd	r26, Y+2	; 0x02
    168a:	b9 81       	ldd	r27, Y+1	; 0x01
    168c:	ce 0f       	add	r28, r30
    168e:	d1 1d       	adc	r29, r1
    1690:	0f b6       	in	r0, 0x3f	; 63
    1692:	f8 94       	cli
    1694:	de bf       	out	0x3e, r29	; 62
    1696:	0f be       	out	0x3f, r0	; 63
    1698:	cd bf       	out	0x3d, r28	; 61
    169a:	ed 01       	movw	r28, r26
    169c:	08 95       	ret

0000169e <_exit>:
    169e:	f8 94       	cli

000016a0 <__stop_program>:
    16a0:	ff cf       	rjmp	.-2      	; 0x16a0 <__stop_program>
