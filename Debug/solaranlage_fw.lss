
solaranlage_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00002142  000021d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  00800092  00800092  00002208  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000022a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010e9  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8f  00000000  00000000  00003539  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000193a  00000000  00000000  00003fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  00005904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f7f  00000000  00000000  00005e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab6  00000000  00000000  0000cdeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000d8a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d47  00000000  00000000  0000d9b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_1>
       8:	0c 94 26 03 	jmp	0x64c	; 0x64c <__vector_2>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 6c 06 	jmp	0xcd8	; 0xcd8 <__vector_5>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__vector_9>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_11>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e2 e4       	ldi	r30, 0x42	; 66
     16a:	f1 e2       	ldi	r31, 0x21	; 33
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	a2 39       	cpi	r26, 0x92	; 146
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	a2 e9       	ldi	r26, 0x92	; 146
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a7 3b       	cpi	r26, 0xB7	; 183
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 a8 03 	call	0x750	; 0x750 <main>
     18c:	0c 94 9f 10 	jmp	0x213e	; 0x213e <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <SevenSeg_init>:
uint16_t kessel_anzeige = 0;
uint8_t on = 0;


void SevenSeg_init()
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);	//enable overflow-interrupt
     19c:	89 e5       	ldi	r24, 0x59	; 89
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	29 e5       	ldi	r18, 0x59	; 89
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	21 60       	ori	r18, 0x01	; 1
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
	
	sei();
     1ae:	78 94       	sei
}
     1b0:	00 00       	nop
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <SevenSeg_set_val>:

//seg: 1=dach; 0=kessel;   val: 0-9: 0-9; 10: off; 11: '-' at left segment (for negative values)
void SevenSeg_set_val(uint8_t seg, int16_t val)
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	27 97       	sbiw	r28, 0x07	; 7
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
     1cc:	8d 83       	std	Y+5, r24	; 0x05
     1ce:	7f 83       	std	Y+7, r23	; 0x07
     1d0:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t neg = 0;											//flag for negative values
     1d2:	19 82       	std	Y+1, r1	; 0x01
	
	if(seg == 1)												
     1d4:	8d 81       	ldd	r24, Y+5	; 0x05
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	51 f4       	brne	.+20     	; 0x1ee <SevenSeg_set_val+0x36>
	{
		if (val == dach_anzeige)								//if the value to set is not new, leave function
     1da:	2e 81       	ldd	r18, Y+6	; 0x06
     1dc:	3f 81       	ldd	r19, Y+7	; 0x07
     1de:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <dach_anzeige>
     1e2:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <dach_anzeige+0x1>
     1e6:	28 17       	cp	r18, r24
     1e8:	39 07       	cpc	r19, r25
     1ea:	71 f4       	brne	.+28     	; 0x208 <SevenSeg_set_val+0x50>
		{
			return;
     1ec:	b9 c0       	rjmp	.+370    	; 0x360 <SevenSeg_set_val+0x1a8>
		}
	}
	
	else if(seg == 0)		
     1ee:	8d 81       	ldd	r24, Y+5	; 0x05
     1f0:	88 23       	and	r24, r24
     1f2:	51 f4       	brne	.+20     	; 0x208 <SevenSeg_set_val+0x50>
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
     1f4:	2e 81       	ldd	r18, Y+6	; 0x06
     1f6:	3f 81       	ldd	r19, Y+7	; 0x07
     1f8:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <kessel_anzeige>
     1fc:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <kessel_anzeige+0x1>
     200:	28 17       	cp	r18, r24
     202:	39 07       	cpc	r19, r25
     204:	09 f4       	brne	.+2      	; 0x208 <SevenSeg_set_val+0x50>
     206:	ab c0       	rjmp	.+342    	; 0x35e <SevenSeg_set_val+0x1a6>
		{
			return;
		}
	}
	
	if(val==1000)												//if this display shall be switched off
     208:	8e 81       	ldd	r24, Y+6	; 0x06
     20a:	9f 81       	ldd	r25, Y+7	; 0x07
     20c:	88 3e       	cpi	r24, 0xE8	; 232
     20e:	93 40       	sbci	r25, 0x03	; 3
     210:	39 f5       	brne	.+78     	; 0x260 <SevenSeg_set_val+0xa8>
	{
		segs[seg]   = 10;
     212:	8d 81       	ldd	r24, Y+5	; 0x05
     214:	88 2f       	mov	r24, r24
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	8e 56       	subi	r24, 0x6E	; 110
     21e:	9f 4f       	sbci	r25, 0xFF	; 255
     220:	2a e0       	ldi	r18, 0x0A	; 10
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	31 83       	std	Z+1, r19	; 0x01
     228:	20 83       	st	Z, r18
		segs[seg+2] = 10;
     22a:	8d 81       	ldd	r24, Y+5	; 0x05
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	02 96       	adiw	r24, 0x02	; 2
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	8e 56       	subi	r24, 0x6E	; 110
     238:	9f 4f       	sbci	r25, 0xFF	; 255
     23a:	2a e0       	ldi	r18, 0x0A	; 10
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	fc 01       	movw	r30, r24
     240:	31 83       	std	Z+1, r19	; 0x01
     242:	20 83       	st	Z, r18
		segs[seg+4] = 10;
     244:	8d 81       	ldd	r24, Y+5	; 0x05
     246:	88 2f       	mov	r24, r24
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	04 96       	adiw	r24, 0x04	; 4
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	8e 56       	subi	r24, 0x6E	; 110
     252:	9f 4f       	sbci	r25, 0xFF	; 255
     254:	2a e0       	ldi	r18, 0x0A	; 10
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	fc 01       	movw	r30, r24
     25a:	31 83       	std	Z+1, r19	; 0x01
     25c:	20 83       	st	Z, r18
		return;
     25e:	80 c0       	rjmp	.+256    	; 0x360 <SevenSeg_set_val+0x1a8>
	}

	
	if(val < 0)													//if the value to set is negative
     260:	8e 81       	ldd	r24, Y+6	; 0x06
     262:	9f 81       	ldd	r25, Y+7	; 0x07
     264:	99 23       	and	r25, r25
     266:	94 f4       	brge	.+36     	; 0x28c <SevenSeg_set_val+0xd4>
	{
		val *= -1;												//calculate absolute value
     268:	8e 81       	ldd	r24, Y+6	; 0x06
     26a:	9f 81       	ldd	r25, Y+7	; 0x07
     26c:	91 95       	neg	r25
     26e:	81 95       	neg	r24
     270:	91 09       	sbc	r25, r1
     272:	9f 83       	std	Y+7, r25	; 0x07
     274:	8e 83       	std	Y+6, r24	; 0x06
		neg = 1;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	89 83       	std	Y+1, r24	; 0x01
		
		if(val > 99)											//because one segment is needed for the sign, only two digits are allowed
     27a:	8e 81       	ldd	r24, Y+6	; 0x06
     27c:	9f 81       	ldd	r25, Y+7	; 0x07
     27e:	84 36       	cpi	r24, 0x64	; 100
     280:	91 05       	cpc	r25, r1
     282:	24 f0       	brlt	.+8      	; 0x28c <SevenSeg_set_val+0xd4>
		{
			val = 99;
     284:	83 e6       	ldi	r24, 0x63	; 99
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	9f 83       	std	Y+7, r25	; 0x07
     28a:	8e 83       	std	Y+6, r24	; 0x06
		}
	}
	
	
	uint8_t h = (uint8_t) (val/100);							//separate the digits of the value
     28c:	8e 81       	ldd	r24, Y+6	; 0x06
     28e:	9f 81       	ldd	r25, Y+7	; 0x07
     290:	24 e6       	ldi	r18, 0x64	; 100
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	b9 01       	movw	r22, r18
     296:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__divmodhi4>
     29a:	cb 01       	movw	r24, r22
     29c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t z = (uint8_t) ((val- (h*100)) / 10 );
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	88 2f       	mov	r24, r24
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	4c e9       	ldi	r20, 0x9C	; 156
     2a6:	bc 01       	movw	r22, r24
     2a8:	46 03       	mulsu	r20, r22
     2aa:	90 01       	movw	r18, r0
     2ac:	47 9f       	mul	r20, r23
     2ae:	30 0d       	add	r19, r0
     2b0:	11 24       	eor	r1, r1
     2b2:	8e 81       	ldd	r24, Y+6	; 0x06
     2b4:	9f 81       	ldd	r25, Y+7	; 0x07
     2b6:	82 0f       	add	r24, r18
     2b8:	93 1f       	adc	r25, r19
     2ba:	2a e0       	ldi	r18, 0x0A	; 10
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	b9 01       	movw	r22, r18
     2c0:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__divmodhi4>
     2c4:	cb 01       	movw	r24, r22
     2c6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t e = (uint8_t)  (val- (h*100)- (z*10));
     2c8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ca:	2a 81       	ldd	r18, Y+2	; 0x02
     2cc:	84 e6       	ldi	r24, 0x64	; 100
     2ce:	28 9f       	mul	r18, r24
     2d0:	80 2d       	mov	r24, r0
     2d2:	11 24       	eor	r1, r1
     2d4:	98 1b       	sub	r25, r24
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	88 0f       	add	r24, r24
     2da:	28 2f       	mov	r18, r24
     2dc:	22 0f       	add	r18, r18
     2de:	22 0f       	add	r18, r18
     2e0:	82 0f       	add	r24, r18
     2e2:	79 2f       	mov	r23, r25
     2e4:	78 1b       	sub	r23, r24
     2e6:	87 2f       	mov	r24, r23
     2e8:	8c 83       	std	Y+4, r24	; 0x04

	
	segs[seg]   = e;											//set the digits at the propper position in the segment array
     2ea:	8d 81       	ldd	r24, Y+5	; 0x05
     2ec:	88 2f       	mov	r24, r24
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2c 81       	ldd	r18, Y+4	; 0x04
     2f2:	22 2f       	mov	r18, r18
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	8e 56       	subi	r24, 0x6E	; 110
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	fc 01       	movw	r30, r24
     300:	31 83       	std	Z+1, r19	; 0x01
     302:	20 83       	st	Z, r18
	segs[seg+2] = z;
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	88 2f       	mov	r24, r24
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 96       	adiw	r24, 0x02	; 2
     30c:	2b 81       	ldd	r18, Y+3	; 0x03
     30e:	22 2f       	mov	r18, r18
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	8e 56       	subi	r24, 0x6E	; 110
     318:	9f 4f       	sbci	r25, 0xFF	; 255
     31a:	fc 01       	movw	r30, r24
     31c:	31 83       	std	Z+1, r19	; 0x01
     31e:	20 83       	st	Z, r18
	segs[seg+4] = h;
     320:	8d 81       	ldd	r24, Y+5	; 0x05
     322:	88 2f       	mov	r24, r24
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	04 96       	adiw	r24, 0x04	; 4
     328:	2a 81       	ldd	r18, Y+2	; 0x02
     32a:	22 2f       	mov	r18, r18
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	8e 56       	subi	r24, 0x6E	; 110
     334:	9f 4f       	sbci	r25, 0xFF	; 255
     336:	fc 01       	movw	r30, r24
     338:	31 83       	std	Z+1, r19	; 0x01
     33a:	20 83       	st	Z, r18
	
	if(neg == 1)												//if this is a negative value..
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	81 30       	cpi	r24, 0x01	; 1
     340:	79 f4       	brne	.+30     	; 0x360 <SevenSeg_set_val+0x1a8>
	{
		segs[seg+4] = 11;										//overwrite the left segment with sign	
     342:	8d 81       	ldd	r24, Y+5	; 0x05
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	04 96       	adiw	r24, 0x04	; 4
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	8e 56       	subi	r24, 0x6E	; 110
     350:	9f 4f       	sbci	r25, 0xFF	; 255
     352:	2b e0       	ldi	r18, 0x0B	; 11
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	fc 01       	movw	r30, r24
     358:	31 83       	std	Z+1, r19	; 0x01
     35a:	20 83       	st	Z, r18
     35c:	01 c0       	rjmp	.+2      	; 0x360 <SevenSeg_set_val+0x1a8>
	
	else if(seg == 0)		
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
		{
			return;
     35e:	00 00       	nop
	
	if(neg == 1)												//if this is a negative value..
	{
		segs[seg+4] = 11;										//overwrite the left segment with sign	
	}
}
     360:	27 96       	adiw	r28, 0x07	; 7
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	ef 93       	push	r30
     388:	ff 93       	push	r31
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	1f 92       	push	r1
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
	cli();
     394:	f8 94       	cli
	
	if(segs[seg_cnt] != 10)					//if the current digit to display is valid (0..9)..
     396:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <seg_cnt>
     39a:	88 2f       	mov	r24, r24
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	8e 56       	subi	r24, 0x6E	; 110
     3a4:	9f 4f       	sbci	r25, 0xFF	; 255
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	91 81       	ldd	r25, Z+1	; 0x01
     3ac:	0a 97       	sbiw	r24, 0x0a	; 10
     3ae:	a1 f0       	breq	.+40     	; 0x3d8 <__vector_11+0x66>
	{
		PORTB = patterns[segs[seg_cnt]];	//set the propper pattern to the anodes.
     3b0:	88 e3       	ldi	r24, 0x38	; 56
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	20 91 9e 00 	lds	r18, 0x009E	; 0x80009e <seg_cnt>
     3b8:	22 2f       	mov	r18, r18
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	2e 56       	subi	r18, 0x6E	; 110
     3c2:	3f 4f       	sbci	r19, 0xFF	; 255
     3c4:	f9 01       	movw	r30, r18
     3c6:	20 81       	ld	r18, Z
     3c8:	31 81       	ldd	r19, Z+1	; 0x01
     3ca:	20 5a       	subi	r18, 0xA0	; 160
     3cc:	3f 4f       	sbci	r19, 0xFF	; 255
     3ce:	f9 01       	movw	r30, r18
     3d0:	20 81       	ld	r18, Z
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
     3d6:	1e c0       	rjmp	.+60     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	}
	else if	(segs[seg_cnt] == 10)			//if the current digit is 10, the segment shall be switched off.
     3d8:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <seg_cnt>
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	8e 56       	subi	r24, 0x6E	; 110
     3e6:	9f 4f       	sbci	r25, 0xFF	; 255
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	0a 97       	sbiw	r24, 0x0a	; 10
     3f0:	89 f4       	brne	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		PORTB = 0x00;						//therefore clear the anodes
     3f2:	88 e3       	ldi	r24, 0x38	; 56
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fc 01       	movw	r30, r24
     3f8:	10 82       	st	Z, r1
		seg_cnt ++;							//switch to next segment
     3fa:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <seg_cnt>
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <seg_cnt>
		
		if(seg_cnt == 6)	//looping
     404:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <seg_cnt>
     408:	86 30       	cpi	r24, 0x06	; 6
     40a:	11 f4       	brne	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			seg_cnt = 0;
     40c:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <seg_cnt>
		}
		sei();
     410:	78 94       	sei
		return;								//leave. The common cathode of this segment shall not be activated.
     412:	2b c0       	rjmp	.+86     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	}
	
	
	//if digit for this segment is valid..
	uint8_t a = (uint8_t) (~(1<<(seg_cnt + 2)));
     414:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <seg_cnt>
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9c 01       	movw	r18, r24
     41e:	2e 5f       	subi	r18, 0xFE	; 254
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	2a 95       	dec	r18
     42e:	e2 f7       	brpl	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     430:	80 95       	com	r24
     432:	89 83       	std	Y+1, r24	; 0x01
	PORTA = a & 0xFC;						//mask to avoid ADC-channels 0 and 1
     434:	8b e3       	ldi	r24, 0x3B	; 59
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	29 81       	ldd	r18, Y+1	; 0x01
     43a:	2c 7f       	andi	r18, 0xFC	; 252
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
	seg_cnt ++;								//switching to next segment
     440:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <seg_cnt>
     444:	8f 5f       	subi	r24, 0xFF	; 255
     446:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <seg_cnt>
	
	if(seg_cnt == 6)						//loop segment counter
     44a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <seg_cnt>
     44e:	86 30       	cpi	r24, 0x06	; 6
     450:	11 f4       	brne	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		seg_cnt = 0;
     452:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <seg_cnt>
	}
	
	TIFR &= ~(1<<TOV0);	//clear timer0 overflow interrupt flag
     456:	88 e5       	ldi	r24, 0x58	; 88
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	28 e5       	ldi	r18, 0x58	; 88
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	2e 7f       	andi	r18, 0xFE	; 254
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18
	
	sei();
     468:	78 94       	sei
}
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	ff 91       	pop	r31
     472:	ef 91       	pop	r30
     474:	9f 91       	pop	r25
     476:	8f 91       	pop	r24
     478:	3f 91       	pop	r19
     47a:	2f 91       	pop	r18
     47c:	0f 90       	pop	r0
     47e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <SevenSeg_on>:


void SevenSeg_on()
{
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01) | (1<<CS00);		//setting prescaler to /256
     490:	83 e5       	ldi	r24, 0x53	; 83
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	23 e0       	ldi	r18, 0x03	; 3
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	on = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <on>
}
     4a0:	00 00       	nop
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <SevenSeg_off>:

void SevenSeg_off()
{
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~((1<<CS01) | (1<<CS00));	//disable timer
     4b0:	83 e5       	ldi	r24, 0x53	; 83
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	23 e5       	ldi	r18, 0x53	; 83
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	f9 01       	movw	r30, r18
     4ba:	20 81       	ld	r18, Z
     4bc:	2c 7f       	andi	r18, 0xFC	; 252
     4be:	fc 01       	movw	r30, r24
     4c0:	20 83       	st	Z, r18
	TCNT0 = 0;							//resetting counter
     4c2:	82 e5       	ldi	r24, 0x52	; 82
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	fc 01       	movw	r30, r24
     4c8:	10 82       	st	Z, r1
	PORTB = 0x00;
     4ca:	88 e3       	ldi	r24, 0x38	; 56
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	fc 01       	movw	r30, r24
     4d0:	10 82       	st	Z, r1
	PORTA = 0xFC;
     4d2:	8b e3       	ldi	r24, 0x3B	; 59
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	2c ef       	ldi	r18, 0xFC	; 252
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
	on = 0;
     4dc:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <on>
}
     4e0:	00 00       	nop
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <SevenSeg_get_state>:


uint8_t SevenSeg_get_state()
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	return on;
     4f0:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <on>
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <Encoder_init>:

uint8_t selected_seg = 1;


void Encoder_init()
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	ENC_PORT &= ~((1<<ENC_A_PIN) | (1<<ENC_A_PIN));							//setting encoder terminals to input
     502:	82 e3       	ldi	r24, 0x32	; 50
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	22 e3       	ldi	r18, 0x32	; 50
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	2b 7f       	andi	r18, 0xFB	; 251
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
	MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11);							//setting ext-int0 to sensitive at rising edge
     514:	85 e5       	ldi	r24, 0x55	; 85
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	25 e5       	ldi	r18, 0x55	; 85
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	f9 01       	movw	r30, r18
     51e:	20 81       	ld	r18, Z
     520:	2b 60       	ori	r18, 0x0B	; 11
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1);											//enable external interrupt 0 (ENC_A_PIN)
     526:	8b e5       	ldi	r24, 0x5B	; 91
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	2b e5       	ldi	r18, 0x5B	; 91
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	f9 01       	movw	r30, r18
     530:	20 81       	ld	r18, Z
     532:	20 6c       	ori	r18, 0xC0	; 192
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
	sei();
     538:	78 94       	sei
}
     53a:	00 00       	nop
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <__vector_1>:



ISR(INT0_vect)
{	
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	2f 93       	push	r18
     550:	3f 93       	push	r19
     552:	4f 93       	push	r20
     554:	5f 93       	push	r21
     556:	6f 93       	push	r22
     558:	7f 93       	push	r23
     55a:	8f 93       	push	r24
     55c:	9f 93       	push	r25
     55e:	af 93       	push	r26
     560:	bf 93       	push	r27
     562:	ef 93       	push	r30
     564:	ff 93       	push	r31
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
	cli();
     56e:	f8 94       	cli
	
	switch(getState())
     570:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getState>
     574:	88 2f       	mov	r24, r24
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	83 30       	cpi	r24, 0x03	; 3
     57a:	91 05       	cpc	r25, r1
     57c:	19 f0       	breq	.+6      	; 0x584 <__vector_1+0x42>
     57e:	04 97       	sbiw	r24, 0x04	; 4
     580:	01 f1       	breq	.+64     	; 0x5c2 <__vector_1+0x80>
			}
			break;
		}
		
		default:
			break;
     582:	41 c0       	rjmp	.+130    	; 0x606 <__vector_1+0xc4>
	
	switch(getState())
	{
		case 3:	
		{	
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //gegen den Uhrzeigersinn
     584:	80 e3       	ldi	r24, 0x30	; 48
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	80 71       	andi	r24, 0x10	; 16
     592:	99 27       	eor	r25, r25
     594:	18 16       	cp	r1, r24
     596:	19 06       	cpc	r1, r25
     598:	54 f4       	brge	.+20     	; 0x5ae <__vector_1+0x6c>
			{
				if(get_delta(1) > 0)
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     5a0:	18 16       	cp	r1, r24
     5a2:	19 06       	cpc	r1, r25
     5a4:	6c f5       	brge	.+90     	; 0x600 <__vector_1+0xbe>
					dec_delta(1);					//prevent delta1 from becoming negative
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <dec_delta>
			else									//im Uhrzeigersinn
			{	
				if(get_delta(1) < 70)
					inc_delta(1);					//prevent delta2 from becoming lager than 70
			}
			break;
     5ac:	29 c0       	rjmp	.+82     	; 0x600 <__vector_1+0xbe>
				if(get_delta(1) > 0)
					dec_delta(1);					//prevent delta1 from becoming negative
			}		
			else									//im Uhrzeigersinn
			{	
				if(get_delta(1) < 70)
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     5b4:	86 34       	cpi	r24, 0x46	; 70
     5b6:	91 05       	cpc	r25, r1
     5b8:	1c f5       	brge	.+70     	; 0x600 <__vector_1+0xbe>
					inc_delta(1);					//prevent delta2 from becoming lager than 70
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0e 94 cf 04 	call	0x99e	; 0x99e <inc_delta>
			}
			break;
     5c0:	1f c0       	rjmp	.+62     	; 0x600 <__vector_1+0xbe>
		}
		
		case 4:
		{
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //gegen den Uhrzeigersinn
     5c2:	80 e3       	ldi	r24, 0x30	; 48
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	fc 01       	movw	r30, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	88 2f       	mov	r24, r24
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	80 71       	andi	r24, 0x10	; 16
     5d0:	99 27       	eor	r25, r25
     5d2:	18 16       	cp	r1, r24
     5d4:	19 06       	cpc	r1, r25
     5d6:	54 f4       	brge	.+20     	; 0x5ec <__vector_1+0xaa>
			{
				if(get_delta(2) > 0)
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     5de:	18 16       	cp	r1, r24
     5e0:	19 06       	cpc	r1, r25
     5e2:	84 f4       	brge	.+32     	; 0x604 <__vector_1+0xc2>
					dec_delta(2);					//prevent delta2 from becoming negative
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <dec_delta>
			else									//im Uhrzeigersinn
			{
				if(get_delta(2) < 70)
					inc_delta(2);					//prevent delta2 from becoming lager than 70
			}
			break;
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <__vector_1+0xc2>
				if(get_delta(2) > 0)
					dec_delta(2);					//prevent delta2 from becoming negative
			}
			else									//im Uhrzeigersinn
			{
				if(get_delta(2) < 70)
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     5f2:	86 34       	cpi	r24, 0x46	; 70
     5f4:	91 05       	cpc	r25, r1
     5f6:	34 f4       	brge	.+12     	; 0x604 <__vector_1+0xc2>
					inc_delta(2);					//prevent delta2 from becoming lager than 70
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	0e 94 cf 04 	call	0x99e	; 0x99e <inc_delta>
			}
			break;
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <__vector_1+0xc2>
			else									//im Uhrzeigersinn
			{	
				if(get_delta(1) < 70)
					inc_delta(1);					//prevent delta2 from becoming lager than 70
			}
			break;
     600:	00 00       	nop
     602:	01 c0       	rjmp	.+2      	; 0x606 <__vector_1+0xc4>
			else									//im Uhrzeigersinn
			{
				if(get_delta(2) < 70)
					inc_delta(2);					//prevent delta2 from becoming lager than 70
			}
			break;
     604:	00 00       	nop
		
		default:
			break;
	}
	
	stop_timeout_timer();
     606:	0e 94 7f 07 	call	0xefe	; 0xefe <stop_timeout_timer>
	start_timeout_timer();
     60a:	0e 94 6d 07 	call	0xeda	; 0xeda <start_timeout_timer>
	
	
	GIFR &= ~(1<<INTF0);  //clear ext-interrupt-0 flag
     60e:	8a e5       	ldi	r24, 0x5A	; 90
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	2a e5       	ldi	r18, 0x5A	; 90
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	f9 01       	movw	r30, r18
     618:	20 81       	ld	r18, Z
     61a:	2f 7b       	andi	r18, 0xBF	; 191
     61c:	fc 01       	movw	r30, r24
     61e:	20 83       	st	Z, r18
	
	sei();
     620:	78 94       	sei
}
     622:	00 00       	nop
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	ff 91       	pop	r31
     62a:	ef 91       	pop	r30
     62c:	bf 91       	pop	r27
     62e:	af 91       	pop	r26
     630:	9f 91       	pop	r25
     632:	8f 91       	pop	r24
     634:	7f 91       	pop	r23
     636:	6f 91       	pop	r22
     638:	5f 91       	pop	r21
     63a:	4f 91       	pop	r20
     63c:	3f 91       	pop	r19
     63e:	2f 91       	pop	r18
     640:	0f 90       	pop	r0
     642:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     646:	0f 90       	pop	r0
     648:	1f 90       	pop	r1
     64a:	18 95       	reti

0000064c <__vector_2>:


ISR(INT1_vect)  //if the encoder got pushed
{
     64c:	1f 92       	push	r1
     64e:	0f 92       	push	r0
     650:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     654:	0f 92       	push	r0
     656:	11 24       	eor	r1, r1
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	2f 93       	push	r18
     65e:	3f 93       	push	r19
     660:	4f 93       	push	r20
     662:	5f 93       	push	r21
     664:	6f 93       	push	r22
     666:	7f 93       	push	r23
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	af 93       	push	r26
     66e:	bf 93       	push	r27
     670:	ef 93       	push	r30
     672:	ff 93       	push	r31
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	cd b7       	in	r28, 0x3d	; 61
     67a:	de b7       	in	r29, 0x3e	; 62
	cli();
     67c:	f8 94       	cli
	
	switch(getState())
     67e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getState>
     682:	88 2f       	mov	r24, r24
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	82 30       	cpi	r24, 0x02	; 2
     688:	91 05       	cpc	r25, r1
     68a:	a1 f0       	breq	.+40     	; 0x6b4 <__vector_2+0x68>
     68c:	83 30       	cpi	r24, 0x03	; 3
     68e:	91 05       	cpc	r25, r1
     690:	1c f4       	brge	.+6      	; 0x698 <__vector_2+0x4c>
     692:	01 97       	sbiw	r24, 0x01	; 1
     694:	39 f0       	breq	.+14     	; 0x6a4 <__vector_2+0x58>
     696:	44 c0       	rjmp	.+136    	; 0x720 <__vector_2+0xd4>
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	91 05       	cpc	r25, r1
     69c:	89 f0       	breq	.+34     	; 0x6c0 <__vector_2+0x74>
     69e:	04 97       	sbiw	r24, 0x04	; 4
     6a0:	39 f1       	breq	.+78     	; 0x6f0 <__vector_2+0xa4>
     6a2:	3e c0       	rjmp	.+124    	; 0x720 <__vector_2+0xd4>
	{
		case 1:
		{
			setState(SHOW_TEMPS);
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
			stop_timeout_timer();
     6aa:	0e 94 7f 07 	call	0xefe	; 0xefe <stop_timeout_timer>
			start_timeout_timer();
     6ae:	0e 94 6d 07 	call	0xeda	; 0xeda <start_timeout_timer>
			break;
     6b2:	36 c0       	rjmp	.+108    	; 0x720 <__vector_2+0xd4>
		}
		case 2:
		{
			setState(MODIFY_DELTA1);
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
			start_timeout_timer();
     6ba:	0e 94 6d 07 	call	0xeda	; 0xeda <start_timeout_timer>
			break;
     6be:	30 c0       	rjmp	.+96     	; 0x720 <__vector_2+0xd4>
		}
		case 3:
		{
			if(eeprom_read_byte((uint8_t*)0) != get_delta(1))
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 86 10 	call	0x210c	; 0x210c <eeprom_read_byte>
     6c8:	08 2f       	mov	r16, r24
     6ca:	10 e0       	ldi	r17, 0x00	; 0
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     6d2:	08 17       	cp	r16, r24
     6d4:	19 07       	cpc	r17, r25
     6d6:	41 f0       	breq	.+16     	; 0x6e8 <__vector_2+0x9c>
			{
				eeprom_update_byte((uint8_t*)0, get_delta(1));
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     6de:	68 2f       	mov	r22, r24
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 8e 10 	call	0x211c	; 0x211c <eeprom_update_byte>
			}
			setState(MODIFY_DELTA2);
     6e8:	84 e0       	ldi	r24, 0x04	; 4
     6ea:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
			break;
     6ee:	18 c0       	rjmp	.+48     	; 0x720 <__vector_2+0xd4>
		}
		case 4:
		{
			if(eeprom_read_byte((uint8_t*)1) != get_delta(2))
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 86 10 	call	0x210c	; 0x210c <eeprom_read_byte>
     6f8:	08 2f       	mov	r16, r24
     6fa:	10 e0       	ldi	r17, 0x00	; 0
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     702:	08 17       	cp	r16, r24
     704:	19 07       	cpc	r17, r25
     706:	41 f0       	breq	.+16     	; 0x718 <__vector_2+0xcc>
			{
				eeprom_update_byte((uint8_t*)1, get_delta(2));
     708:	82 e0       	ldi	r24, 0x02	; 2
     70a:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     70e:	68 2f       	mov	r22, r24
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 8e 10 	call	0x211c	; 0x211c <eeprom_update_byte>
			}
			setState(SHOW_TEMPS);
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
			break;
     71e:	00 00       	nop
		}
	}
	
	sei();
     720:	78 94       	sei
     722:	00 00       	nop
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	ff 91       	pop	r31
     72a:	ef 91       	pop	r30
     72c:	bf 91       	pop	r27
     72e:	af 91       	pop	r26
     730:	9f 91       	pop	r25
     732:	8f 91       	pop	r24
     734:	7f 91       	pop	r23
     736:	6f 91       	pop	r22
     738:	5f 91       	pop	r21
     73a:	4f 91       	pop	r20
     73c:	3f 91       	pop	r19
     73e:	2f 91       	pop	r18
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	0f 90       	pop	r0
     746:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     74a:	0f 90       	pop	r0
     74c:	1f 90       	pop	r1
     74e:	18 95       	reti

00000750 <main>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);



int main(void)
{
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
     758:	8b e3       	ldi	r24, 0x3B	; 59
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	fc 01       	movw	r30, r24
     75e:	10 82       	st	Z, r1
	PORTB = 0x00;
     760:	88 e3       	ldi	r24, 0x38	; 56
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	fc 01       	movw	r30, r24
     766:	10 82       	st	Z, r1
	
	DDRA = 0xFC;
     768:	8a e3       	ldi	r24, 0x3A	; 58
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	2c ef       	ldi	r18, 0xFC	; 252
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
	DDRB = 0xFF;
     772:	87 e3       	ldi	r24, 0x37	; 55
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	2f ef       	ldi	r18, 0xFF	; 255
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
	DDRC |= (1<<WDI_PIN);
     77c:	84 e3       	ldi	r24, 0x34	; 52
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	24 e3       	ldi	r18, 0x34	; 52
     782:	30 e0       	ldi	r19, 0x00	; 0
     784:	f9 01       	movw	r30, r18
     786:	20 81       	ld	r18, Z
     788:	20 64       	ori	r18, 0x40	; 64
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
	DDRD |= (1<<PD5);
     78e:	81 e3       	ldi	r24, 0x31	; 49
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	21 e3       	ldi	r18, 0x31	; 49
     794:	30 e0       	ldi	r19, 0x00	; 0
     796:	f9 01       	movw	r30, r18
     798:	20 81       	ld	r18, Z
     79a:	20 62       	ori	r18, 0x20	; 32
     79c:	fc 01       	movw	r30, r24
     79e:	20 83       	st	Z, r18
	
	uart_init(0);
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	0e 94 0b 08 	call	0x1016	; 0x1016 <uart_init>
	
	
	stdout = &mystdout;
     7a8:	8c e6       	ldi	r24, 0x6C	; 108
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	90 93 b4 00 	sts	0x00B4, r25	; 0x8000b4 <__iob+0x3>
     7b0:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__iob+0x2>
	
	printf("startup!\n");
     7b4:	8b e7       	ldi	r24, 0x7B	; 123
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <puts>
	
	regulator_init();
     7bc:	0e 94 71 04 	call	0x8e2	; 0x8e2 <regulator_init>
	SevenSeg_init();
     7c0:	0e 94 ca 00 	call	0x194	; 0x194 <SevenSeg_init>
	Timeout_init();
     7c4:	0e 94 57 07 	call	0xeae	; 0xeae <Timeout_init>
	Encoder_init();
     7c8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Encoder_init>
	
	
	while(1)	
	{	
		switch(state)
     7cc:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <state>
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	91 05       	cpc	r25, r1
     7d8:	01 f1       	breq	.+64     	; 0x81a <main+0xca>
     7da:	83 30       	cpi	r24, 0x03	; 3
     7dc:	91 05       	cpc	r25, r1
     7de:	2c f4       	brge	.+10     	; 0x7ea <main+0x9a>
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	49 f0       	breq	.+18     	; 0x7f6 <main+0xa6>
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	89 f0       	breq	.+34     	; 0x80a <main+0xba>
     7e8:	5a c0       	rjmp	.+180    	; 0x89e <__stack+0x3f>
     7ea:	83 30       	cpi	r24, 0x03	; 3
     7ec:	91 05       	cpc	r25, r1
     7ee:	51 f1       	breq	.+84     	; 0x844 <main+0xf4>
     7f0:	04 97       	sbiw	r24, 0x04	; 4
     7f2:	d9 f1       	breq	.+118    	; 0x86a <__stack+0xb>
     7f4:	54 c0       	rjmp	.+168    	; 0x89e <__stack+0x3f>
		{
			case INIT:
			{
				if(SevenSeg_get_state() == 1)						//disable display only if it is on
     7f6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	11 f4       	brne	.+4      	; 0x802 <main+0xb2>
				{
					SevenSeg_off();
     7fe:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SevenSeg_off>
				}
				setState(DISPLAY_OFF);
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
				break;
     808:	4a c0       	rjmp	.+148    	; 0x89e <__stack+0x3f>
			}
			
			case DISPLAY_OFF:
			{
				if(SevenSeg_get_state() == 1)						//disable display only if it is on
     80a:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	09 f0       	breq	.+2      	; 0x814 <main+0xc4>
     812:	3e c0       	rjmp	.+124    	; 0x890 <__stack+0x31>
				{
					SevenSeg_off();
     814:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SevenSeg_off>
				}
				break;
     818:	3b c0       	rjmp	.+118    	; 0x890 <__stack+0x31>
			}
				
			case SHOW_TEMPS:
			{
				SevenSeg_set_val(0, get_temp(0));
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	0e 94 16 06 	call	0xc2c	; 0xc2c <get_temp>
     820:	bc 01       	movw	r22, r24
     822:	80 e0       	ldi	r24, 0x00	; 0
     824:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				SevenSeg_set_val(1, get_temp(1));
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	0e 94 16 06 	call	0xc2c	; 0xc2c <get_temp>
     82e:	bc 01       	movw	r22, r24
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>

				if(SevenSeg_get_state() == 0)						//enable display only if it is off
     836:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     83a:	88 23       	and	r24, r24
     83c:	59 f5       	brne	.+86     	; 0x894 <__stack+0x35>
				{
					SevenSeg_on();
     83e:	0e 94 44 02 	call	0x488	; 0x488 <SevenSeg_on>
				}
				break;
     842:	28 c0       	rjmp	.+80     	; 0x894 <__stack+0x35>
			}
			
			case MODIFY_DELTA1: 
			{
				SevenSeg_set_val(1, get_delta(1));
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     84a:	bc 01       	movw	r22, r24
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				SevenSeg_set_val(0, 1000);							//set Kessel-display off
     852:	68 ee       	ldi	r22, 0xE8	; 232
     854:	73 e0       	ldi	r23, 0x03	; 3
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
     85c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     860:	88 23       	and	r24, r24
     862:	d1 f4       	brne	.+52     	; 0x898 <__stack+0x39>
				{
					SevenSeg_on();
     864:	0e 94 44 02 	call	0x488	; 0x488 <SevenSeg_on>
				}
				break;
     868:	17 c0       	rjmp	.+46     	; 0x898 <__stack+0x39>
			}
			
			case MODIFY_DELTA2:
			{
				SevenSeg_set_val(1, 1000);							//set Dach-display off
     86a:	68 ee       	ldi	r22, 0xE8	; 232
     86c:	73 e0       	ldi	r23, 0x03	; 3
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				SevenSeg_set_val(0, get_delta(2));
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     87a:	bc 01       	movw	r22, r24
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
     882:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     886:	88 23       	and	r24, r24
     888:	49 f4       	brne	.+18     	; 0x89c <__stack+0x3d>
				{
					SevenSeg_on();
     88a:	0e 94 44 02 	call	0x488	; 0x488 <SevenSeg_on>
				}
				break;
     88e:	06 c0       	rjmp	.+12     	; 0x89c <__stack+0x3d>
			{
				if(SevenSeg_get_state() == 1)						//disable display only if it is on
				{
					SevenSeg_off();
				}
				break;
     890:	00 00       	nop
     892:	05 c0       	rjmp	.+10     	; 0x89e <__stack+0x3f>

				if(SevenSeg_get_state() == 0)						//enable display only if it is off
				{
					SevenSeg_on();
				}
				break;
     894:	00 00       	nop
     896:	03 c0       	rjmp	.+6      	; 0x89e <__stack+0x3f>
				SevenSeg_set_val(0, 1000);							//set Kessel-display off
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
				{
					SevenSeg_on();
				}
				break;
     898:	00 00       	nop
     89a:	01 c0       	rjmp	.+2      	; 0x89e <__stack+0x3f>
				SevenSeg_set_val(0, get_delta(2));
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
				{
					SevenSeg_on();
				}
				break;
     89c:	00 00       	nop
			}
		}
		WDI_PORT ^= (1<<WDI_PIN);
     89e:	85 e3       	ldi	r24, 0x35	; 53
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	25 e3       	ldi	r18, 0x35	; 53
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	f9 01       	movw	r30, r18
     8a8:	30 81       	ld	r19, Z
     8aa:	20 e4       	ldi	r18, 0x40	; 64
     8ac:	23 27       	eor	r18, r19
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18
	}
     8b2:	8c cf       	rjmp	.-232    	; 0x7cc <main+0x7c>

000008b4 <setState>:
}

void setState(uint8_t s)
{
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	1f 92       	push	r1
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	89 83       	std	Y+1, r24	; 0x01
	state = s;
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <state>
//	printf("state -> %d\n", state);
}
     8c6:	00 00       	nop
     8c8:	0f 90       	pop	r0
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <getState>:

uint8_t getState()
{
     8d0:	cf 93       	push	r28
     8d2:	df 93       	push	r29
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
	return state;
     8d8:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <state>
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	08 95       	ret

000008e2 <regulator_init>:
}

void disable_show_temps(void)
{
	show_temps = 0;
}
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 86 10 	call	0x210c	; 0x210c <eeprom_read_byte>
     8f2:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <delta1>
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 86 10 	call	0x210c	; 0x210c <eeprom_read_byte>
     8fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <delta2>
     902:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <delta1>
     906:	87 34       	cpi	r24, 0x47	; 71
     908:	40 f0       	brcs	.+16     	; 0x91a <regulator_init+0x38>
     90a:	86 e4       	ldi	r24, 0x46	; 70
     90c:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <delta1>
     910:	66 e4       	ldi	r22, 0x46	; 70
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 8e 10 	call	0x211c	; 0x211c <eeprom_update_byte>
     91a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <delta2>
     91e:	87 34       	cpi	r24, 0x47	; 71
     920:	40 f0       	brcs	.+16     	; 0x932 <regulator_init+0x50>
     922:	86 e4       	ldi	r24, 0x46	; 70
     924:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <delta1>
     928:	66 e4       	ldi	r22, 0x46	; 70
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	0e 94 8e 10 	call	0x211c	; 0x211c <eeprom_update_byte>
     932:	87 e2       	ldi	r24, 0x27	; 39
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	fc 01       	movw	r30, r24
     938:	10 82       	st	Z, r1
     93a:	87 e2       	ldi	r24, 0x27	; 39
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	27 e2       	ldi	r18, 0x27	; 39
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	f9 01       	movw	r30, r18
     944:	20 81       	ld	r18, Z
     946:	2f 7d       	andi	r18, 0xDF	; 223
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
     94c:	86 e2       	ldi	r24, 0x26	; 38
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	26 e2       	ldi	r18, 0x26	; 38
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	f9 01       	movw	r30, r18
     956:	20 81       	ld	r18, Z
     958:	20 68       	ori	r18, 0x80	; 128
     95a:	fc 01       	movw	r30, r24
     95c:	20 83       	st	Z, r18
     95e:	85 e4       	ldi	r24, 0x45	; 69
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	25 e4       	ldi	r18, 0x45	; 69
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	2f 66       	ori	r18, 0x6F	; 111
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
     970:	89 e5       	ldi	r24, 0x59	; 89
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	29 e5       	ldi	r18, 0x59	; 89
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	f9 01       	movw	r30, r18
     97a:	20 81       	ld	r18, Z
     97c:	20 64       	ori	r18, 0x40	; 64
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
     982:	81 e3       	ldi	r24, 0x31	; 49
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	21 e3       	ldi	r18, 0x31	; 49
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	f9 01       	movw	r30, r18
     98c:	20 81       	ld	r18, Z
     98e:	20 68       	ori	r18, 0x80	; 128
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
     994:	78 94       	sei
     996:	00 00       	nop
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <inc_delta>:

void inc_delta(uint8_t i_)
{
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	1f 92       	push	r1
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	81 30       	cpi	r24, 0x01	; 1
     9ae:	49 f4       	brne	.+18     	; 0x9c2 <inc_delta+0x24>
	{
		if(delta1<100)
     9b0:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <delta1>
     9b4:	84 36       	cpi	r24, 0x64	; 100
     9b6:	28 f4       	brcc	.+10     	; 0x9c2 <inc_delta+0x24>
			delta1++;
     9b8:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <delta1>
     9bc:	8f 5f       	subi	r24, 0xFF	; 255
     9be:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <delta1>
	}
	
	if(i_==2)
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	82 30       	cpi	r24, 0x02	; 2
     9c6:	49 f4       	brne	.+18     	; 0x9da <inc_delta+0x3c>
	{
		if(delta2<100)
     9c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <delta2>
     9cc:	84 36       	cpi	r24, 0x64	; 100
     9ce:	28 f4       	brcc	.+10     	; 0x9da <inc_delta+0x3c>
			delta2++;
     9d0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <delta2>
     9d4:	8f 5f       	subi	r24, 0xFF	; 255
     9d6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <delta2>
	}			
}
     9da:	00 00       	nop
     9dc:	0f 90       	pop	r0
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <dec_delta>:

void dec_delta(uint8_t i_)
{
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
     9e8:	1f 92       	push	r1
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
     9ee:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	81 30       	cpi	r24, 0x01	; 1
     9f4:	49 f4       	brne	.+18     	; 0xa08 <dec_delta+0x24>
	{
		if(delta1>0)
     9f6:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <delta1>
     9fa:	88 23       	and	r24, r24
     9fc:	29 f0       	breq	.+10     	; 0xa08 <dec_delta+0x24>
			delta1--;
     9fe:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <delta1>
     a02:	81 50       	subi	r24, 0x01	; 1
     a04:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <delta1>
	}
	
	if(i_==2)
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	49 f4       	brne	.+18     	; 0xa20 <dec_delta+0x3c>
	{
		if(delta2>0)
     a0e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <delta2>
     a12:	88 23       	and	r24, r24
     a14:	29 f0       	breq	.+10     	; 0xa20 <dec_delta+0x3c>
			delta2--;
     a16:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <delta2>
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <delta2>
	}
}
     a20:	00 00       	nop
     a22:	0f 90       	pop	r0
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <get_delta>:

uint8_t get_delta(uint8_t i_)
{
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	1f 92       	push	r1
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	19 f4       	brne	.+6      	; 0xa42 <get_delta+0x18>
	{
		return delta1;
     a3c:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <delta1>
     a40:	07 c0       	rjmp	.+14     	; 0xa50 <get_delta+0x26>
	}
	if(i_==2)
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	82 30       	cpi	r24, 0x02	; 2
     a46:	19 f4       	brne	.+6      	; 0xa4e <get_delta+0x24>
	{
		return delta2;
     a48:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <delta2>
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <get_delta+0x26>
	}
	return 255;
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
}
     a50:	0f 90       	pop	r0
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	08 95       	ret

00000a58 <measure_temp>:


//sensor: 1=dach; 0=kessel
int16_t measure_temp(uint8_t sensor)
{
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	62 97       	sbiw	r28, 0x12	; 18
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	de bf       	out	0x3e, r29	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	cd bf       	out	0x3d, r28	; 61
     a74:	8a 8b       	std	Y+18, r24	; 0x12
	uint32_t adc_val_avg = 0;
     a76:	19 82       	std	Y+1, r1	; 0x01
     a78:	1a 82       	std	Y+2, r1	; 0x02
     a7a:	1b 82       	std	Y+3, r1	; 0x03
     a7c:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t adc_val = 0;
     a7e:	1f 82       	std	Y+7, r1	; 0x07
     a80:	1e 82       	std	Y+6, r1	; 0x06
	
	for(uint8_t i=0; i < OVERSAMPLING_CNT; i++)
     a82:	1d 82       	std	Y+5, r1	; 0x05
     a84:	55 c0       	rjmp	.+170    	; 0xb30 <measure_temp+0xd8>
	{
		ADMUX &= ~0x1F;							//clear MUX4:0
     a86:	87 e2       	ldi	r24, 0x27	; 39
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	27 e2       	ldi	r18, 0x27	; 39
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	f9 01       	movw	r30, r18
     a90:	20 81       	ld	r18, Z
     a92:	20 7e       	andi	r18, 0xE0	; 224
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18
		
		if(sensor == 0)
     a98:	8a 89       	ldd	r24, Y+18	; 0x12
     a9a:	88 23       	and	r24, r24
     a9c:	49 f4       	brne	.+18     	; 0xab0 <measure_temp+0x58>
		ADMUX |= (1<<MUX0);					//set ADC to CH1. If CH2 has to be sampled MUX[4:0] is already 0, because it was restted above
     a9e:	87 e2       	ldi	r24, 0x27	; 39
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	27 e2       	ldi	r18, 0x27	; 39
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	f9 01       	movw	r30, r18
     aa8:	20 81       	ld	r18, Z
     aaa:	21 60       	ori	r18, 0x01	; 1
     aac:	fc 01       	movw	r30, r24
     aae:	20 83       	st	Z, r18
		
		ADCSRA |= (1<<ADSC);					//start conversion
     ab0:	86 e2       	ldi	r24, 0x26	; 38
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	26 e2       	ldi	r18, 0x26	; 38
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	f9 01       	movw	r30, r18
     aba:	20 81       	ld	r18, Z
     abc:	20 64       	ori	r18, 0x40	; 64
     abe:	fc 01       	movw	r30, r24
     ac0:	20 83       	st	Z, r18
		
		while( (ADCSRA & (1<<ADSC)) > 0 )		//wait for end of conversion
     ac2:	00 00       	nop
     ac4:	86 e2       	ldi	r24, 0x26	; 38
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	fc 01       	movw	r30, r24
     aca:	80 81       	ld	r24, Z
     acc:	88 2f       	mov	r24, r24
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	80 74       	andi	r24, 0x40	; 64
     ad2:	99 27       	eor	r25, r25
     ad4:	18 16       	cp	r1, r24
     ad6:	19 06       	cpc	r1, r25
     ad8:	ac f3       	brlt	.-22     	; 0xac4 <measure_temp+0x6c>
		{
		}
		
		adc_val = ADCL;							//get conversion result low-byte
     ada:	84 e2       	ldi	r24, 0x24	; 36
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	fc 01       	movw	r30, r24
     ae0:	80 81       	ld	r24, Z
     ae2:	88 2f       	mov	r24, r24
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	9f 83       	std	Y+7, r25	; 0x07
     ae8:	8e 83       	std	Y+6, r24	; 0x06
		adc_val += (ADCH<<8);					//and high-byte
     aea:	85 e2       	ldi	r24, 0x25	; 37
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	fc 01       	movw	r30, r24
     af0:	80 81       	ld	r24, Z
     af2:	88 2f       	mov	r24, r24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	98 2f       	mov	r25, r24
     af8:	88 27       	eor	r24, r24
     afa:	9c 01       	movw	r18, r24
     afc:	8e 81       	ldd	r24, Y+6	; 0x06
     afe:	9f 81       	ldd	r25, Y+7	; 0x07
     b00:	82 0f       	add	r24, r18
     b02:	93 1f       	adc	r25, r19
     b04:	9f 83       	std	Y+7, r25	; 0x07
     b06:	8e 83       	std	Y+6, r24	; 0x06
		
		adc_val_avg += adc_val;					//sum up ADC values for oversampling
     b08:	8e 81       	ldd	r24, Y+6	; 0x06
     b0a:	9f 81       	ldd	r25, Y+7	; 0x07
     b0c:	cc 01       	movw	r24, r24
     b0e:	a0 e0       	ldi	r26, 0x00	; 0
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	29 81       	ldd	r18, Y+1	; 0x01
     b14:	3a 81       	ldd	r19, Y+2	; 0x02
     b16:	4b 81       	ldd	r20, Y+3	; 0x03
     b18:	5c 81       	ldd	r21, Y+4	; 0x04
     b1a:	82 0f       	add	r24, r18
     b1c:	93 1f       	adc	r25, r19
     b1e:	a4 1f       	adc	r26, r20
     b20:	b5 1f       	adc	r27, r21
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	9a 83       	std	Y+2, r25	; 0x02
     b26:	ab 83       	std	Y+3, r26	; 0x03
     b28:	bc 83       	std	Y+4, r27	; 0x04
int16_t measure_temp(uint8_t sensor)
{
	uint32_t adc_val_avg = 0;
	uint16_t adc_val = 0;
	
	for(uint8_t i=0; i < OVERSAMPLING_CNT; i++)
     b2a:	8d 81       	ldd	r24, Y+5	; 0x05
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	8d 83       	std	Y+5, r24	; 0x05
     b30:	8d 81       	ldd	r24, Y+5	; 0x05
     b32:	8a 30       	cpi	r24, 0x0A	; 10
     b34:	08 f4       	brcc	.+2      	; 0xb38 <measure_temp+0xe0>
     b36:	a7 cf       	rjmp	.-178    	; 0xa86 <measure_temp+0x2e>
		adc_val += (ADCH<<8);					//and high-byte
		
		adc_val_avg += adc_val;					//sum up ADC values for oversampling
	}
	
	adc_val = (uint16_t)(adc_val_avg / OVERSAMPLING_CNT); //calculate average with oversampling count
     b38:	89 81       	ldd	r24, Y+1	; 0x01
     b3a:	9a 81       	ldd	r25, Y+2	; 0x02
     b3c:	ab 81       	ldd	r26, Y+3	; 0x03
     b3e:	bc 81       	ldd	r27, Y+4	; 0x04
     b40:	2a e0       	ldi	r18, 0x0A	; 10
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	bc 01       	movw	r22, r24
     b4a:	cd 01       	movw	r24, r26
     b4c:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <__udivmodsi4>
     b50:	da 01       	movw	r26, r20
     b52:	c9 01       	movw	r24, r18
     b54:	9f 83       	std	Y+7, r25	; 0x07
     b56:	8e 83       	std	Y+6, r24	; 0x06
	
	float voltage = adc_val * 4.854e-3f;									//get voltage from ADC-values
     b58:	8e 81       	ldd	r24, Y+6	; 0x06
     b5a:	9f 81       	ldd	r25, Y+7	; 0x07
     b5c:	cc 01       	movw	r24, r24
     b5e:	a0 e0       	ldi	r26, 0x00	; 0
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	bc 01       	movw	r22, r24
     b64:	cd 01       	movw	r24, r26
     b66:	0e 94 72 09 	call	0x12e4	; 0x12e4 <__floatunsisf>
     b6a:	dc 01       	movw	r26, r24
     b6c:	cb 01       	movw	r24, r22
     b6e:	2e e4       	ldi	r18, 0x4E	; 78
     b70:	3e e0       	ldi	r19, 0x0E	; 14
     b72:	4f e9       	ldi	r20, 0x9F	; 159
     b74:	5b e3       	ldi	r21, 0x3B	; 59
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
     b7e:	dc 01       	movw	r26, r24
     b80:	cb 01       	movw	r24, r22
     b82:	88 87       	std	Y+8, r24	; 0x08
     b84:	99 87       	std	Y+9, r25	; 0x09
     b86:	aa 87       	std	Y+10, r26	; 0x0a
     b88:	bb 87       	std	Y+11, r27	; 0x0b
	float temp_f = (7382.06f - voltage*2751.75f)/(voltage - 29.323f);		//get temperature from voltage
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	3c ef       	ldi	r19, 0xFC	; 252
     b8e:	4b e2       	ldi	r20, 0x2B	; 43
     b90:	55 e4       	ldi	r21, 0x45	; 69
     b92:	68 85       	ldd	r22, Y+8	; 0x08
     b94:	79 85       	ldd	r23, Y+9	; 0x09
     b96:	8a 85       	ldd	r24, Y+10	; 0x0a
     b98:	9b 85       	ldd	r25, Y+11	; 0x0b
     b9a:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	9c 01       	movw	r18, r24
     ba4:	ad 01       	movw	r20, r26
     ba6:	6b e7       	ldi	r22, 0x7B	; 123
     ba8:	70 eb       	ldi	r23, 0xB0	; 176
     baa:	86 ee       	ldi	r24, 0xE6	; 230
     bac:	95 e4       	ldi	r25, 0x45	; 69
     bae:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__subsf3>
     bb2:	dc 01       	movw	r26, r24
     bb4:	cb 01       	movw	r24, r22
     bb6:	6c 01       	movw	r12, r24
     bb8:	7d 01       	movw	r14, r26
     bba:	21 e8       	ldi	r18, 0x81	; 129
     bbc:	35 e9       	ldi	r19, 0x95	; 149
     bbe:	4a ee       	ldi	r20, 0xEA	; 234
     bc0:	51 e4       	ldi	r21, 0x41	; 65
     bc2:	68 85       	ldd	r22, Y+8	; 0x08
     bc4:	79 85       	ldd	r23, Y+9	; 0x09
     bc6:	8a 85       	ldd	r24, Y+10	; 0x0a
     bc8:	9b 85       	ldd	r25, Y+11	; 0x0b
     bca:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__subsf3>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	9c 01       	movw	r18, r24
     bd4:	ad 01       	movw	r20, r26
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	0e 94 ca 08 	call	0x1194	; 0x1194 <__divsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	8c 87       	std	Y+12, r24	; 0x0c
     be4:	9d 87       	std	Y+13, r25	; 0x0d
     be6:	ae 87       	std	Y+14, r26	; 0x0e
     be8:	bf 87       	std	Y+15, r27	; 0x0f
	int16_t temp = (int16_t) roundf( temp_f );								//round temperature and cast it to int
     bea:	8c 85       	ldd	r24, Y+12	; 0x0c
     bec:	9d 85       	ldd	r25, Y+13	; 0x0d
     bee:	ae 85       	ldd	r26, Y+14	; 0x0e
     bf0:	bf 85       	ldd	r27, Y+15	; 0x0f
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 6d 0a 	call	0x14da	; 0x14da <round>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	bc 01       	movw	r22, r24
     c00:	cd 01       	movw	r24, r26
     c02:	0e 94 3c 09 	call	0x1278	; 0x1278 <__fixsfsi>
     c06:	dc 01       	movw	r26, r24
     c08:	cb 01       	movw	r24, r22
     c0a:	99 8b       	std	Y+17, r25	; 0x11
     c0c:	88 8b       	std	Y+16, r24	; 0x10

	return temp;
     c0e:	88 89       	ldd	r24, Y+16	; 0x10
     c10:	99 89       	ldd	r25, Y+17	; 0x11
}
     c12:	62 96       	adiw	r28, 0x12	; 18
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	08 95       	ret

00000c2c <get_temp>:

//sensor: 1=dach; 0=kessel
int16_t get_temp(uint8_t sensor)
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	1f 92       	push	r1
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62
     c36:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == 1)
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	29 f4       	brne	.+10     	; 0xc48 <get_temp+0x1c>
	{
		return temp_dach;
     c3e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <temp_dach>
     c42:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <temp_dach+0x1>
     c46:	0a c0       	rjmp	.+20     	; 0xc5c <get_temp+0x30>
	}
	else if(sensor == 0)
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	88 23       	and	r24, r24
     c4c:	29 f4       	brne	.+10     	; 0xc58 <get_temp+0x2c>
	{
		return temp_kessel;
     c4e:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <temp_kessel>
     c52:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <temp_kessel+0x1>
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <get_temp+0x30>
	}
	else
	{
		return -999;
     c58:	89 e1       	ldi	r24, 0x19	; 25
     c5a:	9c ef       	ldi	r25, 0xFC	; 252
	}
}
     c5c:	0f 90       	pop	r0
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	08 95       	ret

00000c64 <set_PWM>:


//sets duty cycle; 0-100%
void set_PWM(uint8_t duty)
{
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	1f 92       	push	r1
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = (uint8_t)((duty/100.0f)*255);
     c74:	03 e4       	ldi	r16, 0x43	; 67
     c76:	10 e0       	ldi	r17, 0x00	; 0
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	09 2e       	mov	r0, r25
     c80:	00 0c       	add	r0, r0
     c82:	aa 0b       	sbc	r26, r26
     c84:	bb 0b       	sbc	r27, r27
     c86:	bc 01       	movw	r22, r24
     c88:	cd 01       	movw	r24, r26
     c8a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__floatsisf>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	48 ec       	ldi	r20, 0xC8	; 200
     c98:	52 e4       	ldi	r21, 0x42	; 66
     c9a:	bc 01       	movw	r22, r24
     c9c:	cd 01       	movw	r24, r26
     c9e:	0e 94 ca 08 	call	0x1194	; 0x1194 <__divsf3>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	4f e7       	ldi	r20, 0x7F	; 127
     cac:	53 e4       	ldi	r21, 0x43	; 67
     cae:	bc 01       	movw	r22, r24
     cb0:	cd 01       	movw	r24, r26
     cb2:	0e 94 00 0a 	call	0x1400	; 0x1400 <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	bc 01       	movw	r22, r24
     cbc:	cd 01       	movw	r24, r26
     cbe:	0e 94 43 09 	call	0x1286	; 0x1286 <__fixunssfsi>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	f8 01       	movw	r30, r16
     cc8:	80 83       	st	Z, r24
}
     cca:	00 00       	nop
     ccc:	0f 90       	pop	r0
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	08 95       	ret

00000cd8 <__vector_5>:



ISR(TIMER2_OVF_vect)
{	
     cd8:	1f 92       	push	r1
     cda:	0f 92       	push	r0
     cdc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
	
	cli();
     d04:	f8 94       	cli
	
	if(loop_cnt < 62) //if 2s are not passed
     d06:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <loop_cnt>
     d0a:	8e 33       	cpi	r24, 0x3E	; 62
     d0c:	30 f4       	brcc	.+12     	; 0xd1a <__vector_5+0x42>
	{
		loop_cnt++;
     d0e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <loop_cnt>
     d12:	8f 5f       	subi	r24, 0xFF	; 255
     d14:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <loop_cnt>
     d18:	ab c0       	rjmp	.+342    	; 0xe70 <__vector_5+0x198>
	}
	
	else	//if it is time to work...
	{
		if (log_counter == 255)
     d1a:	80 91 ad 00 	lds	r24, 0x00AD	; 0x8000ad <log_counter>
     d1e:	8f 3f       	cpi	r24, 0xFF	; 255
     d20:	11 f4       	brne	.+4      	; 0xd26 <__vector_5+0x4e>
		{
			log_counter = 0;
     d22:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <log_counter>
		}
		
		PORTD ^= (1<<PD5);
     d26:	82 e3       	ldi	r24, 0x32	; 50
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	22 e3       	ldi	r18, 0x32	; 50
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	f9 01       	movw	r30, r18
     d30:	30 81       	ld	r19, Z
     d32:	20 e2       	ldi	r18, 0x20	; 32
     d34:	23 27       	eor	r18, r19
     d36:	fc 01       	movw	r30, r24
     d38:	20 83       	st	Z, r18

		temp_dach   = measure_temp(1) - 3; //-3 to compensate the wires
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	0e 94 2c 05 	call	0xa58	; 0xa58 <measure_temp>
     d40:	03 97       	sbiw	r24, 0x03	; 3
     d42:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <temp_dach+0x1>
     d46:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <temp_dach>
		temp_kessel = measure_temp(0);
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	0e 94 2c 05 	call	0xa58	; 0xa58 <measure_temp>
     d50:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <temp_kessel+0x1>
     d54:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <temp_kessel>
		
		
		d_teta = temp_dach - temp_kessel;
     d58:	20 91 a5 00 	lds	r18, 0x00A5	; 0x8000a5 <temp_dach>
     d5c:	30 91 a6 00 	lds	r19, 0x00A6	; 0x8000a6 <temp_dach+0x1>
     d60:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <temp_kessel>
     d64:	90 91 a8 00 	lds	r25, 0x00A8	; 0x8000a8 <temp_kessel+0x1>
     d68:	a9 01       	movw	r20, r18
     d6a:	48 1b       	sub	r20, r24
     d6c:	59 0b       	sbc	r21, r25
     d6e:	ca 01       	movw	r24, r20
     d70:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <d_teta+0x1>
     d74:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <d_teta>
		
		if(d_teta > delta1)									
     d78:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <delta1>
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <d_teta>
     d84:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <d_teta+0x1>
     d88:	28 17       	cp	r18, r24
     d8a:	39 07       	cpc	r19, r25
     d8c:	1c f4       	brge	.+6      	; 0xd94 <__vector_5+0xbc>
		{	
			comming_from_high_temp = 1;						//if we are coming from a temperature difference higher than delta1, set flag
     d8e:	81 e0       	ldi	r24, 0x01	; 1
     d90:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <comming_from_high_temp>
		}
	
		if(comming_from_high_temp == 1)						//if we are coming from a temperature difference higher than delta1
     d94:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <comming_from_high_temp>
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	b9 f5       	brne	.+110    	; 0xe0a <__vector_5+0x132>
		{
			if( d_teta >= delta2)							//if we are still above delta 2
     d9c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <delta2>
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <d_teta>
     da8:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <d_teta+0x1>
     dac:	82 17       	cp	r24, r18
     dae:	93 07       	cpc	r25, r19
     db0:	44 f1       	brlt	.+80     	; 0xe02 <__vector_5+0x12a>
			{
				if((d_teta * k) >= 0)						//if d_teta is negative the multiplication with k will lead to a negative duty cycle, so thsi has to be handled
     db2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <k>
     db6:	48 2f       	mov	r20, r24
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	20 91 aa 00 	lds	r18, 0x00AA	; 0x8000aa <d_teta>
     dbe:	30 91 ab 00 	lds	r19, 0x00AB	; 0x8000ab <d_teta+0x1>
     dc2:	42 9f       	mul	r20, r18
     dc4:	c0 01       	movw	r24, r0
     dc6:	43 9f       	mul	r20, r19
     dc8:	90 0d       	add	r25, r0
     dca:	52 9f       	mul	r21, r18
     dcc:	90 0d       	add	r25, r0
     dce:	11 24       	eor	r1, r1
     dd0:	99 23       	and	r25, r25
     dd2:	a4 f0       	brlt	.+40     	; 0xdfc <__vector_5+0x124>
				{
					duty = (uint8_t) d_teta * k;			//50 Kevlin -> 100% PWM
     dd4:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <d_teta>
     dd8:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <d_teta+0x1>
     ddc:	98 2f       	mov	r25, r24
     dde:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <k>
     de2:	98 9f       	mul	r25, r24
     de4:	80 2d       	mov	r24, r0
     de6:	11 24       	eor	r1, r1
     de8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <duty>
					if( duty > 100)
     dec:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <duty>
     df0:	85 36       	cpi	r24, 0x65	; 101
     df2:	58 f0       	brcs	.+22     	; 0xe0a <__vector_5+0x132>
					{
						duty = 100;
     df4:	84 e6       	ldi	r24, 0x64	; 100
     df6:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <duty>
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <__vector_5+0x132>
					}
				}
				else										//if we are finally at delta2 or lower, reset flag. Only if we get above delta1 again, the pump is going to be activatda gain
				{
					duty = 0;
     dfc:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <duty>
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <__vector_5+0x132>
				}
			}
			else
			{
				duty = 0;
     e02:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <duty>
				comming_from_high_temp = 0;
     e06:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <comming_from_high_temp>
			}
		}
		
		set_PWM(duty);
     e0a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <duty>
     e0e:	0e 94 32 06 	call	0xc64	; 0xc64 <set_PWM>
	
		loop_cnt = 0;
     e12:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <loop_cnt>

		// Enable logging with define		
		#ifdef LOGGING
			printf("%d,%d,%d,%d\r\n", temp_dach, temp_kessel, d_teta, duty);
     e16:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <duty>
     e1a:	68 2f       	mov	r22, r24
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	40 91 aa 00 	lds	r20, 0x00AA	; 0x8000aa <d_teta>
     e22:	50 91 ab 00 	lds	r21, 0x00AB	; 0x8000ab <d_teta+0x1>
     e26:	20 91 a7 00 	lds	r18, 0x00A7	; 0x8000a7 <temp_kessel>
     e2a:	30 91 a8 00 	lds	r19, 0x00A8	; 0x8000a8 <temp_kessel+0x1>
     e2e:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <temp_dach>
     e32:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <temp_dach+0x1>
     e36:	e7 2f       	mov	r30, r23
     e38:	ef 93       	push	r30
     e3a:	6f 93       	push	r22
     e3c:	65 2f       	mov	r22, r21
     e3e:	6f 93       	push	r22
     e40:	4f 93       	push	r20
     e42:	43 2f       	mov	r20, r19
     e44:	4f 93       	push	r20
     e46:	2f 93       	push	r18
     e48:	29 2f       	mov	r18, r25
     e4a:	2f 93       	push	r18
     e4c:	8f 93       	push	r24
     e4e:	84 e8       	ldi	r24, 0x84	; 132
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	89 2f       	mov	r24, r25
     e54:	8f 93       	push	r24
     e56:	84 e8       	ldi	r24, 0x84	; 132
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	8f 93       	push	r24
     e5c:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <printf>
     e60:	8d b7       	in	r24, 0x3d	; 61
     e62:	9e b7       	in	r25, 0x3e	; 62
     e64:	0a 96       	adiw	r24, 0x0a	; 10
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
		#endif
	}
	
	TIFR &= ~(1<<TOV2);			//clear flag
     e70:	88 e5       	ldi	r24, 0x58	; 88
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	28 e5       	ldi	r18, 0x58	; 88
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	f9 01       	movw	r30, r18
     e7a:	20 81       	ld	r18, Z
     e7c:	2f 7b       	andi	r18, 0xBF	; 191
     e7e:	fc 01       	movw	r30, r24
     e80:	20 83       	st	Z, r18
		
	sei();
     e82:	78 94       	sei
}
     e84:	00 00       	nop
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	ff 91       	pop	r31
     e8c:	ef 91       	pop	r30
     e8e:	bf 91       	pop	r27
     e90:	af 91       	pop	r26
     e92:	9f 91       	pop	r25
     e94:	8f 91       	pop	r24
     e96:	7f 91       	pop	r23
     e98:	6f 91       	pop	r22
     e9a:	5f 91       	pop	r21
     e9c:	4f 91       	pop	r20
     e9e:	3f 91       	pop	r19
     ea0:	2f 91       	pop	r18
     ea2:	0f 90       	pop	r0
     ea4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <Timeout_init>:
#include "main.h"
#include "regulator.h"
#include "uart.h"

void Timeout_init()
{
     eae:	cf 93       	push	r28
     eb0:	df 93       	push	r29
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00;
     eb6:	8f e4       	ldi	r24, 0x4F	; 79
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	fc 01       	movw	r30, r24
     ebc:	10 82       	st	Z, r1
	
	TIMSK |= (1<<TOIE1);			//enable overflow-event
     ebe:	89 e5       	ldi	r24, 0x59	; 89
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	29 e5       	ldi	r18, 0x59	; 89
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	f9 01       	movw	r30, r18
     ec8:	20 81       	ld	r18, Z
     eca:	24 60       	ori	r18, 0x04	; 4
     ecc:	fc 01       	movw	r30, r24
     ece:	20 83       	st	Z, r18
	sei();
     ed0:	78 94       	sei
}
     ed2:	00 00       	nop
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <start_timeout_timer>:
void start_timeout_timer()
{
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						 //reset timer counter value
     ee2:	8c e4       	ldi	r24, 0x4C	; 76
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	fc 01       	movw	r30, r24
     ee8:	11 82       	std	Z+1, r1	; 0x01
     eea:	10 82       	st	Z, r1
	TCCR1B = (1<<CS12) | (1<<CS10);  //start timer at prescaler /1024
     eec:	8e e4       	ldi	r24, 0x4E	; 78
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	25 e0       	ldi	r18, 0x05	; 5
     ef2:	fc 01       	movw	r30, r24
     ef4:	20 83       	st	Z, r18
}
     ef6:	00 00       	nop
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	08 95       	ret

00000efe <stop_timeout_timer>:

void stop_timeout_timer()
{
     efe:	cf 93       	push	r28
     f00:	df 93       	push	r29
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     f06:	8e e4       	ldi	r24, 0x4E	; 78
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	2e e4       	ldi	r18, 0x4E	; 78
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	f9 01       	movw	r30, r18
     f10:	20 81       	ld	r18, Z
     f12:	2a 7f       	andi	r18, 0xFA	; 250
     f14:	fc 01       	movw	r30, r24
     f16:	20 83       	st	Z, r18
}
     f18:	00 00       	nop
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	08 95       	ret

00000f20 <__vector_9>:



//timeouted
ISR(TIMER1_OVF_vect)
{	
     f20:	1f 92       	push	r1
     f22:	0f 92       	push	r0
     f24:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	0f 93       	push	r16
     f2e:	1f 93       	push	r17
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	cli();
     f50:	f8 94       	cli
	
	if((getState() == 3) && (eeprom_read_byte((uint8_t*)0) != get_delta(1)))
     f52:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getState>
     f56:	83 30       	cpi	r24, 0x03	; 3
     f58:	a1 f4       	brne	.+40     	; 0xf82 <__vector_9+0x62>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 86 10 	call	0x210c	; 0x210c <eeprom_read_byte>
     f62:	08 2f       	mov	r16, r24
     f64:	10 e0       	ldi	r17, 0x00	; 0
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     f6c:	08 17       	cp	r16, r24
     f6e:	19 07       	cpc	r17, r25
     f70:	41 f0       	breq	.+16     	; 0xf82 <__vector_9+0x62>
	{
		eeprom_update_byte((uint8_t*)(0), (uint8_t)get_delta(1));
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     f78:	68 2f       	mov	r22, r24
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 8e 10 	call	0x211c	; 0x211c <eeprom_update_byte>
	}
	
	if((getState() == 4) && (eeprom_read_byte((uint8_t*)1) != get_delta(2)))
     f82:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getState>
     f86:	84 30       	cpi	r24, 0x04	; 4
     f88:	a1 f4       	brne	.+40     	; 0xfb2 <__vector_9+0x92>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 86 10 	call	0x210c	; 0x210c <eeprom_read_byte>
     f92:	08 2f       	mov	r16, r24
     f94:	10 e0       	ldi	r17, 0x00	; 0
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     f9c:	08 17       	cp	r16, r24
     f9e:	19 07       	cpc	r17, r25
     fa0:	41 f0       	breq	.+16     	; 0xfb2 <__vector_9+0x92>
	{
		eeprom_update_byte((uint8_t*)(1), (uint8_t)get_delta(2));
     fa2:	82 e0       	ldi	r24, 0x02	; 2
     fa4:	0e 94 15 05 	call	0xa2a	; 0xa2a <get_delta>
     fa8:	68 2f       	mov	r22, r24
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 8e 10 	call	0x211c	; 0x211c <eeprom_update_byte>
	}
	
	setState(DISPLAY_OFF);
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setState>
	
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     fb8:	8e e4       	ldi	r24, 0x4E	; 78
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	2e e4       	ldi	r18, 0x4E	; 78
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	f9 01       	movw	r30, r18
     fc2:	20 81       	ld	r18, Z
     fc4:	2a 7f       	andi	r18, 0xFA	; 250
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18
	TCNT1 = 0;						   //resetting counter register
     fca:	8c e4       	ldi	r24, 0x4C	; 76
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	fc 01       	movw	r30, r24
     fd0:	11 82       	std	Z+1, r1	; 0x01
     fd2:	10 82       	st	Z, r1
	
	
	TIFR &= ~(1<<TOV1);
     fd4:	88 e5       	ldi	r24, 0x58	; 88
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	28 e5       	ldi	r18, 0x58	; 88
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	f9 01       	movw	r30, r18
     fde:	20 81       	ld	r18, Z
     fe0:	2b 7f       	andi	r18, 0xFB	; 251
     fe2:	fc 01       	movw	r30, r24
     fe4:	20 83       	st	Z, r18
	sei();
     fe6:	78 94       	sei
     fe8:	00 00       	nop
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	ff 91       	pop	r31
     ff0:	ef 91       	pop	r30
     ff2:	bf 91       	pop	r27
     ff4:	af 91       	pop	r26
     ff6:	9f 91       	pop	r25
     ff8:	8f 91       	pop	r24
     ffa:	7f 91       	pop	r23
     ffc:	6f 91       	pop	r22
     ffe:	5f 91       	pop	r21
    1000:	4f 91       	pop	r20
    1002:	3f 91       	pop	r19
    1004:	2f 91       	pop	r18
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	0f 90       	pop	r0
    100c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1010:	0f 90       	pop	r0
    1012:	1f 90       	pop	r1
    1014:	18 95       	reti

00001016 <uart_init>:
#include <avr/io.h>
#include <stdio.h>


void uart_init()
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<RXEN) | (1<<TXEN);  //enable receive and transmit
    101e:	8a e2       	ldi	r24, 0x2A	; 42
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	2a e2       	ldi	r18, 0x2A	; 42
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	f9 01       	movw	r30, r18
    1028:	20 81       	ld	r18, Z
    102a:	28 61       	ori	r18, 0x18	; 24
    102c:	fc 01       	movw	r30, r24
    102e:	20 83       	st	Z, r18
	UBRRL = 51;						 //setting datarate to 9600 baud/s
    1030:	89 e2       	ldi	r24, 0x29	; 41
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	23 e3       	ldi	r18, 0x33	; 51
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18

	UCSRB |= (1<<RXEN) | (1<<TXEN);
    103a:	8a e2       	ldi	r24, 0x2A	; 42
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	2a e2       	ldi	r18, 0x2A	; 42
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	f9 01       	movw	r30, r18
    1044:	20 81       	ld	r18, Z
    1046:	28 61       	ori	r18, 0x18	; 24
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18

	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
    104c:	80 e4       	ldi	r24, 0x40	; 64
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	20 e4       	ldi	r18, 0x40	; 64
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	f9 01       	movw	r30, r18
    1056:	20 81       	ld	r18, Z
    1058:	26 68       	ori	r18, 0x86	; 134
    105a:	fc 01       	movw	r30, r24
    105c:	20 83       	st	Z, r18
}
    105e:	00 00       	nop
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	08 95       	ret

00001066 <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	00 d0       	rcall	.+0      	; 0x106c <uart_putchar+0x6>
    106c:	1f 92       	push	r1
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
    1072:	89 83       	std	Y+1, r24	; 0x01
    1074:	7b 83       	std	Y+3, r23	; 0x03
    1076:	6a 83       	std	Y+2, r22	; 0x02
	if(c=='\n')
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	8a 30       	cpi	r24, 0x0A	; 10
    107c:	31 f4       	brne	.+12     	; 0x108a <uart_putchar+0x24>
		uart_putchar('\r', stream);
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	bc 01       	movw	r22, r24
    1084:	8d e0       	ldi	r24, 0x0D	; 13
    1086:	0e 94 33 08 	call	0x1066	; 0x1066 <uart_putchar>
		
		
	while( (UCSRA & (1<<UDRE)) ==0 )
    108a:	00 00       	nop
    108c:	8b e2       	ldi	r24, 0x2B	; 43
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	fc 01       	movw	r30, r24
    1092:	80 81       	ld	r24, Z
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	80 72       	andi	r24, 0x20	; 32
    109a:	99 27       	eor	r25, r25
    109c:	89 2b       	or	r24, r25
    109e:	b1 f3       	breq	.-20     	; 0x108c <uart_putchar+0x26>
	{
	}
		
	UDR = c;
    10a0:	8c e2       	ldi	r24, 0x2C	; 44
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	29 81       	ldd	r18, Y+1	; 0x01
    10a6:	fc 01       	movw	r30, r24
    10a8:	20 83       	st	Z, r18
	
	return 0;
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	08 95       	ret

000010ba <__subsf3>:
    10ba:	50 58       	subi	r21, 0x80	; 128

000010bc <__addsf3>:
    10bc:	bb 27       	eor	r27, r27
    10be:	aa 27       	eor	r26, r26
    10c0:	0e 94 75 08 	call	0x10ea	; 0x10ea <__addsf3x>
    10c4:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>
    10c8:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_pscA>
    10cc:	38 f0       	brcs	.+14     	; 0x10dc <__addsf3+0x20>
    10ce:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscB>
    10d2:	20 f0       	brcs	.+8      	; 0x10dc <__addsf3+0x20>
    10d4:	39 f4       	brne	.+14     	; 0x10e4 <__addsf3+0x28>
    10d6:	9f 3f       	cpi	r25, 0xFF	; 255
    10d8:	19 f4       	brne	.+6      	; 0x10e0 <__addsf3+0x24>
    10da:	26 f4       	brtc	.+8      	; 0x10e4 <__addsf3+0x28>
    10dc:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>
    10e0:	0e f4       	brtc	.+2      	; 0x10e4 <__addsf3+0x28>
    10e2:	e0 95       	com	r30
    10e4:	e7 fb       	bst	r30, 7
    10e6:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>

000010ea <__addsf3x>:
    10ea:	e9 2f       	mov	r30, r25
    10ec:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_split3>
    10f0:	58 f3       	brcs	.-42     	; 0x10c8 <__addsf3+0xc>
    10f2:	ba 17       	cp	r27, r26
    10f4:	62 07       	cpc	r22, r18
    10f6:	73 07       	cpc	r23, r19
    10f8:	84 07       	cpc	r24, r20
    10fa:	95 07       	cpc	r25, r21
    10fc:	20 f0       	brcs	.+8      	; 0x1106 <__addsf3x+0x1c>
    10fe:	79 f4       	brne	.+30     	; 0x111e <__addsf3x+0x34>
    1100:	a6 f5       	brtc	.+104    	; 0x116a <__addsf3x+0x80>
    1102:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_zero>
    1106:	0e f4       	brtc	.+2      	; 0x110a <__addsf3x+0x20>
    1108:	e0 95       	com	r30
    110a:	0b 2e       	mov	r0, r27
    110c:	ba 2f       	mov	r27, r26
    110e:	a0 2d       	mov	r26, r0
    1110:	0b 01       	movw	r0, r22
    1112:	b9 01       	movw	r22, r18
    1114:	90 01       	movw	r18, r0
    1116:	0c 01       	movw	r0, r24
    1118:	ca 01       	movw	r24, r20
    111a:	a0 01       	movw	r20, r0
    111c:	11 24       	eor	r1, r1
    111e:	ff 27       	eor	r31, r31
    1120:	59 1b       	sub	r21, r25
    1122:	99 f0       	breq	.+38     	; 0x114a <__addsf3x+0x60>
    1124:	59 3f       	cpi	r21, 0xF9	; 249
    1126:	50 f4       	brcc	.+20     	; 0x113c <__addsf3x+0x52>
    1128:	50 3e       	cpi	r21, 0xE0	; 224
    112a:	68 f1       	brcs	.+90     	; 0x1186 <__addsf3x+0x9c>
    112c:	1a 16       	cp	r1, r26
    112e:	f0 40       	sbci	r31, 0x00	; 0
    1130:	a2 2f       	mov	r26, r18
    1132:	23 2f       	mov	r18, r19
    1134:	34 2f       	mov	r19, r20
    1136:	44 27       	eor	r20, r20
    1138:	58 5f       	subi	r21, 0xF8	; 248
    113a:	f3 cf       	rjmp	.-26     	; 0x1122 <__addsf3x+0x38>
    113c:	46 95       	lsr	r20
    113e:	37 95       	ror	r19
    1140:	27 95       	ror	r18
    1142:	a7 95       	ror	r26
    1144:	f0 40       	sbci	r31, 0x00	; 0
    1146:	53 95       	inc	r21
    1148:	c9 f7       	brne	.-14     	; 0x113c <__addsf3x+0x52>
    114a:	7e f4       	brtc	.+30     	; 0x116a <__addsf3x+0x80>
    114c:	1f 16       	cp	r1, r31
    114e:	ba 0b       	sbc	r27, r26
    1150:	62 0b       	sbc	r22, r18
    1152:	73 0b       	sbc	r23, r19
    1154:	84 0b       	sbc	r24, r20
    1156:	ba f0       	brmi	.+46     	; 0x1186 <__addsf3x+0x9c>
    1158:	91 50       	subi	r25, 0x01	; 1
    115a:	a1 f0       	breq	.+40     	; 0x1184 <__addsf3x+0x9a>
    115c:	ff 0f       	add	r31, r31
    115e:	bb 1f       	adc	r27, r27
    1160:	66 1f       	adc	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	88 1f       	adc	r24, r24
    1166:	c2 f7       	brpl	.-16     	; 0x1158 <__addsf3x+0x6e>
    1168:	0e c0       	rjmp	.+28     	; 0x1186 <__addsf3x+0x9c>
    116a:	ba 0f       	add	r27, r26
    116c:	62 1f       	adc	r22, r18
    116e:	73 1f       	adc	r23, r19
    1170:	84 1f       	adc	r24, r20
    1172:	48 f4       	brcc	.+18     	; 0x1186 <__addsf3x+0x9c>
    1174:	87 95       	ror	r24
    1176:	77 95       	ror	r23
    1178:	67 95       	ror	r22
    117a:	b7 95       	ror	r27
    117c:	f7 95       	ror	r31
    117e:	9e 3f       	cpi	r25, 0xFE	; 254
    1180:	08 f0       	brcs	.+2      	; 0x1184 <__addsf3x+0x9a>
    1182:	b0 cf       	rjmp	.-160    	; 0x10e4 <__addsf3+0x28>
    1184:	93 95       	inc	r25
    1186:	88 0f       	add	r24, r24
    1188:	08 f0       	brcs	.+2      	; 0x118c <__addsf3x+0xa2>
    118a:	99 27       	eor	r25, r25
    118c:	ee 0f       	add	r30, r30
    118e:	97 95       	ror	r25
    1190:	87 95       	ror	r24
    1192:	08 95       	ret

00001194 <__divsf3>:
    1194:	0e 94 de 08 	call	0x11bc	; 0x11bc <__divsf3x>
    1198:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>
    119c:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscB>
    11a0:	58 f0       	brcs	.+22     	; 0x11b8 <__divsf3+0x24>
    11a2:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_pscA>
    11a6:	40 f0       	brcs	.+16     	; 0x11b8 <__divsf3+0x24>
    11a8:	29 f4       	brne	.+10     	; 0x11b4 <__divsf3+0x20>
    11aa:	5f 3f       	cpi	r21, 0xFF	; 255
    11ac:	29 f0       	breq	.+10     	; 0x11b8 <__divsf3+0x24>
    11ae:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    11b2:	51 11       	cpse	r21, r1
    11b4:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    11b8:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>

000011bc <__divsf3x>:
    11bc:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_split3>
    11c0:	68 f3       	brcs	.-38     	; 0x119c <__divsf3+0x8>

000011c2 <__divsf3_pse>:
    11c2:	99 23       	and	r25, r25
    11c4:	b1 f3       	breq	.-20     	; 0x11b2 <__divsf3+0x1e>
    11c6:	55 23       	and	r21, r21
    11c8:	91 f3       	breq	.-28     	; 0x11ae <__divsf3+0x1a>
    11ca:	95 1b       	sub	r25, r21
    11cc:	55 0b       	sbc	r21, r21
    11ce:	bb 27       	eor	r27, r27
    11d0:	aa 27       	eor	r26, r26
    11d2:	62 17       	cp	r22, r18
    11d4:	73 07       	cpc	r23, r19
    11d6:	84 07       	cpc	r24, r20
    11d8:	38 f0       	brcs	.+14     	; 0x11e8 <__divsf3_pse+0x26>
    11da:	9f 5f       	subi	r25, 0xFF	; 255
    11dc:	5f 4f       	sbci	r21, 0xFF	; 255
    11de:	22 0f       	add	r18, r18
    11e0:	33 1f       	adc	r19, r19
    11e2:	44 1f       	adc	r20, r20
    11e4:	aa 1f       	adc	r26, r26
    11e6:	a9 f3       	breq	.-22     	; 0x11d2 <__divsf3_pse+0x10>
    11e8:	35 d0       	rcall	.+106    	; 0x1254 <__divsf3_pse+0x92>
    11ea:	0e 2e       	mov	r0, r30
    11ec:	3a f0       	brmi	.+14     	; 0x11fc <__divsf3_pse+0x3a>
    11ee:	e0 e8       	ldi	r30, 0x80	; 128
    11f0:	32 d0       	rcall	.+100    	; 0x1256 <__divsf3_pse+0x94>
    11f2:	91 50       	subi	r25, 0x01	; 1
    11f4:	50 40       	sbci	r21, 0x00	; 0
    11f6:	e6 95       	lsr	r30
    11f8:	00 1c       	adc	r0, r0
    11fa:	ca f7       	brpl	.-14     	; 0x11ee <__divsf3_pse+0x2c>
    11fc:	2b d0       	rcall	.+86     	; 0x1254 <__divsf3_pse+0x92>
    11fe:	fe 2f       	mov	r31, r30
    1200:	29 d0       	rcall	.+82     	; 0x1254 <__divsf3_pse+0x92>
    1202:	66 0f       	add	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	88 1f       	adc	r24, r24
    1208:	bb 1f       	adc	r27, r27
    120a:	26 17       	cp	r18, r22
    120c:	37 07       	cpc	r19, r23
    120e:	48 07       	cpc	r20, r24
    1210:	ab 07       	cpc	r26, r27
    1212:	b0 e8       	ldi	r27, 0x80	; 128
    1214:	09 f0       	breq	.+2      	; 0x1218 <__divsf3_pse+0x56>
    1216:	bb 0b       	sbc	r27, r27
    1218:	80 2d       	mov	r24, r0
    121a:	bf 01       	movw	r22, r30
    121c:	ff 27       	eor	r31, r31
    121e:	93 58       	subi	r25, 0x83	; 131
    1220:	5f 4f       	sbci	r21, 0xFF	; 255
    1222:	3a f0       	brmi	.+14     	; 0x1232 <__divsf3_pse+0x70>
    1224:	9e 3f       	cpi	r25, 0xFE	; 254
    1226:	51 05       	cpc	r21, r1
    1228:	78 f0       	brcs	.+30     	; 0x1248 <__divsf3_pse+0x86>
    122a:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    122e:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    1232:	5f 3f       	cpi	r21, 0xFF	; 255
    1234:	e4 f3       	brlt	.-8      	; 0x122e <__divsf3_pse+0x6c>
    1236:	98 3e       	cpi	r25, 0xE8	; 232
    1238:	d4 f3       	brlt	.-12     	; 0x122e <__divsf3_pse+0x6c>
    123a:	86 95       	lsr	r24
    123c:	77 95       	ror	r23
    123e:	67 95       	ror	r22
    1240:	b7 95       	ror	r27
    1242:	f7 95       	ror	r31
    1244:	9f 5f       	subi	r25, 0xFF	; 255
    1246:	c9 f7       	brne	.-14     	; 0x123a <__divsf3_pse+0x78>
    1248:	88 0f       	add	r24, r24
    124a:	91 1d       	adc	r25, r1
    124c:	96 95       	lsr	r25
    124e:	87 95       	ror	r24
    1250:	97 f9       	bld	r25, 7
    1252:	08 95       	ret
    1254:	e1 e0       	ldi	r30, 0x01	; 1
    1256:	66 0f       	add	r22, r22
    1258:	77 1f       	adc	r23, r23
    125a:	88 1f       	adc	r24, r24
    125c:	bb 1f       	adc	r27, r27
    125e:	62 17       	cp	r22, r18
    1260:	73 07       	cpc	r23, r19
    1262:	84 07       	cpc	r24, r20
    1264:	ba 07       	cpc	r27, r26
    1266:	20 f0       	brcs	.+8      	; 0x1270 <__divsf3_pse+0xae>
    1268:	62 1b       	sub	r22, r18
    126a:	73 0b       	sbc	r23, r19
    126c:	84 0b       	sbc	r24, r20
    126e:	ba 0b       	sbc	r27, r26
    1270:	ee 1f       	adc	r30, r30
    1272:	88 f7       	brcc	.-30     	; 0x1256 <__divsf3_pse+0x94>
    1274:	e0 95       	com	r30
    1276:	08 95       	ret

00001278 <__fixsfsi>:
    1278:	0e 94 43 09 	call	0x1286	; 0x1286 <__fixunssfsi>
    127c:	68 94       	set
    127e:	b1 11       	cpse	r27, r1
    1280:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    1284:	08 95       	ret

00001286 <__fixunssfsi>:
    1286:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_splitA>
    128a:	88 f0       	brcs	.+34     	; 0x12ae <__fixunssfsi+0x28>
    128c:	9f 57       	subi	r25, 0x7F	; 127
    128e:	98 f0       	brcs	.+38     	; 0x12b6 <__fixunssfsi+0x30>
    1290:	b9 2f       	mov	r27, r25
    1292:	99 27       	eor	r25, r25
    1294:	b7 51       	subi	r27, 0x17	; 23
    1296:	b0 f0       	brcs	.+44     	; 0x12c4 <__fixunssfsi+0x3e>
    1298:	e1 f0       	breq	.+56     	; 0x12d2 <__fixunssfsi+0x4c>
    129a:	66 0f       	add	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	1a f0       	brmi	.+6      	; 0x12aa <__fixunssfsi+0x24>
    12a4:	ba 95       	dec	r27
    12a6:	c9 f7       	brne	.-14     	; 0x129a <__fixunssfsi+0x14>
    12a8:	14 c0       	rjmp	.+40     	; 0x12d2 <__fixunssfsi+0x4c>
    12aa:	b1 30       	cpi	r27, 0x01	; 1
    12ac:	91 f0       	breq	.+36     	; 0x12d2 <__fixunssfsi+0x4c>
    12ae:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_zero>
    12b2:	b1 e0       	ldi	r27, 0x01	; 1
    12b4:	08 95       	ret
    12b6:	0c 94 f9 09 	jmp	0x13f2	; 0x13f2 <__fp_zero>
    12ba:	67 2f       	mov	r22, r23
    12bc:	78 2f       	mov	r23, r24
    12be:	88 27       	eor	r24, r24
    12c0:	b8 5f       	subi	r27, 0xF8	; 248
    12c2:	39 f0       	breq	.+14     	; 0x12d2 <__fixunssfsi+0x4c>
    12c4:	b9 3f       	cpi	r27, 0xF9	; 249
    12c6:	cc f3       	brlt	.-14     	; 0x12ba <__fixunssfsi+0x34>
    12c8:	86 95       	lsr	r24
    12ca:	77 95       	ror	r23
    12cc:	67 95       	ror	r22
    12ce:	b3 95       	inc	r27
    12d0:	d9 f7       	brne	.-10     	; 0x12c8 <__fixunssfsi+0x42>
    12d2:	3e f4       	brtc	.+14     	; 0x12e2 <__fixunssfsi+0x5c>
    12d4:	90 95       	com	r25
    12d6:	80 95       	com	r24
    12d8:	70 95       	com	r23
    12da:	61 95       	neg	r22
    12dc:	7f 4f       	sbci	r23, 0xFF	; 255
    12de:	8f 4f       	sbci	r24, 0xFF	; 255
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	08 95       	ret

000012e4 <__floatunsisf>:
    12e4:	e8 94       	clt
    12e6:	09 c0       	rjmp	.+18     	; 0x12fa <__floatsisf+0x12>

000012e8 <__floatsisf>:
    12e8:	97 fb       	bst	r25, 7
    12ea:	3e f4       	brtc	.+14     	; 0x12fa <__floatsisf+0x12>
    12ec:	90 95       	com	r25
    12ee:	80 95       	com	r24
    12f0:	70 95       	com	r23
    12f2:	61 95       	neg	r22
    12f4:	7f 4f       	sbci	r23, 0xFF	; 255
    12f6:	8f 4f       	sbci	r24, 0xFF	; 255
    12f8:	9f 4f       	sbci	r25, 0xFF	; 255
    12fa:	99 23       	and	r25, r25
    12fc:	a9 f0       	breq	.+42     	; 0x1328 <__floatsisf+0x40>
    12fe:	f9 2f       	mov	r31, r25
    1300:	96 e9       	ldi	r25, 0x96	; 150
    1302:	bb 27       	eor	r27, r27
    1304:	93 95       	inc	r25
    1306:	f6 95       	lsr	r31
    1308:	87 95       	ror	r24
    130a:	77 95       	ror	r23
    130c:	67 95       	ror	r22
    130e:	b7 95       	ror	r27
    1310:	f1 11       	cpse	r31, r1
    1312:	f8 cf       	rjmp	.-16     	; 0x1304 <__floatsisf+0x1c>
    1314:	fa f4       	brpl	.+62     	; 0x1354 <__floatsisf+0x6c>
    1316:	bb 0f       	add	r27, r27
    1318:	11 f4       	brne	.+4      	; 0x131e <__floatsisf+0x36>
    131a:	60 ff       	sbrs	r22, 0
    131c:	1b c0       	rjmp	.+54     	; 0x1354 <__floatsisf+0x6c>
    131e:	6f 5f       	subi	r22, 0xFF	; 255
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	8f 4f       	sbci	r24, 0xFF	; 255
    1324:	9f 4f       	sbci	r25, 0xFF	; 255
    1326:	16 c0       	rjmp	.+44     	; 0x1354 <__floatsisf+0x6c>
    1328:	88 23       	and	r24, r24
    132a:	11 f0       	breq	.+4      	; 0x1330 <__floatsisf+0x48>
    132c:	96 e9       	ldi	r25, 0x96	; 150
    132e:	11 c0       	rjmp	.+34     	; 0x1352 <__floatsisf+0x6a>
    1330:	77 23       	and	r23, r23
    1332:	21 f0       	breq	.+8      	; 0x133c <__floatsisf+0x54>
    1334:	9e e8       	ldi	r25, 0x8E	; 142
    1336:	87 2f       	mov	r24, r23
    1338:	76 2f       	mov	r23, r22
    133a:	05 c0       	rjmp	.+10     	; 0x1346 <__floatsisf+0x5e>
    133c:	66 23       	and	r22, r22
    133e:	71 f0       	breq	.+28     	; 0x135c <__floatsisf+0x74>
    1340:	96 e8       	ldi	r25, 0x86	; 134
    1342:	86 2f       	mov	r24, r22
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	2a f0       	brmi	.+10     	; 0x1354 <__floatsisf+0x6c>
    134a:	9a 95       	dec	r25
    134c:	66 0f       	add	r22, r22
    134e:	77 1f       	adc	r23, r23
    1350:	88 1f       	adc	r24, r24
    1352:	da f7       	brpl	.-10     	; 0x134a <__floatsisf+0x62>
    1354:	88 0f       	add	r24, r24
    1356:	96 95       	lsr	r25
    1358:	87 95       	ror	r24
    135a:	97 f9       	bld	r25, 7
    135c:	08 95       	ret

0000135e <__fp_inf>:
    135e:	97 f9       	bld	r25, 7
    1360:	9f 67       	ori	r25, 0x7F	; 127
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	08 95       	ret

0000136a <__fp_nan>:
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	80 ec       	ldi	r24, 0xC0	; 192
    136e:	08 95       	ret

00001370 <__fp_pscA>:
    1370:	00 24       	eor	r0, r0
    1372:	0a 94       	dec	r0
    1374:	16 16       	cp	r1, r22
    1376:	17 06       	cpc	r1, r23
    1378:	18 06       	cpc	r1, r24
    137a:	09 06       	cpc	r0, r25
    137c:	08 95       	ret

0000137e <__fp_pscB>:
    137e:	00 24       	eor	r0, r0
    1380:	0a 94       	dec	r0
    1382:	12 16       	cp	r1, r18
    1384:	13 06       	cpc	r1, r19
    1386:	14 06       	cpc	r1, r20
    1388:	05 06       	cpc	r0, r21
    138a:	08 95       	ret

0000138c <__fp_round>:
    138c:	09 2e       	mov	r0, r25
    138e:	03 94       	inc	r0
    1390:	00 0c       	add	r0, r0
    1392:	11 f4       	brne	.+4      	; 0x1398 <__fp_round+0xc>
    1394:	88 23       	and	r24, r24
    1396:	52 f0       	brmi	.+20     	; 0x13ac <__fp_round+0x20>
    1398:	bb 0f       	add	r27, r27
    139a:	40 f4       	brcc	.+16     	; 0x13ac <__fp_round+0x20>
    139c:	bf 2b       	or	r27, r31
    139e:	11 f4       	brne	.+4      	; 0x13a4 <__fp_round+0x18>
    13a0:	60 ff       	sbrs	r22, 0
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <__fp_round+0x20>
    13a4:	6f 5f       	subi	r22, 0xFF	; 255
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	08 95       	ret

000013ae <__fp_split3>:
    13ae:	57 fd       	sbrc	r21, 7
    13b0:	90 58       	subi	r25, 0x80	; 128
    13b2:	44 0f       	add	r20, r20
    13b4:	55 1f       	adc	r21, r21
    13b6:	59 f0       	breq	.+22     	; 0x13ce <__fp_splitA+0x10>
    13b8:	5f 3f       	cpi	r21, 0xFF	; 255
    13ba:	71 f0       	breq	.+28     	; 0x13d8 <__fp_splitA+0x1a>
    13bc:	47 95       	ror	r20

000013be <__fp_splitA>:
    13be:	88 0f       	add	r24, r24
    13c0:	97 fb       	bst	r25, 7
    13c2:	99 1f       	adc	r25, r25
    13c4:	61 f0       	breq	.+24     	; 0x13de <__fp_splitA+0x20>
    13c6:	9f 3f       	cpi	r25, 0xFF	; 255
    13c8:	79 f0       	breq	.+30     	; 0x13e8 <__fp_splitA+0x2a>
    13ca:	87 95       	ror	r24
    13cc:	08 95       	ret
    13ce:	12 16       	cp	r1, r18
    13d0:	13 06       	cpc	r1, r19
    13d2:	14 06       	cpc	r1, r20
    13d4:	55 1f       	adc	r21, r21
    13d6:	f2 cf       	rjmp	.-28     	; 0x13bc <__fp_split3+0xe>
    13d8:	46 95       	lsr	r20
    13da:	f1 df       	rcall	.-30     	; 0x13be <__fp_splitA>
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <__fp_splitA+0x30>
    13de:	16 16       	cp	r1, r22
    13e0:	17 06       	cpc	r1, r23
    13e2:	18 06       	cpc	r1, r24
    13e4:	99 1f       	adc	r25, r25
    13e6:	f1 cf       	rjmp	.-30     	; 0x13ca <__fp_splitA+0xc>
    13e8:	86 95       	lsr	r24
    13ea:	71 05       	cpc	r23, r1
    13ec:	61 05       	cpc	r22, r1
    13ee:	08 94       	sec
    13f0:	08 95       	ret

000013f2 <__fp_zero>:
    13f2:	e8 94       	clt

000013f4 <__fp_szero>:
    13f4:	bb 27       	eor	r27, r27
    13f6:	66 27       	eor	r22, r22
    13f8:	77 27       	eor	r23, r23
    13fa:	cb 01       	movw	r24, r22
    13fc:	97 f9       	bld	r25, 7
    13fe:	08 95       	ret

00001400 <__mulsf3>:
    1400:	0e 94 13 0a 	call	0x1426	; 0x1426 <__mulsf3x>
    1404:	0c 94 c6 09 	jmp	0x138c	; 0x138c <__fp_round>
    1408:	0e 94 b8 09 	call	0x1370	; 0x1370 <__fp_pscA>
    140c:	38 f0       	brcs	.+14     	; 0x141c <__mulsf3+0x1c>
    140e:	0e 94 bf 09 	call	0x137e	; 0x137e <__fp_pscB>
    1412:	20 f0       	brcs	.+8      	; 0x141c <__mulsf3+0x1c>
    1414:	95 23       	and	r25, r21
    1416:	11 f0       	breq	.+4      	; 0x141c <__mulsf3+0x1c>
    1418:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    141c:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__fp_nan>
    1420:	11 24       	eor	r1, r1
    1422:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>

00001426 <__mulsf3x>:
    1426:	0e 94 d7 09 	call	0x13ae	; 0x13ae <__fp_split3>
    142a:	70 f3       	brcs	.-36     	; 0x1408 <__mulsf3+0x8>

0000142c <__mulsf3_pse>:
    142c:	95 9f       	mul	r25, r21
    142e:	c1 f3       	breq	.-16     	; 0x1420 <__mulsf3+0x20>
    1430:	95 0f       	add	r25, r21
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	55 1f       	adc	r21, r21
    1436:	62 9f       	mul	r22, r18
    1438:	f0 01       	movw	r30, r0
    143a:	72 9f       	mul	r23, r18
    143c:	bb 27       	eor	r27, r27
    143e:	f0 0d       	add	r31, r0
    1440:	b1 1d       	adc	r27, r1
    1442:	63 9f       	mul	r22, r19
    1444:	aa 27       	eor	r26, r26
    1446:	f0 0d       	add	r31, r0
    1448:	b1 1d       	adc	r27, r1
    144a:	aa 1f       	adc	r26, r26
    144c:	64 9f       	mul	r22, r20
    144e:	66 27       	eor	r22, r22
    1450:	b0 0d       	add	r27, r0
    1452:	a1 1d       	adc	r26, r1
    1454:	66 1f       	adc	r22, r22
    1456:	82 9f       	mul	r24, r18
    1458:	22 27       	eor	r18, r18
    145a:	b0 0d       	add	r27, r0
    145c:	a1 1d       	adc	r26, r1
    145e:	62 1f       	adc	r22, r18
    1460:	73 9f       	mul	r23, r19
    1462:	b0 0d       	add	r27, r0
    1464:	a1 1d       	adc	r26, r1
    1466:	62 1f       	adc	r22, r18
    1468:	83 9f       	mul	r24, r19
    146a:	a0 0d       	add	r26, r0
    146c:	61 1d       	adc	r22, r1
    146e:	22 1f       	adc	r18, r18
    1470:	74 9f       	mul	r23, r20
    1472:	33 27       	eor	r19, r19
    1474:	a0 0d       	add	r26, r0
    1476:	61 1d       	adc	r22, r1
    1478:	23 1f       	adc	r18, r19
    147a:	84 9f       	mul	r24, r20
    147c:	60 0d       	add	r22, r0
    147e:	21 1d       	adc	r18, r1
    1480:	82 2f       	mov	r24, r18
    1482:	76 2f       	mov	r23, r22
    1484:	6a 2f       	mov	r22, r26
    1486:	11 24       	eor	r1, r1
    1488:	9f 57       	subi	r25, 0x7F	; 127
    148a:	50 40       	sbci	r21, 0x00	; 0
    148c:	9a f0       	brmi	.+38     	; 0x14b4 <__mulsf3_pse+0x88>
    148e:	f1 f0       	breq	.+60     	; 0x14cc <__mulsf3_pse+0xa0>
    1490:	88 23       	and	r24, r24
    1492:	4a f0       	brmi	.+18     	; 0x14a6 <__mulsf3_pse+0x7a>
    1494:	ee 0f       	add	r30, r30
    1496:	ff 1f       	adc	r31, r31
    1498:	bb 1f       	adc	r27, r27
    149a:	66 1f       	adc	r22, r22
    149c:	77 1f       	adc	r23, r23
    149e:	88 1f       	adc	r24, r24
    14a0:	91 50       	subi	r25, 0x01	; 1
    14a2:	50 40       	sbci	r21, 0x00	; 0
    14a4:	a9 f7       	brne	.-22     	; 0x1490 <__mulsf3_pse+0x64>
    14a6:	9e 3f       	cpi	r25, 0xFE	; 254
    14a8:	51 05       	cpc	r21, r1
    14aa:	80 f0       	brcs	.+32     	; 0x14cc <__mulsf3_pse+0xa0>
    14ac:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_inf>
    14b0:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>
    14b4:	5f 3f       	cpi	r21, 0xFF	; 255
    14b6:	e4 f3       	brlt	.-8      	; 0x14b0 <__mulsf3_pse+0x84>
    14b8:	98 3e       	cpi	r25, 0xE8	; 232
    14ba:	d4 f3       	brlt	.-12     	; 0x14b0 <__mulsf3_pse+0x84>
    14bc:	86 95       	lsr	r24
    14be:	77 95       	ror	r23
    14c0:	67 95       	ror	r22
    14c2:	b7 95       	ror	r27
    14c4:	f7 95       	ror	r31
    14c6:	e7 95       	ror	r30
    14c8:	9f 5f       	subi	r25, 0xFF	; 255
    14ca:	c1 f7       	brne	.-16     	; 0x14bc <__mulsf3_pse+0x90>
    14cc:	fe 2b       	or	r31, r30
    14ce:	88 0f       	add	r24, r24
    14d0:	91 1d       	adc	r25, r1
    14d2:	96 95       	lsr	r25
    14d4:	87 95       	ror	r24
    14d6:	97 f9       	bld	r25, 7
    14d8:	08 95       	ret

000014da <round>:
    14da:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_splitA>
    14de:	e8 f0       	brcs	.+58     	; 0x151a <round+0x40>
    14e0:	9e 37       	cpi	r25, 0x7E	; 126
    14e2:	e8 f0       	brcs	.+58     	; 0x151e <round+0x44>
    14e4:	96 39       	cpi	r25, 0x96	; 150
    14e6:	b8 f4       	brcc	.+46     	; 0x1516 <round+0x3c>
    14e8:	9e 38       	cpi	r25, 0x8E	; 142
    14ea:	48 f4       	brcc	.+18     	; 0x14fe <round+0x24>
    14ec:	67 2f       	mov	r22, r23
    14ee:	78 2f       	mov	r23, r24
    14f0:	88 27       	eor	r24, r24
    14f2:	98 5f       	subi	r25, 0xF8	; 248
    14f4:	f9 cf       	rjmp	.-14     	; 0x14e8 <round+0xe>
    14f6:	86 95       	lsr	r24
    14f8:	77 95       	ror	r23
    14fa:	67 95       	ror	r22
    14fc:	93 95       	inc	r25
    14fe:	95 39       	cpi	r25, 0x95	; 149
    1500:	d0 f3       	brcs	.-12     	; 0x14f6 <round+0x1c>
    1502:	b6 2f       	mov	r27, r22
    1504:	b1 70       	andi	r27, 0x01	; 1
    1506:	6b 0f       	add	r22, r27
    1508:	71 1d       	adc	r23, r1
    150a:	81 1d       	adc	r24, r1
    150c:	20 f4       	brcc	.+8      	; 0x1516 <round+0x3c>
    150e:	87 95       	ror	r24
    1510:	77 95       	ror	r23
    1512:	67 95       	ror	r22
    1514:	93 95       	inc	r25
    1516:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__fp_mintl>
    151a:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__fp_mpack>
    151e:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__fp_szero>

00001522 <__fp_mintl>:
    1522:	88 23       	and	r24, r24
    1524:	71 f4       	brne	.+28     	; 0x1542 <__fp_mintl+0x20>
    1526:	77 23       	and	r23, r23
    1528:	21 f0       	breq	.+8      	; 0x1532 <__fp_mintl+0x10>
    152a:	98 50       	subi	r25, 0x08	; 8
    152c:	87 2b       	or	r24, r23
    152e:	76 2f       	mov	r23, r22
    1530:	07 c0       	rjmp	.+14     	; 0x1540 <__fp_mintl+0x1e>
    1532:	66 23       	and	r22, r22
    1534:	11 f4       	brne	.+4      	; 0x153a <__fp_mintl+0x18>
    1536:	99 27       	eor	r25, r25
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <__fp_mintl+0x32>
    153a:	90 51       	subi	r25, 0x10	; 16
    153c:	86 2b       	or	r24, r22
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	2a f0       	brmi	.+10     	; 0x154e <__fp_mintl+0x2c>
    1544:	9a 95       	dec	r25
    1546:	66 0f       	add	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	da f7       	brpl	.-10     	; 0x1544 <__fp_mintl+0x22>
    154e:	88 0f       	add	r24, r24
    1550:	96 95       	lsr	r25
    1552:	87 95       	ror	r24
    1554:	97 f9       	bld	r25, 7
    1556:	08 95       	ret

00001558 <__fp_mpack>:
    1558:	9f 3f       	cpi	r25, 0xFF	; 255
    155a:	31 f0       	breq	.+12     	; 0x1568 <__fp_mpack_finite+0xc>

0000155c <__fp_mpack_finite>:
    155c:	91 50       	subi	r25, 0x01	; 1
    155e:	20 f4       	brcc	.+8      	; 0x1568 <__fp_mpack_finite+0xc>
    1560:	87 95       	ror	r24
    1562:	77 95       	ror	r23
    1564:	67 95       	ror	r22
    1566:	b7 95       	ror	r27
    1568:	88 0f       	add	r24, r24
    156a:	91 1d       	adc	r25, r1
    156c:	96 95       	lsr	r25
    156e:	87 95       	ror	r24
    1570:	97 f9       	bld	r25, 7
    1572:	08 95       	ret

00001574 <vfprintf>:
    1574:	a0 e1       	ldi	r26, 0x10	; 16
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e0 ec       	ldi	r30, 0xC0	; 192
    157a:	fa e0       	ldi	r31, 0x0A	; 10
    157c:	0c 94 6d 0e 	jmp	0x1cda	; 0x1cda <__prologue_saves__>
    1580:	7c 01       	movw	r14, r24
    1582:	1b 01       	movw	r2, r22
    1584:	6a 01       	movw	r12, r20
    1586:	fc 01       	movw	r30, r24
    1588:	17 82       	std	Z+7, r1	; 0x07
    158a:	16 82       	std	Z+6, r1	; 0x06
    158c:	83 81       	ldd	r24, Z+3	; 0x03
    158e:	81 ff       	sbrs	r24, 1
    1590:	44 c3       	rjmp	.+1672   	; 0x1c1a <vfprintf+0x6a6>
    1592:	9e 01       	movw	r18, r28
    1594:	2f 5f       	subi	r18, 0xFF	; 255
    1596:	3f 4f       	sbci	r19, 0xFF	; 255
    1598:	39 01       	movw	r6, r18
    159a:	f7 01       	movw	r30, r14
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	f1 01       	movw	r30, r2
    15a0:	93 fd       	sbrc	r25, 3
    15a2:	85 91       	lpm	r24, Z+
    15a4:	93 ff       	sbrs	r25, 3
    15a6:	81 91       	ld	r24, Z+
    15a8:	1f 01       	movw	r2, r30
    15aa:	88 23       	and	r24, r24
    15ac:	09 f4       	brne	.+2      	; 0x15b0 <vfprintf+0x3c>
    15ae:	31 c3       	rjmp	.+1634   	; 0x1c12 <vfprintf+0x69e>
    15b0:	85 32       	cpi	r24, 0x25	; 37
    15b2:	39 f4       	brne	.+14     	; 0x15c2 <vfprintf+0x4e>
    15b4:	93 fd       	sbrc	r25, 3
    15b6:	85 91       	lpm	r24, Z+
    15b8:	93 ff       	sbrs	r25, 3
    15ba:	81 91       	ld	r24, Z+
    15bc:	1f 01       	movw	r2, r30
    15be:	85 32       	cpi	r24, 0x25	; 37
    15c0:	39 f4       	brne	.+14     	; 0x15d0 <vfprintf+0x5c>
    15c2:	b7 01       	movw	r22, r14
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    15ca:	56 01       	movw	r10, r12
    15cc:	65 01       	movw	r12, r10
    15ce:	e5 cf       	rjmp	.-54     	; 0x159a <vfprintf+0x26>
    15d0:	10 e0       	ldi	r17, 0x00	; 0
    15d2:	51 2c       	mov	r5, r1
    15d4:	91 2c       	mov	r9, r1
    15d6:	ff e1       	ldi	r31, 0x1F	; 31
    15d8:	f9 15       	cp	r31, r9
    15da:	d8 f0       	brcs	.+54     	; 0x1612 <vfprintf+0x9e>
    15dc:	8b 32       	cpi	r24, 0x2B	; 43
    15de:	79 f0       	breq	.+30     	; 0x15fe <vfprintf+0x8a>
    15e0:	38 f4       	brcc	.+14     	; 0x15f0 <vfprintf+0x7c>
    15e2:	80 32       	cpi	r24, 0x20	; 32
    15e4:	79 f0       	breq	.+30     	; 0x1604 <vfprintf+0x90>
    15e6:	83 32       	cpi	r24, 0x23	; 35
    15e8:	a1 f4       	brne	.+40     	; 0x1612 <vfprintf+0x9e>
    15ea:	f9 2d       	mov	r31, r9
    15ec:	f0 61       	ori	r31, 0x10	; 16
    15ee:	2e c0       	rjmp	.+92     	; 0x164c <vfprintf+0xd8>
    15f0:	8d 32       	cpi	r24, 0x2D	; 45
    15f2:	61 f0       	breq	.+24     	; 0x160c <vfprintf+0x98>
    15f4:	80 33       	cpi	r24, 0x30	; 48
    15f6:	69 f4       	brne	.+26     	; 0x1612 <vfprintf+0x9e>
    15f8:	29 2d       	mov	r18, r9
    15fa:	21 60       	ori	r18, 0x01	; 1
    15fc:	2d c0       	rjmp	.+90     	; 0x1658 <vfprintf+0xe4>
    15fe:	39 2d       	mov	r19, r9
    1600:	32 60       	ori	r19, 0x02	; 2
    1602:	93 2e       	mov	r9, r19
    1604:	89 2d       	mov	r24, r9
    1606:	84 60       	ori	r24, 0x04	; 4
    1608:	98 2e       	mov	r9, r24
    160a:	2a c0       	rjmp	.+84     	; 0x1660 <vfprintf+0xec>
    160c:	e9 2d       	mov	r30, r9
    160e:	e8 60       	ori	r30, 0x08	; 8
    1610:	15 c0       	rjmp	.+42     	; 0x163c <vfprintf+0xc8>
    1612:	97 fc       	sbrc	r9, 7
    1614:	2d c0       	rjmp	.+90     	; 0x1670 <vfprintf+0xfc>
    1616:	20 ed       	ldi	r18, 0xD0	; 208
    1618:	28 0f       	add	r18, r24
    161a:	2a 30       	cpi	r18, 0x0A	; 10
    161c:	88 f4       	brcc	.+34     	; 0x1640 <vfprintf+0xcc>
    161e:	96 fe       	sbrs	r9, 6
    1620:	06 c0       	rjmp	.+12     	; 0x162e <vfprintf+0xba>
    1622:	3a e0       	ldi	r19, 0x0A	; 10
    1624:	13 9f       	mul	r17, r19
    1626:	20 0d       	add	r18, r0
    1628:	11 24       	eor	r1, r1
    162a:	12 2f       	mov	r17, r18
    162c:	19 c0       	rjmp	.+50     	; 0x1660 <vfprintf+0xec>
    162e:	8a e0       	ldi	r24, 0x0A	; 10
    1630:	58 9e       	mul	r5, r24
    1632:	20 0d       	add	r18, r0
    1634:	11 24       	eor	r1, r1
    1636:	52 2e       	mov	r5, r18
    1638:	e9 2d       	mov	r30, r9
    163a:	e0 62       	ori	r30, 0x20	; 32
    163c:	9e 2e       	mov	r9, r30
    163e:	10 c0       	rjmp	.+32     	; 0x1660 <vfprintf+0xec>
    1640:	8e 32       	cpi	r24, 0x2E	; 46
    1642:	31 f4       	brne	.+12     	; 0x1650 <vfprintf+0xdc>
    1644:	96 fc       	sbrc	r9, 6
    1646:	e5 c2       	rjmp	.+1482   	; 0x1c12 <vfprintf+0x69e>
    1648:	f9 2d       	mov	r31, r9
    164a:	f0 64       	ori	r31, 0x40	; 64
    164c:	9f 2e       	mov	r9, r31
    164e:	08 c0       	rjmp	.+16     	; 0x1660 <vfprintf+0xec>
    1650:	8c 36       	cpi	r24, 0x6C	; 108
    1652:	21 f4       	brne	.+8      	; 0x165c <vfprintf+0xe8>
    1654:	29 2d       	mov	r18, r9
    1656:	20 68       	ori	r18, 0x80	; 128
    1658:	92 2e       	mov	r9, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <vfprintf+0xec>
    165c:	88 36       	cpi	r24, 0x68	; 104
    165e:	41 f4       	brne	.+16     	; 0x1670 <vfprintf+0xfc>
    1660:	f1 01       	movw	r30, r2
    1662:	93 fd       	sbrc	r25, 3
    1664:	85 91       	lpm	r24, Z+
    1666:	93 ff       	sbrs	r25, 3
    1668:	81 91       	ld	r24, Z+
    166a:	1f 01       	movw	r2, r30
    166c:	81 11       	cpse	r24, r1
    166e:	b3 cf       	rjmp	.-154    	; 0x15d6 <vfprintf+0x62>
    1670:	9b eb       	ldi	r25, 0xBB	; 187
    1672:	98 0f       	add	r25, r24
    1674:	93 30       	cpi	r25, 0x03	; 3
    1676:	20 f4       	brcc	.+8      	; 0x1680 <vfprintf+0x10c>
    1678:	99 2d       	mov	r25, r9
    167a:	90 61       	ori	r25, 0x10	; 16
    167c:	80 5e       	subi	r24, 0xE0	; 224
    167e:	07 c0       	rjmp	.+14     	; 0x168e <vfprintf+0x11a>
    1680:	9b e9       	ldi	r25, 0x9B	; 155
    1682:	98 0f       	add	r25, r24
    1684:	93 30       	cpi	r25, 0x03	; 3
    1686:	08 f0       	brcs	.+2      	; 0x168a <vfprintf+0x116>
    1688:	66 c1       	rjmp	.+716    	; 0x1956 <vfprintf+0x3e2>
    168a:	99 2d       	mov	r25, r9
    168c:	9f 7e       	andi	r25, 0xEF	; 239
    168e:	96 ff       	sbrs	r25, 6
    1690:	16 e0       	ldi	r17, 0x06	; 6
    1692:	9f 73       	andi	r25, 0x3F	; 63
    1694:	99 2e       	mov	r9, r25
    1696:	85 36       	cpi	r24, 0x65	; 101
    1698:	19 f4       	brne	.+6      	; 0x16a0 <vfprintf+0x12c>
    169a:	90 64       	ori	r25, 0x40	; 64
    169c:	99 2e       	mov	r9, r25
    169e:	08 c0       	rjmp	.+16     	; 0x16b0 <vfprintf+0x13c>
    16a0:	86 36       	cpi	r24, 0x66	; 102
    16a2:	21 f4       	brne	.+8      	; 0x16ac <vfprintf+0x138>
    16a4:	39 2f       	mov	r19, r25
    16a6:	30 68       	ori	r19, 0x80	; 128
    16a8:	93 2e       	mov	r9, r19
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0x13c>
    16ac:	11 11       	cpse	r17, r1
    16ae:	11 50       	subi	r17, 0x01	; 1
    16b0:	97 fe       	sbrs	r9, 7
    16b2:	07 c0       	rjmp	.+14     	; 0x16c2 <vfprintf+0x14e>
    16b4:	1c 33       	cpi	r17, 0x3C	; 60
    16b6:	50 f4       	brcc	.+20     	; 0x16cc <vfprintf+0x158>
    16b8:	44 24       	eor	r4, r4
    16ba:	43 94       	inc	r4
    16bc:	41 0e       	add	r4, r17
    16be:	27 e0       	ldi	r18, 0x07	; 7
    16c0:	0b c0       	rjmp	.+22     	; 0x16d8 <vfprintf+0x164>
    16c2:	18 30       	cpi	r17, 0x08	; 8
    16c4:	38 f0       	brcs	.+14     	; 0x16d4 <vfprintf+0x160>
    16c6:	27 e0       	ldi	r18, 0x07	; 7
    16c8:	17 e0       	ldi	r17, 0x07	; 7
    16ca:	05 c0       	rjmp	.+10     	; 0x16d6 <vfprintf+0x162>
    16cc:	27 e0       	ldi	r18, 0x07	; 7
    16ce:	9c e3       	ldi	r25, 0x3C	; 60
    16d0:	49 2e       	mov	r4, r25
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <vfprintf+0x164>
    16d4:	21 2f       	mov	r18, r17
    16d6:	41 2c       	mov	r4, r1
    16d8:	56 01       	movw	r10, r12
    16da:	84 e0       	ldi	r24, 0x04	; 4
    16dc:	a8 0e       	add	r10, r24
    16de:	b1 1c       	adc	r11, r1
    16e0:	f6 01       	movw	r30, r12
    16e2:	60 81       	ld	r22, Z
    16e4:	71 81       	ldd	r23, Z+1	; 0x01
    16e6:	82 81       	ldd	r24, Z+2	; 0x02
    16e8:	93 81       	ldd	r25, Z+3	; 0x03
    16ea:	04 2d       	mov	r16, r4
    16ec:	a3 01       	movw	r20, r6
    16ee:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <__ftoa_engine>
    16f2:	6c 01       	movw	r12, r24
    16f4:	f9 81       	ldd	r31, Y+1	; 0x01
    16f6:	fc 87       	std	Y+12, r31	; 0x0c
    16f8:	f0 ff       	sbrs	r31, 0
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <vfprintf+0x18c>
    16fc:	f3 ff       	sbrs	r31, 3
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <vfprintf+0x198>
    1700:	91 fc       	sbrc	r9, 1
    1702:	06 c0       	rjmp	.+12     	; 0x1710 <vfprintf+0x19c>
    1704:	92 fe       	sbrs	r9, 2
    1706:	06 c0       	rjmp	.+12     	; 0x1714 <vfprintf+0x1a0>
    1708:	00 e2       	ldi	r16, 0x20	; 32
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <vfprintf+0x1a2>
    170c:	0d e2       	ldi	r16, 0x2D	; 45
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <vfprintf+0x1a2>
    1710:	0b e2       	ldi	r16, 0x2B	; 43
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <vfprintf+0x1a2>
    1714:	00 e0       	ldi	r16, 0x00	; 0
    1716:	8c 85       	ldd	r24, Y+12	; 0x0c
    1718:	8c 70       	andi	r24, 0x0C	; 12
    171a:	19 f0       	breq	.+6      	; 0x1722 <vfprintf+0x1ae>
    171c:	01 11       	cpse	r16, r1
    171e:	5a c2       	rjmp	.+1204   	; 0x1bd4 <vfprintf+0x660>
    1720:	9b c2       	rjmp	.+1334   	; 0x1c58 <vfprintf+0x6e4>
    1722:	97 fe       	sbrs	r9, 7
    1724:	10 c0       	rjmp	.+32     	; 0x1746 <vfprintf+0x1d2>
    1726:	4c 0c       	add	r4, r12
    1728:	fc 85       	ldd	r31, Y+12	; 0x0c
    172a:	f4 ff       	sbrs	r31, 4
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <vfprintf+0x1c2>
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	81 33       	cpi	r24, 0x31	; 49
    1732:	09 f4       	brne	.+2      	; 0x1736 <vfprintf+0x1c2>
    1734:	4a 94       	dec	r4
    1736:	14 14       	cp	r1, r4
    1738:	74 f5       	brge	.+92     	; 0x1796 <vfprintf+0x222>
    173a:	28 e0       	ldi	r18, 0x08	; 8
    173c:	24 15       	cp	r18, r4
    173e:	78 f5       	brcc	.+94     	; 0x179e <vfprintf+0x22a>
    1740:	88 e0       	ldi	r24, 0x08	; 8
    1742:	48 2e       	mov	r4, r24
    1744:	2c c0       	rjmp	.+88     	; 0x179e <vfprintf+0x22a>
    1746:	96 fc       	sbrc	r9, 6
    1748:	2a c0       	rjmp	.+84     	; 0x179e <vfprintf+0x22a>
    174a:	81 2f       	mov	r24, r17
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	8c 15       	cp	r24, r12
    1750:	9d 05       	cpc	r25, r13
    1752:	9c f0       	brlt	.+38     	; 0x177a <vfprintf+0x206>
    1754:	3c ef       	ldi	r19, 0xFC	; 252
    1756:	c3 16       	cp	r12, r19
    1758:	3f ef       	ldi	r19, 0xFF	; 255
    175a:	d3 06       	cpc	r13, r19
    175c:	74 f0       	brlt	.+28     	; 0x177a <vfprintf+0x206>
    175e:	89 2d       	mov	r24, r9
    1760:	80 68       	ori	r24, 0x80	; 128
    1762:	98 2e       	mov	r9, r24
    1764:	0a c0       	rjmp	.+20     	; 0x177a <vfprintf+0x206>
    1766:	e2 e0       	ldi	r30, 0x02	; 2
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	ec 0f       	add	r30, r28
    176c:	fd 1f       	adc	r31, r29
    176e:	e1 0f       	add	r30, r17
    1770:	f1 1d       	adc	r31, r1
    1772:	80 81       	ld	r24, Z
    1774:	80 33       	cpi	r24, 0x30	; 48
    1776:	19 f4       	brne	.+6      	; 0x177e <vfprintf+0x20a>
    1778:	11 50       	subi	r17, 0x01	; 1
    177a:	11 11       	cpse	r17, r1
    177c:	f4 cf       	rjmp	.-24     	; 0x1766 <vfprintf+0x1f2>
    177e:	97 fe       	sbrs	r9, 7
    1780:	0e c0       	rjmp	.+28     	; 0x179e <vfprintf+0x22a>
    1782:	44 24       	eor	r4, r4
    1784:	43 94       	inc	r4
    1786:	41 0e       	add	r4, r17
    1788:	81 2f       	mov	r24, r17
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	c8 16       	cp	r12, r24
    178e:	d9 06       	cpc	r13, r25
    1790:	2c f4       	brge	.+10     	; 0x179c <vfprintf+0x228>
    1792:	1c 19       	sub	r17, r12
    1794:	04 c0       	rjmp	.+8      	; 0x179e <vfprintf+0x22a>
    1796:	44 24       	eor	r4, r4
    1798:	43 94       	inc	r4
    179a:	01 c0       	rjmp	.+2      	; 0x179e <vfprintf+0x22a>
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	97 fe       	sbrs	r9, 7
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <vfprintf+0x23a>
    17a2:	1c 14       	cp	r1, r12
    17a4:	1d 04       	cpc	r1, r13
    17a6:	34 f4       	brge	.+12     	; 0x17b4 <vfprintf+0x240>
    17a8:	c6 01       	movw	r24, r12
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <vfprintf+0x244>
    17ae:	85 e0       	ldi	r24, 0x05	; 5
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <vfprintf+0x244>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	01 11       	cpse	r16, r1
    17ba:	01 96       	adiw	r24, 0x01	; 1
    17bc:	11 23       	and	r17, r17
    17be:	31 f0       	breq	.+12     	; 0x17cc <vfprintf+0x258>
    17c0:	21 2f       	mov	r18, r17
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	2f 5f       	subi	r18, 0xFF	; 255
    17c6:	3f 4f       	sbci	r19, 0xFF	; 255
    17c8:	82 0f       	add	r24, r18
    17ca:	93 1f       	adc	r25, r19
    17cc:	25 2d       	mov	r18, r5
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	82 17       	cp	r24, r18
    17d2:	93 07       	cpc	r25, r19
    17d4:	14 f4       	brge	.+4      	; 0x17da <vfprintf+0x266>
    17d6:	58 1a       	sub	r5, r24
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <vfprintf+0x268>
    17da:	51 2c       	mov	r5, r1
    17dc:	89 2d       	mov	r24, r9
    17de:	89 70       	andi	r24, 0x09	; 9
    17e0:	49 f4       	brne	.+18     	; 0x17f4 <vfprintf+0x280>
    17e2:	55 20       	and	r5, r5
    17e4:	39 f0       	breq	.+14     	; 0x17f4 <vfprintf+0x280>
    17e6:	b7 01       	movw	r22, r14
    17e8:	80 e2       	ldi	r24, 0x20	; 32
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    17f0:	5a 94       	dec	r5
    17f2:	f7 cf       	rjmp	.-18     	; 0x17e2 <vfprintf+0x26e>
    17f4:	00 23       	and	r16, r16
    17f6:	29 f0       	breq	.+10     	; 0x1802 <vfprintf+0x28e>
    17f8:	b7 01       	movw	r22, r14
    17fa:	80 2f       	mov	r24, r16
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1802:	93 fc       	sbrc	r9, 3
    1804:	09 c0       	rjmp	.+18     	; 0x1818 <vfprintf+0x2a4>
    1806:	55 20       	and	r5, r5
    1808:	39 f0       	breq	.+14     	; 0x1818 <vfprintf+0x2a4>
    180a:	b7 01       	movw	r22, r14
    180c:	80 e3       	ldi	r24, 0x30	; 48
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1814:	5a 94       	dec	r5
    1816:	f7 cf       	rjmp	.-18     	; 0x1806 <vfprintf+0x292>
    1818:	97 fe       	sbrs	r9, 7
    181a:	4c c0       	rjmp	.+152    	; 0x18b4 <vfprintf+0x340>
    181c:	46 01       	movw	r8, r12
    181e:	d7 fe       	sbrs	r13, 7
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <vfprintf+0x2b2>
    1822:	81 2c       	mov	r8, r1
    1824:	91 2c       	mov	r9, r1
    1826:	c6 01       	movw	r24, r12
    1828:	88 19       	sub	r24, r8
    182a:	99 09       	sbc	r25, r9
    182c:	f3 01       	movw	r30, r6
    182e:	e8 0f       	add	r30, r24
    1830:	f9 1f       	adc	r31, r25
    1832:	fe 87       	std	Y+14, r31	; 0x0e
    1834:	ed 87       	std	Y+13, r30	; 0x0d
    1836:	96 01       	movw	r18, r12
    1838:	24 19       	sub	r18, r4
    183a:	31 09       	sbc	r19, r1
    183c:	38 8b       	std	Y+16, r19	; 0x10
    183e:	2f 87       	std	Y+15, r18	; 0x0f
    1840:	01 2f       	mov	r16, r17
    1842:	10 e0       	ldi	r17, 0x00	; 0
    1844:	11 95       	neg	r17
    1846:	01 95       	neg	r16
    1848:	11 09       	sbc	r17, r1
    184a:	3f ef       	ldi	r19, 0xFF	; 255
    184c:	83 16       	cp	r8, r19
    184e:	93 06       	cpc	r9, r19
    1850:	29 f4       	brne	.+10     	; 0x185c <vfprintf+0x2e8>
    1852:	b7 01       	movw	r22, r14
    1854:	8e e2       	ldi	r24, 0x2E	; 46
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    185c:	c8 14       	cp	r12, r8
    185e:	d9 04       	cpc	r13, r9
    1860:	4c f0       	brlt	.+18     	; 0x1874 <vfprintf+0x300>
    1862:	8f 85       	ldd	r24, Y+15	; 0x0f
    1864:	98 89       	ldd	r25, Y+16	; 0x10
    1866:	88 15       	cp	r24, r8
    1868:	99 05       	cpc	r25, r9
    186a:	24 f4       	brge	.+8      	; 0x1874 <vfprintf+0x300>
    186c:	ed 85       	ldd	r30, Y+13	; 0x0d
    186e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1870:	81 81       	ldd	r24, Z+1	; 0x01
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <vfprintf+0x302>
    1874:	80 e3       	ldi	r24, 0x30	; 48
    1876:	f1 e0       	ldi	r31, 0x01	; 1
    1878:	8f 1a       	sub	r8, r31
    187a:	91 08       	sbc	r9, r1
    187c:	2d 85       	ldd	r18, Y+13	; 0x0d
    187e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1880:	2f 5f       	subi	r18, 0xFF	; 255
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	3e 87       	std	Y+14, r19	; 0x0e
    1886:	2d 87       	std	Y+13, r18	; 0x0d
    1888:	80 16       	cp	r8, r16
    188a:	91 06       	cpc	r9, r17
    188c:	2c f0       	brlt	.+10     	; 0x1898 <vfprintf+0x324>
    188e:	b7 01       	movw	r22, r14
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1896:	d9 cf       	rjmp	.-78     	; 0x184a <vfprintf+0x2d6>
    1898:	c8 14       	cp	r12, r8
    189a:	d9 04       	cpc	r13, r9
    189c:	41 f4       	brne	.+16     	; 0x18ae <vfprintf+0x33a>
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	96 33       	cpi	r25, 0x36	; 54
    18a2:	20 f4       	brcc	.+8      	; 0x18ac <vfprintf+0x338>
    18a4:	95 33       	cpi	r25, 0x35	; 53
    18a6:	19 f4       	brne	.+6      	; 0x18ae <vfprintf+0x33a>
    18a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    18aa:	34 ff       	sbrs	r19, 4
    18ac:	81 e3       	ldi	r24, 0x31	; 49
    18ae:	b7 01       	movw	r22, r14
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	4e c0       	rjmp	.+156    	; 0x1950 <vfprintf+0x3dc>
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	81 33       	cpi	r24, 0x31	; 49
    18b8:	19 f0       	breq	.+6      	; 0x18c0 <vfprintf+0x34c>
    18ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    18bc:	9f 7e       	andi	r25, 0xEF	; 239
    18be:	9c 87       	std	Y+12, r25	; 0x0c
    18c0:	b7 01       	movw	r22, r14
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    18c8:	11 11       	cpse	r17, r1
    18ca:	05 c0       	rjmp	.+10     	; 0x18d6 <vfprintf+0x362>
    18cc:	94 fc       	sbrc	r9, 4
    18ce:	18 c0       	rjmp	.+48     	; 0x1900 <vfprintf+0x38c>
    18d0:	85 e6       	ldi	r24, 0x65	; 101
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	17 c0       	rjmp	.+46     	; 0x1904 <vfprintf+0x390>
    18d6:	b7 01       	movw	r22, r14
    18d8:	8e e2       	ldi	r24, 0x2E	; 46
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    18e0:	1e 5f       	subi	r17, 0xFE	; 254
    18e2:	82 e0       	ldi	r24, 0x02	; 2
    18e4:	01 e0       	ldi	r16, 0x01	; 1
    18e6:	08 0f       	add	r16, r24
    18e8:	f3 01       	movw	r30, r6
    18ea:	e8 0f       	add	r30, r24
    18ec:	f1 1d       	adc	r31, r1
    18ee:	80 81       	ld	r24, Z
    18f0:	b7 01       	movw	r22, r14
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    18f8:	80 2f       	mov	r24, r16
    18fa:	01 13       	cpse	r16, r17
    18fc:	f3 cf       	rjmp	.-26     	; 0x18e4 <vfprintf+0x370>
    18fe:	e6 cf       	rjmp	.-52     	; 0x18cc <vfprintf+0x358>
    1900:	85 e4       	ldi	r24, 0x45	; 69
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	b7 01       	movw	r22, r14
    1906:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    190a:	d7 fc       	sbrc	r13, 7
    190c:	06 c0       	rjmp	.+12     	; 0x191a <vfprintf+0x3a6>
    190e:	c1 14       	cp	r12, r1
    1910:	d1 04       	cpc	r13, r1
    1912:	41 f4       	brne	.+16     	; 0x1924 <vfprintf+0x3b0>
    1914:	ec 85       	ldd	r30, Y+12	; 0x0c
    1916:	e4 ff       	sbrs	r30, 4
    1918:	05 c0       	rjmp	.+10     	; 0x1924 <vfprintf+0x3b0>
    191a:	d1 94       	neg	r13
    191c:	c1 94       	neg	r12
    191e:	d1 08       	sbc	r13, r1
    1920:	8d e2       	ldi	r24, 0x2D	; 45
    1922:	01 c0       	rjmp	.+2      	; 0x1926 <vfprintf+0x3b2>
    1924:	8b e2       	ldi	r24, 0x2B	; 43
    1926:	b7 01       	movw	r22, r14
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    192e:	80 e3       	ldi	r24, 0x30	; 48
    1930:	2a e0       	ldi	r18, 0x0A	; 10
    1932:	c2 16       	cp	r12, r18
    1934:	d1 04       	cpc	r13, r1
    1936:	2c f0       	brlt	.+10     	; 0x1942 <vfprintf+0x3ce>
    1938:	8f 5f       	subi	r24, 0xFF	; 255
    193a:	fa e0       	ldi	r31, 0x0A	; 10
    193c:	cf 1a       	sub	r12, r31
    193e:	d1 08       	sbc	r13, r1
    1940:	f7 cf       	rjmp	.-18     	; 0x1930 <vfprintf+0x3bc>
    1942:	b7 01       	movw	r22, r14
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    194a:	b7 01       	movw	r22, r14
    194c:	c6 01       	movw	r24, r12
    194e:	c0 96       	adiw	r24, 0x30	; 48
    1950:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1954:	54 c1       	rjmp	.+680    	; 0x1bfe <vfprintf+0x68a>
    1956:	83 36       	cpi	r24, 0x63	; 99
    1958:	31 f0       	breq	.+12     	; 0x1966 <vfprintf+0x3f2>
    195a:	83 37       	cpi	r24, 0x73	; 115
    195c:	79 f0       	breq	.+30     	; 0x197c <vfprintf+0x408>
    195e:	83 35       	cpi	r24, 0x53	; 83
    1960:	09 f0       	breq	.+2      	; 0x1964 <vfprintf+0x3f0>
    1962:	56 c0       	rjmp	.+172    	; 0x1a10 <vfprintf+0x49c>
    1964:	20 c0       	rjmp	.+64     	; 0x19a6 <vfprintf+0x432>
    1966:	56 01       	movw	r10, r12
    1968:	32 e0       	ldi	r19, 0x02	; 2
    196a:	a3 0e       	add	r10, r19
    196c:	b1 1c       	adc	r11, r1
    196e:	f6 01       	movw	r30, r12
    1970:	80 81       	ld	r24, Z
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	01 e0       	ldi	r16, 0x01	; 1
    1976:	10 e0       	ldi	r17, 0x00	; 0
    1978:	63 01       	movw	r12, r6
    197a:	12 c0       	rjmp	.+36     	; 0x19a0 <vfprintf+0x42c>
    197c:	56 01       	movw	r10, r12
    197e:	f2 e0       	ldi	r31, 0x02	; 2
    1980:	af 0e       	add	r10, r31
    1982:	b1 1c       	adc	r11, r1
    1984:	f6 01       	movw	r30, r12
    1986:	c0 80       	ld	r12, Z
    1988:	d1 80       	ldd	r13, Z+1	; 0x01
    198a:	96 fe       	sbrs	r9, 6
    198c:	03 c0       	rjmp	.+6      	; 0x1994 <vfprintf+0x420>
    198e:	61 2f       	mov	r22, r17
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <vfprintf+0x424>
    1994:	6f ef       	ldi	r22, 0xFF	; 255
    1996:	7f ef       	ldi	r23, 0xFF	; 255
    1998:	c6 01       	movw	r24, r12
    199a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <strnlen>
    199e:	8c 01       	movw	r16, r24
    19a0:	f9 2d       	mov	r31, r9
    19a2:	ff 77       	andi	r31, 0x7F	; 127
    19a4:	14 c0       	rjmp	.+40     	; 0x19ce <vfprintf+0x45a>
    19a6:	56 01       	movw	r10, r12
    19a8:	22 e0       	ldi	r18, 0x02	; 2
    19aa:	a2 0e       	add	r10, r18
    19ac:	b1 1c       	adc	r11, r1
    19ae:	f6 01       	movw	r30, r12
    19b0:	c0 80       	ld	r12, Z
    19b2:	d1 80       	ldd	r13, Z+1	; 0x01
    19b4:	96 fe       	sbrs	r9, 6
    19b6:	03 c0       	rjmp	.+6      	; 0x19be <vfprintf+0x44a>
    19b8:	61 2f       	mov	r22, r17
    19ba:	70 e0       	ldi	r23, 0x00	; 0
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <vfprintf+0x44e>
    19be:	6f ef       	ldi	r22, 0xFF	; 255
    19c0:	7f ef       	ldi	r23, 0xFF	; 255
    19c2:	c6 01       	movw	r24, r12
    19c4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <strnlen_P>
    19c8:	8c 01       	movw	r16, r24
    19ca:	f9 2d       	mov	r31, r9
    19cc:	f0 68       	ori	r31, 0x80	; 128
    19ce:	9f 2e       	mov	r9, r31
    19d0:	f3 fd       	sbrc	r31, 3
    19d2:	1a c0       	rjmp	.+52     	; 0x1a08 <vfprintf+0x494>
    19d4:	85 2d       	mov	r24, r5
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	08 17       	cp	r16, r24
    19da:	19 07       	cpc	r17, r25
    19dc:	a8 f4       	brcc	.+42     	; 0x1a08 <vfprintf+0x494>
    19de:	b7 01       	movw	r22, r14
    19e0:	80 e2       	ldi	r24, 0x20	; 32
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    19e8:	5a 94       	dec	r5
    19ea:	f4 cf       	rjmp	.-24     	; 0x19d4 <vfprintf+0x460>
    19ec:	f6 01       	movw	r30, r12
    19ee:	97 fc       	sbrc	r9, 7
    19f0:	85 91       	lpm	r24, Z+
    19f2:	97 fe       	sbrs	r9, 7
    19f4:	81 91       	ld	r24, Z+
    19f6:	6f 01       	movw	r12, r30
    19f8:	b7 01       	movw	r22, r14
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1a00:	51 10       	cpse	r5, r1
    1a02:	5a 94       	dec	r5
    1a04:	01 50       	subi	r16, 0x01	; 1
    1a06:	11 09       	sbc	r17, r1
    1a08:	01 15       	cp	r16, r1
    1a0a:	11 05       	cpc	r17, r1
    1a0c:	79 f7       	brne	.-34     	; 0x19ec <vfprintf+0x478>
    1a0e:	f7 c0       	rjmp	.+494    	; 0x1bfe <vfprintf+0x68a>
    1a10:	84 36       	cpi	r24, 0x64	; 100
    1a12:	11 f0       	breq	.+4      	; 0x1a18 <vfprintf+0x4a4>
    1a14:	89 36       	cpi	r24, 0x69	; 105
    1a16:	61 f5       	brne	.+88     	; 0x1a70 <vfprintf+0x4fc>
    1a18:	56 01       	movw	r10, r12
    1a1a:	97 fe       	sbrs	r9, 7
    1a1c:	09 c0       	rjmp	.+18     	; 0x1a30 <vfprintf+0x4bc>
    1a1e:	24 e0       	ldi	r18, 0x04	; 4
    1a20:	a2 0e       	add	r10, r18
    1a22:	b1 1c       	adc	r11, r1
    1a24:	f6 01       	movw	r30, r12
    1a26:	60 81       	ld	r22, Z
    1a28:	71 81       	ldd	r23, Z+1	; 0x01
    1a2a:	82 81       	ldd	r24, Z+2	; 0x02
    1a2c:	93 81       	ldd	r25, Z+3	; 0x03
    1a2e:	0a c0       	rjmp	.+20     	; 0x1a44 <vfprintf+0x4d0>
    1a30:	f2 e0       	ldi	r31, 0x02	; 2
    1a32:	af 0e       	add	r10, r31
    1a34:	b1 1c       	adc	r11, r1
    1a36:	f6 01       	movw	r30, r12
    1a38:	60 81       	ld	r22, Z
    1a3a:	71 81       	ldd	r23, Z+1	; 0x01
    1a3c:	07 2e       	mov	r0, r23
    1a3e:	00 0c       	add	r0, r0
    1a40:	88 0b       	sbc	r24, r24
    1a42:	99 0b       	sbc	r25, r25
    1a44:	f9 2d       	mov	r31, r9
    1a46:	ff 76       	andi	r31, 0x6F	; 111
    1a48:	9f 2e       	mov	r9, r31
    1a4a:	97 ff       	sbrs	r25, 7
    1a4c:	09 c0       	rjmp	.+18     	; 0x1a60 <vfprintf+0x4ec>
    1a4e:	90 95       	com	r25
    1a50:	80 95       	com	r24
    1a52:	70 95       	com	r23
    1a54:	61 95       	neg	r22
    1a56:	7f 4f       	sbci	r23, 0xFF	; 255
    1a58:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	f0 68       	ori	r31, 0x80	; 128
    1a5e:	9f 2e       	mov	r9, r31
    1a60:	2a e0       	ldi	r18, 0x0A	; 10
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	a3 01       	movw	r20, r6
    1a66:	0e 94 28 10 	call	0x2050	; 0x2050 <__ultoa_invert>
    1a6a:	c8 2e       	mov	r12, r24
    1a6c:	c6 18       	sub	r12, r6
    1a6e:	3f c0       	rjmp	.+126    	; 0x1aee <vfprintf+0x57a>
    1a70:	09 2d       	mov	r16, r9
    1a72:	85 37       	cpi	r24, 0x75	; 117
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <vfprintf+0x50a>
    1a76:	0f 7e       	andi	r16, 0xEF	; 239
    1a78:	2a e0       	ldi	r18, 0x0A	; 10
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	1d c0       	rjmp	.+58     	; 0x1ab8 <vfprintf+0x544>
    1a7e:	09 7f       	andi	r16, 0xF9	; 249
    1a80:	8f 36       	cpi	r24, 0x6F	; 111
    1a82:	91 f0       	breq	.+36     	; 0x1aa8 <vfprintf+0x534>
    1a84:	18 f4       	brcc	.+6      	; 0x1a8c <vfprintf+0x518>
    1a86:	88 35       	cpi	r24, 0x58	; 88
    1a88:	59 f0       	breq	.+22     	; 0x1aa0 <vfprintf+0x52c>
    1a8a:	c3 c0       	rjmp	.+390    	; 0x1c12 <vfprintf+0x69e>
    1a8c:	80 37       	cpi	r24, 0x70	; 112
    1a8e:	19 f0       	breq	.+6      	; 0x1a96 <vfprintf+0x522>
    1a90:	88 37       	cpi	r24, 0x78	; 120
    1a92:	11 f0       	breq	.+4      	; 0x1a98 <vfprintf+0x524>
    1a94:	be c0       	rjmp	.+380    	; 0x1c12 <vfprintf+0x69e>
    1a96:	00 61       	ori	r16, 0x10	; 16
    1a98:	04 ff       	sbrs	r16, 4
    1a9a:	09 c0       	rjmp	.+18     	; 0x1aae <vfprintf+0x53a>
    1a9c:	04 60       	ori	r16, 0x04	; 4
    1a9e:	07 c0       	rjmp	.+14     	; 0x1aae <vfprintf+0x53a>
    1aa0:	94 fe       	sbrs	r9, 4
    1aa2:	08 c0       	rjmp	.+16     	; 0x1ab4 <vfprintf+0x540>
    1aa4:	06 60       	ori	r16, 0x06	; 6
    1aa6:	06 c0       	rjmp	.+12     	; 0x1ab4 <vfprintf+0x540>
    1aa8:	28 e0       	ldi	r18, 0x08	; 8
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	05 c0       	rjmp	.+10     	; 0x1ab8 <vfprintf+0x544>
    1aae:	20 e1       	ldi	r18, 0x10	; 16
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <vfprintf+0x544>
    1ab4:	20 e1       	ldi	r18, 0x10	; 16
    1ab6:	32 e0       	ldi	r19, 0x02	; 2
    1ab8:	56 01       	movw	r10, r12
    1aba:	07 ff       	sbrs	r16, 7
    1abc:	09 c0       	rjmp	.+18     	; 0x1ad0 <vfprintf+0x55c>
    1abe:	84 e0       	ldi	r24, 0x04	; 4
    1ac0:	a8 0e       	add	r10, r24
    1ac2:	b1 1c       	adc	r11, r1
    1ac4:	f6 01       	movw	r30, r12
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	08 c0       	rjmp	.+16     	; 0x1ae0 <vfprintf+0x56c>
    1ad0:	f2 e0       	ldi	r31, 0x02	; 2
    1ad2:	af 0e       	add	r10, r31
    1ad4:	b1 1c       	adc	r11, r1
    1ad6:	f6 01       	movw	r30, r12
    1ad8:	60 81       	ld	r22, Z
    1ada:	71 81       	ldd	r23, Z+1	; 0x01
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	a3 01       	movw	r20, r6
    1ae2:	0e 94 28 10 	call	0x2050	; 0x2050 <__ultoa_invert>
    1ae6:	c8 2e       	mov	r12, r24
    1ae8:	c6 18       	sub	r12, r6
    1aea:	0f 77       	andi	r16, 0x7F	; 127
    1aec:	90 2e       	mov	r9, r16
    1aee:	96 fe       	sbrs	r9, 6
    1af0:	0b c0       	rjmp	.+22     	; 0x1b08 <vfprintf+0x594>
    1af2:	09 2d       	mov	r16, r9
    1af4:	0e 7f       	andi	r16, 0xFE	; 254
    1af6:	c1 16       	cp	r12, r17
    1af8:	50 f4       	brcc	.+20     	; 0x1b0e <vfprintf+0x59a>
    1afa:	94 fe       	sbrs	r9, 4
    1afc:	0a c0       	rjmp	.+20     	; 0x1b12 <vfprintf+0x59e>
    1afe:	92 fc       	sbrc	r9, 2
    1b00:	08 c0       	rjmp	.+16     	; 0x1b12 <vfprintf+0x59e>
    1b02:	09 2d       	mov	r16, r9
    1b04:	0e 7e       	andi	r16, 0xEE	; 238
    1b06:	05 c0       	rjmp	.+10     	; 0x1b12 <vfprintf+0x59e>
    1b08:	dc 2c       	mov	r13, r12
    1b0a:	09 2d       	mov	r16, r9
    1b0c:	03 c0       	rjmp	.+6      	; 0x1b14 <vfprintf+0x5a0>
    1b0e:	dc 2c       	mov	r13, r12
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <vfprintf+0x5a0>
    1b12:	d1 2e       	mov	r13, r17
    1b14:	04 ff       	sbrs	r16, 4
    1b16:	0d c0       	rjmp	.+26     	; 0x1b32 <vfprintf+0x5be>
    1b18:	fe 01       	movw	r30, r28
    1b1a:	ec 0d       	add	r30, r12
    1b1c:	f1 1d       	adc	r31, r1
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 33       	cpi	r24, 0x30	; 48
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <vfprintf+0x5b4>
    1b24:	09 7e       	andi	r16, 0xE9	; 233
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <vfprintf+0x5c6>
    1b28:	02 ff       	sbrs	r16, 2
    1b2a:	06 c0       	rjmp	.+12     	; 0x1b38 <vfprintf+0x5c4>
    1b2c:	d3 94       	inc	r13
    1b2e:	d3 94       	inc	r13
    1b30:	04 c0       	rjmp	.+8      	; 0x1b3a <vfprintf+0x5c6>
    1b32:	80 2f       	mov	r24, r16
    1b34:	86 78       	andi	r24, 0x86	; 134
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <vfprintf+0x5c6>
    1b38:	d3 94       	inc	r13
    1b3a:	03 fd       	sbrc	r16, 3
    1b3c:	11 c0       	rjmp	.+34     	; 0x1b60 <vfprintf+0x5ec>
    1b3e:	00 ff       	sbrs	r16, 0
    1b40:	06 c0       	rjmp	.+12     	; 0x1b4e <vfprintf+0x5da>
    1b42:	1c 2d       	mov	r17, r12
    1b44:	d5 14       	cp	r13, r5
    1b46:	80 f4       	brcc	.+32     	; 0x1b68 <vfprintf+0x5f4>
    1b48:	15 0d       	add	r17, r5
    1b4a:	1d 19       	sub	r17, r13
    1b4c:	0d c0       	rjmp	.+26     	; 0x1b68 <vfprintf+0x5f4>
    1b4e:	d5 14       	cp	r13, r5
    1b50:	58 f4       	brcc	.+22     	; 0x1b68 <vfprintf+0x5f4>
    1b52:	b7 01       	movw	r22, r14
    1b54:	80 e2       	ldi	r24, 0x20	; 32
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1b5c:	d3 94       	inc	r13
    1b5e:	f7 cf       	rjmp	.-18     	; 0x1b4e <vfprintf+0x5da>
    1b60:	d5 14       	cp	r13, r5
    1b62:	10 f4       	brcc	.+4      	; 0x1b68 <vfprintf+0x5f4>
    1b64:	5d 18       	sub	r5, r13
    1b66:	01 c0       	rjmp	.+2      	; 0x1b6a <vfprintf+0x5f6>
    1b68:	51 2c       	mov	r5, r1
    1b6a:	04 ff       	sbrs	r16, 4
    1b6c:	10 c0       	rjmp	.+32     	; 0x1b8e <vfprintf+0x61a>
    1b6e:	b7 01       	movw	r22, r14
    1b70:	80 e3       	ldi	r24, 0x30	; 48
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1b78:	02 ff       	sbrs	r16, 2
    1b7a:	17 c0       	rjmp	.+46     	; 0x1baa <vfprintf+0x636>
    1b7c:	01 fd       	sbrc	r16, 1
    1b7e:	03 c0       	rjmp	.+6      	; 0x1b86 <vfprintf+0x612>
    1b80:	88 e7       	ldi	r24, 0x78	; 120
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <vfprintf+0x616>
    1b86:	88 e5       	ldi	r24, 0x58	; 88
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	b7 01       	movw	r22, r14
    1b8c:	0c c0       	rjmp	.+24     	; 0x1ba6 <vfprintf+0x632>
    1b8e:	80 2f       	mov	r24, r16
    1b90:	86 78       	andi	r24, 0x86	; 134
    1b92:	59 f0       	breq	.+22     	; 0x1baa <vfprintf+0x636>
    1b94:	01 ff       	sbrs	r16, 1
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <vfprintf+0x628>
    1b98:	8b e2       	ldi	r24, 0x2B	; 43
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <vfprintf+0x62a>
    1b9c:	80 e2       	ldi	r24, 0x20	; 32
    1b9e:	07 fd       	sbrc	r16, 7
    1ba0:	8d e2       	ldi	r24, 0x2D	; 45
    1ba2:	b7 01       	movw	r22, r14
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1baa:	c1 16       	cp	r12, r17
    1bac:	38 f4       	brcc	.+14     	; 0x1bbc <vfprintf+0x648>
    1bae:	b7 01       	movw	r22, r14
    1bb0:	80 e3       	ldi	r24, 0x30	; 48
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1bb8:	11 50       	subi	r17, 0x01	; 1
    1bba:	f7 cf       	rjmp	.-18     	; 0x1baa <vfprintf+0x636>
    1bbc:	ca 94       	dec	r12
    1bbe:	f3 01       	movw	r30, r6
    1bc0:	ec 0d       	add	r30, r12
    1bc2:	f1 1d       	adc	r31, r1
    1bc4:	80 81       	ld	r24, Z
    1bc6:	b7 01       	movw	r22, r14
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1bce:	c1 10       	cpse	r12, r1
    1bd0:	f5 cf       	rjmp	.-22     	; 0x1bbc <vfprintf+0x648>
    1bd2:	15 c0       	rjmp	.+42     	; 0x1bfe <vfprintf+0x68a>
    1bd4:	f4 e0       	ldi	r31, 0x04	; 4
    1bd6:	f5 15       	cp	r31, r5
    1bd8:	60 f5       	brcc	.+88     	; 0x1c32 <vfprintf+0x6be>
    1bda:	84 e0       	ldi	r24, 0x04	; 4
    1bdc:	58 1a       	sub	r5, r24
    1bde:	93 fe       	sbrs	r9, 3
    1be0:	1f c0       	rjmp	.+62     	; 0x1c20 <vfprintf+0x6ac>
    1be2:	01 11       	cpse	r16, r1
    1be4:	27 c0       	rjmp	.+78     	; 0x1c34 <vfprintf+0x6c0>
    1be6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1be8:	23 ff       	sbrs	r18, 3
    1bea:	2a c0       	rjmp	.+84     	; 0x1c40 <vfprintf+0x6cc>
    1bec:	04 e5       	ldi	r16, 0x54	; 84
    1bee:	10 e0       	ldi	r17, 0x00	; 0
    1bf0:	39 2d       	mov	r19, r9
    1bf2:	30 71       	andi	r19, 0x10	; 16
    1bf4:	93 2e       	mov	r9, r19
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	84 91       	lpm	r24, Z
    1bfa:	81 11       	cpse	r24, r1
    1bfc:	24 c0       	rjmp	.+72     	; 0x1c46 <vfprintf+0x6d2>
    1bfe:	55 20       	and	r5, r5
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <vfprintf+0x690>
    1c02:	e4 cc       	rjmp	.-1592   	; 0x15cc <vfprintf+0x58>
    1c04:	b7 01       	movw	r22, r14
    1c06:	80 e2       	ldi	r24, 0x20	; 32
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1c0e:	5a 94       	dec	r5
    1c10:	f6 cf       	rjmp	.-20     	; 0x1bfe <vfprintf+0x68a>
    1c12:	f7 01       	movw	r30, r14
    1c14:	86 81       	ldd	r24, Z+6	; 0x06
    1c16:	97 81       	ldd	r25, Z+7	; 0x07
    1c18:	26 c0       	rjmp	.+76     	; 0x1c66 <vfprintf+0x6f2>
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	9f ef       	ldi	r25, 0xFF	; 255
    1c1e:	23 c0       	rjmp	.+70     	; 0x1c66 <vfprintf+0x6f2>
    1c20:	b7 01       	movw	r22, r14
    1c22:	80 e2       	ldi	r24, 0x20	; 32
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1c2a:	5a 94       	dec	r5
    1c2c:	51 10       	cpse	r5, r1
    1c2e:	f8 cf       	rjmp	.-16     	; 0x1c20 <vfprintf+0x6ac>
    1c30:	d8 cf       	rjmp	.-80     	; 0x1be2 <vfprintf+0x66e>
    1c32:	51 2c       	mov	r5, r1
    1c34:	b7 01       	movw	r22, r14
    1c36:	80 2f       	mov	r24, r16
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1c3e:	d3 cf       	rjmp	.-90     	; 0x1be6 <vfprintf+0x672>
    1c40:	08 e5       	ldi	r16, 0x58	; 88
    1c42:	10 e0       	ldi	r17, 0x00	; 0
    1c44:	d5 cf       	rjmp	.-86     	; 0x1bf0 <vfprintf+0x67c>
    1c46:	91 10       	cpse	r9, r1
    1c48:	80 52       	subi	r24, 0x20	; 32
    1c4a:	b7 01       	movw	r22, r14
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <fputc>
    1c52:	0f 5f       	subi	r16, 0xFF	; 255
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	cf cf       	rjmp	.-98     	; 0x1bf6 <vfprintf+0x682>
    1c58:	23 e0       	ldi	r18, 0x03	; 3
    1c5a:	25 15       	cp	r18, r5
    1c5c:	10 f4       	brcc	.+4      	; 0x1c62 <vfprintf+0x6ee>
    1c5e:	83 e0       	ldi	r24, 0x03	; 3
    1c60:	bd cf       	rjmp	.-134    	; 0x1bdc <vfprintf+0x668>
    1c62:	51 2c       	mov	r5, r1
    1c64:	c0 cf       	rjmp	.-128    	; 0x1be6 <vfprintf+0x672>
    1c66:	60 96       	adiw	r28, 0x10	; 16
    1c68:	e2 e1       	ldi	r30, 0x12	; 18
    1c6a:	0c 94 89 0e 	jmp	0x1d12	; 0x1d12 <__epilogue_restores__>

00001c6e <__divmodhi4>:
    1c6e:	97 fb       	bst	r25, 7
    1c70:	07 2e       	mov	r0, r23
    1c72:	16 f4       	brtc	.+4      	; 0x1c78 <__divmodhi4+0xa>
    1c74:	00 94       	com	r0
    1c76:	07 d0       	rcall	.+14     	; 0x1c86 <__divmodhi4_neg1>
    1c78:	77 fd       	sbrc	r23, 7
    1c7a:	09 d0       	rcall	.+18     	; 0x1c8e <__divmodhi4_neg2>
    1c7c:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <__udivmodhi4>
    1c80:	07 fc       	sbrc	r0, 7
    1c82:	05 d0       	rcall	.+10     	; 0x1c8e <__divmodhi4_neg2>
    1c84:	3e f4       	brtc	.+14     	; 0x1c94 <__divmodhi4_exit>

00001c86 <__divmodhi4_neg1>:
    1c86:	90 95       	com	r25
    1c88:	81 95       	neg	r24
    1c8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c8c:	08 95       	ret

00001c8e <__divmodhi4_neg2>:
    1c8e:	70 95       	com	r23
    1c90:	61 95       	neg	r22
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255

00001c94 <__divmodhi4_exit>:
    1c94:	08 95       	ret

00001c96 <__udivmodsi4>:
    1c96:	a1 e2       	ldi	r26, 0x21	; 33
    1c98:	1a 2e       	mov	r1, r26
    1c9a:	aa 1b       	sub	r26, r26
    1c9c:	bb 1b       	sub	r27, r27
    1c9e:	fd 01       	movw	r30, r26
    1ca0:	0d c0       	rjmp	.+26     	; 0x1cbc <__udivmodsi4_ep>

00001ca2 <__udivmodsi4_loop>:
    1ca2:	aa 1f       	adc	r26, r26
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	ee 1f       	adc	r30, r30
    1ca8:	ff 1f       	adc	r31, r31
    1caa:	a2 17       	cp	r26, r18
    1cac:	b3 07       	cpc	r27, r19
    1cae:	e4 07       	cpc	r30, r20
    1cb0:	f5 07       	cpc	r31, r21
    1cb2:	20 f0       	brcs	.+8      	; 0x1cbc <__udivmodsi4_ep>
    1cb4:	a2 1b       	sub	r26, r18
    1cb6:	b3 0b       	sbc	r27, r19
    1cb8:	e4 0b       	sbc	r30, r20
    1cba:	f5 0b       	sbc	r31, r21

00001cbc <__udivmodsi4_ep>:
    1cbc:	66 1f       	adc	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	1a 94       	dec	r1
    1cc6:	69 f7       	brne	.-38     	; 0x1ca2 <__udivmodsi4_loop>
    1cc8:	60 95       	com	r22
    1cca:	70 95       	com	r23
    1ccc:	80 95       	com	r24
    1cce:	90 95       	com	r25
    1cd0:	9b 01       	movw	r18, r22
    1cd2:	ac 01       	movw	r20, r24
    1cd4:	bd 01       	movw	r22, r26
    1cd6:	cf 01       	movw	r24, r30
    1cd8:	08 95       	ret

00001cda <__prologue_saves__>:
    1cda:	2f 92       	push	r2
    1cdc:	3f 92       	push	r3
    1cde:	4f 92       	push	r4
    1ce0:	5f 92       	push	r5
    1ce2:	6f 92       	push	r6
    1ce4:	7f 92       	push	r7
    1ce6:	8f 92       	push	r8
    1ce8:	9f 92       	push	r9
    1cea:	af 92       	push	r10
    1cec:	bf 92       	push	r11
    1cee:	cf 92       	push	r12
    1cf0:	df 92       	push	r13
    1cf2:	ef 92       	push	r14
    1cf4:	ff 92       	push	r15
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	cf 93       	push	r28
    1cfc:	df 93       	push	r29
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	ca 1b       	sub	r28, r26
    1d04:	db 0b       	sbc	r29, r27
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	09 94       	ijmp

00001d12 <__epilogue_restores__>:
    1d12:	2a 88       	ldd	r2, Y+18	; 0x12
    1d14:	39 88       	ldd	r3, Y+17	; 0x11
    1d16:	48 88       	ldd	r4, Y+16	; 0x10
    1d18:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d20:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d22:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d24:	b9 84       	ldd	r11, Y+9	; 0x09
    1d26:	c8 84       	ldd	r12, Y+8	; 0x08
    1d28:	df 80       	ldd	r13, Y+7	; 0x07
    1d2a:	ee 80       	ldd	r14, Y+6	; 0x06
    1d2c:	fd 80       	ldd	r15, Y+5	; 0x05
    1d2e:	0c 81       	ldd	r16, Y+4	; 0x04
    1d30:	1b 81       	ldd	r17, Y+3	; 0x03
    1d32:	aa 81       	ldd	r26, Y+2	; 0x02
    1d34:	b9 81       	ldd	r27, Y+1	; 0x01
    1d36:	ce 0f       	add	r28, r30
    1d38:	d1 1d       	adc	r29, r1
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	ed 01       	movw	r28, r26
    1d46:	08 95       	ret

00001d48 <__udivmodhi4>:
    1d48:	aa 1b       	sub	r26, r26
    1d4a:	bb 1b       	sub	r27, r27
    1d4c:	51 e1       	ldi	r21, 0x11	; 17
    1d4e:	07 c0       	rjmp	.+14     	; 0x1d5e <__udivmodhi4_ep>

00001d50 <__udivmodhi4_loop>:
    1d50:	aa 1f       	adc	r26, r26
    1d52:	bb 1f       	adc	r27, r27
    1d54:	a6 17       	cp	r26, r22
    1d56:	b7 07       	cpc	r27, r23
    1d58:	10 f0       	brcs	.+4      	; 0x1d5e <__udivmodhi4_ep>
    1d5a:	a6 1b       	sub	r26, r22
    1d5c:	b7 0b       	sbc	r27, r23

00001d5e <__udivmodhi4_ep>:
    1d5e:	88 1f       	adc	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	5a 95       	dec	r21
    1d64:	a9 f7       	brne	.-22     	; 0x1d50 <__udivmodhi4_loop>
    1d66:	80 95       	com	r24
    1d68:	90 95       	com	r25
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	08 95       	ret

00001d70 <__ftoa_engine>:
    1d70:	28 30       	cpi	r18, 0x08	; 8
    1d72:	08 f0       	brcs	.+2      	; 0x1d76 <__ftoa_engine+0x6>
    1d74:	27 e0       	ldi	r18, 0x07	; 7
    1d76:	33 27       	eor	r19, r19
    1d78:	da 01       	movw	r26, r20
    1d7a:	99 0f       	add	r25, r25
    1d7c:	31 1d       	adc	r19, r1
    1d7e:	87 fd       	sbrc	r24, 7
    1d80:	91 60       	ori	r25, 0x01	; 1
    1d82:	00 96       	adiw	r24, 0x00	; 0
    1d84:	61 05       	cpc	r22, r1
    1d86:	71 05       	cpc	r23, r1
    1d88:	39 f4       	brne	.+14     	; 0x1d98 <__ftoa_engine+0x28>
    1d8a:	32 60       	ori	r19, 0x02	; 2
    1d8c:	2e 5f       	subi	r18, 0xFE	; 254
    1d8e:	3d 93       	st	X+, r19
    1d90:	30 e3       	ldi	r19, 0x30	; 48
    1d92:	2a 95       	dec	r18
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <__ftoa_engine+0x1e>
    1d96:	08 95       	ret
    1d98:	9f 3f       	cpi	r25, 0xFF	; 255
    1d9a:	30 f0       	brcs	.+12     	; 0x1da8 <__ftoa_engine+0x38>
    1d9c:	80 38       	cpi	r24, 0x80	; 128
    1d9e:	71 05       	cpc	r23, r1
    1da0:	61 05       	cpc	r22, r1
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <__ftoa_engine+0x36>
    1da4:	3c 5f       	subi	r19, 0xFC	; 252
    1da6:	3c 5f       	subi	r19, 0xFC	; 252
    1da8:	3d 93       	st	X+, r19
    1daa:	91 30       	cpi	r25, 0x01	; 1
    1dac:	08 f0       	brcs	.+2      	; 0x1db0 <__ftoa_engine+0x40>
    1dae:	80 68       	ori	r24, 0x80	; 128
    1db0:	91 1d       	adc	r25, r1
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	1f 93       	push	r17
    1db8:	0f 93       	push	r16
    1dba:	ff 92       	push	r15
    1dbc:	ef 92       	push	r14
    1dbe:	19 2f       	mov	r17, r25
    1dc0:	98 7f       	andi	r25, 0xF8	; 248
    1dc2:	96 95       	lsr	r25
    1dc4:	e9 2f       	mov	r30, r25
    1dc6:	96 95       	lsr	r25
    1dc8:	96 95       	lsr	r25
    1dca:	e9 0f       	add	r30, r25
    1dcc:	ff 27       	eor	r31, r31
    1dce:	ea 54       	subi	r30, 0x4A	; 74
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	99 27       	eor	r25, r25
    1dd4:	33 27       	eor	r19, r19
    1dd6:	ee 24       	eor	r14, r14
    1dd8:	ff 24       	eor	r15, r15
    1dda:	a7 01       	movw	r20, r14
    1ddc:	e7 01       	movw	r28, r14
    1dde:	05 90       	lpm	r0, Z+
    1de0:	08 94       	sec
    1de2:	07 94       	ror	r0
    1de4:	28 f4       	brcc	.+10     	; 0x1df0 <__ftoa_engine+0x80>
    1de6:	36 0f       	add	r19, r22
    1de8:	e7 1e       	adc	r14, r23
    1dea:	f8 1e       	adc	r15, r24
    1dec:	49 1f       	adc	r20, r25
    1dee:	51 1d       	adc	r21, r1
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	06 94       	lsr	r0
    1dfa:	a1 f7       	brne	.-24     	; 0x1de4 <__ftoa_engine+0x74>
    1dfc:	05 90       	lpm	r0, Z+
    1dfe:	07 94       	ror	r0
    1e00:	28 f4       	brcc	.+10     	; 0x1e0c <__ftoa_engine+0x9c>
    1e02:	e7 0e       	add	r14, r23
    1e04:	f8 1e       	adc	r15, r24
    1e06:	49 1f       	adc	r20, r25
    1e08:	56 1f       	adc	r21, r22
    1e0a:	c1 1d       	adc	r28, r1
    1e0c:	77 0f       	add	r23, r23
    1e0e:	88 1f       	adc	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	66 1f       	adc	r22, r22
    1e14:	06 94       	lsr	r0
    1e16:	a1 f7       	brne	.-24     	; 0x1e00 <__ftoa_engine+0x90>
    1e18:	05 90       	lpm	r0, Z+
    1e1a:	07 94       	ror	r0
    1e1c:	28 f4       	brcc	.+10     	; 0x1e28 <__ftoa_engine+0xb8>
    1e1e:	f8 0e       	add	r15, r24
    1e20:	49 1f       	adc	r20, r25
    1e22:	56 1f       	adc	r21, r22
    1e24:	c7 1f       	adc	r28, r23
    1e26:	d1 1d       	adc	r29, r1
    1e28:	88 0f       	add	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	66 1f       	adc	r22, r22
    1e2e:	77 1f       	adc	r23, r23
    1e30:	06 94       	lsr	r0
    1e32:	a1 f7       	brne	.-24     	; 0x1e1c <__ftoa_engine+0xac>
    1e34:	05 90       	lpm	r0, Z+
    1e36:	07 94       	ror	r0
    1e38:	20 f4       	brcc	.+8      	; 0x1e42 <__ftoa_engine+0xd2>
    1e3a:	49 0f       	add	r20, r25
    1e3c:	56 1f       	adc	r21, r22
    1e3e:	c7 1f       	adc	r28, r23
    1e40:	d8 1f       	adc	r29, r24
    1e42:	99 0f       	add	r25, r25
    1e44:	66 1f       	adc	r22, r22
    1e46:	77 1f       	adc	r23, r23
    1e48:	88 1f       	adc	r24, r24
    1e4a:	06 94       	lsr	r0
    1e4c:	a9 f7       	brne	.-22     	; 0x1e38 <__ftoa_engine+0xc8>
    1e4e:	84 91       	lpm	r24, Z
    1e50:	10 95       	com	r17
    1e52:	17 70       	andi	r17, 0x07	; 7
    1e54:	41 f0       	breq	.+16     	; 0x1e66 <__ftoa_engine+0xf6>
    1e56:	d6 95       	lsr	r29
    1e58:	c7 95       	ror	r28
    1e5a:	57 95       	ror	r21
    1e5c:	47 95       	ror	r20
    1e5e:	f7 94       	ror	r15
    1e60:	e7 94       	ror	r14
    1e62:	1a 95       	dec	r17
    1e64:	c1 f7       	brne	.-16     	; 0x1e56 <__ftoa_engine+0xe6>
    1e66:	ec e5       	ldi	r30, 0x5C	; 92
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	68 94       	set
    1e6c:	15 90       	lpm	r1, Z+
    1e6e:	15 91       	lpm	r17, Z+
    1e70:	35 91       	lpm	r19, Z+
    1e72:	65 91       	lpm	r22, Z+
    1e74:	95 91       	lpm	r25, Z+
    1e76:	05 90       	lpm	r0, Z+
    1e78:	7f e2       	ldi	r23, 0x2F	; 47
    1e7a:	73 95       	inc	r23
    1e7c:	e1 18       	sub	r14, r1
    1e7e:	f1 0a       	sbc	r15, r17
    1e80:	43 0b       	sbc	r20, r19
    1e82:	56 0b       	sbc	r21, r22
    1e84:	c9 0b       	sbc	r28, r25
    1e86:	d0 09       	sbc	r29, r0
    1e88:	c0 f7       	brcc	.-16     	; 0x1e7a <__ftoa_engine+0x10a>
    1e8a:	e1 0c       	add	r14, r1
    1e8c:	f1 1e       	adc	r15, r17
    1e8e:	43 1f       	adc	r20, r19
    1e90:	56 1f       	adc	r21, r22
    1e92:	c9 1f       	adc	r28, r25
    1e94:	d0 1d       	adc	r29, r0
    1e96:	7e f4       	brtc	.+30     	; 0x1eb6 <__ftoa_engine+0x146>
    1e98:	70 33       	cpi	r23, 0x30	; 48
    1e9a:	11 f4       	brne	.+4      	; 0x1ea0 <__ftoa_engine+0x130>
    1e9c:	8a 95       	dec	r24
    1e9e:	e6 cf       	rjmp	.-52     	; 0x1e6c <__ftoa_engine+0xfc>
    1ea0:	e8 94       	clt
    1ea2:	01 50       	subi	r16, 0x01	; 1
    1ea4:	30 f0       	brcs	.+12     	; 0x1eb2 <__ftoa_engine+0x142>
    1ea6:	08 0f       	add	r16, r24
    1ea8:	0a f4       	brpl	.+2      	; 0x1eac <__ftoa_engine+0x13c>
    1eaa:	00 27       	eor	r16, r16
    1eac:	02 17       	cp	r16, r18
    1eae:	08 f4       	brcc	.+2      	; 0x1eb2 <__ftoa_engine+0x142>
    1eb0:	20 2f       	mov	r18, r16
    1eb2:	23 95       	inc	r18
    1eb4:	02 2f       	mov	r16, r18
    1eb6:	7a 33       	cpi	r23, 0x3A	; 58
    1eb8:	28 f0       	brcs	.+10     	; 0x1ec4 <__ftoa_engine+0x154>
    1eba:	79 e3       	ldi	r23, 0x39	; 57
    1ebc:	7d 93       	st	X+, r23
    1ebe:	2a 95       	dec	r18
    1ec0:	e9 f7       	brne	.-6      	; 0x1ebc <__ftoa_engine+0x14c>
    1ec2:	10 c0       	rjmp	.+32     	; 0x1ee4 <__ftoa_engine+0x174>
    1ec4:	7d 93       	st	X+, r23
    1ec6:	2a 95       	dec	r18
    1ec8:	89 f6       	brne	.-94     	; 0x1e6c <__ftoa_engine+0xfc>
    1eca:	06 94       	lsr	r0
    1ecc:	97 95       	ror	r25
    1ece:	67 95       	ror	r22
    1ed0:	37 95       	ror	r19
    1ed2:	17 95       	ror	r17
    1ed4:	17 94       	ror	r1
    1ed6:	e1 18       	sub	r14, r1
    1ed8:	f1 0a       	sbc	r15, r17
    1eda:	43 0b       	sbc	r20, r19
    1edc:	56 0b       	sbc	r21, r22
    1ede:	c9 0b       	sbc	r28, r25
    1ee0:	d0 09       	sbc	r29, r0
    1ee2:	98 f0       	brcs	.+38     	; 0x1f0a <__ftoa_engine+0x19a>
    1ee4:	23 95       	inc	r18
    1ee6:	7e 91       	ld	r23, -X
    1ee8:	73 95       	inc	r23
    1eea:	7a 33       	cpi	r23, 0x3A	; 58
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <__ftoa_engine+0x180>
    1eee:	70 e3       	ldi	r23, 0x30	; 48
    1ef0:	7c 93       	st	X, r23
    1ef2:	20 13       	cpse	r18, r16
    1ef4:	b8 f7       	brcc	.-18     	; 0x1ee4 <__ftoa_engine+0x174>
    1ef6:	7e 91       	ld	r23, -X
    1ef8:	70 61       	ori	r23, 0x10	; 16
    1efa:	7d 93       	st	X+, r23
    1efc:	30 f0       	brcs	.+12     	; 0x1f0a <__ftoa_engine+0x19a>
    1efe:	83 95       	inc	r24
    1f00:	71 e3       	ldi	r23, 0x31	; 49
    1f02:	7d 93       	st	X+, r23
    1f04:	70 e3       	ldi	r23, 0x30	; 48
    1f06:	2a 95       	dec	r18
    1f08:	e1 f7       	brne	.-8      	; 0x1f02 <__ftoa_engine+0x192>
    1f0a:	11 24       	eor	r1, r1
    1f0c:	ef 90       	pop	r14
    1f0e:	ff 90       	pop	r15
    1f10:	0f 91       	pop	r16
    1f12:	1f 91       	pop	r17
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	99 27       	eor	r25, r25
    1f1a:	87 fd       	sbrc	r24, 7
    1f1c:	90 95       	com	r25
    1f1e:	08 95       	ret

00001f20 <strnlen_P>:
    1f20:	fc 01       	movw	r30, r24
    1f22:	05 90       	lpm	r0, Z+
    1f24:	61 50       	subi	r22, 0x01	; 1
    1f26:	70 40       	sbci	r23, 0x00	; 0
    1f28:	01 10       	cpse	r0, r1
    1f2a:	d8 f7       	brcc	.-10     	; 0x1f22 <strnlen_P+0x2>
    1f2c:	80 95       	com	r24
    1f2e:	90 95       	com	r25
    1f30:	8e 0f       	add	r24, r30
    1f32:	9f 1f       	adc	r25, r31
    1f34:	08 95       	ret

00001f36 <strnlen>:
    1f36:	fc 01       	movw	r30, r24
    1f38:	61 50       	subi	r22, 0x01	; 1
    1f3a:	70 40       	sbci	r23, 0x00	; 0
    1f3c:	01 90       	ld	r0, Z+
    1f3e:	01 10       	cpse	r0, r1
    1f40:	d8 f7       	brcc	.-10     	; 0x1f38 <strnlen+0x2>
    1f42:	80 95       	com	r24
    1f44:	90 95       	com	r25
    1f46:	8e 0f       	add	r24, r30
    1f48:	9f 1f       	adc	r25, r31
    1f4a:	08 95       	ret

00001f4c <fputc>:
    1f4c:	0f 93       	push	r16
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	fb 01       	movw	r30, r22
    1f56:	23 81       	ldd	r18, Z+3	; 0x03
    1f58:	21 fd       	sbrc	r18, 1
    1f5a:	03 c0       	rjmp	.+6      	; 0x1f62 <fputc+0x16>
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	9f ef       	ldi	r25, 0xFF	; 255
    1f60:	2c c0       	rjmp	.+88     	; 0x1fba <fputc+0x6e>
    1f62:	22 ff       	sbrs	r18, 2
    1f64:	16 c0       	rjmp	.+44     	; 0x1f92 <fputc+0x46>
    1f66:	46 81       	ldd	r20, Z+6	; 0x06
    1f68:	57 81       	ldd	r21, Z+7	; 0x07
    1f6a:	24 81       	ldd	r18, Z+4	; 0x04
    1f6c:	35 81       	ldd	r19, Z+5	; 0x05
    1f6e:	42 17       	cp	r20, r18
    1f70:	53 07       	cpc	r21, r19
    1f72:	44 f4       	brge	.+16     	; 0x1f84 <fputc+0x38>
    1f74:	a0 81       	ld	r26, Z
    1f76:	b1 81       	ldd	r27, Z+1	; 0x01
    1f78:	9d 01       	movw	r18, r26
    1f7a:	2f 5f       	subi	r18, 0xFF	; 255
    1f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7e:	31 83       	std	Z+1, r19	; 0x01
    1f80:	20 83       	st	Z, r18
    1f82:	8c 93       	st	X, r24
    1f84:	26 81       	ldd	r18, Z+6	; 0x06
    1f86:	37 81       	ldd	r19, Z+7	; 0x07
    1f88:	2f 5f       	subi	r18, 0xFF	; 255
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	37 83       	std	Z+7, r19	; 0x07
    1f8e:	26 83       	std	Z+6, r18	; 0x06
    1f90:	14 c0       	rjmp	.+40     	; 0x1fba <fputc+0x6e>
    1f92:	8b 01       	movw	r16, r22
    1f94:	ec 01       	movw	r28, r24
    1f96:	fb 01       	movw	r30, r22
    1f98:	00 84       	ldd	r0, Z+8	; 0x08
    1f9a:	f1 85       	ldd	r31, Z+9	; 0x09
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	09 95       	icall
    1fa0:	89 2b       	or	r24, r25
    1fa2:	e1 f6       	brne	.-72     	; 0x1f5c <fputc+0x10>
    1fa4:	d8 01       	movw	r26, r16
    1fa6:	16 96       	adiw	r26, 0x06	; 6
    1fa8:	8d 91       	ld	r24, X+
    1faa:	9c 91       	ld	r25, X
    1fac:	17 97       	sbiw	r26, 0x07	; 7
    1fae:	01 96       	adiw	r24, 0x01	; 1
    1fb0:	17 96       	adiw	r26, 0x07	; 7
    1fb2:	9c 93       	st	X, r25
    1fb4:	8e 93       	st	-X, r24
    1fb6:	16 97       	sbiw	r26, 0x06	; 6
    1fb8:	ce 01       	movw	r24, r28
    1fba:	df 91       	pop	r29
    1fbc:	cf 91       	pop	r28
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	08 95       	ret

00001fc4 <printf>:
    1fc4:	a0 e0       	ldi	r26, 0x00	; 0
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e8 ee       	ldi	r30, 0xE8	; 232
    1fca:	ff e0       	ldi	r31, 0x0F	; 15
    1fcc:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__prologue_saves__+0x20>
    1fd0:	ae 01       	movw	r20, r28
    1fd2:	4b 5f       	subi	r20, 0xFB	; 251
    1fd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fd6:	fa 01       	movw	r30, r20
    1fd8:	61 91       	ld	r22, Z+
    1fda:	71 91       	ld	r23, Z+
    1fdc:	af 01       	movw	r20, r30
    1fde:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <__iob+0x2>
    1fe2:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <__iob+0x3>
    1fe6:	0e 94 ba 0a 	call	0x1574	; 0x1574 <vfprintf>
    1fea:	e2 e0       	ldi	r30, 0x02	; 2
    1fec:	0c 94 99 0e 	jmp	0x1d32	; 0x1d32 <__epilogue_restores__+0x20>

00001ff0 <puts>:
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	e0 91 b3 00 	lds	r30, 0x00B3	; 0x8000b3 <__iob+0x2>
    1ffc:	f0 91 b4 00 	lds	r31, 0x00B4	; 0x8000b4 <__iob+0x3>
    2000:	23 81       	ldd	r18, Z+3	; 0x03
    2002:	21 ff       	sbrs	r18, 1
    2004:	1b c0       	rjmp	.+54     	; 0x203c <puts+0x4c>
    2006:	8c 01       	movw	r16, r24
    2008:	d0 e0       	ldi	r29, 0x00	; 0
    200a:	c0 e0       	ldi	r28, 0x00	; 0
    200c:	f8 01       	movw	r30, r16
    200e:	81 91       	ld	r24, Z+
    2010:	8f 01       	movw	r16, r30
    2012:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <__iob+0x2>
    2016:	70 91 b4 00 	lds	r23, 0x00B4	; 0x8000b4 <__iob+0x3>
    201a:	db 01       	movw	r26, r22
    201c:	18 96       	adiw	r26, 0x08	; 8
    201e:	ed 91       	ld	r30, X+
    2020:	fc 91       	ld	r31, X
    2022:	19 97       	sbiw	r26, 0x09	; 9
    2024:	88 23       	and	r24, r24
    2026:	31 f0       	breq	.+12     	; 0x2034 <puts+0x44>
    2028:	09 95       	icall
    202a:	89 2b       	or	r24, r25
    202c:	79 f3       	breq	.-34     	; 0x200c <puts+0x1c>
    202e:	df ef       	ldi	r29, 0xFF	; 255
    2030:	cf ef       	ldi	r28, 0xFF	; 255
    2032:	ec cf       	rjmp	.-40     	; 0x200c <puts+0x1c>
    2034:	8a e0       	ldi	r24, 0x0A	; 10
    2036:	09 95       	icall
    2038:	89 2b       	or	r24, r25
    203a:	19 f0       	breq	.+6      	; 0x2042 <puts+0x52>
    203c:	8f ef       	ldi	r24, 0xFF	; 255
    203e:	9f ef       	ldi	r25, 0xFF	; 255
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <puts+0x56>
    2042:	8d 2f       	mov	r24, r29
    2044:	9c 2f       	mov	r25, r28
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	1f 91       	pop	r17
    204c:	0f 91       	pop	r16
    204e:	08 95       	ret

00002050 <__ultoa_invert>:
    2050:	fa 01       	movw	r30, r20
    2052:	aa 27       	eor	r26, r26
    2054:	28 30       	cpi	r18, 0x08	; 8
    2056:	51 f1       	breq	.+84     	; 0x20ac <__ultoa_invert+0x5c>
    2058:	20 31       	cpi	r18, 0x10	; 16
    205a:	81 f1       	breq	.+96     	; 0x20bc <__ultoa_invert+0x6c>
    205c:	e8 94       	clt
    205e:	6f 93       	push	r22
    2060:	6e 7f       	andi	r22, 0xFE	; 254
    2062:	6e 5f       	subi	r22, 0xFE	; 254
    2064:	7f 4f       	sbci	r23, 0xFF	; 255
    2066:	8f 4f       	sbci	r24, 0xFF	; 255
    2068:	9f 4f       	sbci	r25, 0xFF	; 255
    206a:	af 4f       	sbci	r26, 0xFF	; 255
    206c:	b1 e0       	ldi	r27, 0x01	; 1
    206e:	3e d0       	rcall	.+124    	; 0x20ec <__ultoa_invert+0x9c>
    2070:	b4 e0       	ldi	r27, 0x04	; 4
    2072:	3c d0       	rcall	.+120    	; 0x20ec <__ultoa_invert+0x9c>
    2074:	67 0f       	add	r22, r23
    2076:	78 1f       	adc	r23, r24
    2078:	89 1f       	adc	r24, r25
    207a:	9a 1f       	adc	r25, r26
    207c:	a1 1d       	adc	r26, r1
    207e:	68 0f       	add	r22, r24
    2080:	79 1f       	adc	r23, r25
    2082:	8a 1f       	adc	r24, r26
    2084:	91 1d       	adc	r25, r1
    2086:	a1 1d       	adc	r26, r1
    2088:	6a 0f       	add	r22, r26
    208a:	71 1d       	adc	r23, r1
    208c:	81 1d       	adc	r24, r1
    208e:	91 1d       	adc	r25, r1
    2090:	a1 1d       	adc	r26, r1
    2092:	20 d0       	rcall	.+64     	; 0x20d4 <__ultoa_invert+0x84>
    2094:	09 f4       	brne	.+2      	; 0x2098 <__ultoa_invert+0x48>
    2096:	68 94       	set
    2098:	3f 91       	pop	r19
    209a:	2a e0       	ldi	r18, 0x0A	; 10
    209c:	26 9f       	mul	r18, r22
    209e:	11 24       	eor	r1, r1
    20a0:	30 19       	sub	r19, r0
    20a2:	30 5d       	subi	r19, 0xD0	; 208
    20a4:	31 93       	st	Z+, r19
    20a6:	de f6       	brtc	.-74     	; 0x205e <__ultoa_invert+0xe>
    20a8:	cf 01       	movw	r24, r30
    20aa:	08 95       	ret
    20ac:	46 2f       	mov	r20, r22
    20ae:	47 70       	andi	r20, 0x07	; 7
    20b0:	40 5d       	subi	r20, 0xD0	; 208
    20b2:	41 93       	st	Z+, r20
    20b4:	b3 e0       	ldi	r27, 0x03	; 3
    20b6:	0f d0       	rcall	.+30     	; 0x20d6 <__ultoa_invert+0x86>
    20b8:	c9 f7       	brne	.-14     	; 0x20ac <__ultoa_invert+0x5c>
    20ba:	f6 cf       	rjmp	.-20     	; 0x20a8 <__ultoa_invert+0x58>
    20bc:	46 2f       	mov	r20, r22
    20be:	4f 70       	andi	r20, 0x0F	; 15
    20c0:	40 5d       	subi	r20, 0xD0	; 208
    20c2:	4a 33       	cpi	r20, 0x3A	; 58
    20c4:	18 f0       	brcs	.+6      	; 0x20cc <__ultoa_invert+0x7c>
    20c6:	49 5d       	subi	r20, 0xD9	; 217
    20c8:	31 fd       	sbrc	r19, 1
    20ca:	40 52       	subi	r20, 0x20	; 32
    20cc:	41 93       	st	Z+, r20
    20ce:	02 d0       	rcall	.+4      	; 0x20d4 <__ultoa_invert+0x84>
    20d0:	a9 f7       	brne	.-22     	; 0x20bc <__ultoa_invert+0x6c>
    20d2:	ea cf       	rjmp	.-44     	; 0x20a8 <__ultoa_invert+0x58>
    20d4:	b4 e0       	ldi	r27, 0x04	; 4
    20d6:	a6 95       	lsr	r26
    20d8:	97 95       	ror	r25
    20da:	87 95       	ror	r24
    20dc:	77 95       	ror	r23
    20de:	67 95       	ror	r22
    20e0:	ba 95       	dec	r27
    20e2:	c9 f7       	brne	.-14     	; 0x20d6 <__ultoa_invert+0x86>
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	61 05       	cpc	r22, r1
    20e8:	71 05       	cpc	r23, r1
    20ea:	08 95       	ret
    20ec:	9b 01       	movw	r18, r22
    20ee:	ac 01       	movw	r20, r24
    20f0:	0a 2e       	mov	r0, r26
    20f2:	06 94       	lsr	r0
    20f4:	57 95       	ror	r21
    20f6:	47 95       	ror	r20
    20f8:	37 95       	ror	r19
    20fa:	27 95       	ror	r18
    20fc:	ba 95       	dec	r27
    20fe:	c9 f7       	brne	.-14     	; 0x20f2 <__ultoa_invert+0xa2>
    2100:	62 0f       	add	r22, r18
    2102:	73 1f       	adc	r23, r19
    2104:	84 1f       	adc	r24, r20
    2106:	95 1f       	adc	r25, r21
    2108:	a0 1d       	adc	r26, r0
    210a:	08 95       	ret

0000210c <eeprom_read_byte>:
    210c:	e1 99       	sbic	0x1c, 1	; 28
    210e:	fe cf       	rjmp	.-4      	; 0x210c <eeprom_read_byte>
    2110:	9f bb       	out	0x1f, r25	; 31
    2112:	8e bb       	out	0x1e, r24	; 30
    2114:	e0 9a       	sbi	0x1c, 0	; 28
    2116:	99 27       	eor	r25, r25
    2118:	8d b3       	in	r24, 0x1d	; 29
    211a:	08 95       	ret

0000211c <eeprom_update_byte>:
    211c:	26 2f       	mov	r18, r22

0000211e <eeprom_update_r18>:
    211e:	e1 99       	sbic	0x1c, 1	; 28
    2120:	fe cf       	rjmp	.-4      	; 0x211e <eeprom_update_r18>
    2122:	9f bb       	out	0x1f, r25	; 31
    2124:	8e bb       	out	0x1e, r24	; 30
    2126:	e0 9a       	sbi	0x1c, 0	; 28
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	0d b2       	in	r0, 0x1d	; 29
    212c:	02 16       	cp	r0, r18
    212e:	31 f0       	breq	.+12     	; 0x213c <eeprom_update_r18+0x1e>
    2130:	2d bb       	out	0x1d, r18	; 29
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	e2 9a       	sbi	0x1c, 2	; 28
    2138:	e1 9a       	sbi	0x1c, 1	; 28
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	08 95       	ret

0000213e <_exit>:
    213e:	f8 94       	cli

00002140 <__stop_program>:
    2140:	ff cf       	rjmp	.-2      	; 0x2140 <__stop_program>
