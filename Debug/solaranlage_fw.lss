
solaranlage_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  000018ba  0000194e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  0080009c  0080009c  0000198a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000198a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00001a28  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001064  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a29  00000000  00000000  00002c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000184a  00000000  00000000  00003665  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00004eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f16  00000000  00000000  000053fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a8f  00000000  00000000  0000c312  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000cda1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d41  00000000  00000000  0000ceb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_1>
       8:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3c       	cpi	r26, 0xC0	; 192
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dd 02 	call	0x5ba	; 0x5ba <main>
      8a:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SevenSeg_init>:
uint16_t kessel_anzeige = 0;
uint8_t on = 0;


void SevenSeg_init()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);	//enable overflow-interrupt
      9a:	89 e5       	ldi	r24, 0x59	; 89
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	29 e5       	ldi	r18, 0x59	; 89
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	f9 01       	movw	r30, r18
      a4:	20 81       	ld	r18, Z
      a6:	21 60       	ori	r18, 0x01	; 1
      a8:	fc 01       	movw	r30, r24
      aa:	20 83       	st	Z, r18
	
	sei();
      ac:	78 94       	sei
}
      ae:	00 00       	nop
      b0:	df 91       	pop	r29
      b2:	cf 91       	pop	r28
      b4:	08 95       	ret

000000b6 <SevenSeg_set_val>:

//seg: 1=dach; 0=kessel;   val: 0-9: 0-9; 10: off; 11: '-' at left segment (for negative values)
void SevenSeg_set_val(uint8_t seg, int16_t val)
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
      be:	27 97       	sbiw	r28, 0x07	; 7
      c0:	0f b6       	in	r0, 0x3f	; 63
      c2:	f8 94       	cli
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	0f be       	out	0x3f, r0	; 63
      c8:	cd bf       	out	0x3d, r28	; 61
      ca:	8d 83       	std	Y+5, r24	; 0x05
      cc:	7f 83       	std	Y+7, r23	; 0x07
      ce:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t neg = 0;											//flag for negative values
      d0:	19 82       	std	Y+1, r1	; 0x01
	
	if(seg == 1)												
      d2:	8d 81       	ldd	r24, Y+5	; 0x05
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	51 f4       	brne	.+20     	; 0xec <SevenSeg_set_val+0x36>
	{
		if (val == dach_anzeige)								//if the value to set is not new, leave function
      d8:	2e 81       	ldd	r18, Y+6	; 0x06
      da:	3f 81       	ldd	r19, Y+7	; 0x07
      dc:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <dach_anzeige>
      e0:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <dach_anzeige+0x1>
      e4:	28 17       	cp	r18, r24
      e6:	39 07       	cpc	r19, r25
      e8:	71 f4       	brne	.+28     	; 0x106 <SevenSeg_set_val+0x50>
		{
			return;
      ea:	b9 c0       	rjmp	.+370    	; 0x25e <SevenSeg_set_val+0x1a8>
		}
	}
	
	else if(seg == 0)		
      ec:	8d 81       	ldd	r24, Y+5	; 0x05
      ee:	88 23       	and	r24, r24
      f0:	51 f4       	brne	.+20     	; 0x106 <SevenSeg_set_val+0x50>
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
      f2:	2e 81       	ldd	r18, Y+6	; 0x06
      f4:	3f 81       	ldd	r19, Y+7	; 0x07
      f6:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <kessel_anzeige>
      fa:	90 91 ac 00 	lds	r25, 0x00AC	; 0x8000ac <kessel_anzeige+0x1>
      fe:	28 17       	cp	r18, r24
     100:	39 07       	cpc	r19, r25
     102:	09 f4       	brne	.+2      	; 0x106 <SevenSeg_set_val+0x50>
     104:	ab c0       	rjmp	.+342    	; 0x25c <SevenSeg_set_val+0x1a6>
		{
			return;
		}
	}
	
	if(val==1000)												//if this display shall be switched off
     106:	8e 81       	ldd	r24, Y+6	; 0x06
     108:	9f 81       	ldd	r25, Y+7	; 0x07
     10a:	88 3e       	cpi	r24, 0xE8	; 232
     10c:	93 40       	sbci	r25, 0x03	; 3
     10e:	39 f5       	brne	.+78     	; 0x15e <SevenSeg_set_val+0xa8>
	{
		segs[seg]   = 10;
     110:	8d 81       	ldd	r24, Y+5	; 0x05
     112:	88 2f       	mov	r24, r24
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	88 0f       	add	r24, r24
     118:	99 1f       	adc	r25, r25
     11a:	84 56       	subi	r24, 0x64	; 100
     11c:	9f 4f       	sbci	r25, 0xFF	; 255
     11e:	2a e0       	ldi	r18, 0x0A	; 10
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	fc 01       	movw	r30, r24
     124:	31 83       	std	Z+1, r19	; 0x01
     126:	20 83       	st	Z, r18
		segs[seg+2] = 10;
     128:	8d 81       	ldd	r24, Y+5	; 0x05
     12a:	88 2f       	mov	r24, r24
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	02 96       	adiw	r24, 0x02	; 2
     130:	88 0f       	add	r24, r24
     132:	99 1f       	adc	r25, r25
     134:	84 56       	subi	r24, 0x64	; 100
     136:	9f 4f       	sbci	r25, 0xFF	; 255
     138:	2a e0       	ldi	r18, 0x0A	; 10
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	fc 01       	movw	r30, r24
     13e:	31 83       	std	Z+1, r19	; 0x01
     140:	20 83       	st	Z, r18
		segs[seg+4] = 10;
     142:	8d 81       	ldd	r24, Y+5	; 0x05
     144:	88 2f       	mov	r24, r24
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	04 96       	adiw	r24, 0x04	; 4
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	84 56       	subi	r24, 0x64	; 100
     150:	9f 4f       	sbci	r25, 0xFF	; 255
     152:	2a e0       	ldi	r18, 0x0A	; 10
     154:	30 e0       	ldi	r19, 0x00	; 0
     156:	fc 01       	movw	r30, r24
     158:	31 83       	std	Z+1, r19	; 0x01
     15a:	20 83       	st	Z, r18
		return;
     15c:	80 c0       	rjmp	.+256    	; 0x25e <SevenSeg_set_val+0x1a8>
	}

	
	if(val < 0)													//if the value to set is negative
     15e:	8e 81       	ldd	r24, Y+6	; 0x06
     160:	9f 81       	ldd	r25, Y+7	; 0x07
     162:	99 23       	and	r25, r25
     164:	94 f4       	brge	.+36     	; 0x18a <SevenSeg_set_val+0xd4>
	{
		val *= -1;												//calculate absolute value
     166:	8e 81       	ldd	r24, Y+6	; 0x06
     168:	9f 81       	ldd	r25, Y+7	; 0x07
     16a:	91 95       	neg	r25
     16c:	81 95       	neg	r24
     16e:	91 09       	sbc	r25, r1
     170:	9f 83       	std	Y+7, r25	; 0x07
     172:	8e 83       	std	Y+6, r24	; 0x06
		neg = 1;
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	89 83       	std	Y+1, r24	; 0x01
		
		if(val > 99)											//because one segment is needed for the sign, only two digits are allowed
     178:	8e 81       	ldd	r24, Y+6	; 0x06
     17a:	9f 81       	ldd	r25, Y+7	; 0x07
     17c:	84 36       	cpi	r24, 0x64	; 100
     17e:	91 05       	cpc	r25, r1
     180:	24 f0       	brlt	.+8      	; 0x18a <SevenSeg_set_val+0xd4>
		{
			val = 99;
     182:	83 e6       	ldi	r24, 0x63	; 99
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	9f 83       	std	Y+7, r25	; 0x07
     188:	8e 83       	std	Y+6, r24	; 0x06
		}
	}
	
	
	uint8_t h = (uint8_t) (val/100);							//separate the digits of the value
     18a:	8e 81       	ldd	r24, Y+6	; 0x06
     18c:	9f 81       	ldd	r25, Y+7	; 0x07
     18e:	24 e6       	ldi	r18, 0x64	; 100
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	b9 01       	movw	r22, r18
     194:	0e 94 0c 09 	call	0x1218	; 0x1218 <__divmodhi4>
     198:	cb 01       	movw	r24, r22
     19a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t z = (uint8_t) ((val- (h*100)) / 10 );
     19c:	8a 81       	ldd	r24, Y+2	; 0x02
     19e:	88 2f       	mov	r24, r24
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	4c e9       	ldi	r20, 0x9C	; 156
     1a4:	bc 01       	movw	r22, r24
     1a6:	46 03       	mulsu	r20, r22
     1a8:	90 01       	movw	r18, r0
     1aa:	47 9f       	mul	r20, r23
     1ac:	30 0d       	add	r19, r0
     1ae:	11 24       	eor	r1, r1
     1b0:	8e 81       	ldd	r24, Y+6	; 0x06
     1b2:	9f 81       	ldd	r25, Y+7	; 0x07
     1b4:	82 0f       	add	r24, r18
     1b6:	93 1f       	adc	r25, r19
     1b8:	2a e0       	ldi	r18, 0x0A	; 10
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	b9 01       	movw	r22, r18
     1be:	0e 94 0c 09 	call	0x1218	; 0x1218 <__divmodhi4>
     1c2:	cb 01       	movw	r24, r22
     1c4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t e = (uint8_t)  (val- (h*100)- (z*10));
     1c6:	9e 81       	ldd	r25, Y+6	; 0x06
     1c8:	2a 81       	ldd	r18, Y+2	; 0x02
     1ca:	84 e6       	ldi	r24, 0x64	; 100
     1cc:	28 9f       	mul	r18, r24
     1ce:	80 2d       	mov	r24, r0
     1d0:	11 24       	eor	r1, r1
     1d2:	98 1b       	sub	r25, r24
     1d4:	8b 81       	ldd	r24, Y+3	; 0x03
     1d6:	88 0f       	add	r24, r24
     1d8:	28 2f       	mov	r18, r24
     1da:	22 0f       	add	r18, r18
     1dc:	22 0f       	add	r18, r18
     1de:	82 0f       	add	r24, r18
     1e0:	79 2f       	mov	r23, r25
     1e2:	78 1b       	sub	r23, r24
     1e4:	87 2f       	mov	r24, r23
     1e6:	8c 83       	std	Y+4, r24	; 0x04

	
	segs[seg]   = e;											//set the digits at the propper position in the segment array
     1e8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ea:	88 2f       	mov	r24, r24
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	2c 81       	ldd	r18, Y+4	; 0x04
     1f0:	22 2f       	mov	r18, r18
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	88 0f       	add	r24, r24
     1f6:	99 1f       	adc	r25, r25
     1f8:	84 56       	subi	r24, 0x64	; 100
     1fa:	9f 4f       	sbci	r25, 0xFF	; 255
     1fc:	fc 01       	movw	r30, r24
     1fe:	31 83       	std	Z+1, r19	; 0x01
     200:	20 83       	st	Z, r18
	segs[seg+2] = z;
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	88 2f       	mov	r24, r24
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	02 96       	adiw	r24, 0x02	; 2
     20a:	2b 81       	ldd	r18, Y+3	; 0x03
     20c:	22 2f       	mov	r18, r18
     20e:	30 e0       	ldi	r19, 0x00	; 0
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	84 56       	subi	r24, 0x64	; 100
     216:	9f 4f       	sbci	r25, 0xFF	; 255
     218:	fc 01       	movw	r30, r24
     21a:	31 83       	std	Z+1, r19	; 0x01
     21c:	20 83       	st	Z, r18
	segs[seg+4] = h;
     21e:	8d 81       	ldd	r24, Y+5	; 0x05
     220:	88 2f       	mov	r24, r24
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	04 96       	adiw	r24, 0x04	; 4
     226:	2a 81       	ldd	r18, Y+2	; 0x02
     228:	22 2f       	mov	r18, r18
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	88 0f       	add	r24, r24
     22e:	99 1f       	adc	r25, r25
     230:	84 56       	subi	r24, 0x64	; 100
     232:	9f 4f       	sbci	r25, 0xFF	; 255
     234:	fc 01       	movw	r30, r24
     236:	31 83       	std	Z+1, r19	; 0x01
     238:	20 83       	st	Z, r18
	
	if(neg == 1)												//if this is a negative value..
     23a:	89 81       	ldd	r24, Y+1	; 0x01
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	79 f4       	brne	.+30     	; 0x25e <SevenSeg_set_val+0x1a8>
	{
		segs[seg+4] = 11;										//overwrite the left segment with sign	
     240:	8d 81       	ldd	r24, Y+5	; 0x05
     242:	88 2f       	mov	r24, r24
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	04 96       	adiw	r24, 0x04	; 4
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	84 56       	subi	r24, 0x64	; 100
     24e:	9f 4f       	sbci	r25, 0xFF	; 255
     250:	2b e0       	ldi	r18, 0x0B	; 11
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	fc 01       	movw	r30, r24
     256:	31 83       	std	Z+1, r19	; 0x01
     258:	20 83       	st	Z, r18
     25a:	01 c0       	rjmp	.+2      	; 0x25e <SevenSeg_set_val+0x1a8>
	
	else if(seg == 0)		
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
		{
			return;
     25c:	00 00       	nop
	
	if(neg == 1)												//if this is a negative value..
	{
		segs[seg+4] = 11;										//overwrite the left segment with sign	
	}
}
     25e:	27 96       	adiw	r28, 0x07	; 7
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	f8 94       	cli
     264:	de bf       	out	0x3e, r29	; 62
     266:	0f be       	out	0x3f, r0	; 63
     268:	cd bf       	out	0x3d, r28	; 61
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     278:	0f 92       	push	r0
     27a:	11 24       	eor	r1, r1
     27c:	2f 93       	push	r18
     27e:	3f 93       	push	r19
     280:	8f 93       	push	r24
     282:	9f 93       	push	r25
     284:	ef 93       	push	r30
     286:	ff 93       	push	r31
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	1f 92       	push	r1
     28e:	cd b7       	in	r28, 0x3d	; 61
     290:	de b7       	in	r29, 0x3e	; 62
	cli();
     292:	f8 94       	cli
	
	if(segs[seg_cnt] != 10)					//if the current digit to display is valid (0..9)..
     294:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     298:	88 2f       	mov	r24, r24
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	88 0f       	add	r24, r24
     29e:	99 1f       	adc	r25, r25
     2a0:	84 56       	subi	r24, 0x64	; 100
     2a2:	9f 4f       	sbci	r25, 0xFF	; 255
     2a4:	fc 01       	movw	r30, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	91 81       	ldd	r25, Z+1	; 0x01
     2aa:	0a 97       	sbiw	r24, 0x0a	; 10
     2ac:	a1 f0       	breq	.+40     	; 0x2d6 <__vector_11+0x66>
	{
		PORTB = patterns[segs[seg_cnt]];	//set the propper pattern to the anodes.
     2ae:	88 e3       	ldi	r24, 0x38	; 56
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <seg_cnt>
     2b6:	22 2f       	mov	r18, r18
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	22 0f       	add	r18, r18
     2bc:	33 1f       	adc	r19, r19
     2be:	24 56       	subi	r18, 0x64	; 100
     2c0:	3f 4f       	sbci	r19, 0xFF	; 255
     2c2:	f9 01       	movw	r30, r18
     2c4:	20 81       	ld	r18, Z
     2c6:	31 81       	ldd	r19, Z+1	; 0x01
     2c8:	20 5a       	subi	r18, 0xA0	; 160
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	f9 01       	movw	r30, r18
     2ce:	20 81       	ld	r18, Z
     2d0:	fc 01       	movw	r30, r24
     2d2:	20 83       	st	Z, r18
     2d4:	1e c0       	rjmp	.+60     	; 0x312 <__vector_11+0xa2>
	}
	else if	(segs[seg_cnt] == 10)			//if the current digit is 10, the segment shall be switched off.
     2d6:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     2da:	88 2f       	mov	r24, r24
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	88 0f       	add	r24, r24
     2e0:	99 1f       	adc	r25, r25
     2e2:	84 56       	subi	r24, 0x64	; 100
     2e4:	9f 4f       	sbci	r25, 0xFF	; 255
     2e6:	fc 01       	movw	r30, r24
     2e8:	80 81       	ld	r24, Z
     2ea:	91 81       	ldd	r25, Z+1	; 0x01
     2ec:	0a 97       	sbiw	r24, 0x0a	; 10
     2ee:	89 f4       	brne	.+34     	; 0x312 <__vector_11+0xa2>
	{
		PORTB = 0x00;						//therefore clear the anodes
     2f0:	88 e3       	ldi	r24, 0x38	; 56
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	fc 01       	movw	r30, r24
     2f6:	10 82       	st	Z, r1
		seg_cnt ++;							//switch to next segment
     2f8:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     2fc:	8f 5f       	subi	r24, 0xFF	; 255
     2fe:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <seg_cnt>
		
		if(seg_cnt == 6)	//looping
     302:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     306:	86 30       	cpi	r24, 0x06	; 6
     308:	11 f4       	brne	.+4      	; 0x30e <__vector_11+0x9e>
		{
			seg_cnt = 0;
     30a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <seg_cnt>
		}
		sei();
     30e:	78 94       	sei
		return;								//leave. The common cathode of this segment shall not be activated.
     310:	2b c0       	rjmp	.+86     	; 0x368 <__vector_11+0xf8>
	}
	
	
	//if digit for this segment is valid..
	uint8_t a = (uint8_t) (~(1<<(seg_cnt + 2)));
     312:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     316:	88 2f       	mov	r24, r24
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	9c 01       	movw	r18, r24
     31c:	2e 5f       	subi	r18, 0xFE	; 254
     31e:	3f 4f       	sbci	r19, 0xFF	; 255
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 c0       	rjmp	.+4      	; 0x32a <__vector_11+0xba>
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	2a 95       	dec	r18
     32c:	e2 f7       	brpl	.-8      	; 0x326 <__vector_11+0xb6>
     32e:	80 95       	com	r24
     330:	89 83       	std	Y+1, r24	; 0x01
	PORTA = a & 0xFC;						//mask to avoid ADC-channels 0 and 1
     332:	8b e3       	ldi	r24, 0x3B	; 59
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	2c 7f       	andi	r18, 0xFC	; 252
     33a:	fc 01       	movw	r30, r24
     33c:	20 83       	st	Z, r18
	seg_cnt ++;								//switching to next segment
     33e:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <seg_cnt>
	
	if(seg_cnt == 6)						//loop segment counter
     348:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <seg_cnt>
     34c:	86 30       	cpi	r24, 0x06	; 6
     34e:	11 f4       	brne	.+4      	; 0x354 <__vector_11+0xe4>
	{
		seg_cnt = 0;
     350:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <seg_cnt>
	}
	
	TIFR &= ~(1<<TOV0);	//clear timer0 overflow interrupt flag
     354:	88 e5       	ldi	r24, 0x58	; 88
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	28 e5       	ldi	r18, 0x58	; 88
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	f9 01       	movw	r30, r18
     35e:	20 81       	ld	r18, Z
     360:	2e 7f       	andi	r18, 0xFE	; 254
     362:	fc 01       	movw	r30, r24
     364:	20 83       	st	Z, r18
	
	sei();
     366:	78 94       	sei
}
     368:	0f 90       	pop	r0
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	9f 91       	pop	r25
     374:	8f 91       	pop	r24
     376:	3f 91       	pop	r19
     378:	2f 91       	pop	r18
     37a:	0f 90       	pop	r0
     37c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     380:	0f 90       	pop	r0
     382:	1f 90       	pop	r1
     384:	18 95       	reti

00000386 <SevenSeg_on>:


void SevenSeg_on()
{
     386:	cf 93       	push	r28
     388:	df 93       	push	r29
     38a:	cd b7       	in	r28, 0x3d	; 61
     38c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01) | (1<<CS00);		//setting prescaler to /256
     38e:	83 e5       	ldi	r24, 0x53	; 83
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	23 e0       	ldi	r18, 0x03	; 3
     394:	fc 01       	movw	r30, r24
     396:	20 83       	st	Z, r18
	on = 1;
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <on>
}
     39e:	00 00       	nop
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	08 95       	ret

000003a6 <Encoder_init>:

uint8_t selected_seg = 1;


void Encoder_init()
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
	ENC_PORT &= ~((1<<ENC_A_PIN) | (1<<ENC_A_PIN));							//setting encoder terminals to input
     3ae:	82 e3       	ldi	r24, 0x32	; 50
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	22 e3       	ldi	r18, 0x32	; 50
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	f9 01       	movw	r30, r18
     3b8:	20 81       	ld	r18, Z
     3ba:	2b 7f       	andi	r18, 0xFB	; 251
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
	MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11);				//setting ext-int0 to sensitive at rising edge
     3c0:	85 e5       	ldi	r24, 0x55	; 85
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	25 e5       	ldi	r18, 0x55	; 85
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	f9 01       	movw	r30, r18
     3ca:	20 81       	ld	r18, Z
     3cc:	2b 60       	ori	r18, 0x0B	; 11
     3ce:	fc 01       	movw	r30, r24
     3d0:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1);											//enable external interrupt 0 (ENC_A_PIN)
     3d2:	8b e5       	ldi	r24, 0x5B	; 91
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	2b e5       	ldi	r18, 0x5B	; 91
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	f9 01       	movw	r30, r18
     3dc:	20 81       	ld	r18, Z
     3de:	20 6c       	ori	r18, 0xC0	; 192
     3e0:	fc 01       	movw	r30, r24
     3e2:	20 83       	st	Z, r18
	sei();
     3e4:	78 94       	sei
}
     3e6:	00 00       	nop
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <__vector_1>:



ISR(INT0_vect)
{	
     3ee:	1f 92       	push	r1
     3f0:	0f 92       	push	r0
     3f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
     3fa:	2f 93       	push	r18
     3fc:	3f 93       	push	r19
     3fe:	4f 93       	push	r20
     400:	5f 93       	push	r21
     402:	6f 93       	push	r22
     404:	7f 93       	push	r23
     406:	8f 93       	push	r24
     408:	9f 93       	push	r25
     40a:	af 93       	push	r26
     40c:	bf 93       	push	r27
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62
	cli();
     41a:	f8 94       	cli
	
	switch(getState())
     41c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <getState>
     420:	88 2f       	mov	r24, r24
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	83 30       	cpi	r24, 0x03	; 3
     426:	91 05       	cpc	r25, r1
     428:	19 f0       	breq	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42a:	04 97       	sbiw	r24, 0x04	; 4
     42c:	a1 f0       	breq	.+40     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			}
			break;
		}
		
		default:
			break;
     42e:	26 c0       	rjmp	.+76     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	
	switch(getState())
	{
		case 3:	
		{	
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     430:	80 e3       	ldi	r24, 0x30	; 48
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	fc 01       	movw	r30, r24
     436:	80 81       	ld	r24, Z
     438:	88 2f       	mov	r24, r24
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	80 71       	andi	r24, 0x10	; 16
     43e:	99 27       	eor	r25, r25
     440:	18 16       	cp	r1, r24
     442:	19 06       	cpc	r1, r25
     444:	24 f4       	brge	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
			{
				dec_delta(1);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 dd 03 	call	0x7ba	; 0x7ba <dec_delta>
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
			}
			break;
     44c:	17 c0       	rjmp	.+46     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
			{
				dec_delta(1);
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 ba 03 	call	0x774	; 0x774 <inc_delta>
			}
			break;
     454:	13 c0       	rjmp	.+38     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		}
		
		case 4:
		{
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     456:	80 e3       	ldi	r24, 0x30	; 48
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	88 2f       	mov	r24, r24
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	80 71       	andi	r24, 0x10	; 16
     464:	99 27       	eor	r25, r25
     466:	18 16       	cp	r1, r24
     468:	19 06       	cpc	r1, r25
     46a:	24 f4       	brge	.+8      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
			{
				dec_delta(2);
     46c:	82 e0       	ldi	r24, 0x02	; 2
     46e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <dec_delta>
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
			}
			break;
     472:	03 c0       	rjmp	.+6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			{
				dec_delta(2);
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 ba 03 	call	0x774	; 0x774 <inc_delta>
			}
			break;
     47a:	00 00       	nop
		
		default:
			break;
	}
	
	stop_timeout_timer();
     47c:	0e 94 d7 05 	call	0xbae	; 0xbae <stop_timeout_timer>
	start_timeout_timer();
     480:	0e 94 c5 05 	call	0xb8a	; 0xb8a <start_timeout_timer>
	
	
	GIFR &= ~(1<<INTF0);  //clear ext-interrupt-0 flag
     484:	8a e5       	ldi	r24, 0x5A	; 90
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	2a e5       	ldi	r18, 0x5A	; 90
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	f9 01       	movw	r30, r18
     48e:	20 81       	ld	r18, Z
     490:	2f 7b       	andi	r18, 0xBF	; 191
     492:	fc 01       	movw	r30, r24
     494:	20 83       	st	Z, r18
	
	sei();
     496:	78 94       	sei
}
     498:	00 00       	nop
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	bf 91       	pop	r27
     4a4:	af 91       	pop	r26
     4a6:	9f 91       	pop	r25
     4a8:	8f 91       	pop	r24
     4aa:	7f 91       	pop	r23
     4ac:	6f 91       	pop	r22
     4ae:	5f 91       	pop	r21
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <__vector_2>:


ISR(INT1_vect)  //if the encoder got pushed
{
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	1f 93       	push	r17
     4d0:	2f 93       	push	r18
     4d2:	3f 93       	push	r19
     4d4:	4f 93       	push	r20
     4d6:	5f 93       	push	r21
     4d8:	6f 93       	push	r22
     4da:	7f 93       	push	r23
     4dc:	8f 93       	push	r24
     4de:	9f 93       	push	r25
     4e0:	af 93       	push	r26
     4e2:	bf 93       	push	r27
     4e4:	ef 93       	push	r30
     4e6:	ff 93       	push	r31
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	cli();
     4f0:	f8 94       	cli
	
	switch(getState())
     4f2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <getState>
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	91 05       	cpc	r25, r1
     4fe:	a1 f0       	breq	.+40     	; 0x528 <__vector_2+0x66>
     500:	83 30       	cpi	r24, 0x03	; 3
     502:	91 05       	cpc	r25, r1
     504:	1c f4       	brge	.+6      	; 0x50c <__vector_2+0x4a>
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	39 f0       	breq	.+14     	; 0x518 <__vector_2+0x56>
     50a:	40 c0       	rjmp	.+128    	; 0x58c <__vector_2+0xca>
     50c:	83 30       	cpi	r24, 0x03	; 3
     50e:	91 05       	cpc	r25, r1
     510:	89 f0       	breq	.+34     	; 0x534 <__vector_2+0x72>
     512:	04 97       	sbiw	r24, 0x04	; 4
     514:	29 f1       	breq	.+74     	; 0x560 <__vector_2+0x9e>
     516:	3a c0       	rjmp	.+116    	; 0x58c <__vector_2+0xca>
	{
		case 1:
		{
			setState(2);
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	0e 94 49 03 	call	0x692	; 0x692 <setState>
			stop_timeout_timer();
     51e:	0e 94 d7 05 	call	0xbae	; 0xbae <stop_timeout_timer>
			start_timeout_timer();
     522:	0e 94 c5 05 	call	0xb8a	; 0xb8a <start_timeout_timer>
			break;
     526:	32 c0       	rjmp	.+100    	; 0x58c <__vector_2+0xca>
		}
		case 2:
		{
			setState(3);
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	0e 94 49 03 	call	0x692	; 0x692 <setState>
			start_timeout_timer();
     52e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <start_timeout_timer>
			break;
     532:	2c c0       	rjmp	.+88     	; 0x58c <__vector_2+0xca>
		}
		case 3:
		{
			if(eeprom_read_byte((uint8_t*)0) != get_delta(1))
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 0b 0c 	call	0x1816	; 0x1816 <eeprom_read_byte>
     53c:	18 2f       	mov	r17, r24
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	0e 94 00 04 	call	0x800	; 0x800 <get_delta>
     544:	18 17       	cp	r17, r24
     546:	41 f0       	breq	.+16     	; 0x558 <__vector_2+0x96>
			{
				eeprom_update_byte((uint8_t*)0, get_delta(1));
     548:	81 e0       	ldi	r24, 0x01	; 1
     54a:	0e 94 00 04 	call	0x800	; 0x800 <get_delta>
     54e:	68 2f       	mov	r22, r24
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 13 0c 	call	0x1826	; 0x1826 <eeprom_update_byte>
			}
			setState(4);
     558:	84 e0       	ldi	r24, 0x04	; 4
     55a:	0e 94 49 03 	call	0x692	; 0x692 <setState>
			break;
     55e:	16 c0       	rjmp	.+44     	; 0x58c <__vector_2+0xca>
		}
		case 4:
		{
			if(eeprom_read_byte((uint8_t*)1) != get_delta(2))
     560:	81 e0       	ldi	r24, 0x01	; 1
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 0b 0c 	call	0x1816	; 0x1816 <eeprom_read_byte>
     568:	18 2f       	mov	r17, r24
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	0e 94 00 04 	call	0x800	; 0x800 <get_delta>
     570:	18 17       	cp	r17, r24
     572:	41 f0       	breq	.+16     	; 0x584 <__vector_2+0xc2>
			{
				eeprom_update_byte((uint8_t*)1, get_delta(2));
     574:	82 e0       	ldi	r24, 0x02	; 2
     576:	0e 94 00 04 	call	0x800	; 0x800 <get_delta>
     57a:	68 2f       	mov	r22, r24
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 13 0c 	call	0x1826	; 0x1826 <eeprom_update_byte>
			}
			setState(2);
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	0e 94 49 03 	call	0x692	; 0x692 <setState>
			break;
     58a:	00 00       	nop
		}
	}
	
	sei();
     58c:	78 94       	sei
     58e:	00 00       	nop
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	ff 91       	pop	r31
     596:	ef 91       	pop	r30
     598:	bf 91       	pop	r27
     59a:	af 91       	pop	r26
     59c:	9f 91       	pop	r25
     59e:	8f 91       	pop	r24
     5a0:	7f 91       	pop	r23
     5a2:	6f 91       	pop	r22
     5a4:	5f 91       	pop	r21
     5a6:	4f 91       	pop	r20
     5a8:	3f 91       	pop	r19
     5aa:	2f 91       	pop	r18
     5ac:	1f 91       	pop	r17
     5ae:	0f 90       	pop	r0
     5b0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     5b4:	0f 90       	pop	r0
     5b6:	1f 90       	pop	r1
     5b8:	18 95       	reti

000005ba <main>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);



int main(void)
{
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	00 d0       	rcall	.+0      	; 0x5c0 <main+0x6>
     5c0:	00 d0       	rcall	.+0      	; 0x5c2 <main+0x8>
     5c2:	cd b7       	in	r28, 0x3d	; 61
     5c4:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
     5c6:	8b e3       	ldi	r24, 0x3B	; 59
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	fc 01       	movw	r30, r24
     5cc:	10 82       	st	Z, r1
	PORTB = 0x00;
     5ce:	88 e3       	ldi	r24, 0x38	; 56
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	fc 01       	movw	r30, r24
     5d4:	10 82       	st	Z, r1
	
	DDRA = 0xFC;
     5d6:	8a e3       	ldi	r24, 0x3A	; 58
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	2c ef       	ldi	r18, 0xFC	; 252
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
	DDRB = 0xFF;
     5e0:	87 e3       	ldi	r24, 0x37	; 55
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	2f ef       	ldi	r18, 0xFF	; 255
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
	DDRC |= (1<<WDI_PIN);
     5ea:	84 e3       	ldi	r24, 0x34	; 52
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	24 e3       	ldi	r18, 0x34	; 52
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	f9 01       	movw	r30, r18
     5f4:	20 81       	ld	r18, Z
     5f6:	20 64       	ori	r18, 0x40	; 64
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
	DDRD |= (1<<PD5);
     5fc:	81 e3       	ldi	r24, 0x31	; 49
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	21 e3       	ldi	r18, 0x31	; 49
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	f9 01       	movw	r30, r18
     606:	20 81       	ld	r18, Z
     608:	20 62       	ori	r18, 0x20	; 32
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
	
	uart_init(0);
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 5d 06 	call	0xcba	; 0xcba <uart_init>
	
	
	stdout = &mystdout;
     616:	8c e6       	ldi	r24, 0x6C	; 108
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	90 93 bd 00 	sts	0x00BD, r25	; 0x8000bd <__iob+0x3>
     61e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__iob+0x2>
	
	printf("startup!\n");
     622:	8b e7       	ldi	r24, 0x7B	; 123
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 4a 09 	call	0x1294	; 0x1294 <puts>
	
	regulator_init();
     62a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <regulator_init>
	SevenSeg_init();
     62e:	0e 94 49 00 	call	0x92	; 0x92 <SevenSeg_init>
	Timeout_init();
     632:	0e 94 af 05 	call	0xb5e	; 0xb5e <Timeout_init>
	Encoder_init();
     636:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Encoder_init>
	
	set_PWM(63);
     63a:	8f e3       	ldi	r24, 0x3F	; 63
     63c:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_PWM>
	
    /* Replace with your application code */
    while (1) 
    {
		int16_t test_cnt = -100;
     640:	8c e9       	ldi	r24, 0x9C	; 156
     642:	9f ef       	ldi	r25, 0xFF	; 255
     644:	9a 83       	std	Y+2, r25	; 0x02
     646:	89 83       	std	Y+1, r24	; 0x01
		while(1)
		{
			SevenSeg_on();
     648:	0e 94 c3 01 	call	0x386	; 0x386 <SevenSeg_on>
			SevenSeg_set_val(0, test_cnt);
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	9a 81       	ldd	r25, Y+2	; 0x02
     650:	bc 01       	movw	r22, r24
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	0e 94 5b 00 	call	0xb6	; 0xb6 <SevenSeg_set_val>
			test_cnt++;
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	9a 81       	ldd	r25, Y+2	; 0x02
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	9a 83       	std	Y+2, r25	; 0x02
     660:	89 83       	std	Y+1, r24	; 0x01
			
			for(uint16_t i = 0; i<60000; i++)
     662:	1c 82       	std	Y+4, r1	; 0x04
     664:	1b 82       	std	Y+3, r1	; 0x03
     666:	0f c0       	rjmp	.+30     	; 0x686 <main+0xcc>
			{
				test_cnt = test_cnt + 2;
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	02 96       	adiw	r24, 0x02	; 2
     66e:	9a 83       	std	Y+2, r25	; 0x02
     670:	89 83       	std	Y+1, r24	; 0x01
				test_cnt = test_cnt -2;
     672:	89 81       	ldd	r24, Y+1	; 0x01
     674:	9a 81       	ldd	r25, Y+2	; 0x02
     676:	02 97       	sbiw	r24, 0x02	; 2
     678:	9a 83       	std	Y+2, r25	; 0x02
     67a:	89 83       	std	Y+1, r24	; 0x01
		{
			SevenSeg_on();
			SevenSeg_set_val(0, test_cnt);
			test_cnt++;
			
			for(uint16_t i = 0; i<60000; i++)
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	9c 83       	std	Y+4, r25	; 0x04
     684:	8b 83       	std	Y+3, r24	; 0x03
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	80 36       	cpi	r24, 0x60	; 96
     68c:	9a 4e       	sbci	r25, 0xEA	; 234
     68e:	60 f3       	brcs	.-40     	; 0x668 <main+0xae>
			{
				test_cnt = test_cnt + 2;
				test_cnt = test_cnt -2;
			}
		}
     690:	db cf       	rjmp	.-74     	; 0x648 <main+0x8e>

00000692 <setState>:
		WDI_PORT ^= (1<<WDI_PIN);
    }
}

void setState(uint8_t s)
{
     692:	cf 93       	push	r28
     694:	df 93       	push	r29
     696:	1f 92       	push	r1
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	89 83       	std	Y+1, r24	; 0x01
	state = s;
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <state>
	printf("state -> %d\n", state);
     6a4:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <state>
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	29 2f       	mov	r18, r25
     6ae:	2f 93       	push	r18
     6b0:	8f 93       	push	r24
     6b2:	84 e8       	ldi	r24, 0x84	; 132
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	89 2f       	mov	r24, r25
     6b8:	8f 93       	push	r24
     6ba:	84 e8       	ldi	r24, 0x84	; 132
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	8f 93       	push	r24
     6c0:	0e 94 34 09 	call	0x1268	; 0x1268 <printf>
     6c4:	0f 90       	pop	r0
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
}
     6cc:	00 00       	nop
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <getState>:

uint8_t getState()
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
	return state;
     6de:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <state>
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <regulator_init>:
		return temp_dach;
	else if(sensor == 0)
		return temp_kessel;
	else
		return 1000;
}
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
     6ec:	cd b7       	in	r28, 0x3d	; 61
     6ee:	de b7       	in	r29, 0x3e	; 62
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 0b 0c 	call	0x1816	; 0x1816 <eeprom_read_byte>
     6f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <delta1>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 0b 0c 	call	0x1816	; 0x1816 <eeprom_read_byte>
     704:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <delta2>
     708:	87 e2       	ldi	r24, 0x27	; 39
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	fc 01       	movw	r30, r24
     70e:	10 82       	st	Z, r1
     710:	87 e2       	ldi	r24, 0x27	; 39
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	27 e2       	ldi	r18, 0x27	; 39
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	f9 01       	movw	r30, r18
     71a:	20 81       	ld	r18, Z
     71c:	2f 7d       	andi	r18, 0xDF	; 223
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
     722:	86 e2       	ldi	r24, 0x26	; 38
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	26 e2       	ldi	r18, 0x26	; 38
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	f9 01       	movw	r30, r18
     72c:	20 81       	ld	r18, Z
     72e:	20 68       	ori	r18, 0x80	; 128
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
     734:	85 e4       	ldi	r24, 0x45	; 69
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	25 e4       	ldi	r18, 0x45	; 69
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	f9 01       	movw	r30, r18
     73e:	20 81       	ld	r18, Z
     740:	2f 66       	ori	r18, 0x6F	; 111
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
     746:	89 e5       	ldi	r24, 0x59	; 89
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	29 e5       	ldi	r18, 0x59	; 89
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	f9 01       	movw	r30, r18
     750:	20 81       	ld	r18, Z
     752:	20 64       	ori	r18, 0x40	; 64
     754:	fc 01       	movw	r30, r24
     756:	20 83       	st	Z, r18
     758:	81 e3       	ldi	r24, 0x31	; 49
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	21 e3       	ldi	r18, 0x31	; 49
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	f9 01       	movw	r30, r18
     762:	20 81       	ld	r18, Z
     764:	20 68       	ori	r18, 0x80	; 128
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
     76a:	78 94       	sei
     76c:	00 00       	nop
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	08 95       	ret

00000774 <inc_delta>:
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	1f 92       	push	r1
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	89 83       	std	Y+1, r24	; 0x01
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	81 30       	cpi	r24, 0x01	; 1
     784:	49 f4       	brne	.+18     	; 0x798 <inc_delta+0x24>
     786:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     78a:	84 36       	cpi	r24, 0x64	; 100
     78c:	28 f4       	brcc	.+10     	; 0x798 <inc_delta+0x24>
     78e:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <delta1>
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	49 f4       	brne	.+18     	; 0x7b0 <inc_delta+0x3c>
     79e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     7a2:	84 36       	cpi	r24, 0x64	; 100
     7a4:	28 f4       	brcc	.+10     	; 0x7b0 <inc_delta+0x3c>
     7a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <delta2>
     7b0:	00 00       	nop
     7b2:	0f 90       	pop	r0
     7b4:	df 91       	pop	r29
     7b6:	cf 91       	pop	r28
     7b8:	08 95       	ret

000007ba <dec_delta>:
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	1f 92       	push	r1
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	89 83       	std	Y+1, r24	; 0x01
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	49 f4       	brne	.+18     	; 0x7de <dec_delta+0x24>
     7cc:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     7d0:	88 23       	and	r24, r24
     7d2:	29 f0       	breq	.+10     	; 0x7de <dec_delta+0x24>
     7d4:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     7d8:	81 50       	subi	r24, 0x01	; 1
     7da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <delta1>
     7de:	89 81       	ldd	r24, Y+1	; 0x01
     7e0:	82 30       	cpi	r24, 0x02	; 2
     7e2:	49 f4       	brne	.+18     	; 0x7f6 <dec_delta+0x3c>
     7e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     7e8:	88 23       	and	r24, r24
     7ea:	29 f0       	breq	.+10     	; 0x7f6 <dec_delta+0x3c>
     7ec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     7f0:	81 50       	subi	r24, 0x01	; 1
     7f2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <delta2>
     7f6:	00 00       	nop
     7f8:	0f 90       	pop	r0
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <get_delta>:
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	1f 92       	push	r1
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	81 30       	cpi	r24, 0x01	; 1
     810:	19 f4       	brne	.+6      	; 0x818 <get_delta+0x18>
     812:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     816:	07 c0       	rjmp	.+14     	; 0x826 <get_delta+0x26>
     818:	89 81       	ldd	r24, Y+1	; 0x01
     81a:	82 30       	cpi	r24, 0x02	; 2
     81c:	19 f4       	brne	.+6      	; 0x824 <get_delta+0x24>
     81e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     822:	01 c0       	rjmp	.+2      	; 0x826 <get_delta+0x26>
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	0f 90       	pop	r0
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <measure_temp>:
     82e:	cf 92       	push	r12
     830:	df 92       	push	r13
     832:	ef 92       	push	r14
     834:	ff 92       	push	r15
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	2d 97       	sbiw	r28, 0x0d	; 13
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
     84a:	8d 87       	std	Y+13, r24	; 0x0d
     84c:	87 e2       	ldi	r24, 0x27	; 39
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	27 e2       	ldi	r18, 0x27	; 39
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	f9 01       	movw	r30, r18
     856:	20 81       	ld	r18, Z
     858:	20 7e       	andi	r18, 0xE0	; 224
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18
     85e:	8d 85       	ldd	r24, Y+13	; 0x0d
     860:	88 23       	and	r24, r24
     862:	49 f4       	brne	.+18     	; 0x876 <__stack+0x17>
     864:	87 e2       	ldi	r24, 0x27	; 39
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	27 e2       	ldi	r18, 0x27	; 39
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	f9 01       	movw	r30, r18
     86e:	20 81       	ld	r18, Z
     870:	21 60       	ori	r18, 0x01	; 1
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
     876:	86 e2       	ldi	r24, 0x26	; 38
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	26 e2       	ldi	r18, 0x26	; 38
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	f9 01       	movw	r30, r18
     880:	20 81       	ld	r18, Z
     882:	20 64       	ori	r18, 0x40	; 64
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18
     888:	00 00       	nop
     88a:	86 e2       	ldi	r24, 0x26	; 38
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	fc 01       	movw	r30, r24
     890:	80 81       	ld	r24, Z
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	80 74       	andi	r24, 0x40	; 64
     898:	99 27       	eor	r25, r25
     89a:	18 16       	cp	r1, r24
     89c:	19 06       	cpc	r1, r25
     89e:	ac f3       	brlt	.-22     	; 0x88a <__stack+0x2b>
     8a0:	84 e2       	ldi	r24, 0x24	; 36
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	fc 01       	movw	r30, r24
     8a6:	80 81       	ld	r24, Z
     8a8:	88 2f       	mov	r24, r24
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	9a 83       	std	Y+2, r25	; 0x02
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	85 e2       	ldi	r24, 0x25	; 37
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	fc 01       	movw	r30, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	88 2f       	mov	r24, r24
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	98 2f       	mov	r25, r24
     8be:	88 27       	eor	r24, r24
     8c0:	9c 01       	movw	r18, r24
     8c2:	89 81       	ldd	r24, Y+1	; 0x01
     8c4:	9a 81       	ldd	r25, Y+2	; 0x02
     8c6:	82 0f       	add	r24, r18
     8c8:	93 1f       	adc	r25, r19
     8ca:	9a 83       	std	Y+2, r25	; 0x02
     8cc:	89 83       	std	Y+1, r24	; 0x01
     8ce:	89 81       	ldd	r24, Y+1	; 0x01
     8d0:	9a 81       	ldd	r25, Y+2	; 0x02
     8d2:	cc 01       	movw	r24, r24
     8d4:	a0 e0       	ldi	r26, 0x00	; 0
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	bc 01       	movw	r22, r24
     8da:	cd 01       	movw	r24, r26
     8dc:	0e 94 c4 07 	call	0xf88	; 0xf88 <__floatunsisf>
     8e0:	dc 01       	movw	r26, r24
     8e2:	cb 01       	movw	r24, r22
     8e4:	2e e4       	ldi	r18, 0x4E	; 78
     8e6:	3e e0       	ldi	r19, 0x0E	; 14
     8e8:	4f e9       	ldi	r20, 0x9F	; 159
     8ea:	5b e3       	ldi	r21, 0x3B	; 59
     8ec:	bc 01       	movw	r22, r24
     8ee:	cd 01       	movw	r24, r26
     8f0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	ad 83       	std	Y+5, r26	; 0x05
     8fe:	be 83       	std	Y+6, r27	; 0x06
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	3c ef       	ldi	r19, 0xFC	; 252
     904:	4b e2       	ldi	r20, 0x2B	; 43
     906:	55 e4       	ldi	r21, 0x45	; 69
     908:	6b 81       	ldd	r22, Y+3	; 0x03
     90a:	7c 81       	ldd	r23, Y+4	; 0x04
     90c:	8d 81       	ldd	r24, Y+5	; 0x05
     90e:	9e 81       	ldd	r25, Y+6	; 0x06
     910:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__mulsf3>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	9c 01       	movw	r18, r24
     91a:	ad 01       	movw	r20, r26
     91c:	6b e7       	ldi	r22, 0x7B	; 123
     91e:	70 eb       	ldi	r23, 0xB0	; 176
     920:	86 ee       	ldi	r24, 0xE6	; 230
     922:	95 e4       	ldi	r25, 0x45	; 69
     924:	0e 94 af 06 	call	0xd5e	; 0xd5e <__subsf3>
     928:	dc 01       	movw	r26, r24
     92a:	cb 01       	movw	r24, r22
     92c:	6c 01       	movw	r12, r24
     92e:	7d 01       	movw	r14, r26
     930:	21 e8       	ldi	r18, 0x81	; 129
     932:	35 e9       	ldi	r19, 0x95	; 149
     934:	4a ee       	ldi	r20, 0xEA	; 234
     936:	51 e4       	ldi	r21, 0x41	; 65
     938:	6b 81       	ldd	r22, Y+3	; 0x03
     93a:	7c 81       	ldd	r23, Y+4	; 0x04
     93c:	8d 81       	ldd	r24, Y+5	; 0x05
     93e:	9e 81       	ldd	r25, Y+6	; 0x06
     940:	0e 94 af 06 	call	0xd5e	; 0xd5e <__subsf3>
     944:	dc 01       	movw	r26, r24
     946:	cb 01       	movw	r24, r22
     948:	9c 01       	movw	r18, r24
     94a:	ad 01       	movw	r20, r26
     94c:	c7 01       	movw	r24, r14
     94e:	b6 01       	movw	r22, r12
     950:	0e 94 1c 07 	call	0xe38	; 0xe38 <__divsf3>
     954:	dc 01       	movw	r26, r24
     956:	cb 01       	movw	r24, r22
     958:	8f 83       	std	Y+7, r24	; 0x07
     95a:	98 87       	std	Y+8, r25	; 0x08
     95c:	a9 87       	std	Y+9, r26	; 0x09
     95e:	ba 87       	std	Y+10, r27	; 0x0a
     960:	8f 81       	ldd	r24, Y+7	; 0x07
     962:	98 85       	ldd	r25, Y+8	; 0x08
     964:	a9 85       	ldd	r26, Y+9	; 0x09
     966:	ba 85       	ldd	r27, Y+10	; 0x0a
     968:	bc 01       	movw	r22, r24
     96a:	cd 01       	movw	r24, r26
     96c:	0e 94 bf 08 	call	0x117e	; 0x117e <round>
     970:	dc 01       	movw	r26, r24
     972:	cb 01       	movw	r24, r22
     974:	bc 01       	movw	r22, r24
     976:	cd 01       	movw	r24, r26
     978:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__fixsfsi>
     97c:	dc 01       	movw	r26, r24
     97e:	cb 01       	movw	r24, r22
     980:	9c 87       	std	Y+12, r25	; 0x0c
     982:	8b 87       	std	Y+11, r24	; 0x0b
     984:	8b 85       	ldd	r24, Y+11	; 0x0b
     986:	9c 85       	ldd	r25, Y+12	; 0x0c
     988:	2d 96       	adiw	r28, 0x0d	; 13
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	08 95       	ret

000009a2 <set_PWM>:


//sets duty cycle; 0-255
void set_PWM(uint8_t duty)
{
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	1f 92       	push	r1
     9a8:	cd b7       	in	r28, 0x3d	; 61
     9aa:	de b7       	in	r29, 0x3e	; 62
     9ac:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = duty;
     9ae:	83 e4       	ldi	r24, 0x43	; 67
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	29 81       	ldd	r18, Y+1	; 0x01
     9b4:	fc 01       	movw	r30, r24
     9b6:	20 83       	st	Z, r18
}
     9b8:	00 00       	nop
     9ba:	0f 90       	pop	r0
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <__vector_5>:



ISR(TIMER2_OVF_vect)
{
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	2f 93       	push	r18
     9d0:	3f 93       	push	r19
     9d2:	4f 93       	push	r20
     9d4:	5f 93       	push	r21
     9d6:	6f 93       	push	r22
     9d8:	7f 93       	push	r23
     9da:	8f 93       	push	r24
     9dc:	9f 93       	push	r25
     9de:	af 93       	push	r26
     9e0:	bf 93       	push	r27
     9e2:	ef 93       	push	r30
     9e4:	ff 93       	push	r31
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	cd b7       	in	r28, 0x3d	; 61
     9ec:	de b7       	in	r29, 0x3e	; 62
	cli();
     9ee:	f8 94       	cli
	
	if(loop_cnt < 62) //if 2s are not passed
     9f0:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <loop_cnt>
     9f4:	8e 33       	cpi	r24, 0x3E	; 62
     9f6:	30 f4       	brcc	.+12     	; 0xa04 <__vector_5+0x42>
	{
		loop_cnt++;
     9f8:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <loop_cnt>
     9fc:	8f 5f       	subi	r24, 0xFF	; 255
     9fe:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <loop_cnt>
     a02:	8e c0       	rjmp	.+284    	; 0xb20 <__vector_5+0x15e>
	}
	
	else	//if it is time to work...
	{
		if (log_counter == 255)
     a04:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <log_counter>
     a08:	8f 3f       	cpi	r24, 0xFF	; 255
     a0a:	11 f4       	brne	.+4      	; 0xa10 <__vector_5+0x4e>
		{
			log_counter = 0;
     a0c:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <log_counter>
		}
		
		PORTD ^= (1<<PD5);
     a10:	82 e3       	ldi	r24, 0x32	; 50
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	22 e3       	ldi	r18, 0x32	; 50
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	f9 01       	movw	r30, r18
     a1a:	30 81       	ld	r19, Z
     a1c:	20 e2       	ldi	r18, 0x20	; 32
     a1e:	23 27       	eor	r18, r19
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18

		temp_dach   = (int16_t)measure_temp(1) - 3; //-3 to compensate the wires
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 17 04 	call	0x82e	; 0x82e <measure_temp>
     a2a:	03 97       	sbiw	r24, 0x03	; 3
     a2c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <temp_dach+0x1>
     a30:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <temp_dach>
		temp_kessel = measure_temp(0);
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 17 04 	call	0x82e	; 0x82e <measure_temp>
     a3a:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <temp_kessel+0x1>
     a3e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <temp_kessel>
		
		d_teta = temp_dach - temp_kessel;
     a42:	20 91 af 00 	lds	r18, 0x00AF	; 0x8000af <temp_dach>
     a46:	30 91 b0 00 	lds	r19, 0x00B0	; 0x8000b0 <temp_dach+0x1>
     a4a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <temp_kessel>
     a4e:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <temp_kessel+0x1>
     a52:	a9 01       	movw	r20, r18
     a54:	48 1b       	sub	r20, r24
     a56:	59 0b       	sbc	r21, r25
     a58:	ca 01       	movw	r24, r20
     a5a:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <d_teta+0x1>
     a5e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <d_teta>
		
		if(d_teta > delta1)
     a62:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <delta1>
     a66:	28 2f       	mov	r18, r24
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <d_teta>
     a6e:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <d_teta+0x1>
     a72:	28 17       	cp	r18, r24
     a74:	39 07       	cpc	r19, r25
     a76:	dc f4       	brge	.+54     	; 0xaae <__vector_5+0xec>
		{
			if( d_teta >= delta2)
     a78:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <delta2>
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <d_teta>
     a84:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <d_teta+0x1>
     a88:	82 17       	cp	r24, r18
     a8a:	93 07       	cpc	r25, r19
     a8c:	6c f0       	brlt	.+26     	; 0xaa8 <__vector_5+0xe6>
			{
				duty = (uint8_t) d_teta * k;
     a8e:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <d_teta>
     a92:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <d_teta+0x1>
     a96:	98 2f       	mov	r25, r24
     a98:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <k>
     a9c:	98 9f       	mul	r25, r24
     a9e:	80 2d       	mov	r24, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <duty>
     aa6:	05 c0       	rjmp	.+10     	; 0xab2 <__vector_5+0xf0>
			}
			else
			{
				duty = 0;
     aa8:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <duty>
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <__vector_5+0xf0>
			}
		}
		else
		{
			duty = 0;
     aae:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <duty>
		}
		
		set_PWM(duty);
     ab2:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <duty>
     ab6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_PWM>
		
		loop_cnt = 0;
     aba:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <loop_cnt>
		log_counter ++;
     abe:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <log_counter>
     ac2:	8f 5f       	subi	r24, 0xFF	; 255
     ac4:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <log_counter>
		
		
		#ifdef LOGGING
		if(log_counter==30) //every 60 secounds
     ac8:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <log_counter>
     acc:	8e 31       	cpi	r24, 0x1E	; 30
     ace:	41 f5       	brne	.+80     	; 0xb20 <__vector_5+0x15e>
		{
			log_counter = 0;
     ad0:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <log_counter>
			printf("%d;%d;%d\n", temp_dach, temp_kessel, duty);
     ad4:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <duty>
     ad8:	48 2f       	mov	r20, r24
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	20 91 b1 00 	lds	r18, 0x00B1	; 0x8000b1 <temp_kessel>
     ae0:	30 91 b2 00 	lds	r19, 0x00B2	; 0x8000b2 <temp_kessel+0x1>
     ae4:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <temp_dach>
     ae8:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <temp_dach+0x1>
     aec:	65 2f       	mov	r22, r21
     aee:	6f 93       	push	r22
     af0:	4f 93       	push	r20
     af2:	43 2f       	mov	r20, r19
     af4:	4f 93       	push	r20
     af6:	2f 93       	push	r18
     af8:	29 2f       	mov	r18, r25
     afa:	2f 93       	push	r18
     afc:	8f 93       	push	r24
     afe:	81 e9       	ldi	r24, 0x91	; 145
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	89 2f       	mov	r24, r25
     b04:	8f 93       	push	r24
     b06:	81 e9       	ldi	r24, 0x91	; 145
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	8f 93       	push	r24
     b0c:	0e 94 34 09 	call	0x1268	; 0x1268 <printf>
     b10:	8d b7       	in	r24, 0x3d	; 61
     b12:	9e b7       	in	r25, 0x3e	; 62
     b14:	08 96       	adiw	r24, 0x08	; 8
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	cd bf       	out	0x3d, r28	; 61
	}
	
	
	
	
	TIFR &= ~(1<<TOV2);			//clear flag
     b20:	88 e5       	ldi	r24, 0x58	; 88
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	28 e5       	ldi	r18, 0x58	; 88
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	f9 01       	movw	r30, r18
     b2a:	20 81       	ld	r18, Z
     b2c:	2f 7b       	andi	r18, 0xBF	; 191
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
		
	sei();
     b32:	78 94       	sei
     b34:	00 00       	nop
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	ff 91       	pop	r31
     b3c:	ef 91       	pop	r30
     b3e:	bf 91       	pop	r27
     b40:	af 91       	pop	r26
     b42:	9f 91       	pop	r25
     b44:	8f 91       	pop	r24
     b46:	7f 91       	pop	r23
     b48:	6f 91       	pop	r22
     b4a:	5f 91       	pop	r21
     b4c:	4f 91       	pop	r20
     b4e:	3f 91       	pop	r19
     b50:	2f 91       	pop	r18
     b52:	0f 90       	pop	r0
     b54:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <Timeout_init>:
#include "main.h"
#include "regulator.h"
#include "uart.h"

void Timeout_init()
{
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00;
     b66:	8f e4       	ldi	r24, 0x4F	; 79
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	10 82       	st	Z, r1
	
	TIMSK |= (1<<TOIE1);			//enable overflow-event
     b6e:	89 e5       	ldi	r24, 0x59	; 89
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	29 e5       	ldi	r18, 0x59	; 89
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	f9 01       	movw	r30, r18
     b78:	20 81       	ld	r18, Z
     b7a:	24 60       	ori	r18, 0x04	; 4
     b7c:	fc 01       	movw	r30, r24
     b7e:	20 83       	st	Z, r18
	sei();
     b80:	78 94       	sei
}
     b82:	00 00       	nop
     b84:	df 91       	pop	r29
     b86:	cf 91       	pop	r28
     b88:	08 95       	ret

00000b8a <start_timeout_timer>:
void start_timeout_timer()
{
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						 //reset timer counter value
     b92:	8c e4       	ldi	r24, 0x4C	; 76
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	fc 01       	movw	r30, r24
     b98:	11 82       	std	Z+1, r1	; 0x01
     b9a:	10 82       	st	Z, r1
	TCCR1B = (1<<CS12) | (1<<CS10);  //start timer at prescaler /1024
     b9c:	8e e4       	ldi	r24, 0x4E	; 78
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	25 e0       	ldi	r18, 0x05	; 5
     ba2:	fc 01       	movw	r30, r24
     ba4:	20 83       	st	Z, r18
}
     ba6:	00 00       	nop
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <stop_timeout_timer>:

void stop_timeout_timer()
{
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     bb6:	8e e4       	ldi	r24, 0x4E	; 78
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	2e e4       	ldi	r18, 0x4E	; 78
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	f9 01       	movw	r30, r18
     bc0:	20 81       	ld	r18, Z
     bc2:	2a 7f       	andi	r18, 0xFA	; 250
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
}
     bc8:	00 00       	nop
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <__vector_9>:



//timeouted
ISR(TIMER1_OVF_vect)
{	
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	1f 93       	push	r17
     bde:	2f 93       	push	r18
     be0:	3f 93       	push	r19
     be2:	4f 93       	push	r20
     be4:	5f 93       	push	r21
     be6:	6f 93       	push	r22
     be8:	7f 93       	push	r23
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	ef 93       	push	r30
     bf4:	ff 93       	push	r31
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
	cli();
     bfe:	f8 94       	cli
	
	if((getState() == 3) && (eeprom_read_byte(0) != get_delta(0)))
     c00:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <getState>
     c04:	83 30       	cpi	r24, 0x03	; 3
     c06:	91 f4       	brne	.+36     	; 0xc2c <__vector_9+0x5c>
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 0b 0c 	call	0x1816	; 0x1816 <eeprom_read_byte>
     c10:	18 2f       	mov	r17, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 00 04 	call	0x800	; 0x800 <get_delta>
     c18:	18 17       	cp	r17, r24
     c1a:	41 f0       	breq	.+16     	; 0xc2c <__vector_9+0x5c>
	{
		eeprom_update_byte((uint8_t*)(0), (uint8_t)get_delta(0));
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	0e 94 00 04 	call	0x800	; 0x800 <get_delta>
     c22:	68 2f       	mov	r22, r24
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 13 0c 	call	0x1826	; 0x1826 <eeprom_update_byte>
	}
	
	if((getState() == 4) && (eeprom_read_byte(1) != get_delta(1)))
     c2c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <getState>
     c30:	84 30       	cpi	r24, 0x04	; 4
     c32:	91 f4       	brne	.+36     	; 0xc58 <__vector_9+0x88>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 0b 0c 	call	0x1816	; 0x1816 <eeprom_read_byte>
     c3c:	18 2f       	mov	r17, r24
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	0e 94 00 04 	call	0x800	; 0x800 <get_delta>
     c44:	18 17       	cp	r17, r24
     c46:	41 f0       	breq	.+16     	; 0xc58 <__vector_9+0x88>
	{
		eeprom_update_byte((uint8_t*)(1), (uint8_t)get_delta(1));
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	0e 94 00 04 	call	0x800	; 0x800 <get_delta>
     c4e:	68 2f       	mov	r22, r24
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 13 0c 	call	0x1826	; 0x1826 <eeprom_update_byte>
	}
	
	setState(1);
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	0e 94 49 03 	call	0x692	; 0x692 <setState>
	
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     c5e:	8e e4       	ldi	r24, 0x4E	; 78
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	2e e4       	ldi	r18, 0x4E	; 78
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	f9 01       	movw	r30, r18
     c68:	20 81       	ld	r18, Z
     c6a:	2a 7f       	andi	r18, 0xFA	; 250
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18
	TCNT1 = 0;						   //resetting counter register
     c70:	8c e4       	ldi	r24, 0x4C	; 76
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	fc 01       	movw	r30, r24
     c76:	11 82       	std	Z+1, r1	; 0x01
     c78:	10 82       	st	Z, r1
	
	
	TIFR &= ~(1<<TOV1);
     c7a:	88 e5       	ldi	r24, 0x58	; 88
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	28 e5       	ldi	r18, 0x58	; 88
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	f9 01       	movw	r30, r18
     c84:	20 81       	ld	r18, Z
     c86:	2b 7f       	andi	r18, 0xFB	; 251
     c88:	fc 01       	movw	r30, r24
     c8a:	20 83       	st	Z, r18
	sei();
     c8c:	78 94       	sei
     c8e:	00 00       	nop
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	ff 91       	pop	r31
     c96:	ef 91       	pop	r30
     c98:	bf 91       	pop	r27
     c9a:	af 91       	pop	r26
     c9c:	9f 91       	pop	r25
     c9e:	8f 91       	pop	r24
     ca0:	7f 91       	pop	r23
     ca2:	6f 91       	pop	r22
     ca4:	5f 91       	pop	r21
     ca6:	4f 91       	pop	r20
     ca8:	3f 91       	pop	r19
     caa:	2f 91       	pop	r18
     cac:	1f 91       	pop	r17
     cae:	0f 90       	pop	r0
     cb0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cb4:	0f 90       	pop	r0
     cb6:	1f 90       	pop	r1
     cb8:	18 95       	reti

00000cba <uart_init>:
#include <avr/io.h>
#include <stdio.h>


void uart_init()
{
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<RXEN) | (1<<TXEN);  //enable receive and transmit
     cc2:	8a e2       	ldi	r24, 0x2A	; 42
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	2a e2       	ldi	r18, 0x2A	; 42
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	f9 01       	movw	r30, r18
     ccc:	20 81       	ld	r18, Z
     cce:	28 61       	ori	r18, 0x18	; 24
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 83       	st	Z, r18
	UBRRL = 51;						 //setting datarate to 9600 baud/s
     cd4:	89 e2       	ldi	r24, 0x29	; 41
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	23 e3       	ldi	r18, 0x33	; 51
     cda:	fc 01       	movw	r30, r24
     cdc:	20 83       	st	Z, r18

	UCSRB |= (1<<RXEN) | (1<<TXEN);
     cde:	8a e2       	ldi	r24, 0x2A	; 42
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	2a e2       	ldi	r18, 0x2A	; 42
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	f9 01       	movw	r30, r18
     ce8:	20 81       	ld	r18, Z
     cea:	28 61       	ori	r18, 0x18	; 24
     cec:	fc 01       	movw	r30, r24
     cee:	20 83       	st	Z, r18

	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     cf0:	80 e4       	ldi	r24, 0x40	; 64
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	20 e4       	ldi	r18, 0x40	; 64
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	f9 01       	movw	r30, r18
     cfa:	20 81       	ld	r18, Z
     cfc:	26 68       	ori	r18, 0x86	; 134
     cfe:	fc 01       	movw	r30, r24
     d00:	20 83       	st	Z, r18
}
     d02:	00 00       	nop
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	08 95       	ret

00000d0a <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	00 d0       	rcall	.+0      	; 0xd10 <uart_putchar+0x6>
     d10:	1f 92       	push	r1
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
     d16:	89 83       	std	Y+1, r24	; 0x01
     d18:	7b 83       	std	Y+3, r23	; 0x03
     d1a:	6a 83       	std	Y+2, r22	; 0x02
	if(c=='\n')
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	8a 30       	cpi	r24, 0x0A	; 10
     d20:	31 f4       	brne	.+12     	; 0xd2e <uart_putchar+0x24>
		uart_putchar('\r', stream);
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	bc 01       	movw	r22, r24
     d28:	8d e0       	ldi	r24, 0x0D	; 13
     d2a:	0e 94 85 06 	call	0xd0a	; 0xd0a <uart_putchar>
		
		
	while( (UCSRA & (1<<UDRE)) ==0 )
     d2e:	00 00       	nop
     d30:	8b e2       	ldi	r24, 0x2B	; 43
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	80 72       	andi	r24, 0x20	; 32
     d3e:	99 27       	eor	r25, r25
     d40:	89 2b       	or	r24, r25
     d42:	b1 f3       	breq	.-20     	; 0xd30 <uart_putchar+0x26>
	{
	}
		
	UDR = c;
     d44:	8c e2       	ldi	r24, 0x2C	; 44
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	29 81       	ldd	r18, Y+1	; 0x01
     d4a:	fc 01       	movw	r30, r24
     d4c:	20 83       	st	Z, r18
	
	return 0;
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
}
     d52:	0f 90       	pop	r0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	08 95       	ret

00000d5e <__subsf3>:
     d5e:	50 58       	subi	r21, 0x80	; 128

00000d60 <__addsf3>:
     d60:	bb 27       	eor	r27, r27
     d62:	aa 27       	eor	r26, r26
     d64:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__addsf3x>
     d68:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_round>
     d6c:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_pscA>
     d70:	38 f0       	brcs	.+14     	; 0xd80 <__addsf3+0x20>
     d72:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_pscB>
     d76:	20 f0       	brcs	.+8      	; 0xd80 <__addsf3+0x20>
     d78:	39 f4       	brne	.+14     	; 0xd88 <__addsf3+0x28>
     d7a:	9f 3f       	cpi	r25, 0xFF	; 255
     d7c:	19 f4       	brne	.+6      	; 0xd84 <__addsf3+0x24>
     d7e:	26 f4       	brtc	.+8      	; 0xd88 <__addsf3+0x28>
     d80:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_nan>
     d84:	0e f4       	brtc	.+2      	; 0xd88 <__addsf3+0x28>
     d86:	e0 95       	com	r30
     d88:	e7 fb       	bst	r30, 7
     d8a:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_inf>

00000d8e <__addsf3x>:
     d8e:	e9 2f       	mov	r30, r25
     d90:	0e 94 29 08 	call	0x1052	; 0x1052 <__fp_split3>
     d94:	58 f3       	brcs	.-42     	; 0xd6c <__addsf3+0xc>
     d96:	ba 17       	cp	r27, r26
     d98:	62 07       	cpc	r22, r18
     d9a:	73 07       	cpc	r23, r19
     d9c:	84 07       	cpc	r24, r20
     d9e:	95 07       	cpc	r25, r21
     da0:	20 f0       	brcs	.+8      	; 0xdaa <__addsf3x+0x1c>
     da2:	79 f4       	brne	.+30     	; 0xdc2 <__addsf3x+0x34>
     da4:	a6 f5       	brtc	.+104    	; 0xe0e <__addsf3x+0x80>
     da6:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_zero>
     daa:	0e f4       	brtc	.+2      	; 0xdae <__addsf3x+0x20>
     dac:	e0 95       	com	r30
     dae:	0b 2e       	mov	r0, r27
     db0:	ba 2f       	mov	r27, r26
     db2:	a0 2d       	mov	r26, r0
     db4:	0b 01       	movw	r0, r22
     db6:	b9 01       	movw	r22, r18
     db8:	90 01       	movw	r18, r0
     dba:	0c 01       	movw	r0, r24
     dbc:	ca 01       	movw	r24, r20
     dbe:	a0 01       	movw	r20, r0
     dc0:	11 24       	eor	r1, r1
     dc2:	ff 27       	eor	r31, r31
     dc4:	59 1b       	sub	r21, r25
     dc6:	99 f0       	breq	.+38     	; 0xdee <__addsf3x+0x60>
     dc8:	59 3f       	cpi	r21, 0xF9	; 249
     dca:	50 f4       	brcc	.+20     	; 0xde0 <__addsf3x+0x52>
     dcc:	50 3e       	cpi	r21, 0xE0	; 224
     dce:	68 f1       	brcs	.+90     	; 0xe2a <__addsf3x+0x9c>
     dd0:	1a 16       	cp	r1, r26
     dd2:	f0 40       	sbci	r31, 0x00	; 0
     dd4:	a2 2f       	mov	r26, r18
     dd6:	23 2f       	mov	r18, r19
     dd8:	34 2f       	mov	r19, r20
     dda:	44 27       	eor	r20, r20
     ddc:	58 5f       	subi	r21, 0xF8	; 248
     dde:	f3 cf       	rjmp	.-26     	; 0xdc6 <__addsf3x+0x38>
     de0:	46 95       	lsr	r20
     de2:	37 95       	ror	r19
     de4:	27 95       	ror	r18
     de6:	a7 95       	ror	r26
     de8:	f0 40       	sbci	r31, 0x00	; 0
     dea:	53 95       	inc	r21
     dec:	c9 f7       	brne	.-14     	; 0xde0 <__addsf3x+0x52>
     dee:	7e f4       	brtc	.+30     	; 0xe0e <__addsf3x+0x80>
     df0:	1f 16       	cp	r1, r31
     df2:	ba 0b       	sbc	r27, r26
     df4:	62 0b       	sbc	r22, r18
     df6:	73 0b       	sbc	r23, r19
     df8:	84 0b       	sbc	r24, r20
     dfa:	ba f0       	brmi	.+46     	; 0xe2a <__addsf3x+0x9c>
     dfc:	91 50       	subi	r25, 0x01	; 1
     dfe:	a1 f0       	breq	.+40     	; 0xe28 <__addsf3x+0x9a>
     e00:	ff 0f       	add	r31, r31
     e02:	bb 1f       	adc	r27, r27
     e04:	66 1f       	adc	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	88 1f       	adc	r24, r24
     e0a:	c2 f7       	brpl	.-16     	; 0xdfc <__addsf3x+0x6e>
     e0c:	0e c0       	rjmp	.+28     	; 0xe2a <__addsf3x+0x9c>
     e0e:	ba 0f       	add	r27, r26
     e10:	62 1f       	adc	r22, r18
     e12:	73 1f       	adc	r23, r19
     e14:	84 1f       	adc	r24, r20
     e16:	48 f4       	brcc	.+18     	; 0xe2a <__addsf3x+0x9c>
     e18:	87 95       	ror	r24
     e1a:	77 95       	ror	r23
     e1c:	67 95       	ror	r22
     e1e:	b7 95       	ror	r27
     e20:	f7 95       	ror	r31
     e22:	9e 3f       	cpi	r25, 0xFE	; 254
     e24:	08 f0       	brcs	.+2      	; 0xe28 <__addsf3x+0x9a>
     e26:	b0 cf       	rjmp	.-160    	; 0xd88 <__addsf3+0x28>
     e28:	93 95       	inc	r25
     e2a:	88 0f       	add	r24, r24
     e2c:	08 f0       	brcs	.+2      	; 0xe30 <__addsf3x+0xa2>
     e2e:	99 27       	eor	r25, r25
     e30:	ee 0f       	add	r30, r30
     e32:	97 95       	ror	r25
     e34:	87 95       	ror	r24
     e36:	08 95       	ret

00000e38 <__divsf3>:
     e38:	0e 94 30 07 	call	0xe60	; 0xe60 <__divsf3x>
     e3c:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_round>
     e40:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_pscB>
     e44:	58 f0       	brcs	.+22     	; 0xe5c <__divsf3+0x24>
     e46:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_pscA>
     e4a:	40 f0       	brcs	.+16     	; 0xe5c <__divsf3+0x24>
     e4c:	29 f4       	brne	.+10     	; 0xe58 <__divsf3+0x20>
     e4e:	5f 3f       	cpi	r21, 0xFF	; 255
     e50:	29 f0       	breq	.+10     	; 0xe5c <__divsf3+0x24>
     e52:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_inf>
     e56:	51 11       	cpse	r21, r1
     e58:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_szero>
     e5c:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_nan>

00000e60 <__divsf3x>:
     e60:	0e 94 29 08 	call	0x1052	; 0x1052 <__fp_split3>
     e64:	68 f3       	brcs	.-38     	; 0xe40 <__divsf3+0x8>

00000e66 <__divsf3_pse>:
     e66:	99 23       	and	r25, r25
     e68:	b1 f3       	breq	.-20     	; 0xe56 <__divsf3+0x1e>
     e6a:	55 23       	and	r21, r21
     e6c:	91 f3       	breq	.-28     	; 0xe52 <__divsf3+0x1a>
     e6e:	95 1b       	sub	r25, r21
     e70:	55 0b       	sbc	r21, r21
     e72:	bb 27       	eor	r27, r27
     e74:	aa 27       	eor	r26, r26
     e76:	62 17       	cp	r22, r18
     e78:	73 07       	cpc	r23, r19
     e7a:	84 07       	cpc	r24, r20
     e7c:	38 f0       	brcs	.+14     	; 0xe8c <__divsf3_pse+0x26>
     e7e:	9f 5f       	subi	r25, 0xFF	; 255
     e80:	5f 4f       	sbci	r21, 0xFF	; 255
     e82:	22 0f       	add	r18, r18
     e84:	33 1f       	adc	r19, r19
     e86:	44 1f       	adc	r20, r20
     e88:	aa 1f       	adc	r26, r26
     e8a:	a9 f3       	breq	.-22     	; 0xe76 <__divsf3_pse+0x10>
     e8c:	35 d0       	rcall	.+106    	; 0xef8 <__divsf3_pse+0x92>
     e8e:	0e 2e       	mov	r0, r30
     e90:	3a f0       	brmi	.+14     	; 0xea0 <__divsf3_pse+0x3a>
     e92:	e0 e8       	ldi	r30, 0x80	; 128
     e94:	32 d0       	rcall	.+100    	; 0xefa <__divsf3_pse+0x94>
     e96:	91 50       	subi	r25, 0x01	; 1
     e98:	50 40       	sbci	r21, 0x00	; 0
     e9a:	e6 95       	lsr	r30
     e9c:	00 1c       	adc	r0, r0
     e9e:	ca f7       	brpl	.-14     	; 0xe92 <__divsf3_pse+0x2c>
     ea0:	2b d0       	rcall	.+86     	; 0xef8 <__divsf3_pse+0x92>
     ea2:	fe 2f       	mov	r31, r30
     ea4:	29 d0       	rcall	.+82     	; 0xef8 <__divsf3_pse+0x92>
     ea6:	66 0f       	add	r22, r22
     ea8:	77 1f       	adc	r23, r23
     eaa:	88 1f       	adc	r24, r24
     eac:	bb 1f       	adc	r27, r27
     eae:	26 17       	cp	r18, r22
     eb0:	37 07       	cpc	r19, r23
     eb2:	48 07       	cpc	r20, r24
     eb4:	ab 07       	cpc	r26, r27
     eb6:	b0 e8       	ldi	r27, 0x80	; 128
     eb8:	09 f0       	breq	.+2      	; 0xebc <__divsf3_pse+0x56>
     eba:	bb 0b       	sbc	r27, r27
     ebc:	80 2d       	mov	r24, r0
     ebe:	bf 01       	movw	r22, r30
     ec0:	ff 27       	eor	r31, r31
     ec2:	93 58       	subi	r25, 0x83	; 131
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	3a f0       	brmi	.+14     	; 0xed6 <__divsf3_pse+0x70>
     ec8:	9e 3f       	cpi	r25, 0xFE	; 254
     eca:	51 05       	cpc	r21, r1
     ecc:	78 f0       	brcs	.+30     	; 0xeec <__divsf3_pse+0x86>
     ece:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_inf>
     ed2:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_szero>
     ed6:	5f 3f       	cpi	r21, 0xFF	; 255
     ed8:	e4 f3       	brlt	.-8      	; 0xed2 <__divsf3_pse+0x6c>
     eda:	98 3e       	cpi	r25, 0xE8	; 232
     edc:	d4 f3       	brlt	.-12     	; 0xed2 <__divsf3_pse+0x6c>
     ede:	86 95       	lsr	r24
     ee0:	77 95       	ror	r23
     ee2:	67 95       	ror	r22
     ee4:	b7 95       	ror	r27
     ee6:	f7 95       	ror	r31
     ee8:	9f 5f       	subi	r25, 0xFF	; 255
     eea:	c9 f7       	brne	.-14     	; 0xede <__divsf3_pse+0x78>
     eec:	88 0f       	add	r24, r24
     eee:	91 1d       	adc	r25, r1
     ef0:	96 95       	lsr	r25
     ef2:	87 95       	ror	r24
     ef4:	97 f9       	bld	r25, 7
     ef6:	08 95       	ret
     ef8:	e1 e0       	ldi	r30, 0x01	; 1
     efa:	66 0f       	add	r22, r22
     efc:	77 1f       	adc	r23, r23
     efe:	88 1f       	adc	r24, r24
     f00:	bb 1f       	adc	r27, r27
     f02:	62 17       	cp	r22, r18
     f04:	73 07       	cpc	r23, r19
     f06:	84 07       	cpc	r24, r20
     f08:	ba 07       	cpc	r27, r26
     f0a:	20 f0       	brcs	.+8      	; 0xf14 <__divsf3_pse+0xae>
     f0c:	62 1b       	sub	r22, r18
     f0e:	73 0b       	sbc	r23, r19
     f10:	84 0b       	sbc	r24, r20
     f12:	ba 0b       	sbc	r27, r26
     f14:	ee 1f       	adc	r30, r30
     f16:	88 f7       	brcc	.-30     	; 0xefa <__divsf3_pse+0x94>
     f18:	e0 95       	com	r30
     f1a:	08 95       	ret

00000f1c <__fixsfsi>:
     f1c:	0e 94 95 07 	call	0xf2a	; 0xf2a <__fixunssfsi>
     f20:	68 94       	set
     f22:	b1 11       	cpse	r27, r1
     f24:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_szero>
     f28:	08 95       	ret

00000f2a <__fixunssfsi>:
     f2a:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_splitA>
     f2e:	88 f0       	brcs	.+34     	; 0xf52 <__fixunssfsi+0x28>
     f30:	9f 57       	subi	r25, 0x7F	; 127
     f32:	98 f0       	brcs	.+38     	; 0xf5a <__fixunssfsi+0x30>
     f34:	b9 2f       	mov	r27, r25
     f36:	99 27       	eor	r25, r25
     f38:	b7 51       	subi	r27, 0x17	; 23
     f3a:	b0 f0       	brcs	.+44     	; 0xf68 <__fixunssfsi+0x3e>
     f3c:	e1 f0       	breq	.+56     	; 0xf76 <__fixunssfsi+0x4c>
     f3e:	66 0f       	add	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	88 1f       	adc	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	1a f0       	brmi	.+6      	; 0xf4e <__fixunssfsi+0x24>
     f48:	ba 95       	dec	r27
     f4a:	c9 f7       	brne	.-14     	; 0xf3e <__fixunssfsi+0x14>
     f4c:	14 c0       	rjmp	.+40     	; 0xf76 <__fixunssfsi+0x4c>
     f4e:	b1 30       	cpi	r27, 0x01	; 1
     f50:	91 f0       	breq	.+36     	; 0xf76 <__fixunssfsi+0x4c>
     f52:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fp_zero>
     f56:	b1 e0       	ldi	r27, 0x01	; 1
     f58:	08 95       	ret
     f5a:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_zero>
     f5e:	67 2f       	mov	r22, r23
     f60:	78 2f       	mov	r23, r24
     f62:	88 27       	eor	r24, r24
     f64:	b8 5f       	subi	r27, 0xF8	; 248
     f66:	39 f0       	breq	.+14     	; 0xf76 <__fixunssfsi+0x4c>
     f68:	b9 3f       	cpi	r27, 0xF9	; 249
     f6a:	cc f3       	brlt	.-14     	; 0xf5e <__fixunssfsi+0x34>
     f6c:	86 95       	lsr	r24
     f6e:	77 95       	ror	r23
     f70:	67 95       	ror	r22
     f72:	b3 95       	inc	r27
     f74:	d9 f7       	brne	.-10     	; 0xf6c <__fixunssfsi+0x42>
     f76:	3e f4       	brtc	.+14     	; 0xf86 <__fixunssfsi+0x5c>
     f78:	90 95       	com	r25
     f7a:	80 95       	com	r24
     f7c:	70 95       	com	r23
     f7e:	61 95       	neg	r22
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	8f 4f       	sbci	r24, 0xFF	; 255
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	08 95       	ret

00000f88 <__floatunsisf>:
     f88:	e8 94       	clt
     f8a:	09 c0       	rjmp	.+18     	; 0xf9e <__floatsisf+0x12>

00000f8c <__floatsisf>:
     f8c:	97 fb       	bst	r25, 7
     f8e:	3e f4       	brtc	.+14     	; 0xf9e <__floatsisf+0x12>
     f90:	90 95       	com	r25
     f92:	80 95       	com	r24
     f94:	70 95       	com	r23
     f96:	61 95       	neg	r22
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	99 23       	and	r25, r25
     fa0:	a9 f0       	breq	.+42     	; 0xfcc <__floatsisf+0x40>
     fa2:	f9 2f       	mov	r31, r25
     fa4:	96 e9       	ldi	r25, 0x96	; 150
     fa6:	bb 27       	eor	r27, r27
     fa8:	93 95       	inc	r25
     faa:	f6 95       	lsr	r31
     fac:	87 95       	ror	r24
     fae:	77 95       	ror	r23
     fb0:	67 95       	ror	r22
     fb2:	b7 95       	ror	r27
     fb4:	f1 11       	cpse	r31, r1
     fb6:	f8 cf       	rjmp	.-16     	; 0xfa8 <__floatsisf+0x1c>
     fb8:	fa f4       	brpl	.+62     	; 0xff8 <__floatsisf+0x6c>
     fba:	bb 0f       	add	r27, r27
     fbc:	11 f4       	brne	.+4      	; 0xfc2 <__floatsisf+0x36>
     fbe:	60 ff       	sbrs	r22, 0
     fc0:	1b c0       	rjmp	.+54     	; 0xff8 <__floatsisf+0x6c>
     fc2:	6f 5f       	subi	r22, 0xFF	; 255
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8f 4f       	sbci	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	16 c0       	rjmp	.+44     	; 0xff8 <__floatsisf+0x6c>
     fcc:	88 23       	and	r24, r24
     fce:	11 f0       	breq	.+4      	; 0xfd4 <__floatsisf+0x48>
     fd0:	96 e9       	ldi	r25, 0x96	; 150
     fd2:	11 c0       	rjmp	.+34     	; 0xff6 <__floatsisf+0x6a>
     fd4:	77 23       	and	r23, r23
     fd6:	21 f0       	breq	.+8      	; 0xfe0 <__floatsisf+0x54>
     fd8:	9e e8       	ldi	r25, 0x8E	; 142
     fda:	87 2f       	mov	r24, r23
     fdc:	76 2f       	mov	r23, r22
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__floatsisf+0x5e>
     fe0:	66 23       	and	r22, r22
     fe2:	71 f0       	breq	.+28     	; 0x1000 <__floatsisf+0x74>
     fe4:	96 e8       	ldi	r25, 0x86	; 134
     fe6:	86 2f       	mov	r24, r22
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	2a f0       	brmi	.+10     	; 0xff8 <__floatsisf+0x6c>
     fee:	9a 95       	dec	r25
     ff0:	66 0f       	add	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	da f7       	brpl	.-10     	; 0xfee <__floatsisf+0x62>
     ff8:	88 0f       	add	r24, r24
     ffa:	96 95       	lsr	r25
     ffc:	87 95       	ror	r24
     ffe:	97 f9       	bld	r25, 7
    1000:	08 95       	ret

00001002 <__fp_inf>:
    1002:	97 f9       	bld	r25, 7
    1004:	9f 67       	ori	r25, 0x7F	; 127
    1006:	80 e8       	ldi	r24, 0x80	; 128
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	08 95       	ret

0000100e <__fp_nan>:
    100e:	9f ef       	ldi	r25, 0xFF	; 255
    1010:	80 ec       	ldi	r24, 0xC0	; 192
    1012:	08 95       	ret

00001014 <__fp_pscA>:
    1014:	00 24       	eor	r0, r0
    1016:	0a 94       	dec	r0
    1018:	16 16       	cp	r1, r22
    101a:	17 06       	cpc	r1, r23
    101c:	18 06       	cpc	r1, r24
    101e:	09 06       	cpc	r0, r25
    1020:	08 95       	ret

00001022 <__fp_pscB>:
    1022:	00 24       	eor	r0, r0
    1024:	0a 94       	dec	r0
    1026:	12 16       	cp	r1, r18
    1028:	13 06       	cpc	r1, r19
    102a:	14 06       	cpc	r1, r20
    102c:	05 06       	cpc	r0, r21
    102e:	08 95       	ret

00001030 <__fp_round>:
    1030:	09 2e       	mov	r0, r25
    1032:	03 94       	inc	r0
    1034:	00 0c       	add	r0, r0
    1036:	11 f4       	brne	.+4      	; 0x103c <__fp_round+0xc>
    1038:	88 23       	and	r24, r24
    103a:	52 f0       	brmi	.+20     	; 0x1050 <__fp_round+0x20>
    103c:	bb 0f       	add	r27, r27
    103e:	40 f4       	brcc	.+16     	; 0x1050 <__fp_round+0x20>
    1040:	bf 2b       	or	r27, r31
    1042:	11 f4       	brne	.+4      	; 0x1048 <__fp_round+0x18>
    1044:	60 ff       	sbrs	r22, 0
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__fp_round+0x20>
    1048:	6f 5f       	subi	r22, 0xFF	; 255
    104a:	7f 4f       	sbci	r23, 0xFF	; 255
    104c:	8f 4f       	sbci	r24, 0xFF	; 255
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	08 95       	ret

00001052 <__fp_split3>:
    1052:	57 fd       	sbrc	r21, 7
    1054:	90 58       	subi	r25, 0x80	; 128
    1056:	44 0f       	add	r20, r20
    1058:	55 1f       	adc	r21, r21
    105a:	59 f0       	breq	.+22     	; 0x1072 <__fp_splitA+0x10>
    105c:	5f 3f       	cpi	r21, 0xFF	; 255
    105e:	71 f0       	breq	.+28     	; 0x107c <__fp_splitA+0x1a>
    1060:	47 95       	ror	r20

00001062 <__fp_splitA>:
    1062:	88 0f       	add	r24, r24
    1064:	97 fb       	bst	r25, 7
    1066:	99 1f       	adc	r25, r25
    1068:	61 f0       	breq	.+24     	; 0x1082 <__fp_splitA+0x20>
    106a:	9f 3f       	cpi	r25, 0xFF	; 255
    106c:	79 f0       	breq	.+30     	; 0x108c <__fp_splitA+0x2a>
    106e:	87 95       	ror	r24
    1070:	08 95       	ret
    1072:	12 16       	cp	r1, r18
    1074:	13 06       	cpc	r1, r19
    1076:	14 06       	cpc	r1, r20
    1078:	55 1f       	adc	r21, r21
    107a:	f2 cf       	rjmp	.-28     	; 0x1060 <__fp_split3+0xe>
    107c:	46 95       	lsr	r20
    107e:	f1 df       	rcall	.-30     	; 0x1062 <__fp_splitA>
    1080:	08 c0       	rjmp	.+16     	; 0x1092 <__fp_splitA+0x30>
    1082:	16 16       	cp	r1, r22
    1084:	17 06       	cpc	r1, r23
    1086:	18 06       	cpc	r1, r24
    1088:	99 1f       	adc	r25, r25
    108a:	f1 cf       	rjmp	.-30     	; 0x106e <__fp_splitA+0xc>
    108c:	86 95       	lsr	r24
    108e:	71 05       	cpc	r23, r1
    1090:	61 05       	cpc	r22, r1
    1092:	08 94       	sec
    1094:	08 95       	ret

00001096 <__fp_zero>:
    1096:	e8 94       	clt

00001098 <__fp_szero>:
    1098:	bb 27       	eor	r27, r27
    109a:	66 27       	eor	r22, r22
    109c:	77 27       	eor	r23, r23
    109e:	cb 01       	movw	r24, r22
    10a0:	97 f9       	bld	r25, 7
    10a2:	08 95       	ret

000010a4 <__mulsf3>:
    10a4:	0e 94 65 08 	call	0x10ca	; 0x10ca <__mulsf3x>
    10a8:	0c 94 18 08 	jmp	0x1030	; 0x1030 <__fp_round>
    10ac:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_pscA>
    10b0:	38 f0       	brcs	.+14     	; 0x10c0 <__mulsf3+0x1c>
    10b2:	0e 94 11 08 	call	0x1022	; 0x1022 <__fp_pscB>
    10b6:	20 f0       	brcs	.+8      	; 0x10c0 <__mulsf3+0x1c>
    10b8:	95 23       	and	r25, r21
    10ba:	11 f0       	breq	.+4      	; 0x10c0 <__mulsf3+0x1c>
    10bc:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_inf>
    10c0:	0c 94 07 08 	jmp	0x100e	; 0x100e <__fp_nan>
    10c4:	11 24       	eor	r1, r1
    10c6:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_szero>

000010ca <__mulsf3x>:
    10ca:	0e 94 29 08 	call	0x1052	; 0x1052 <__fp_split3>
    10ce:	70 f3       	brcs	.-36     	; 0x10ac <__mulsf3+0x8>

000010d0 <__mulsf3_pse>:
    10d0:	95 9f       	mul	r25, r21
    10d2:	c1 f3       	breq	.-16     	; 0x10c4 <__mulsf3+0x20>
    10d4:	95 0f       	add	r25, r21
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	55 1f       	adc	r21, r21
    10da:	62 9f       	mul	r22, r18
    10dc:	f0 01       	movw	r30, r0
    10de:	72 9f       	mul	r23, r18
    10e0:	bb 27       	eor	r27, r27
    10e2:	f0 0d       	add	r31, r0
    10e4:	b1 1d       	adc	r27, r1
    10e6:	63 9f       	mul	r22, r19
    10e8:	aa 27       	eor	r26, r26
    10ea:	f0 0d       	add	r31, r0
    10ec:	b1 1d       	adc	r27, r1
    10ee:	aa 1f       	adc	r26, r26
    10f0:	64 9f       	mul	r22, r20
    10f2:	66 27       	eor	r22, r22
    10f4:	b0 0d       	add	r27, r0
    10f6:	a1 1d       	adc	r26, r1
    10f8:	66 1f       	adc	r22, r22
    10fa:	82 9f       	mul	r24, r18
    10fc:	22 27       	eor	r18, r18
    10fe:	b0 0d       	add	r27, r0
    1100:	a1 1d       	adc	r26, r1
    1102:	62 1f       	adc	r22, r18
    1104:	73 9f       	mul	r23, r19
    1106:	b0 0d       	add	r27, r0
    1108:	a1 1d       	adc	r26, r1
    110a:	62 1f       	adc	r22, r18
    110c:	83 9f       	mul	r24, r19
    110e:	a0 0d       	add	r26, r0
    1110:	61 1d       	adc	r22, r1
    1112:	22 1f       	adc	r18, r18
    1114:	74 9f       	mul	r23, r20
    1116:	33 27       	eor	r19, r19
    1118:	a0 0d       	add	r26, r0
    111a:	61 1d       	adc	r22, r1
    111c:	23 1f       	adc	r18, r19
    111e:	84 9f       	mul	r24, r20
    1120:	60 0d       	add	r22, r0
    1122:	21 1d       	adc	r18, r1
    1124:	82 2f       	mov	r24, r18
    1126:	76 2f       	mov	r23, r22
    1128:	6a 2f       	mov	r22, r26
    112a:	11 24       	eor	r1, r1
    112c:	9f 57       	subi	r25, 0x7F	; 127
    112e:	50 40       	sbci	r21, 0x00	; 0
    1130:	9a f0       	brmi	.+38     	; 0x1158 <__mulsf3_pse+0x88>
    1132:	f1 f0       	breq	.+60     	; 0x1170 <__mulsf3_pse+0xa0>
    1134:	88 23       	and	r24, r24
    1136:	4a f0       	brmi	.+18     	; 0x114a <__mulsf3_pse+0x7a>
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	bb 1f       	adc	r27, r27
    113e:	66 1f       	adc	r22, r22
    1140:	77 1f       	adc	r23, r23
    1142:	88 1f       	adc	r24, r24
    1144:	91 50       	subi	r25, 0x01	; 1
    1146:	50 40       	sbci	r21, 0x00	; 0
    1148:	a9 f7       	brne	.-22     	; 0x1134 <__mulsf3_pse+0x64>
    114a:	9e 3f       	cpi	r25, 0xFE	; 254
    114c:	51 05       	cpc	r21, r1
    114e:	80 f0       	brcs	.+32     	; 0x1170 <__mulsf3_pse+0xa0>
    1150:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__fp_inf>
    1154:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_szero>
    1158:	5f 3f       	cpi	r21, 0xFF	; 255
    115a:	e4 f3       	brlt	.-8      	; 0x1154 <__mulsf3_pse+0x84>
    115c:	98 3e       	cpi	r25, 0xE8	; 232
    115e:	d4 f3       	brlt	.-12     	; 0x1154 <__mulsf3_pse+0x84>
    1160:	86 95       	lsr	r24
    1162:	77 95       	ror	r23
    1164:	67 95       	ror	r22
    1166:	b7 95       	ror	r27
    1168:	f7 95       	ror	r31
    116a:	e7 95       	ror	r30
    116c:	9f 5f       	subi	r25, 0xFF	; 255
    116e:	c1 f7       	brne	.-16     	; 0x1160 <__mulsf3_pse+0x90>
    1170:	fe 2b       	or	r31, r30
    1172:	88 0f       	add	r24, r24
    1174:	91 1d       	adc	r25, r1
    1176:	96 95       	lsr	r25
    1178:	87 95       	ror	r24
    117a:	97 f9       	bld	r25, 7
    117c:	08 95       	ret

0000117e <round>:
    117e:	0e 94 31 08 	call	0x1062	; 0x1062 <__fp_splitA>
    1182:	e8 f0       	brcs	.+58     	; 0x11be <round+0x40>
    1184:	9e 37       	cpi	r25, 0x7E	; 126
    1186:	e8 f0       	brcs	.+58     	; 0x11c2 <round+0x44>
    1188:	96 39       	cpi	r25, 0x96	; 150
    118a:	b8 f4       	brcc	.+46     	; 0x11ba <round+0x3c>
    118c:	9e 38       	cpi	r25, 0x8E	; 142
    118e:	48 f4       	brcc	.+18     	; 0x11a2 <round+0x24>
    1190:	67 2f       	mov	r22, r23
    1192:	78 2f       	mov	r23, r24
    1194:	88 27       	eor	r24, r24
    1196:	98 5f       	subi	r25, 0xF8	; 248
    1198:	f9 cf       	rjmp	.-14     	; 0x118c <round+0xe>
    119a:	86 95       	lsr	r24
    119c:	77 95       	ror	r23
    119e:	67 95       	ror	r22
    11a0:	93 95       	inc	r25
    11a2:	95 39       	cpi	r25, 0x95	; 149
    11a4:	d0 f3       	brcs	.-12     	; 0x119a <round+0x1c>
    11a6:	b6 2f       	mov	r27, r22
    11a8:	b1 70       	andi	r27, 0x01	; 1
    11aa:	6b 0f       	add	r22, r27
    11ac:	71 1d       	adc	r23, r1
    11ae:	81 1d       	adc	r24, r1
    11b0:	20 f4       	brcc	.+8      	; 0x11ba <round+0x3c>
    11b2:	87 95       	ror	r24
    11b4:	77 95       	ror	r23
    11b6:	67 95       	ror	r22
    11b8:	93 95       	inc	r25
    11ba:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <__fp_mintl>
    11be:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__fp_mpack>
    11c2:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__fp_szero>

000011c6 <__fp_mintl>:
    11c6:	88 23       	and	r24, r24
    11c8:	71 f4       	brne	.+28     	; 0x11e6 <__fp_mintl+0x20>
    11ca:	77 23       	and	r23, r23
    11cc:	21 f0       	breq	.+8      	; 0x11d6 <__fp_mintl+0x10>
    11ce:	98 50       	subi	r25, 0x08	; 8
    11d0:	87 2b       	or	r24, r23
    11d2:	76 2f       	mov	r23, r22
    11d4:	07 c0       	rjmp	.+14     	; 0x11e4 <__fp_mintl+0x1e>
    11d6:	66 23       	and	r22, r22
    11d8:	11 f4       	brne	.+4      	; 0x11de <__fp_mintl+0x18>
    11da:	99 27       	eor	r25, r25
    11dc:	0d c0       	rjmp	.+26     	; 0x11f8 <__fp_mintl+0x32>
    11de:	90 51       	subi	r25, 0x10	; 16
    11e0:	86 2b       	or	r24, r22
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	2a f0       	brmi	.+10     	; 0x11f2 <__fp_mintl+0x2c>
    11e8:	9a 95       	dec	r25
    11ea:	66 0f       	add	r22, r22
    11ec:	77 1f       	adc	r23, r23
    11ee:	88 1f       	adc	r24, r24
    11f0:	da f7       	brpl	.-10     	; 0x11e8 <__fp_mintl+0x22>
    11f2:	88 0f       	add	r24, r24
    11f4:	96 95       	lsr	r25
    11f6:	87 95       	ror	r24
    11f8:	97 f9       	bld	r25, 7
    11fa:	08 95       	ret

000011fc <__fp_mpack>:
    11fc:	9f 3f       	cpi	r25, 0xFF	; 255
    11fe:	31 f0       	breq	.+12     	; 0x120c <__fp_mpack_finite+0xc>

00001200 <__fp_mpack_finite>:
    1200:	91 50       	subi	r25, 0x01	; 1
    1202:	20 f4       	brcc	.+8      	; 0x120c <__fp_mpack_finite+0xc>
    1204:	87 95       	ror	r24
    1206:	77 95       	ror	r23
    1208:	67 95       	ror	r22
    120a:	b7 95       	ror	r27
    120c:	88 0f       	add	r24, r24
    120e:	91 1d       	adc	r25, r1
    1210:	96 95       	lsr	r25
    1212:	87 95       	ror	r24
    1214:	97 f9       	bld	r25, 7
    1216:	08 95       	ret

00001218 <__divmodhi4>:
    1218:	97 fb       	bst	r25, 7
    121a:	07 2e       	mov	r0, r23
    121c:	16 f4       	brtc	.+4      	; 0x1222 <__divmodhi4+0xa>
    121e:	00 94       	com	r0
    1220:	07 d0       	rcall	.+14     	; 0x1230 <__divmodhi4_neg1>
    1222:	77 fd       	sbrc	r23, 7
    1224:	09 d0       	rcall	.+18     	; 0x1238 <__divmodhi4_neg2>
    1226:	0e 94 20 09 	call	0x1240	; 0x1240 <__udivmodhi4>
    122a:	07 fc       	sbrc	r0, 7
    122c:	05 d0       	rcall	.+10     	; 0x1238 <__divmodhi4_neg2>
    122e:	3e f4       	brtc	.+14     	; 0x123e <__divmodhi4_exit>

00001230 <__divmodhi4_neg1>:
    1230:	90 95       	com	r25
    1232:	81 95       	neg	r24
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	08 95       	ret

00001238 <__divmodhi4_neg2>:
    1238:	70 95       	com	r23
    123a:	61 95       	neg	r22
    123c:	7f 4f       	sbci	r23, 0xFF	; 255

0000123e <__divmodhi4_exit>:
    123e:	08 95       	ret

00001240 <__udivmodhi4>:
    1240:	aa 1b       	sub	r26, r26
    1242:	bb 1b       	sub	r27, r27
    1244:	51 e1       	ldi	r21, 0x11	; 17
    1246:	07 c0       	rjmp	.+14     	; 0x1256 <__udivmodhi4_ep>

00001248 <__udivmodhi4_loop>:
    1248:	aa 1f       	adc	r26, r26
    124a:	bb 1f       	adc	r27, r27
    124c:	a6 17       	cp	r26, r22
    124e:	b7 07       	cpc	r27, r23
    1250:	10 f0       	brcs	.+4      	; 0x1256 <__udivmodhi4_ep>
    1252:	a6 1b       	sub	r26, r22
    1254:	b7 0b       	sbc	r27, r23

00001256 <__udivmodhi4_ep>:
    1256:	88 1f       	adc	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	5a 95       	dec	r21
    125c:	a9 f7       	brne	.-22     	; 0x1248 <__udivmodhi4_loop>
    125e:	80 95       	com	r24
    1260:	90 95       	com	r25
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	08 95       	ret

00001268 <printf>:
    1268:	a0 e0       	ldi	r26, 0x00	; 0
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ea e3       	ldi	r30, 0x3A	; 58
    126e:	f9 e0       	ldi	r31, 0x09	; 9
    1270:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__prologue_saves__+0x20>
    1274:	ae 01       	movw	r20, r28
    1276:	4b 5f       	subi	r20, 0xFB	; 251
    1278:	5f 4f       	sbci	r21, 0xFF	; 255
    127a:	fa 01       	movw	r30, r20
    127c:	61 91       	ld	r22, Z+
    127e:	71 91       	ld	r23, Z+
    1280:	af 01       	movw	r20, r30
    1282:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__iob+0x2>
    1286:	90 91 bd 00 	lds	r25, 0x00BD	; 0x8000bd <__iob+0x3>
    128a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <vfprintf>
    128e:	e2 e0       	ldi	r30, 0x02	; 2
    1290:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <__epilogue_restores__+0x20>

00001294 <puts>:
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	e0 91 bc 00 	lds	r30, 0x00BC	; 0x8000bc <__iob+0x2>
    12a0:	f0 91 bd 00 	lds	r31, 0x00BD	; 0x8000bd <__iob+0x3>
    12a4:	23 81       	ldd	r18, Z+3	; 0x03
    12a6:	21 ff       	sbrs	r18, 1
    12a8:	1b c0       	rjmp	.+54     	; 0x12e0 <puts+0x4c>
    12aa:	8c 01       	movw	r16, r24
    12ac:	d0 e0       	ldi	r29, 0x00	; 0
    12ae:	c0 e0       	ldi	r28, 0x00	; 0
    12b0:	f8 01       	movw	r30, r16
    12b2:	81 91       	ld	r24, Z+
    12b4:	8f 01       	movw	r16, r30
    12b6:	60 91 bc 00 	lds	r22, 0x00BC	; 0x8000bc <__iob+0x2>
    12ba:	70 91 bd 00 	lds	r23, 0x00BD	; 0x8000bd <__iob+0x3>
    12be:	db 01       	movw	r26, r22
    12c0:	18 96       	adiw	r26, 0x08	; 8
    12c2:	ed 91       	ld	r30, X+
    12c4:	fc 91       	ld	r31, X
    12c6:	19 97       	sbiw	r26, 0x09	; 9
    12c8:	88 23       	and	r24, r24
    12ca:	31 f0       	breq	.+12     	; 0x12d8 <puts+0x44>
    12cc:	09 95       	icall
    12ce:	89 2b       	or	r24, r25
    12d0:	79 f3       	breq	.-34     	; 0x12b0 <puts+0x1c>
    12d2:	df ef       	ldi	r29, 0xFF	; 255
    12d4:	cf ef       	ldi	r28, 0xFF	; 255
    12d6:	ec cf       	rjmp	.-40     	; 0x12b0 <puts+0x1c>
    12d8:	8a e0       	ldi	r24, 0x0A	; 10
    12da:	09 95       	icall
    12dc:	89 2b       	or	r24, r25
    12de:	19 f0       	breq	.+6      	; 0x12e6 <puts+0x52>
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	9f ef       	ldi	r25, 0xFF	; 255
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <puts+0x56>
    12e6:	8d 2f       	mov	r24, r29
    12e8:	9c 2f       	mov	r25, r28
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	08 95       	ret

000012f4 <vfprintf>:
    12f4:	ab e0       	ldi	r26, 0x0B	; 11
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e0 e8       	ldi	r30, 0x80	; 128
    12fa:	f9 e0       	ldi	r31, 0x09	; 9
    12fc:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__prologue_saves__>
    1300:	6c 01       	movw	r12, r24
    1302:	7b 01       	movw	r14, r22
    1304:	8a 01       	movw	r16, r20
    1306:	fc 01       	movw	r30, r24
    1308:	17 82       	std	Z+7, r1	; 0x07
    130a:	16 82       	std	Z+6, r1	; 0x06
    130c:	83 81       	ldd	r24, Z+3	; 0x03
    130e:	81 ff       	sbrs	r24, 1
    1310:	cc c1       	rjmp	.+920    	; 0x16aa <vfprintf+0x3b6>
    1312:	ce 01       	movw	r24, r28
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	3c 01       	movw	r6, r24
    1318:	f6 01       	movw	r30, r12
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	f7 01       	movw	r30, r14
    131e:	93 fd       	sbrc	r25, 3
    1320:	85 91       	lpm	r24, Z+
    1322:	93 ff       	sbrs	r25, 3
    1324:	81 91       	ld	r24, Z+
    1326:	7f 01       	movw	r14, r30
    1328:	88 23       	and	r24, r24
    132a:	09 f4       	brne	.+2      	; 0x132e <vfprintf+0x3a>
    132c:	ba c1       	rjmp	.+884    	; 0x16a2 <vfprintf+0x3ae>
    132e:	85 32       	cpi	r24, 0x25	; 37
    1330:	39 f4       	brne	.+14     	; 0x1340 <vfprintf+0x4c>
    1332:	93 fd       	sbrc	r25, 3
    1334:	85 91       	lpm	r24, Z+
    1336:	93 ff       	sbrs	r25, 3
    1338:	81 91       	ld	r24, Z+
    133a:	7f 01       	movw	r14, r30
    133c:	85 32       	cpi	r24, 0x25	; 37
    133e:	29 f4       	brne	.+10     	; 0x134a <vfprintf+0x56>
    1340:	b6 01       	movw	r22, r12
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <fputc>
    1348:	e7 cf       	rjmp	.-50     	; 0x1318 <vfprintf+0x24>
    134a:	91 2c       	mov	r9, r1
    134c:	21 2c       	mov	r2, r1
    134e:	31 2c       	mov	r3, r1
    1350:	ff e1       	ldi	r31, 0x1F	; 31
    1352:	f3 15       	cp	r31, r3
    1354:	d8 f0       	brcs	.+54     	; 0x138c <vfprintf+0x98>
    1356:	8b 32       	cpi	r24, 0x2B	; 43
    1358:	79 f0       	breq	.+30     	; 0x1378 <vfprintf+0x84>
    135a:	38 f4       	brcc	.+14     	; 0x136a <vfprintf+0x76>
    135c:	80 32       	cpi	r24, 0x20	; 32
    135e:	79 f0       	breq	.+30     	; 0x137e <vfprintf+0x8a>
    1360:	83 32       	cpi	r24, 0x23	; 35
    1362:	a1 f4       	brne	.+40     	; 0x138c <vfprintf+0x98>
    1364:	23 2d       	mov	r18, r3
    1366:	20 61       	ori	r18, 0x10	; 16
    1368:	1d c0       	rjmp	.+58     	; 0x13a4 <vfprintf+0xb0>
    136a:	8d 32       	cpi	r24, 0x2D	; 45
    136c:	61 f0       	breq	.+24     	; 0x1386 <vfprintf+0x92>
    136e:	80 33       	cpi	r24, 0x30	; 48
    1370:	69 f4       	brne	.+26     	; 0x138c <vfprintf+0x98>
    1372:	23 2d       	mov	r18, r3
    1374:	21 60       	ori	r18, 0x01	; 1
    1376:	16 c0       	rjmp	.+44     	; 0x13a4 <vfprintf+0xb0>
    1378:	83 2d       	mov	r24, r3
    137a:	82 60       	ori	r24, 0x02	; 2
    137c:	38 2e       	mov	r3, r24
    137e:	e3 2d       	mov	r30, r3
    1380:	e4 60       	ori	r30, 0x04	; 4
    1382:	3e 2e       	mov	r3, r30
    1384:	2a c0       	rjmp	.+84     	; 0x13da <vfprintf+0xe6>
    1386:	f3 2d       	mov	r31, r3
    1388:	f8 60       	ori	r31, 0x08	; 8
    138a:	1d c0       	rjmp	.+58     	; 0x13c6 <vfprintf+0xd2>
    138c:	37 fc       	sbrc	r3, 7
    138e:	2d c0       	rjmp	.+90     	; 0x13ea <vfprintf+0xf6>
    1390:	20 ed       	ldi	r18, 0xD0	; 208
    1392:	28 0f       	add	r18, r24
    1394:	2a 30       	cpi	r18, 0x0A	; 10
    1396:	40 f0       	brcs	.+16     	; 0x13a8 <vfprintf+0xb4>
    1398:	8e 32       	cpi	r24, 0x2E	; 46
    139a:	b9 f4       	brne	.+46     	; 0x13ca <vfprintf+0xd6>
    139c:	36 fc       	sbrc	r3, 6
    139e:	81 c1       	rjmp	.+770    	; 0x16a2 <vfprintf+0x3ae>
    13a0:	23 2d       	mov	r18, r3
    13a2:	20 64       	ori	r18, 0x40	; 64
    13a4:	32 2e       	mov	r3, r18
    13a6:	19 c0       	rjmp	.+50     	; 0x13da <vfprintf+0xe6>
    13a8:	36 fe       	sbrs	r3, 6
    13aa:	06 c0       	rjmp	.+12     	; 0x13b8 <vfprintf+0xc4>
    13ac:	8a e0       	ldi	r24, 0x0A	; 10
    13ae:	98 9e       	mul	r9, r24
    13b0:	20 0d       	add	r18, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	92 2e       	mov	r9, r18
    13b6:	11 c0       	rjmp	.+34     	; 0x13da <vfprintf+0xe6>
    13b8:	ea e0       	ldi	r30, 0x0A	; 10
    13ba:	2e 9e       	mul	r2, r30
    13bc:	20 0d       	add	r18, r0
    13be:	11 24       	eor	r1, r1
    13c0:	22 2e       	mov	r2, r18
    13c2:	f3 2d       	mov	r31, r3
    13c4:	f0 62       	ori	r31, 0x20	; 32
    13c6:	3f 2e       	mov	r3, r31
    13c8:	08 c0       	rjmp	.+16     	; 0x13da <vfprintf+0xe6>
    13ca:	8c 36       	cpi	r24, 0x6C	; 108
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <vfprintf+0xe2>
    13ce:	83 2d       	mov	r24, r3
    13d0:	80 68       	ori	r24, 0x80	; 128
    13d2:	38 2e       	mov	r3, r24
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <vfprintf+0xe6>
    13d6:	88 36       	cpi	r24, 0x68	; 104
    13d8:	41 f4       	brne	.+16     	; 0x13ea <vfprintf+0xf6>
    13da:	f7 01       	movw	r30, r14
    13dc:	93 fd       	sbrc	r25, 3
    13de:	85 91       	lpm	r24, Z+
    13e0:	93 ff       	sbrs	r25, 3
    13e2:	81 91       	ld	r24, Z+
    13e4:	7f 01       	movw	r14, r30
    13e6:	81 11       	cpse	r24, r1
    13e8:	b3 cf       	rjmp	.-154    	; 0x1350 <vfprintf+0x5c>
    13ea:	98 2f       	mov	r25, r24
    13ec:	9f 7d       	andi	r25, 0xDF	; 223
    13ee:	95 54       	subi	r25, 0x45	; 69
    13f0:	93 30       	cpi	r25, 0x03	; 3
    13f2:	28 f4       	brcc	.+10     	; 0x13fe <vfprintf+0x10a>
    13f4:	0c 5f       	subi	r16, 0xFC	; 252
    13f6:	1f 4f       	sbci	r17, 0xFF	; 255
    13f8:	9f e3       	ldi	r25, 0x3F	; 63
    13fa:	99 83       	std	Y+1, r25	; 0x01
    13fc:	0d c0       	rjmp	.+26     	; 0x1418 <vfprintf+0x124>
    13fe:	83 36       	cpi	r24, 0x63	; 99
    1400:	31 f0       	breq	.+12     	; 0x140e <vfprintf+0x11a>
    1402:	83 37       	cpi	r24, 0x73	; 115
    1404:	71 f0       	breq	.+28     	; 0x1422 <vfprintf+0x12e>
    1406:	83 35       	cpi	r24, 0x53	; 83
    1408:	09 f0       	breq	.+2      	; 0x140c <vfprintf+0x118>
    140a:	59 c0       	rjmp	.+178    	; 0x14be <vfprintf+0x1ca>
    140c:	21 c0       	rjmp	.+66     	; 0x1450 <vfprintf+0x15c>
    140e:	f8 01       	movw	r30, r16
    1410:	80 81       	ld	r24, Z
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	0e 5f       	subi	r16, 0xFE	; 254
    1416:	1f 4f       	sbci	r17, 0xFF	; 255
    1418:	88 24       	eor	r8, r8
    141a:	83 94       	inc	r8
    141c:	91 2c       	mov	r9, r1
    141e:	53 01       	movw	r10, r6
    1420:	13 c0       	rjmp	.+38     	; 0x1448 <vfprintf+0x154>
    1422:	28 01       	movw	r4, r16
    1424:	f2 e0       	ldi	r31, 0x02	; 2
    1426:	4f 0e       	add	r4, r31
    1428:	51 1c       	adc	r5, r1
    142a:	f8 01       	movw	r30, r16
    142c:	a0 80       	ld	r10, Z
    142e:	b1 80       	ldd	r11, Z+1	; 0x01
    1430:	36 fe       	sbrs	r3, 6
    1432:	03 c0       	rjmp	.+6      	; 0x143a <vfprintf+0x146>
    1434:	69 2d       	mov	r22, r9
    1436:	70 e0       	ldi	r23, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <vfprintf+0x14a>
    143a:	6f ef       	ldi	r22, 0xFF	; 255
    143c:	7f ef       	ldi	r23, 0xFF	; 255
    143e:	c5 01       	movw	r24, r10
    1440:	0e 94 66 0b 	call	0x16cc	; 0x16cc <strnlen>
    1444:	4c 01       	movw	r8, r24
    1446:	82 01       	movw	r16, r4
    1448:	f3 2d       	mov	r31, r3
    144a:	ff 77       	andi	r31, 0x7F	; 127
    144c:	3f 2e       	mov	r3, r31
    144e:	16 c0       	rjmp	.+44     	; 0x147c <vfprintf+0x188>
    1450:	28 01       	movw	r4, r16
    1452:	22 e0       	ldi	r18, 0x02	; 2
    1454:	42 0e       	add	r4, r18
    1456:	51 1c       	adc	r5, r1
    1458:	f8 01       	movw	r30, r16
    145a:	a0 80       	ld	r10, Z
    145c:	b1 80       	ldd	r11, Z+1	; 0x01
    145e:	36 fe       	sbrs	r3, 6
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <vfprintf+0x174>
    1462:	69 2d       	mov	r22, r9
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <vfprintf+0x178>
    1468:	6f ef       	ldi	r22, 0xFF	; 255
    146a:	7f ef       	ldi	r23, 0xFF	; 255
    146c:	c5 01       	movw	r24, r10
    146e:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <strnlen_P>
    1472:	4c 01       	movw	r8, r24
    1474:	f3 2d       	mov	r31, r3
    1476:	f0 68       	ori	r31, 0x80	; 128
    1478:	3f 2e       	mov	r3, r31
    147a:	82 01       	movw	r16, r4
    147c:	33 fc       	sbrc	r3, 3
    147e:	1b c0       	rjmp	.+54     	; 0x14b6 <vfprintf+0x1c2>
    1480:	82 2d       	mov	r24, r2
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	88 16       	cp	r8, r24
    1486:	99 06       	cpc	r9, r25
    1488:	b0 f4       	brcc	.+44     	; 0x14b6 <vfprintf+0x1c2>
    148a:	b6 01       	movw	r22, r12
    148c:	80 e2       	ldi	r24, 0x20	; 32
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <fputc>
    1494:	2a 94       	dec	r2
    1496:	f4 cf       	rjmp	.-24     	; 0x1480 <vfprintf+0x18c>
    1498:	f5 01       	movw	r30, r10
    149a:	37 fc       	sbrc	r3, 7
    149c:	85 91       	lpm	r24, Z+
    149e:	37 fe       	sbrs	r3, 7
    14a0:	81 91       	ld	r24, Z+
    14a2:	5f 01       	movw	r10, r30
    14a4:	b6 01       	movw	r22, r12
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <fputc>
    14ac:	21 10       	cpse	r2, r1
    14ae:	2a 94       	dec	r2
    14b0:	21 e0       	ldi	r18, 0x01	; 1
    14b2:	82 1a       	sub	r8, r18
    14b4:	91 08       	sbc	r9, r1
    14b6:	81 14       	cp	r8, r1
    14b8:	91 04       	cpc	r9, r1
    14ba:	71 f7       	brne	.-36     	; 0x1498 <vfprintf+0x1a4>
    14bc:	e8 c0       	rjmp	.+464    	; 0x168e <vfprintf+0x39a>
    14be:	84 36       	cpi	r24, 0x64	; 100
    14c0:	11 f0       	breq	.+4      	; 0x14c6 <vfprintf+0x1d2>
    14c2:	89 36       	cpi	r24, 0x69	; 105
    14c4:	41 f5       	brne	.+80     	; 0x1516 <vfprintf+0x222>
    14c6:	f8 01       	movw	r30, r16
    14c8:	37 fe       	sbrs	r3, 7
    14ca:	07 c0       	rjmp	.+14     	; 0x14da <vfprintf+0x1e6>
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	0c 5f       	subi	r16, 0xFC	; 252
    14d6:	1f 4f       	sbci	r17, 0xFF	; 255
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <vfprintf+0x1f6>
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	07 2e       	mov	r0, r23
    14e0:	00 0c       	add	r0, r0
    14e2:	88 0b       	sbc	r24, r24
    14e4:	99 0b       	sbc	r25, r25
    14e6:	0e 5f       	subi	r16, 0xFE	; 254
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	f3 2d       	mov	r31, r3
    14ec:	ff 76       	andi	r31, 0x6F	; 111
    14ee:	3f 2e       	mov	r3, r31
    14f0:	97 ff       	sbrs	r25, 7
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <vfprintf+0x212>
    14f4:	90 95       	com	r25
    14f6:	80 95       	com	r24
    14f8:	70 95       	com	r23
    14fa:	61 95       	neg	r22
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	f0 68       	ori	r31, 0x80	; 128
    1504:	3f 2e       	mov	r3, r31
    1506:	2a e0       	ldi	r18, 0x0A	; 10
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	a3 01       	movw	r20, r6
    150c:	0e 94 ad 0b 	call	0x175a	; 0x175a <__ultoa_invert>
    1510:	88 2e       	mov	r8, r24
    1512:	86 18       	sub	r8, r6
    1514:	45 c0       	rjmp	.+138    	; 0x15a0 <vfprintf+0x2ac>
    1516:	85 37       	cpi	r24, 0x75	; 117
    1518:	31 f4       	brne	.+12     	; 0x1526 <vfprintf+0x232>
    151a:	23 2d       	mov	r18, r3
    151c:	2f 7e       	andi	r18, 0xEF	; 239
    151e:	b2 2e       	mov	r11, r18
    1520:	2a e0       	ldi	r18, 0x0A	; 10
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	25 c0       	rjmp	.+74     	; 0x1570 <vfprintf+0x27c>
    1526:	93 2d       	mov	r25, r3
    1528:	99 7f       	andi	r25, 0xF9	; 249
    152a:	b9 2e       	mov	r11, r25
    152c:	8f 36       	cpi	r24, 0x6F	; 111
    152e:	c1 f0       	breq	.+48     	; 0x1560 <vfprintf+0x26c>
    1530:	18 f4       	brcc	.+6      	; 0x1538 <vfprintf+0x244>
    1532:	88 35       	cpi	r24, 0x58	; 88
    1534:	79 f0       	breq	.+30     	; 0x1554 <vfprintf+0x260>
    1536:	b5 c0       	rjmp	.+362    	; 0x16a2 <vfprintf+0x3ae>
    1538:	80 37       	cpi	r24, 0x70	; 112
    153a:	19 f0       	breq	.+6      	; 0x1542 <vfprintf+0x24e>
    153c:	88 37       	cpi	r24, 0x78	; 120
    153e:	21 f0       	breq	.+8      	; 0x1548 <vfprintf+0x254>
    1540:	b0 c0       	rjmp	.+352    	; 0x16a2 <vfprintf+0x3ae>
    1542:	e9 2f       	mov	r30, r25
    1544:	e0 61       	ori	r30, 0x10	; 16
    1546:	be 2e       	mov	r11, r30
    1548:	b4 fe       	sbrs	r11, 4
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <vfprintf+0x272>
    154c:	fb 2d       	mov	r31, r11
    154e:	f4 60       	ori	r31, 0x04	; 4
    1550:	bf 2e       	mov	r11, r31
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <vfprintf+0x272>
    1554:	34 fe       	sbrs	r3, 4
    1556:	0a c0       	rjmp	.+20     	; 0x156c <vfprintf+0x278>
    1558:	29 2f       	mov	r18, r25
    155a:	26 60       	ori	r18, 0x06	; 6
    155c:	b2 2e       	mov	r11, r18
    155e:	06 c0       	rjmp	.+12     	; 0x156c <vfprintf+0x278>
    1560:	28 e0       	ldi	r18, 0x08	; 8
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	05 c0       	rjmp	.+10     	; 0x1570 <vfprintf+0x27c>
    1566:	20 e1       	ldi	r18, 0x10	; 16
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <vfprintf+0x27c>
    156c:	20 e1       	ldi	r18, 0x10	; 16
    156e:	32 e0       	ldi	r19, 0x02	; 2
    1570:	f8 01       	movw	r30, r16
    1572:	b7 fe       	sbrs	r11, 7
    1574:	07 c0       	rjmp	.+14     	; 0x1584 <vfprintf+0x290>
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	0c 5f       	subi	r16, 0xFC	; 252
    1580:	1f 4f       	sbci	r17, 0xFF	; 255
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <vfprintf+0x29c>
    1584:	60 81       	ld	r22, Z
    1586:	71 81       	ldd	r23, Z+1	; 0x01
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 5f       	subi	r16, 0xFE	; 254
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	a3 01       	movw	r20, r6
    1592:	0e 94 ad 0b 	call	0x175a	; 0x175a <__ultoa_invert>
    1596:	88 2e       	mov	r8, r24
    1598:	86 18       	sub	r8, r6
    159a:	fb 2d       	mov	r31, r11
    159c:	ff 77       	andi	r31, 0x7F	; 127
    159e:	3f 2e       	mov	r3, r31
    15a0:	36 fe       	sbrs	r3, 6
    15a2:	0d c0       	rjmp	.+26     	; 0x15be <vfprintf+0x2ca>
    15a4:	23 2d       	mov	r18, r3
    15a6:	2e 7f       	andi	r18, 0xFE	; 254
    15a8:	a2 2e       	mov	r10, r18
    15aa:	89 14       	cp	r8, r9
    15ac:	58 f4       	brcc	.+22     	; 0x15c4 <vfprintf+0x2d0>
    15ae:	34 fe       	sbrs	r3, 4
    15b0:	0b c0       	rjmp	.+22     	; 0x15c8 <vfprintf+0x2d4>
    15b2:	32 fc       	sbrc	r3, 2
    15b4:	09 c0       	rjmp	.+18     	; 0x15c8 <vfprintf+0x2d4>
    15b6:	83 2d       	mov	r24, r3
    15b8:	8e 7e       	andi	r24, 0xEE	; 238
    15ba:	a8 2e       	mov	r10, r24
    15bc:	05 c0       	rjmp	.+10     	; 0x15c8 <vfprintf+0x2d4>
    15be:	b8 2c       	mov	r11, r8
    15c0:	a3 2c       	mov	r10, r3
    15c2:	03 c0       	rjmp	.+6      	; 0x15ca <vfprintf+0x2d6>
    15c4:	b8 2c       	mov	r11, r8
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <vfprintf+0x2d6>
    15c8:	b9 2c       	mov	r11, r9
    15ca:	a4 fe       	sbrs	r10, 4
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <vfprintf+0x2f8>
    15ce:	fe 01       	movw	r30, r28
    15d0:	e8 0d       	add	r30, r8
    15d2:	f1 1d       	adc	r31, r1
    15d4:	80 81       	ld	r24, Z
    15d6:	80 33       	cpi	r24, 0x30	; 48
    15d8:	21 f4       	brne	.+8      	; 0x15e2 <vfprintf+0x2ee>
    15da:	9a 2d       	mov	r25, r10
    15dc:	99 7e       	andi	r25, 0xE9	; 233
    15de:	a9 2e       	mov	r10, r25
    15e0:	09 c0       	rjmp	.+18     	; 0x15f4 <vfprintf+0x300>
    15e2:	a2 fe       	sbrs	r10, 2
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <vfprintf+0x2fe>
    15e6:	b3 94       	inc	r11
    15e8:	b3 94       	inc	r11
    15ea:	04 c0       	rjmp	.+8      	; 0x15f4 <vfprintf+0x300>
    15ec:	8a 2d       	mov	r24, r10
    15ee:	86 78       	andi	r24, 0x86	; 134
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <vfprintf+0x300>
    15f2:	b3 94       	inc	r11
    15f4:	a3 fc       	sbrc	r10, 3
    15f6:	11 c0       	rjmp	.+34     	; 0x161a <vfprintf+0x326>
    15f8:	a0 fe       	sbrs	r10, 0
    15fa:	06 c0       	rjmp	.+12     	; 0x1608 <vfprintf+0x314>
    15fc:	b2 14       	cp	r11, r2
    15fe:	88 f4       	brcc	.+34     	; 0x1622 <vfprintf+0x32e>
    1600:	28 0c       	add	r2, r8
    1602:	92 2c       	mov	r9, r2
    1604:	9b 18       	sub	r9, r11
    1606:	0e c0       	rjmp	.+28     	; 0x1624 <vfprintf+0x330>
    1608:	b2 14       	cp	r11, r2
    160a:	60 f4       	brcc	.+24     	; 0x1624 <vfprintf+0x330>
    160c:	b6 01       	movw	r22, r12
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <fputc>
    1616:	b3 94       	inc	r11
    1618:	f7 cf       	rjmp	.-18     	; 0x1608 <vfprintf+0x314>
    161a:	b2 14       	cp	r11, r2
    161c:	18 f4       	brcc	.+6      	; 0x1624 <vfprintf+0x330>
    161e:	2b 18       	sub	r2, r11
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <vfprintf+0x332>
    1622:	98 2c       	mov	r9, r8
    1624:	21 2c       	mov	r2, r1
    1626:	a4 fe       	sbrs	r10, 4
    1628:	10 c0       	rjmp	.+32     	; 0x164a <vfprintf+0x356>
    162a:	b6 01       	movw	r22, r12
    162c:	80 e3       	ldi	r24, 0x30	; 48
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <fputc>
    1634:	a2 fe       	sbrs	r10, 2
    1636:	17 c0       	rjmp	.+46     	; 0x1666 <vfprintf+0x372>
    1638:	a1 fc       	sbrc	r10, 1
    163a:	03 c0       	rjmp	.+6      	; 0x1642 <vfprintf+0x34e>
    163c:	88 e7       	ldi	r24, 0x78	; 120
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <vfprintf+0x352>
    1642:	88 e5       	ldi	r24, 0x58	; 88
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	b6 01       	movw	r22, r12
    1648:	0c c0       	rjmp	.+24     	; 0x1662 <vfprintf+0x36e>
    164a:	8a 2d       	mov	r24, r10
    164c:	86 78       	andi	r24, 0x86	; 134
    164e:	59 f0       	breq	.+22     	; 0x1666 <vfprintf+0x372>
    1650:	a1 fe       	sbrs	r10, 1
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <vfprintf+0x364>
    1654:	8b e2       	ldi	r24, 0x2B	; 43
    1656:	01 c0       	rjmp	.+2      	; 0x165a <vfprintf+0x366>
    1658:	80 e2       	ldi	r24, 0x20	; 32
    165a:	a7 fc       	sbrc	r10, 7
    165c:	8d e2       	ldi	r24, 0x2D	; 45
    165e:	b6 01       	movw	r22, r12
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <fputc>
    1666:	89 14       	cp	r8, r9
    1668:	38 f4       	brcc	.+14     	; 0x1678 <vfprintf+0x384>
    166a:	b6 01       	movw	r22, r12
    166c:	80 e3       	ldi	r24, 0x30	; 48
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <fputc>
    1674:	9a 94       	dec	r9
    1676:	f7 cf       	rjmp	.-18     	; 0x1666 <vfprintf+0x372>
    1678:	8a 94       	dec	r8
    167a:	f3 01       	movw	r30, r6
    167c:	e8 0d       	add	r30, r8
    167e:	f1 1d       	adc	r31, r1
    1680:	80 81       	ld	r24, Z
    1682:	b6 01       	movw	r22, r12
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <fputc>
    168a:	81 10       	cpse	r8, r1
    168c:	f5 cf       	rjmp	.-22     	; 0x1678 <vfprintf+0x384>
    168e:	22 20       	and	r2, r2
    1690:	09 f4       	brne	.+2      	; 0x1694 <vfprintf+0x3a0>
    1692:	42 ce       	rjmp	.-892    	; 0x1318 <vfprintf+0x24>
    1694:	b6 01       	movw	r22, r12
    1696:	80 e2       	ldi	r24, 0x20	; 32
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <fputc>
    169e:	2a 94       	dec	r2
    16a0:	f6 cf       	rjmp	.-20     	; 0x168e <vfprintf+0x39a>
    16a2:	f6 01       	movw	r30, r12
    16a4:	86 81       	ldd	r24, Z+6	; 0x06
    16a6:	97 81       	ldd	r25, Z+7	; 0x07
    16a8:	02 c0       	rjmp	.+4      	; 0x16ae <vfprintf+0x3ba>
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	9f ef       	ldi	r25, 0xFF	; 255
    16ae:	2b 96       	adiw	r28, 0x0b	; 11
    16b0:	e2 e1       	ldi	r30, 0x12	; 18
    16b2:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <__epilogue_restores__>

000016b6 <strnlen_P>:
    16b6:	fc 01       	movw	r30, r24
    16b8:	05 90       	lpm	r0, Z+
    16ba:	61 50       	subi	r22, 0x01	; 1
    16bc:	70 40       	sbci	r23, 0x00	; 0
    16be:	01 10       	cpse	r0, r1
    16c0:	d8 f7       	brcc	.-10     	; 0x16b8 <strnlen_P+0x2>
    16c2:	80 95       	com	r24
    16c4:	90 95       	com	r25
    16c6:	8e 0f       	add	r24, r30
    16c8:	9f 1f       	adc	r25, r31
    16ca:	08 95       	ret

000016cc <strnlen>:
    16cc:	fc 01       	movw	r30, r24
    16ce:	61 50       	subi	r22, 0x01	; 1
    16d0:	70 40       	sbci	r23, 0x00	; 0
    16d2:	01 90       	ld	r0, Z+
    16d4:	01 10       	cpse	r0, r1
    16d6:	d8 f7       	brcc	.-10     	; 0x16ce <strnlen+0x2>
    16d8:	80 95       	com	r24
    16da:	90 95       	com	r25
    16dc:	8e 0f       	add	r24, r30
    16de:	9f 1f       	adc	r25, r31
    16e0:	08 95       	ret

000016e2 <fputc>:
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	fb 01       	movw	r30, r22
    16ec:	23 81       	ldd	r18, Z+3	; 0x03
    16ee:	21 fd       	sbrc	r18, 1
    16f0:	03 c0       	rjmp	.+6      	; 0x16f8 <fputc+0x16>
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	9f ef       	ldi	r25, 0xFF	; 255
    16f6:	2c c0       	rjmp	.+88     	; 0x1750 <fputc+0x6e>
    16f8:	22 ff       	sbrs	r18, 2
    16fa:	16 c0       	rjmp	.+44     	; 0x1728 <fputc+0x46>
    16fc:	46 81       	ldd	r20, Z+6	; 0x06
    16fe:	57 81       	ldd	r21, Z+7	; 0x07
    1700:	24 81       	ldd	r18, Z+4	; 0x04
    1702:	35 81       	ldd	r19, Z+5	; 0x05
    1704:	42 17       	cp	r20, r18
    1706:	53 07       	cpc	r21, r19
    1708:	44 f4       	brge	.+16     	; 0x171a <fputc+0x38>
    170a:	a0 81       	ld	r26, Z
    170c:	b1 81       	ldd	r27, Z+1	; 0x01
    170e:	9d 01       	movw	r18, r26
    1710:	2f 5f       	subi	r18, 0xFF	; 255
    1712:	3f 4f       	sbci	r19, 0xFF	; 255
    1714:	31 83       	std	Z+1, r19	; 0x01
    1716:	20 83       	st	Z, r18
    1718:	8c 93       	st	X, r24
    171a:	26 81       	ldd	r18, Z+6	; 0x06
    171c:	37 81       	ldd	r19, Z+7	; 0x07
    171e:	2f 5f       	subi	r18, 0xFF	; 255
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	37 83       	std	Z+7, r19	; 0x07
    1724:	26 83       	std	Z+6, r18	; 0x06
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <fputc+0x6e>
    1728:	8b 01       	movw	r16, r22
    172a:	ec 01       	movw	r28, r24
    172c:	fb 01       	movw	r30, r22
    172e:	00 84       	ldd	r0, Z+8	; 0x08
    1730:	f1 85       	ldd	r31, Z+9	; 0x09
    1732:	e0 2d       	mov	r30, r0
    1734:	09 95       	icall
    1736:	89 2b       	or	r24, r25
    1738:	e1 f6       	brne	.-72     	; 0x16f2 <fputc+0x10>
    173a:	d8 01       	movw	r26, r16
    173c:	16 96       	adiw	r26, 0x06	; 6
    173e:	8d 91       	ld	r24, X+
    1740:	9c 91       	ld	r25, X
    1742:	17 97       	sbiw	r26, 0x07	; 7
    1744:	01 96       	adiw	r24, 0x01	; 1
    1746:	17 96       	adiw	r26, 0x07	; 7
    1748:	9c 93       	st	X, r25
    174a:	8e 93       	st	-X, r24
    174c:	16 97       	sbiw	r26, 0x06	; 6
    174e:	ce 01       	movw	r24, r28
    1750:	df 91       	pop	r29
    1752:	cf 91       	pop	r28
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	08 95       	ret

0000175a <__ultoa_invert>:
    175a:	fa 01       	movw	r30, r20
    175c:	aa 27       	eor	r26, r26
    175e:	28 30       	cpi	r18, 0x08	; 8
    1760:	51 f1       	breq	.+84     	; 0x17b6 <__ultoa_invert+0x5c>
    1762:	20 31       	cpi	r18, 0x10	; 16
    1764:	81 f1       	breq	.+96     	; 0x17c6 <__ultoa_invert+0x6c>
    1766:	e8 94       	clt
    1768:	6f 93       	push	r22
    176a:	6e 7f       	andi	r22, 0xFE	; 254
    176c:	6e 5f       	subi	r22, 0xFE	; 254
    176e:	7f 4f       	sbci	r23, 0xFF	; 255
    1770:	8f 4f       	sbci	r24, 0xFF	; 255
    1772:	9f 4f       	sbci	r25, 0xFF	; 255
    1774:	af 4f       	sbci	r26, 0xFF	; 255
    1776:	b1 e0       	ldi	r27, 0x01	; 1
    1778:	3e d0       	rcall	.+124    	; 0x17f6 <__ultoa_invert+0x9c>
    177a:	b4 e0       	ldi	r27, 0x04	; 4
    177c:	3c d0       	rcall	.+120    	; 0x17f6 <__ultoa_invert+0x9c>
    177e:	67 0f       	add	r22, r23
    1780:	78 1f       	adc	r23, r24
    1782:	89 1f       	adc	r24, r25
    1784:	9a 1f       	adc	r25, r26
    1786:	a1 1d       	adc	r26, r1
    1788:	68 0f       	add	r22, r24
    178a:	79 1f       	adc	r23, r25
    178c:	8a 1f       	adc	r24, r26
    178e:	91 1d       	adc	r25, r1
    1790:	a1 1d       	adc	r26, r1
    1792:	6a 0f       	add	r22, r26
    1794:	71 1d       	adc	r23, r1
    1796:	81 1d       	adc	r24, r1
    1798:	91 1d       	adc	r25, r1
    179a:	a1 1d       	adc	r26, r1
    179c:	20 d0       	rcall	.+64     	; 0x17de <__ultoa_invert+0x84>
    179e:	09 f4       	brne	.+2      	; 0x17a2 <__ultoa_invert+0x48>
    17a0:	68 94       	set
    17a2:	3f 91       	pop	r19
    17a4:	2a e0       	ldi	r18, 0x0A	; 10
    17a6:	26 9f       	mul	r18, r22
    17a8:	11 24       	eor	r1, r1
    17aa:	30 19       	sub	r19, r0
    17ac:	30 5d       	subi	r19, 0xD0	; 208
    17ae:	31 93       	st	Z+, r19
    17b0:	de f6       	brtc	.-74     	; 0x1768 <__ultoa_invert+0xe>
    17b2:	cf 01       	movw	r24, r30
    17b4:	08 95       	ret
    17b6:	46 2f       	mov	r20, r22
    17b8:	47 70       	andi	r20, 0x07	; 7
    17ba:	40 5d       	subi	r20, 0xD0	; 208
    17bc:	41 93       	st	Z+, r20
    17be:	b3 e0       	ldi	r27, 0x03	; 3
    17c0:	0f d0       	rcall	.+30     	; 0x17e0 <__ultoa_invert+0x86>
    17c2:	c9 f7       	brne	.-14     	; 0x17b6 <__ultoa_invert+0x5c>
    17c4:	f6 cf       	rjmp	.-20     	; 0x17b2 <__ultoa_invert+0x58>
    17c6:	46 2f       	mov	r20, r22
    17c8:	4f 70       	andi	r20, 0x0F	; 15
    17ca:	40 5d       	subi	r20, 0xD0	; 208
    17cc:	4a 33       	cpi	r20, 0x3A	; 58
    17ce:	18 f0       	brcs	.+6      	; 0x17d6 <__ultoa_invert+0x7c>
    17d0:	49 5d       	subi	r20, 0xD9	; 217
    17d2:	31 fd       	sbrc	r19, 1
    17d4:	40 52       	subi	r20, 0x20	; 32
    17d6:	41 93       	st	Z+, r20
    17d8:	02 d0       	rcall	.+4      	; 0x17de <__ultoa_invert+0x84>
    17da:	a9 f7       	brne	.-22     	; 0x17c6 <__ultoa_invert+0x6c>
    17dc:	ea cf       	rjmp	.-44     	; 0x17b2 <__ultoa_invert+0x58>
    17de:	b4 e0       	ldi	r27, 0x04	; 4
    17e0:	a6 95       	lsr	r26
    17e2:	97 95       	ror	r25
    17e4:	87 95       	ror	r24
    17e6:	77 95       	ror	r23
    17e8:	67 95       	ror	r22
    17ea:	ba 95       	dec	r27
    17ec:	c9 f7       	brne	.-14     	; 0x17e0 <__ultoa_invert+0x86>
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	61 05       	cpc	r22, r1
    17f2:	71 05       	cpc	r23, r1
    17f4:	08 95       	ret
    17f6:	9b 01       	movw	r18, r22
    17f8:	ac 01       	movw	r20, r24
    17fa:	0a 2e       	mov	r0, r26
    17fc:	06 94       	lsr	r0
    17fe:	57 95       	ror	r21
    1800:	47 95       	ror	r20
    1802:	37 95       	ror	r19
    1804:	27 95       	ror	r18
    1806:	ba 95       	dec	r27
    1808:	c9 f7       	brne	.-14     	; 0x17fc <__ultoa_invert+0xa2>
    180a:	62 0f       	add	r22, r18
    180c:	73 1f       	adc	r23, r19
    180e:	84 1f       	adc	r24, r20
    1810:	95 1f       	adc	r25, r21
    1812:	a0 1d       	adc	r26, r0
    1814:	08 95       	ret

00001816 <eeprom_read_byte>:
    1816:	e1 99       	sbic	0x1c, 1	; 28
    1818:	fe cf       	rjmp	.-4      	; 0x1816 <eeprom_read_byte>
    181a:	9f bb       	out	0x1f, r25	; 31
    181c:	8e bb       	out	0x1e, r24	; 30
    181e:	e0 9a       	sbi	0x1c, 0	; 28
    1820:	99 27       	eor	r25, r25
    1822:	8d b3       	in	r24, 0x1d	; 29
    1824:	08 95       	ret

00001826 <eeprom_update_byte>:
    1826:	26 2f       	mov	r18, r22

00001828 <eeprom_update_r18>:
    1828:	e1 99       	sbic	0x1c, 1	; 28
    182a:	fe cf       	rjmp	.-4      	; 0x1828 <eeprom_update_r18>
    182c:	9f bb       	out	0x1f, r25	; 31
    182e:	8e bb       	out	0x1e, r24	; 30
    1830:	e0 9a       	sbi	0x1c, 0	; 28
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	0d b2       	in	r0, 0x1d	; 29
    1836:	02 16       	cp	r0, r18
    1838:	31 f0       	breq	.+12     	; 0x1846 <eeprom_update_r18+0x1e>
    183a:	2d bb       	out	0x1d, r18	; 29
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	e2 9a       	sbi	0x1c, 2	; 28
    1842:	e1 9a       	sbi	0x1c, 1	; 28
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	08 95       	ret

00001848 <__prologue_saves__>:
    1848:	2f 92       	push	r2
    184a:	3f 92       	push	r3
    184c:	4f 92       	push	r4
    184e:	5f 92       	push	r5
    1850:	6f 92       	push	r6
    1852:	7f 92       	push	r7
    1854:	8f 92       	push	r8
    1856:	9f 92       	push	r9
    1858:	af 92       	push	r10
    185a:	bf 92       	push	r11
    185c:	cf 92       	push	r12
    185e:	df 92       	push	r13
    1860:	ef 92       	push	r14
    1862:	ff 92       	push	r15
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	ca 1b       	sub	r28, r26
    1872:	db 0b       	sbc	r29, r27
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	09 94       	ijmp

00001880 <__epilogue_restores__>:
    1880:	2a 88       	ldd	r2, Y+18	; 0x12
    1882:	39 88       	ldd	r3, Y+17	; 0x11
    1884:	48 88       	ldd	r4, Y+16	; 0x10
    1886:	5f 84       	ldd	r5, Y+15	; 0x0f
    1888:	6e 84       	ldd	r6, Y+14	; 0x0e
    188a:	7d 84       	ldd	r7, Y+13	; 0x0d
    188c:	8c 84       	ldd	r8, Y+12	; 0x0c
    188e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1890:	aa 84       	ldd	r10, Y+10	; 0x0a
    1892:	b9 84       	ldd	r11, Y+9	; 0x09
    1894:	c8 84       	ldd	r12, Y+8	; 0x08
    1896:	df 80       	ldd	r13, Y+7	; 0x07
    1898:	ee 80       	ldd	r14, Y+6	; 0x06
    189a:	fd 80       	ldd	r15, Y+5	; 0x05
    189c:	0c 81       	ldd	r16, Y+4	; 0x04
    189e:	1b 81       	ldd	r17, Y+3	; 0x03
    18a0:	aa 81       	ldd	r26, Y+2	; 0x02
    18a2:	b9 81       	ldd	r27, Y+1	; 0x01
    18a4:	ce 0f       	add	r28, r30
    18a6:	d1 1d       	adc	r29, r1
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	ed 01       	movw	r28, r26
    18b4:	08 95       	ret

000018b6 <_exit>:
    18b6:	f8 94       	cli

000018b8 <__stop_program>:
    18b8:	ff cf       	rjmp	.-2      	; 0x18b8 <__stop_program>
