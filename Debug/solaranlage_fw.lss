
solaranlage_fw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00002040  000020d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080008e  0080008e  00002102  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002102  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000021a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010ba  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a77  00000000  00000000  0000340a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018c2  00000000  00000000  00003e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  00005744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006f56  00000000  00000000  00005cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab6  00000000  00000000  0000cc02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002d41  00000000  00000000  0000d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ab 00 	jmp	0x156	; 0x156 <__ctors_end>
       4:	0c 94 a1 02 	jmp	0x542	; 0x542 <__vector_1>
       8:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_2>
       c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      10:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      14:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_5>
      18:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      1c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      20:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      24:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_9>
      28:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      2c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_11>
      30:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      34:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      38:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      3c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      40:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      44:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      48:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      4c:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>
      50:	0c 94 c8 00 	jmp	0x190	; 0x190 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	6e 61       	ori	r22, 0x1E	; 30
      56:	6e 00       	.word	0x006e	; ????

00000058 <__c.2332>:
      58:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      68:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      78:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      88:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      98:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      a8:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      b8:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      c8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      d8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      e8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
      f8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     108:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     118:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     128:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     138:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     148:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000156 <__ctors_end>:
     156:	11 24       	eor	r1, r1
     158:	1f be       	out	0x3f, r1	; 63
     15a:	cf e5       	ldi	r28, 0x5F	; 95
     15c:	d8 e0       	ldi	r29, 0x08	; 8
     15e:	de bf       	out	0x3e, r29	; 62
     160:	cd bf       	out	0x3d, r28	; 61

00000162 <__do_copy_data>:
     162:	10 e0       	ldi	r17, 0x00	; 0
     164:	a0 e6       	ldi	r26, 0x60	; 96
     166:	b0 e0       	ldi	r27, 0x00	; 0
     168:	e0 e4       	ldi	r30, 0x40	; 64
     16a:	f0 e2       	ldi	r31, 0x20	; 32
     16c:	02 c0       	rjmp	.+4      	; 0x172 <__do_copy_data+0x10>
     16e:	05 90       	lpm	r0, Z+
     170:	0d 92       	st	X+, r0
     172:	ae 38       	cpi	r26, 0x8E	; 142
     174:	b1 07       	cpc	r27, r17
     176:	d9 f7       	brne	.-10     	; 0x16e <__do_copy_data+0xc>

00000178 <__do_clear_bss>:
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	ae e8       	ldi	r26, 0x8E	; 142
     17c:	b0 e0       	ldi	r27, 0x00	; 0
     17e:	01 c0       	rjmp	.+2      	; 0x182 <.do_clear_bss_start>

00000180 <.do_clear_bss_loop>:
     180:	1d 92       	st	X+, r1

00000182 <.do_clear_bss_start>:
     182:	a3 3b       	cpi	r26, 0xB3	; 179
     184:	b2 07       	cpc	r27, r18
     186:	e1 f7       	brne	.-8      	; 0x180 <.do_clear_bss_loop>
     188:	0e 94 8d 03 	call	0x71a	; 0x71a <main>
     18c:	0c 94 1e 10 	jmp	0x203c	; 0x203c <_exit>

00000190 <__bad_interrupt>:
     190:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000194 <SevenSeg_init>:
uint16_t kessel_anzeige = 0;
uint8_t on = 0;


void SevenSeg_init()
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1<<TOIE0);	//enable overflow-interrupt
     19c:	89 e5       	ldi	r24, 0x59	; 89
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	29 e5       	ldi	r18, 0x59	; 89
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	21 60       	ori	r18, 0x01	; 1
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
	
	sei();
     1ae:	78 94       	sei
}
     1b0:	00 00       	nop
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	08 95       	ret

000001b8 <SevenSeg_set_val>:

//seg: 1=dach; 0=kessel;   val: 0-9: 0-9; 10: off; 11: '-' at left segment (for negative values)
void SevenSeg_set_val(uint8_t seg, int16_t val)
{
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
     1c0:	27 97       	sbiw	r28, 0x07	; 7
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	f8 94       	cli
     1c6:	de bf       	out	0x3e, r29	; 62
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	cd bf       	out	0x3d, r28	; 61
     1cc:	8d 83       	std	Y+5, r24	; 0x05
     1ce:	7f 83       	std	Y+7, r23	; 0x07
     1d0:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t neg = 0;											//flag for negative values
     1d2:	19 82       	std	Y+1, r1	; 0x01
	
	if(seg == 1)												
     1d4:	8d 81       	ldd	r24, Y+5	; 0x05
     1d6:	81 30       	cpi	r24, 0x01	; 1
     1d8:	51 f4       	brne	.+20     	; 0x1ee <SevenSeg_set_val+0x36>
	{
		if (val == dach_anzeige)								//if the value to set is not new, leave function
     1da:	2e 81       	ldd	r18, Y+6	; 0x06
     1dc:	3f 81       	ldd	r19, Y+7	; 0x07
     1de:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <dach_anzeige>
     1e2:	90 91 9c 00 	lds	r25, 0x009C	; 0x80009c <dach_anzeige+0x1>
     1e6:	28 17       	cp	r18, r24
     1e8:	39 07       	cpc	r19, r25
     1ea:	71 f4       	brne	.+28     	; 0x208 <SevenSeg_set_val+0x50>
		{
			return;
     1ec:	b9 c0       	rjmp	.+370    	; 0x360 <SevenSeg_set_val+0x1a8>
		}
	}
	
	else if(seg == 0)		
     1ee:	8d 81       	ldd	r24, Y+5	; 0x05
     1f0:	88 23       	and	r24, r24
     1f2:	51 f4       	brne	.+20     	; 0x208 <SevenSeg_set_val+0x50>
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
     1f4:	2e 81       	ldd	r18, Y+6	; 0x06
     1f6:	3f 81       	ldd	r19, Y+7	; 0x07
     1f8:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <kessel_anzeige>
     1fc:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <kessel_anzeige+0x1>
     200:	28 17       	cp	r18, r24
     202:	39 07       	cpc	r19, r25
     204:	09 f4       	brne	.+2      	; 0x208 <SevenSeg_set_val+0x50>
     206:	ab c0       	rjmp	.+342    	; 0x35e <SevenSeg_set_val+0x1a6>
		{
			return;
		}
	}
	
	if(val==1000)												//if this display shall be switched off
     208:	8e 81       	ldd	r24, Y+6	; 0x06
     20a:	9f 81       	ldd	r25, Y+7	; 0x07
     20c:	88 3e       	cpi	r24, 0xE8	; 232
     20e:	93 40       	sbci	r25, 0x03	; 3
     210:	39 f5       	brne	.+78     	; 0x260 <SevenSeg_set_val+0xa8>
	{
		segs[seg]   = 10;
     212:	8d 81       	ldd	r24, Y+5	; 0x05
     214:	88 2f       	mov	r24, r24
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	82 57       	subi	r24, 0x72	; 114
     21e:	9f 4f       	sbci	r25, 0xFF	; 255
     220:	2a e0       	ldi	r18, 0x0A	; 10
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	fc 01       	movw	r30, r24
     226:	31 83       	std	Z+1, r19	; 0x01
     228:	20 83       	st	Z, r18
		segs[seg+2] = 10;
     22a:	8d 81       	ldd	r24, Y+5	; 0x05
     22c:	88 2f       	mov	r24, r24
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	02 96       	adiw	r24, 0x02	; 2
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	82 57       	subi	r24, 0x72	; 114
     238:	9f 4f       	sbci	r25, 0xFF	; 255
     23a:	2a e0       	ldi	r18, 0x0A	; 10
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	fc 01       	movw	r30, r24
     240:	31 83       	std	Z+1, r19	; 0x01
     242:	20 83       	st	Z, r18
		segs[seg+4] = 10;
     244:	8d 81       	ldd	r24, Y+5	; 0x05
     246:	88 2f       	mov	r24, r24
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	04 96       	adiw	r24, 0x04	; 4
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	82 57       	subi	r24, 0x72	; 114
     252:	9f 4f       	sbci	r25, 0xFF	; 255
     254:	2a e0       	ldi	r18, 0x0A	; 10
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	fc 01       	movw	r30, r24
     25a:	31 83       	std	Z+1, r19	; 0x01
     25c:	20 83       	st	Z, r18
		return;
     25e:	80 c0       	rjmp	.+256    	; 0x360 <SevenSeg_set_val+0x1a8>
	}

	
	if(val < 0)													//if the value to set is negative
     260:	8e 81       	ldd	r24, Y+6	; 0x06
     262:	9f 81       	ldd	r25, Y+7	; 0x07
     264:	99 23       	and	r25, r25
     266:	94 f4       	brge	.+36     	; 0x28c <SevenSeg_set_val+0xd4>
	{
		val *= -1;												//calculate absolute value
     268:	8e 81       	ldd	r24, Y+6	; 0x06
     26a:	9f 81       	ldd	r25, Y+7	; 0x07
     26c:	91 95       	neg	r25
     26e:	81 95       	neg	r24
     270:	91 09       	sbc	r25, r1
     272:	9f 83       	std	Y+7, r25	; 0x07
     274:	8e 83       	std	Y+6, r24	; 0x06
		neg = 1;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	89 83       	std	Y+1, r24	; 0x01
		
		if(val > 99)											//because one segment is needed for the sign, only two digits are allowed
     27a:	8e 81       	ldd	r24, Y+6	; 0x06
     27c:	9f 81       	ldd	r25, Y+7	; 0x07
     27e:	84 36       	cpi	r24, 0x64	; 100
     280:	91 05       	cpc	r25, r1
     282:	24 f0       	brlt	.+8      	; 0x28c <SevenSeg_set_val+0xd4>
		{
			val = 99;
     284:	83 e6       	ldi	r24, 0x63	; 99
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	9f 83       	std	Y+7, r25	; 0x07
     28a:	8e 83       	std	Y+6, r24	; 0x06
		}
	}
	
	
	uint8_t h = (uint8_t) (val/100);							//separate the digits of the value
     28c:	8e 81       	ldd	r24, Y+6	; 0x06
     28e:	9f 81       	ldd	r25, Y+7	; 0x07
     290:	24 e6       	ldi	r18, 0x64	; 100
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	b9 01       	movw	r22, r18
     296:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__divmodhi4>
     29a:	cb 01       	movw	r24, r22
     29c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t z = (uint8_t) ((val- (h*100)) / 10 );
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	88 2f       	mov	r24, r24
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	4c e9       	ldi	r20, 0x9C	; 156
     2a6:	bc 01       	movw	r22, r24
     2a8:	46 03       	mulsu	r20, r22
     2aa:	90 01       	movw	r18, r0
     2ac:	47 9f       	mul	r20, r23
     2ae:	30 0d       	add	r19, r0
     2b0:	11 24       	eor	r1, r1
     2b2:	8e 81       	ldd	r24, Y+6	; 0x06
     2b4:	9f 81       	ldd	r25, Y+7	; 0x07
     2b6:	82 0f       	add	r24, r18
     2b8:	93 1f       	adc	r25, r19
     2ba:	2a e0       	ldi	r18, 0x0A	; 10
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	b9 01       	movw	r22, r18
     2c0:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__divmodhi4>
     2c4:	cb 01       	movw	r24, r22
     2c6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t e = (uint8_t)  (val- (h*100)- (z*10));
     2c8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ca:	2a 81       	ldd	r18, Y+2	; 0x02
     2cc:	84 e6       	ldi	r24, 0x64	; 100
     2ce:	28 9f       	mul	r18, r24
     2d0:	80 2d       	mov	r24, r0
     2d2:	11 24       	eor	r1, r1
     2d4:	98 1b       	sub	r25, r24
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	88 0f       	add	r24, r24
     2da:	28 2f       	mov	r18, r24
     2dc:	22 0f       	add	r18, r18
     2de:	22 0f       	add	r18, r18
     2e0:	82 0f       	add	r24, r18
     2e2:	79 2f       	mov	r23, r25
     2e4:	78 1b       	sub	r23, r24
     2e6:	87 2f       	mov	r24, r23
     2e8:	8c 83       	std	Y+4, r24	; 0x04

	
	segs[seg]   = e;											//set the digits at the propper position in the segment array
     2ea:	8d 81       	ldd	r24, Y+5	; 0x05
     2ec:	88 2f       	mov	r24, r24
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	2c 81       	ldd	r18, Y+4	; 0x04
     2f2:	22 2f       	mov	r18, r18
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	82 57       	subi	r24, 0x72	; 114
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	fc 01       	movw	r30, r24
     300:	31 83       	std	Z+1, r19	; 0x01
     302:	20 83       	st	Z, r18
	segs[seg+2] = z;
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	88 2f       	mov	r24, r24
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	02 96       	adiw	r24, 0x02	; 2
     30c:	2b 81       	ldd	r18, Y+3	; 0x03
     30e:	22 2f       	mov	r18, r18
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	82 57       	subi	r24, 0x72	; 114
     318:	9f 4f       	sbci	r25, 0xFF	; 255
     31a:	fc 01       	movw	r30, r24
     31c:	31 83       	std	Z+1, r19	; 0x01
     31e:	20 83       	st	Z, r18
	segs[seg+4] = h;
     320:	8d 81       	ldd	r24, Y+5	; 0x05
     322:	88 2f       	mov	r24, r24
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	04 96       	adiw	r24, 0x04	; 4
     328:	2a 81       	ldd	r18, Y+2	; 0x02
     32a:	22 2f       	mov	r18, r18
     32c:	30 e0       	ldi	r19, 0x00	; 0
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	82 57       	subi	r24, 0x72	; 114
     334:	9f 4f       	sbci	r25, 0xFF	; 255
     336:	fc 01       	movw	r30, r24
     338:	31 83       	std	Z+1, r19	; 0x01
     33a:	20 83       	st	Z, r18
	
	if(neg == 1)												//if this is a negative value..
     33c:	89 81       	ldd	r24, Y+1	; 0x01
     33e:	81 30       	cpi	r24, 0x01	; 1
     340:	79 f4       	brne	.+30     	; 0x360 <SevenSeg_set_val+0x1a8>
	{
		segs[seg+4] = 11;										//overwrite the left segment with sign	
     342:	8d 81       	ldd	r24, Y+5	; 0x05
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	04 96       	adiw	r24, 0x04	; 4
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	82 57       	subi	r24, 0x72	; 114
     350:	9f 4f       	sbci	r25, 0xFF	; 255
     352:	2b e0       	ldi	r18, 0x0B	; 11
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	fc 01       	movw	r30, r24
     358:	31 83       	std	Z+1, r19	; 0x01
     35a:	20 83       	st	Z, r18
     35c:	01 c0       	rjmp	.+2      	; 0x360 <SevenSeg_set_val+0x1a8>
	
	else if(seg == 0)		
	{
		if(val == kessel_anzeige)								//if the value to set is not new, leave function
		{
			return;
     35e:	00 00       	nop
	
	if(neg == 1)												//if this is a negative value..
	{
		segs[seg+4] = 11;										//overwrite the left segment with sign	
	}
}
     360:	27 96       	adiw	r28, 0x07	; 7
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	f8 94       	cli
     366:	de bf       	out	0x3e, r29	; 62
     368:	0f be       	out	0x3f, r0	; 63
     36a:	cd bf       	out	0x3d, r28	; 61
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <__vector_11>:



ISR(TIMER0_OVF_vect)
{
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     37a:	0f 92       	push	r0
     37c:	11 24       	eor	r1, r1
     37e:	2f 93       	push	r18
     380:	3f 93       	push	r19
     382:	8f 93       	push	r24
     384:	9f 93       	push	r25
     386:	ef 93       	push	r30
     388:	ff 93       	push	r31
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	1f 92       	push	r1
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
	cli();
     394:	f8 94       	cli
	
	if(segs[seg_cnt] != 10)					//if the current digit to display is valid (0..9)..
     396:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     39a:	88 2f       	mov	r24, r24
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	82 57       	subi	r24, 0x72	; 114
     3a4:	9f 4f       	sbci	r25, 0xFF	; 255
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	91 81       	ldd	r25, Z+1	; 0x01
     3ac:	0a 97       	sbiw	r24, 0x0a	; 10
     3ae:	a1 f0       	breq	.+40     	; 0x3d8 <__vector_11+0x66>
	{
		PORTB = patterns[segs[seg_cnt]];	//set the propper pattern to the anodes.
     3b0:	88 e3       	ldi	r24, 0x38	; 56
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <seg_cnt>
     3b8:	22 2f       	mov	r18, r18
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	22 0f       	add	r18, r18
     3be:	33 1f       	adc	r19, r19
     3c0:	22 57       	subi	r18, 0x72	; 114
     3c2:	3f 4f       	sbci	r19, 0xFF	; 255
     3c4:	f9 01       	movw	r30, r18
     3c6:	20 81       	ld	r18, Z
     3c8:	31 81       	ldd	r19, Z+1	; 0x01
     3ca:	20 5a       	subi	r18, 0xA0	; 160
     3cc:	3f 4f       	sbci	r19, 0xFF	; 255
     3ce:	f9 01       	movw	r30, r18
     3d0:	20 81       	ld	r18, Z
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
     3d6:	1e c0       	rjmp	.+60     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	}
	else if	(segs[seg_cnt] == 10)			//if the current digit is 10, the segment shall be switched off.
     3d8:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     3dc:	88 2f       	mov	r24, r24
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	88 0f       	add	r24, r24
     3e2:	99 1f       	adc	r25, r25
     3e4:	82 57       	subi	r24, 0x72	; 114
     3e6:	9f 4f       	sbci	r25, 0xFF	; 255
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	0a 97       	sbiw	r24, 0x0a	; 10
     3f0:	89 f4       	brne	.+34     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		PORTB = 0x00;						//therefore clear the anodes
     3f2:	88 e3       	ldi	r24, 0x38	; 56
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fc 01       	movw	r30, r24
     3f8:	10 82       	st	Z, r1
		seg_cnt ++;							//switch to next segment
     3fa:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <seg_cnt>
		
		if(seg_cnt == 6)	//looping
     404:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     408:	86 30       	cpi	r24, 0x06	; 6
     40a:	11 f4       	brne	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			seg_cnt = 0;
     40c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <seg_cnt>
		}
		sei();
     410:	78 94       	sei
		return;								//leave. The common cathode of this segment shall not be activated.
     412:	2b c0       	rjmp	.+86     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
	}
	
	
	//if digit for this segment is valid..
	uint8_t a = (uint8_t) (~(1<<(seg_cnt + 2)));
     414:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     418:	88 2f       	mov	r24, r24
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	9c 01       	movw	r18, r24
     41e:	2e 5f       	subi	r18, 0xFE	; 254
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	2a 95       	dec	r18
     42e:	e2 f7       	brpl	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     430:	80 95       	com	r24
     432:	89 83       	std	Y+1, r24	; 0x01
	PORTA = a & 0xFC;						//mask to avoid ADC-channels 0 and 1
     434:	8b e3       	ldi	r24, 0x3B	; 59
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	29 81       	ldd	r18, Y+1	; 0x01
     43a:	2c 7f       	andi	r18, 0xFC	; 252
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
	seg_cnt ++;								//switching to next segment
     440:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     444:	8f 5f       	subi	r24, 0xFF	; 255
     446:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <seg_cnt>
	
	if(seg_cnt == 6)						//loop segment counter
     44a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <seg_cnt>
     44e:	86 30       	cpi	r24, 0x06	; 6
     450:	11 f4       	brne	.+4      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	{
		seg_cnt = 0;
     452:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <seg_cnt>
	}
	
	TIFR &= ~(1<<TOV0);	//clear timer0 overflow interrupt flag
     456:	88 e5       	ldi	r24, 0x58	; 88
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	28 e5       	ldi	r18, 0x58	; 88
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	2e 7f       	andi	r18, 0xFE	; 254
     464:	fc 01       	movw	r30, r24
     466:	20 83       	st	Z, r18
	
	sei();
     468:	78 94       	sei
}
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	ff 91       	pop	r31
     472:	ef 91       	pop	r30
     474:	9f 91       	pop	r25
     476:	8f 91       	pop	r24
     478:	3f 91       	pop	r19
     47a:	2f 91       	pop	r18
     47c:	0f 90       	pop	r0
     47e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <SevenSeg_on>:


void SevenSeg_on()
{
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = (1<<CS01) | (1<<CS00);		//setting prescaler to /256
     490:	83 e5       	ldi	r24, 0x53	; 83
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	23 e0       	ldi	r18, 0x03	; 3
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	on = 1;
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <on>
}
     4a0:	00 00       	nop
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	08 95       	ret

000004a8 <SevenSeg_off>:

void SevenSeg_off()
{
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	cd b7       	in	r28, 0x3d	; 61
     4ae:	de b7       	in	r29, 0x3e	; 62
	TCCR0 &= ~((1<<CS01) | (1<<CS00));	//disable timer
     4b0:	83 e5       	ldi	r24, 0x53	; 83
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	23 e5       	ldi	r18, 0x53	; 83
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	f9 01       	movw	r30, r18
     4ba:	20 81       	ld	r18, Z
     4bc:	2c 7f       	andi	r18, 0xFC	; 252
     4be:	fc 01       	movw	r30, r24
     4c0:	20 83       	st	Z, r18
	TCNT0 = 0;							//resetting counter
     4c2:	82 e5       	ldi	r24, 0x52	; 82
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	fc 01       	movw	r30, r24
     4c8:	10 82       	st	Z, r1
	PORTB = 0x00;
     4ca:	88 e3       	ldi	r24, 0x38	; 56
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	fc 01       	movw	r30, r24
     4d0:	10 82       	st	Z, r1
	PORTA = 0xFC;
     4d2:	8b e3       	ldi	r24, 0x3B	; 59
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	2c ef       	ldi	r18, 0xFC	; 252
     4d8:	fc 01       	movw	r30, r24
     4da:	20 83       	st	Z, r18
	on = 0;
     4dc:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <on>
}
     4e0:	00 00       	nop
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	08 95       	ret

000004e8 <SevenSeg_get_state>:


uint8_t SevenSeg_get_state()
{
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
	return on;
     4f0:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <on>
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <Encoder_init>:

uint8_t selected_seg = 1;


void Encoder_init()
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
	ENC_PORT &= ~((1<<ENC_A_PIN) | (1<<ENC_A_PIN));							//setting encoder terminals to input
     502:	82 e3       	ldi	r24, 0x32	; 50
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	22 e3       	ldi	r18, 0x32	; 50
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	f9 01       	movw	r30, r18
     50c:	20 81       	ld	r18, Z
     50e:	2b 7f       	andi	r18, 0xFB	; 251
     510:	fc 01       	movw	r30, r24
     512:	20 83       	st	Z, r18
	MCUCR |= (1<<ISC01) | (1<<ISC00) | (1<<ISC11);				//setting ext-int0 to sensitive at rising edge
     514:	85 e5       	ldi	r24, 0x55	; 85
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	25 e5       	ldi	r18, 0x55	; 85
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	f9 01       	movw	r30, r18
     51e:	20 81       	ld	r18, Z
     520:	2b 60       	ori	r18, 0x0B	; 11
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
	GICR |= (1<<INT0) | (1<<INT1);											//enable external interrupt 0 (ENC_A_PIN)
     526:	8b e5       	ldi	r24, 0x5B	; 91
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	2b e5       	ldi	r18, 0x5B	; 91
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	f9 01       	movw	r30, r18
     530:	20 81       	ld	r18, Z
     532:	20 6c       	ori	r18, 0xC0	; 192
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
	sei();
     538:	78 94       	sei
}
     53a:	00 00       	nop
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <__vector_1>:



ISR(INT0_vect)
{	
     542:	1f 92       	push	r1
     544:	0f 92       	push	r0
     546:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	2f 93       	push	r18
     550:	3f 93       	push	r19
     552:	4f 93       	push	r20
     554:	5f 93       	push	r21
     556:	6f 93       	push	r22
     558:	7f 93       	push	r23
     55a:	8f 93       	push	r24
     55c:	9f 93       	push	r25
     55e:	af 93       	push	r26
     560:	bf 93       	push	r27
     562:	ef 93       	push	r30
     564:	ff 93       	push	r31
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
	cli();
     56e:	f8 94       	cli
	
	switch(getState())
     570:	0e 94 4d 04 	call	0x89a	; 0x89a <getState>
     574:	88 2f       	mov	r24, r24
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	83 30       	cpi	r24, 0x03	; 3
     57a:	91 05       	cpc	r25, r1
     57c:	19 f0       	breq	.+6      	; 0x584 <__vector_1+0x42>
     57e:	04 97       	sbiw	r24, 0x04	; 4
     580:	a1 f0       	breq	.+40     	; 0x5aa <__vector_1+0x68>
			}
			break;
		}
		
		default:
			break;
     582:	26 c0       	rjmp	.+76     	; 0x5d0 <__vector_1+0x8e>
	
	switch(getState())
	{
		case 3:	
		{	
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     584:	80 e3       	ldi	r24, 0x30	; 48
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	88 2f       	mov	r24, r24
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	80 71       	andi	r24, 0x10	; 16
     592:	99 27       	eor	r25, r25
     594:	18 16       	cp	r1, r24
     596:	19 06       	cpc	r1, r25
     598:	24 f4       	brge	.+8      	; 0x5a2 <__vector_1+0x60>
			{
				dec_delta(1);
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 bf 04 	call	0x97e	; 0x97e <dec_delta>
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
			}
			break;
     5a0:	17 c0       	rjmp	.+46     	; 0x5d0 <__vector_1+0x8e>
			{
				dec_delta(1);
			}		
			else									//im Uhrzeigersinn
			{			
				inc_delta(1);
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 9c 04 	call	0x938	; 0x938 <inc_delta>
			}
			break;
     5a8:	13 c0       	rjmp	.+38     	; 0x5d0 <__vector_1+0x8e>
		}
		
		case 4:
		{
			if( (ENC_PINPORT & (1<<ENC_B_PIN)) > 0) //if ENC_B_PIN == 1  //gegen den Uhrzeigersinn
     5aa:	80 e3       	ldi	r24, 0x30	; 48
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	80 71       	andi	r24, 0x10	; 16
     5b8:	99 27       	eor	r25, r25
     5ba:	18 16       	cp	r1, r24
     5bc:	19 06       	cpc	r1, r25
     5be:	24 f4       	brge	.+8      	; 0x5c8 <__vector_1+0x86>
			{
				dec_delta(2);
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	0e 94 bf 04 	call	0x97e	; 0x97e <dec_delta>
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
			}
			break;
     5c6:	03 c0       	rjmp	.+6      	; 0x5ce <__vector_1+0x8c>
			{
				dec_delta(2);
			}
			else									//im Uhrzeigersinn
			{
				inc_delta(2);
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	0e 94 9c 04 	call	0x938	; 0x938 <inc_delta>
			}
			break;
     5ce:	00 00       	nop
		
		default:
			break;
	}
	
	stop_timeout_timer();
     5d0:	0e 94 20 07 	call	0xe40	; 0xe40 <stop_timeout_timer>
	start_timeout_timer();
     5d4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <start_timeout_timer>
	
	
	GIFR &= ~(1<<INTF0);  //clear ext-interrupt-0 flag
     5d8:	8a e5       	ldi	r24, 0x5A	; 90
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	2a e5       	ldi	r18, 0x5A	; 90
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	2f 7b       	andi	r18, 0xBF	; 191
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
	
	sei();
     5ea:	78 94       	sei
}
     5ec:	00 00       	nop
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	ff 91       	pop	r31
     5f4:	ef 91       	pop	r30
     5f6:	bf 91       	pop	r27
     5f8:	af 91       	pop	r26
     5fa:	9f 91       	pop	r25
     5fc:	8f 91       	pop	r24
     5fe:	7f 91       	pop	r23
     600:	6f 91       	pop	r22
     602:	5f 91       	pop	r21
     604:	4f 91       	pop	r20
     606:	3f 91       	pop	r19
     608:	2f 91       	pop	r18
     60a:	0f 90       	pop	r0
     60c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     610:	0f 90       	pop	r0
     612:	1f 90       	pop	r1
     614:	18 95       	reti

00000616 <__vector_2>:


ISR(INT1_vect)  //if the encoder got pushed
{
     616:	1f 92       	push	r1
     618:	0f 92       	push	r0
     61a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     61e:	0f 92       	push	r0
     620:	11 24       	eor	r1, r1
     622:	0f 93       	push	r16
     624:	1f 93       	push	r17
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
	cli();
     646:	f8 94       	cli
	
	switch(getState())
     648:	0e 94 4d 04 	call	0x89a	; 0x89a <getState>
     64c:	88 2f       	mov	r24, r24
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	82 30       	cpi	r24, 0x02	; 2
     652:	91 05       	cpc	r25, r1
     654:	a1 f0       	breq	.+40     	; 0x67e <__vector_2+0x68>
     656:	83 30       	cpi	r24, 0x03	; 3
     658:	91 05       	cpc	r25, r1
     65a:	1c f4       	brge	.+6      	; 0x662 <__vector_2+0x4c>
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	39 f0       	breq	.+14     	; 0x66e <__vector_2+0x58>
     660:	44 c0       	rjmp	.+136    	; 0x6ea <__vector_2+0xd4>
     662:	83 30       	cpi	r24, 0x03	; 3
     664:	91 05       	cpc	r25, r1
     666:	89 f0       	breq	.+34     	; 0x68a <__vector_2+0x74>
     668:	04 97       	sbiw	r24, 0x04	; 4
     66a:	39 f1       	breq	.+78     	; 0x6ba <__vector_2+0xa4>
     66c:	3e c0       	rjmp	.+124    	; 0x6ea <__vector_2+0xd4>
	{
		case 1:
		{
			setState(SHOW_TEMPS);
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	0e 94 3f 04 	call	0x87e	; 0x87e <setState>
			stop_timeout_timer();
     674:	0e 94 20 07 	call	0xe40	; 0xe40 <stop_timeout_timer>
			start_timeout_timer();
     678:	0e 94 0e 07 	call	0xe1c	; 0xe1c <start_timeout_timer>
			break;
     67c:	36 c0       	rjmp	.+108    	; 0x6ea <__vector_2+0xd4>
		}
		case 2:
		{
			setState(MODIFY_DELTA1);
     67e:	83 e0       	ldi	r24, 0x03	; 3
     680:	0e 94 3f 04 	call	0x87e	; 0x87e <setState>
			start_timeout_timer();
     684:	0e 94 0e 07 	call	0xe1c	; 0xe1c <start_timeout_timer>
			break;
     688:	30 c0       	rjmp	.+96     	; 0x6ea <__vector_2+0xd4>
		}
		case 3:
		{
			if(eeprom_read_byte((uint8_t*)0) != get_delta(1))
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 05 10 	call	0x200a	; 0x200a <eeprom_read_byte>
     692:	08 2f       	mov	r16, r24
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     69c:	08 17       	cp	r16, r24
     69e:	19 07       	cpc	r17, r25
     6a0:	41 f0       	breq	.+16     	; 0x6b2 <__vector_2+0x9c>
			{
				eeprom_update_byte((uint8_t*)0, get_delta(1));
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     6a8:	68 2f       	mov	r22, r24
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 0d 10 	call	0x201a	; 0x201a <eeprom_update_byte>
			}
			setState(MODIFY_DELTA2);
     6b2:	84 e0       	ldi	r24, 0x04	; 4
     6b4:	0e 94 3f 04 	call	0x87e	; 0x87e <setState>
			break;
     6b8:	18 c0       	rjmp	.+48     	; 0x6ea <__vector_2+0xd4>
		}
		case 4:
		{
			if(eeprom_read_byte((uint8_t*)1) != get_delta(2))
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 05 10 	call	0x200a	; 0x200a <eeprom_read_byte>
     6c2:	08 2f       	mov	r16, r24
     6c4:	10 e0       	ldi	r17, 0x00	; 0
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     6cc:	08 17       	cp	r16, r24
     6ce:	19 07       	cpc	r17, r25
     6d0:	41 f0       	breq	.+16     	; 0x6e2 <__vector_2+0xcc>
			{
				eeprom_update_byte((uint8_t*)1, get_delta(2));
     6d2:	82 e0       	ldi	r24, 0x02	; 2
     6d4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     6d8:	68 2f       	mov	r22, r24
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 0d 10 	call	0x201a	; 0x201a <eeprom_update_byte>
			}
			setState(SHOW_TEMPS);
     6e2:	82 e0       	ldi	r24, 0x02	; 2
     6e4:	0e 94 3f 04 	call	0x87e	; 0x87e <setState>
			break;
     6e8:	00 00       	nop
		}
	}
	
	sei();
     6ea:	78 94       	sei
     6ec:	00 00       	nop
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	ff 91       	pop	r31
     6f4:	ef 91       	pop	r30
     6f6:	bf 91       	pop	r27
     6f8:	af 91       	pop	r26
     6fa:	9f 91       	pop	r25
     6fc:	8f 91       	pop	r24
     6fe:	7f 91       	pop	r23
     700:	6f 91       	pop	r22
     702:	5f 91       	pop	r21
     704:	4f 91       	pop	r20
     706:	3f 91       	pop	r19
     708:	2f 91       	pop	r18
     70a:	1f 91       	pop	r17
     70c:	0f 91       	pop	r16
     70e:	0f 90       	pop	r0
     710:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     714:	0f 90       	pop	r0
     716:	1f 90       	pop	r1
     718:	18 95       	reti

0000071a <main>:
static FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);



int main(void)
{
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
     722:	8b e3       	ldi	r24, 0x3B	; 59
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	fc 01       	movw	r30, r24
     728:	10 82       	st	Z, r1
	PORTB = 0x00;
     72a:	88 e3       	ldi	r24, 0x38	; 56
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	fc 01       	movw	r30, r24
     730:	10 82       	st	Z, r1
	
	DDRA = 0xFC;
     732:	8a e3       	ldi	r24, 0x3A	; 58
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	2c ef       	ldi	r18, 0xFC	; 252
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
	DDRB = 0xFF;
     73c:	87 e3       	ldi	r24, 0x37	; 55
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	2f ef       	ldi	r18, 0xFF	; 255
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
	DDRC |= (1<<WDI_PIN);
     746:	84 e3       	ldi	r24, 0x34	; 52
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	24 e3       	ldi	r18, 0x34	; 52
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	f9 01       	movw	r30, r18
     750:	20 81       	ld	r18, Z
     752:	20 64       	ori	r18, 0x40	; 64
     754:	fc 01       	movw	r30, r24
     756:	20 83       	st	Z, r18
	DDRD |= (1<<PD5);
     758:	81 e3       	ldi	r24, 0x31	; 49
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	21 e3       	ldi	r18, 0x31	; 49
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	f9 01       	movw	r30, r18
     762:	20 81       	ld	r18, Z
     764:	20 62       	ori	r18, 0x20	; 32
     766:	fc 01       	movw	r30, r24
     768:	20 83       	st	Z, r18
	
	uart_init(0);
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 ac 07 	call	0xf58	; 0xf58 <uart_init>
	
	
	stdout = &mystdout;
     772:	8c e6       	ldi	r24, 0x6C	; 108
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__iob+0x3>
     77a:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__iob+0x2>
	
	printf("startup!\n");
     77e:	8b e7       	ldi	r24, 0x7B	; 123
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 77 0f 	call	0x1eee	; 0x1eee <puts>
	
	regulator_init();
     786:	0e 94 56 04 	call	0x8ac	; 0x8ac <regulator_init>
	SevenSeg_init();
     78a:	0e 94 ca 00 	call	0x194	; 0x194 <SevenSeg_init>
	Timeout_init();
     78e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <Timeout_init>
	Encoder_init();
     792:	0e 94 7d 02 	call	0x4fa	; 0x4fa <Encoder_init>
	
	
	while(1)	
	{	
		switch(state)
     796:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <state>
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	82 30       	cpi	r24, 0x02	; 2
     7a0:	91 05       	cpc	r25, r1
     7a2:	01 f1       	breq	.+64     	; 0x7e4 <main+0xca>
     7a4:	83 30       	cpi	r24, 0x03	; 3
     7a6:	91 05       	cpc	r25, r1
     7a8:	2c f4       	brge	.+10     	; 0x7b4 <main+0x9a>
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	49 f0       	breq	.+18     	; 0x7c0 <main+0xa6>
     7ae:	01 97       	sbiw	r24, 0x01	; 1
     7b0:	89 f0       	breq	.+34     	; 0x7d4 <main+0xba>
     7b2:	5a c0       	rjmp	.+180    	; 0x868 <__stack+0x9>
     7b4:	83 30       	cpi	r24, 0x03	; 3
     7b6:	91 05       	cpc	r25, r1
     7b8:	51 f1       	breq	.+84     	; 0x80e <main+0xf4>
     7ba:	04 97       	sbiw	r24, 0x04	; 4
     7bc:	d9 f1       	breq	.+118    	; 0x834 <main+0x11a>
     7be:	54 c0       	rjmp	.+168    	; 0x868 <__stack+0x9>
		{
			case INIT:
			{
				if(SevenSeg_get_state() == 1)						//disable display only if it is on
     7c0:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     7c4:	81 30       	cpi	r24, 0x01	; 1
     7c6:	11 f4       	brne	.+4      	; 0x7cc <main+0xb2>
				{
					SevenSeg_off();
     7c8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SevenSeg_off>
				}
				setState(DISPLAY_OFF);
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	0e 94 3f 04 	call	0x87e	; 0x87e <setState>
				break;
     7d2:	4a c0       	rjmp	.+148    	; 0x868 <__stack+0x9>
			}
			
			case DISPLAY_OFF:
			{
				if(SevenSeg_get_state() == 1)						//disable display only if it is on
     7d4:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     7d8:	81 30       	cpi	r24, 0x01	; 1
     7da:	09 f0       	breq	.+2      	; 0x7de <main+0xc4>
     7dc:	3e c0       	rjmp	.+124    	; 0x85a <main+0x140>
				{
					SevenSeg_off();
     7de:	0e 94 54 02 	call	0x4a8	; 0x4a8 <SevenSeg_off>
				}
				break;
     7e2:	3b c0       	rjmp	.+118    	; 0x85a <main+0x140>
			}
				
			case SHOW_TEMPS:
			{
				SevenSeg_set_val(0, get_temp(0));
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	0e 94 b3 05 	call	0xb66	; 0xb66 <get_temp>
     7ea:	bc 01       	movw	r22, r24
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				SevenSeg_set_val(1, get_temp(1));
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	0e 94 b3 05 	call	0xb66	; 0xb66 <get_temp>
     7f8:	bc 01       	movw	r22, r24
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>

				if(SevenSeg_get_state() == 0)						//enable display only if it is off
     800:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     804:	88 23       	and	r24, r24
     806:	59 f5       	brne	.+86     	; 0x85e <main+0x144>
				{
					SevenSeg_on();
     808:	0e 94 44 02 	call	0x488	; 0x488 <SevenSeg_on>
				}
				break;
     80c:	28 c0       	rjmp	.+80     	; 0x85e <main+0x144>
			}
			
			case MODIFY_DELTA1: 
			{
				SevenSeg_set_val(1, get_delta(1));
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     814:	bc 01       	movw	r22, r24
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				SevenSeg_set_val(0, 1000);							//set Kessel-display off
     81c:	68 ee       	ldi	r22, 0xE8	; 232
     81e:	73 e0       	ldi	r23, 0x03	; 3
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
     826:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     82a:	88 23       	and	r24, r24
     82c:	d1 f4       	brne	.+52     	; 0x862 <__stack+0x3>
				{
					SevenSeg_on();
     82e:	0e 94 44 02 	call	0x488	; 0x488 <SevenSeg_on>
				}
				break;
     832:	17 c0       	rjmp	.+46     	; 0x862 <__stack+0x3>
			}
			
			case MODIFY_DELTA2:
			{
				SevenSeg_set_val(1, 1000);							//set Dach-display off
     834:	68 ee       	ldi	r22, 0xE8	; 232
     836:	73 e0       	ldi	r23, 0x03	; 3
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				SevenSeg_set_val(0, get_delta(2));
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     844:	bc 01       	movw	r22, r24
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SevenSeg_set_val>
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
     84c:	0e 94 74 02 	call	0x4e8	; 0x4e8 <SevenSeg_get_state>
     850:	88 23       	and	r24, r24
     852:	49 f4       	brne	.+18     	; 0x866 <__stack+0x7>
				{
					SevenSeg_on();
     854:	0e 94 44 02 	call	0x488	; 0x488 <SevenSeg_on>
				}
				break;
     858:	06 c0       	rjmp	.+12     	; 0x866 <__stack+0x7>
			{
				if(SevenSeg_get_state() == 1)						//disable display only if it is on
				{
					SevenSeg_off();
				}
				break;
     85a:	00 00       	nop
     85c:	05 c0       	rjmp	.+10     	; 0x868 <__stack+0x9>

				if(SevenSeg_get_state() == 0)						//enable display only if it is off
				{
					SevenSeg_on();
				}
				break;
     85e:	00 00       	nop
     860:	03 c0       	rjmp	.+6      	; 0x868 <__stack+0x9>
				SevenSeg_set_val(0, 1000);							//set Kessel-display off
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
				{
					SevenSeg_on();
				}
				break;
     862:	00 00       	nop
     864:	01 c0       	rjmp	.+2      	; 0x868 <__stack+0x9>
				SevenSeg_set_val(0, get_delta(2));
				if(SevenSeg_get_state() == 0)						//enable display only if it is off
				{
					SevenSeg_on();
				}
				break;
     866:	00 00       	nop
			}
		}
		WDI_PORT ^= (1<<WDI_PIN);
     868:	85 e3       	ldi	r24, 0x35	; 53
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	25 e3       	ldi	r18, 0x35	; 53
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	f9 01       	movw	r30, r18
     872:	30 81       	ld	r19, Z
     874:	20 e4       	ldi	r18, 0x40	; 64
     876:	23 27       	eor	r18, r19
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
	}
     87c:	8c cf       	rjmp	.-232    	; 0x796 <main+0x7c>

0000087e <setState>:
}

void setState(uint8_t s)
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	1f 92       	push	r1
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	89 83       	std	Y+1, r24	; 0x01
	state = s;
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <state>
//	printf("state -> %d\n", state);
}
     890:	00 00       	nop
     892:	0f 90       	pop	r0
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <getState>:

uint8_t getState()
{
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	cd b7       	in	r28, 0x3d	; 61
     8a0:	de b7       	in	r29, 0x3e	; 62
	return state;
     8a2:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <state>
}
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <regulator_init>:
}

void disable_show_temps(void)
{
	show_temps = 0;
}
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	0e 94 05 10 	call	0x200a	; 0x200a <eeprom_read_byte>
     8bc:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <delta1>
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 05 10 	call	0x200a	; 0x200a <eeprom_read_byte>
     8c8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <delta2>
     8cc:	87 e2       	ldi	r24, 0x27	; 39
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	fc 01       	movw	r30, r24
     8d2:	10 82       	st	Z, r1
     8d4:	87 e2       	ldi	r24, 0x27	; 39
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	27 e2       	ldi	r18, 0x27	; 39
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	f9 01       	movw	r30, r18
     8de:	20 81       	ld	r18, Z
     8e0:	2f 7d       	andi	r18, 0xDF	; 223
     8e2:	fc 01       	movw	r30, r24
     8e4:	20 83       	st	Z, r18
     8e6:	86 e2       	ldi	r24, 0x26	; 38
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	26 e2       	ldi	r18, 0x26	; 38
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	f9 01       	movw	r30, r18
     8f0:	20 81       	ld	r18, Z
     8f2:	20 68       	ori	r18, 0x80	; 128
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 83       	st	Z, r18
     8f8:	85 e4       	ldi	r24, 0x45	; 69
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	25 e4       	ldi	r18, 0x45	; 69
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	f9 01       	movw	r30, r18
     902:	20 81       	ld	r18, Z
     904:	2f 66       	ori	r18, 0x6F	; 111
     906:	fc 01       	movw	r30, r24
     908:	20 83       	st	Z, r18
     90a:	89 e5       	ldi	r24, 0x59	; 89
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	29 e5       	ldi	r18, 0x59	; 89
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	f9 01       	movw	r30, r18
     914:	20 81       	ld	r18, Z
     916:	20 64       	ori	r18, 0x40	; 64
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
     91c:	81 e3       	ldi	r24, 0x31	; 49
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	21 e3       	ldi	r18, 0x31	; 49
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	20 68       	ori	r18, 0x80	; 128
     92a:	fc 01       	movw	r30, r24
     92c:	20 83       	st	Z, r18
     92e:	78 94       	sei
     930:	00 00       	nop
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <inc_delta>:

void inc_delta(uint8_t i_)
{
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	1f 92       	push	r1
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	49 f4       	brne	.+18     	; 0x95c <inc_delta+0x24>
	{
		if(delta1<100)
     94a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     94e:	84 36       	cpi	r24, 0x64	; 100
     950:	28 f4       	brcc	.+10     	; 0x95c <inc_delta+0x24>
			delta1++;
     952:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     956:	8f 5f       	subi	r24, 0xFF	; 255
     958:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <delta1>
	}
	
	if(i_==2)
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	49 f4       	brne	.+18     	; 0x974 <inc_delta+0x3c>
	{
		if(delta2<100)
     962:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     966:	84 36       	cpi	r24, 0x64	; 100
     968:	28 f4       	brcc	.+10     	; 0x974 <inc_delta+0x3c>
			delta2++;
     96a:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     96e:	8f 5f       	subi	r24, 0xFF	; 255
     970:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <delta2>
	}			
}
     974:	00 00       	nop
     976:	0f 90       	pop	r0
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <dec_delta>:

void dec_delta(uint8_t i_)
{
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	1f 92       	push	r1
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	81 30       	cpi	r24, 0x01	; 1
     98e:	49 f4       	brne	.+18     	; 0x9a2 <dec_delta+0x24>
	{
		if(delta1>0)
     990:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     994:	88 23       	and	r24, r24
     996:	29 f0       	breq	.+10     	; 0x9a2 <dec_delta+0x24>
			delta1--;
     998:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     99c:	81 50       	subi	r24, 0x01	; 1
     99e:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <delta1>
	}
	
	if(i_==2)
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	49 f4       	brne	.+18     	; 0x9ba <dec_delta+0x3c>
	{
		if(delta2>0)
     9a8:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     9ac:	88 23       	and	r24, r24
     9ae:	29 f0       	breq	.+10     	; 0x9ba <dec_delta+0x3c>
			delta2--;
     9b0:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     9b4:	81 50       	subi	r24, 0x01	; 1
     9b6:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <delta2>
	}
}
     9ba:	00 00       	nop
     9bc:	0f 90       	pop	r0
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	08 95       	ret

000009c4 <get_delta>:

uint8_t get_delta(uint8_t i_)
{
     9c4:	cf 93       	push	r28
     9c6:	df 93       	push	r29
     9c8:	1f 92       	push	r1
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	89 83       	std	Y+1, r24	; 0x01
	if(i_==1)
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	81 30       	cpi	r24, 0x01	; 1
     9d4:	19 f4       	brne	.+6      	; 0x9dc <get_delta+0x18>
	{
		return delta1;
     9d6:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     9da:	07 c0       	rjmp	.+14     	; 0x9ea <get_delta+0x26>
	}
	if(i_==2)
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	19 f4       	brne	.+6      	; 0x9e8 <get_delta+0x24>
	{
		return delta2;
     9e2:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     9e6:	01 c0       	rjmp	.+2      	; 0x9ea <get_delta+0x26>
	}
	return 255;
     9e8:	8f ef       	ldi	r24, 0xFF	; 255
}
     9ea:	0f 90       	pop	r0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <measure_temp>:


//sensor: 1=dach; 0=kessel
int16_t measure_temp(uint8_t sensor)
{
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	2d 97       	sbiw	r28, 0x0d	; 13
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	8d 87       	std	Y+13, r24	; 0x0d
	ADMUX &= ~0x1F;							//clear MUX4:0
     a10:	87 e2       	ldi	r24, 0x27	; 39
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	27 e2       	ldi	r18, 0x27	; 39
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	f9 01       	movw	r30, r18
     a1a:	20 81       	ld	r18, Z
     a1c:	20 7e       	andi	r18, 0xE0	; 224
     a1e:	fc 01       	movw	r30, r24
     a20:	20 83       	st	Z, r18
	
	if(sensor == 0)
     a22:	8d 85       	ldd	r24, Y+13	; 0x0d
     a24:	88 23       	and	r24, r24
     a26:	49 f4       	brne	.+18     	; 0xa3a <measure_temp+0x48>
		ADMUX |= (1<<MUX0);					//set ADC to CH1. If CH2 has to be sampled MUX[4:0] is alreadyy 0, because it was rsetted above
     a28:	87 e2       	ldi	r24, 0x27	; 39
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	27 e2       	ldi	r18, 0x27	; 39
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	f9 01       	movw	r30, r18
     a32:	20 81       	ld	r18, Z
     a34:	21 60       	ori	r18, 0x01	; 1
     a36:	fc 01       	movw	r30, r24
     a38:	20 83       	st	Z, r18
		
	ADCSRA |= (1<<ADSC);					//start conversion
     a3a:	86 e2       	ldi	r24, 0x26	; 38
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	26 e2       	ldi	r18, 0x26	; 38
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	f9 01       	movw	r30, r18
     a44:	20 81       	ld	r18, Z
     a46:	20 64       	ori	r18, 0x40	; 64
     a48:	fc 01       	movw	r30, r24
     a4a:	20 83       	st	Z, r18
	
	while( (ADCSRA & (1<<ADSC)) > 0 )		//wait for end of conversion
     a4c:	00 00       	nop
     a4e:	86 e2       	ldi	r24, 0x26	; 38
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	fc 01       	movw	r30, r24
     a54:	80 81       	ld	r24, Z
     a56:	88 2f       	mov	r24, r24
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	80 74       	andi	r24, 0x40	; 64
     a5c:	99 27       	eor	r25, r25
     a5e:	18 16       	cp	r1, r24
     a60:	19 06       	cpc	r1, r25
     a62:	ac f3       	brlt	.-22     	; 0xa4e <measure_temp+0x5c>
	{
	}
	
	uint16_t adc_val = ADCL;				//get conversion result low-byte
     a64:	84 e2       	ldi	r24, 0x24	; 36
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	fc 01       	movw	r30, r24
     a6a:	80 81       	ld	r24, Z
     a6c:	88 2f       	mov	r24, r24
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	9a 83       	std	Y+2, r25	; 0x02
     a72:	89 83       	std	Y+1, r24	; 0x01
	adc_val += (ADCH<<8);					//and high-byte
     a74:	85 e2       	ldi	r24, 0x25	; 37
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	fc 01       	movw	r30, r24
     a7a:	80 81       	ld	r24, Z
     a7c:	88 2f       	mov	r24, r24
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	98 2f       	mov	r25, r24
     a82:	88 27       	eor	r24, r24
     a84:	9c 01       	movw	r18, r24
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	9a 81       	ldd	r25, Y+2	; 0x02
     a8a:	82 0f       	add	r24, r18
     a8c:	93 1f       	adc	r25, r19
     a8e:	9a 83       	std	Y+2, r25	; 0x02
     a90:	89 83       	std	Y+1, r24	; 0x01
	
	
	float voltage = adc_val * 4.854e-3f;									//get voltage from ADC-values	
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	cc 01       	movw	r24, r24
     a98:	a0 e0       	ldi	r26, 0x00	; 0
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	bc 01       	movw	r22, r24
     a9e:	cd 01       	movw	r24, r26
     aa0:	0e 94 13 09 	call	0x1226	; 0x1226 <__floatunsisf>
     aa4:	dc 01       	movw	r26, r24
     aa6:	cb 01       	movw	r24, r22
     aa8:	2e e4       	ldi	r18, 0x4E	; 78
     aaa:	3e e0       	ldi	r19, 0x0E	; 14
     aac:	4f e9       	ldi	r20, 0x9F	; 159
     aae:	5b e3       	ldi	r21, 0x3B	; 59
     ab0:	bc 01       	movw	r22, r24
     ab2:	cd 01       	movw	r24, r26
     ab4:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	8b 83       	std	Y+3, r24	; 0x03
     abe:	9c 83       	std	Y+4, r25	; 0x04
     ac0:	ad 83       	std	Y+5, r26	; 0x05
     ac2:	be 83       	std	Y+6, r27	; 0x06
	float temp_f = (7382.06f - voltage*2751.75f)/(voltage - 29.323f);		//get temperature from voltage	
     ac4:	20 e0       	ldi	r18, 0x00	; 0
     ac6:	3c ef       	ldi	r19, 0xFC	; 252
     ac8:	4b e2       	ldi	r20, 0x2B	; 43
     aca:	55 e4       	ldi	r21, 0x45	; 69
     acc:	6b 81       	ldd	r22, Y+3	; 0x03
     ace:	7c 81       	ldd	r23, Y+4	; 0x04
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     ad8:	dc 01       	movw	r26, r24
     ada:	cb 01       	movw	r24, r22
     adc:	9c 01       	movw	r18, r24
     ade:	ad 01       	movw	r20, r26
     ae0:	6b e7       	ldi	r22, 0x7B	; 123
     ae2:	70 eb       	ldi	r23, 0xB0	; 176
     ae4:	86 ee       	ldi	r24, 0xE6	; 230
     ae6:	95 e4       	ldi	r25, 0x45	; 69
     ae8:	0e 94 fe 07 	call	0xffc	; 0xffc <__subsf3>
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	6c 01       	movw	r12, r24
     af2:	7d 01       	movw	r14, r26
     af4:	21 e8       	ldi	r18, 0x81	; 129
     af6:	35 e9       	ldi	r19, 0x95	; 149
     af8:	4a ee       	ldi	r20, 0xEA	; 234
     afa:	51 e4       	ldi	r21, 0x41	; 65
     afc:	6b 81       	ldd	r22, Y+3	; 0x03
     afe:	7c 81       	ldd	r23, Y+4	; 0x04
     b00:	8d 81       	ldd	r24, Y+5	; 0x05
     b02:	9e 81       	ldd	r25, Y+6	; 0x06
     b04:	0e 94 fe 07 	call	0xffc	; 0xffc <__subsf3>
     b08:	dc 01       	movw	r26, r24
     b0a:	cb 01       	movw	r24, r22
     b0c:	9c 01       	movw	r18, r24
     b0e:	ad 01       	movw	r20, r26
     b10:	c7 01       	movw	r24, r14
     b12:	b6 01       	movw	r22, r12
     b14:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divsf3>
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	8f 83       	std	Y+7, r24	; 0x07
     b1e:	98 87       	std	Y+8, r25	; 0x08
     b20:	a9 87       	std	Y+9, r26	; 0x09
     b22:	ba 87       	std	Y+10, r27	; 0x0a
	int16_t temp = (int16_t) roundf( temp_f );								//round temperature and cast it to int
     b24:	8f 81       	ldd	r24, Y+7	; 0x07
     b26:	98 85       	ldd	r25, Y+8	; 0x08
     b28:	a9 85       	ldd	r26, Y+9	; 0x09
     b2a:	ba 85       	ldd	r27, Y+10	; 0x0a
     b2c:	bc 01       	movw	r22, r24
     b2e:	cd 01       	movw	r24, r26
     b30:	0e 94 0e 0a 	call	0x141c	; 0x141c <round>
     b34:	dc 01       	movw	r26, r24
     b36:	cb 01       	movw	r24, r22
     b38:	bc 01       	movw	r22, r24
     b3a:	cd 01       	movw	r24, r26
     b3c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fixsfsi>
     b40:	dc 01       	movw	r26, r24
     b42:	cb 01       	movw	r24, r22
     b44:	9c 87       	std	Y+12, r25	; 0x0c
     b46:	8b 87       	std	Y+11, r24	; 0x0b
	

	return temp;
     b48:	8b 85       	ldd	r24, Y+11	; 0x0b
     b4a:	9c 85       	ldd	r25, Y+12	; 0x0c
}
     b4c:	2d 96       	adiw	r28, 0x0d	; 13
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	ff 90       	pop	r15
     b5e:	ef 90       	pop	r14
     b60:	df 90       	pop	r13
     b62:	cf 90       	pop	r12
     b64:	08 95       	ret

00000b66 <get_temp>:

//sensor: 1=dach; 0=kessel
int16_t get_temp(uint8_t sensor)
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	1f 92       	push	r1
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	89 83       	std	Y+1, r24	; 0x01
	if(sensor == 1)
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	29 f4       	brne	.+10     	; 0xb82 <get_temp+0x1c>
	{
		return temp_dach;
     b78:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <temp_dach>
     b7c:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <temp_dach+0x1>
     b80:	0a c0       	rjmp	.+20     	; 0xb96 <get_temp+0x30>
	}
	else if(sensor == 0)
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	88 23       	and	r24, r24
     b86:	29 f4       	brne	.+10     	; 0xb92 <get_temp+0x2c>
	{
		return temp_kessel;
     b88:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <temp_kessel>
     b8c:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <temp_kessel+0x1>
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <get_temp+0x30>
	}
	else
	{
		return -999;
     b92:	89 e1       	ldi	r24, 0x19	; 25
     b94:	9c ef       	ldi	r25, 0xFC	; 252
	}
}
     b96:	0f 90       	pop	r0
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <set_PWM>:


//sets duty cycle; 0-100%
void set_PWM(uint8_t duty)
{
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	1f 92       	push	r1
     ba8:	cd b7       	in	r28, 0x3d	; 61
     baa:	de b7       	in	r29, 0x3e	; 62
     bac:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = (uint8_t)((duty/100.0f)*255);
     bae:	03 e4       	ldi	r16, 0x43	; 67
     bb0:	10 e0       	ldi	r17, 0x00	; 0
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	88 2f       	mov	r24, r24
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	09 2e       	mov	r0, r25
     bba:	00 0c       	add	r0, r0
     bbc:	aa 0b       	sbc	r26, r26
     bbe:	bb 0b       	sbc	r27, r27
     bc0:	bc 01       	movw	r22, r24
     bc2:	cd 01       	movw	r24, r26
     bc4:	0e 94 15 09 	call	0x122a	; 0x122a <__floatsisf>
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	48 ec       	ldi	r20, 0xC8	; 200
     bd2:	52 e4       	ldi	r21, 0x42	; 66
     bd4:	bc 01       	movw	r22, r24
     bd6:	cd 01       	movw	r24, r26
     bd8:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__divsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	4f e7       	ldi	r20, 0x7F	; 127
     be6:	53 e4       	ldi	r21, 0x43	; 67
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	0e 94 a1 09 	call	0x1342	; 0x1342 <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	f8 01       	movw	r30, r16
     c02:	80 83       	st	Z, r24
}
     c04:	00 00       	nop
     c06:	0f 90       	pop	r0
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	08 95       	ret

00000c12 <__vector_5>:



ISR(TIMER2_OVF_vect)
{	
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
	
	cli();
     c3e:	f8 94       	cli
	
	if(loop_cnt < 62) //if 2s are not passed
     c40:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <loop_cnt>
     c44:	8e 33       	cpi	r24, 0x3E	; 62
     c46:	30 f4       	brcc	.+12     	; 0xc54 <__vector_5+0x42>
	{
		loop_cnt++;
     c48:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <loop_cnt>
     c4c:	8f 5f       	subi	r24, 0xFF	; 255
     c4e:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <loop_cnt>
     c52:	af c0       	rjmp	.+350    	; 0xdb2 <__vector_5+0x1a0>
	}
	
	else	//if it is time to work...
	{
		if (log_counter == 255)
     c54:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <log_counter>
     c58:	8f 3f       	cpi	r24, 0xFF	; 255
     c5a:	11 f4       	brne	.+4      	; 0xc60 <__vector_5+0x4e>
		{
			log_counter = 0;
     c5c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <log_counter>
		}
		
		PORTD ^= (1<<PD5);
     c60:	82 e3       	ldi	r24, 0x32	; 50
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	22 e3       	ldi	r18, 0x32	; 50
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	f9 01       	movw	r30, r18
     c6a:	30 81       	ld	r19, Z
     c6c:	20 e2       	ldi	r18, 0x20	; 32
     c6e:	23 27       	eor	r18, r19
     c70:	fc 01       	movw	r30, r24
     c72:	20 83       	st	Z, r18

		temp_dach   = measure_temp(1) - 3; //-3 to compensate the wires
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <measure_temp>
     c7a:	03 97       	sbiw	r24, 0x03	; 3
     c7c:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <temp_dach+0x1>
     c80:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <temp_dach>
		temp_kessel = measure_temp(0);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <measure_temp>
     c8a:	90 93 a4 00 	sts	0x00A4, r25	; 0x8000a4 <temp_kessel+0x1>
     c8e:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <temp_kessel>
		
		
		d_teta = temp_dach - temp_kessel;
     c92:	20 91 a1 00 	lds	r18, 0x00A1	; 0x8000a1 <temp_dach>
     c96:	30 91 a2 00 	lds	r19, 0x00A2	; 0x8000a2 <temp_dach+0x1>
     c9a:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <temp_kessel>
     c9e:	90 91 a4 00 	lds	r25, 0x00A4	; 0x8000a4 <temp_kessel+0x1>
     ca2:	a9 01       	movw	r20, r18
     ca4:	48 1b       	sub	r20, r24
     ca6:	59 0b       	sbc	r21, r25
     ca8:	ca 01       	movw	r24, r20
     caa:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <d_teta+0x1>
     cae:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <d_teta>
		
		if(d_teta > delta1)									
     cb2:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <delta1>
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <d_teta>
     cbe:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <d_teta+0x1>
     cc2:	28 17       	cp	r18, r24
     cc4:	39 07       	cpc	r19, r25
     cc6:	1c f4       	brge	.+6      	; 0xcce <__vector_5+0xbc>
		{	
			comming_from_high_temp = 1;						//if we are coming from a temperature difference higher than delta1, set flag
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <comming_from_high_temp>
		}
	
		if(comming_from_high_temp == 1)						//if we are coming from a temperature difference higher than delta1
     cce:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <comming_from_high_temp>
     cd2:	81 30       	cpi	r24, 0x01	; 1
     cd4:	b9 f5       	brne	.+110    	; 0xd44 <__vector_5+0x132>
		{
			if( d_teta >= delta2)							//if we are still above delta 2
     cd6:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <delta2>
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <d_teta>
     ce2:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <d_teta+0x1>
     ce6:	82 17       	cp	r24, r18
     ce8:	93 07       	cpc	r25, r19
     cea:	44 f1       	brlt	.+80     	; 0xd3c <__vector_5+0x12a>
			{
				if((d_teta * k) >= 0)						//if d_teta is negative the multiplication with k will lead to a negative duty cycle, so thsi has to be handled
     cec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <k>
     cf0:	48 2f       	mov	r20, r24
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	20 91 a6 00 	lds	r18, 0x00A6	; 0x8000a6 <d_teta>
     cf8:	30 91 a7 00 	lds	r19, 0x00A7	; 0x8000a7 <d_teta+0x1>
     cfc:	42 9f       	mul	r20, r18
     cfe:	c0 01       	movw	r24, r0
     d00:	43 9f       	mul	r20, r19
     d02:	90 0d       	add	r25, r0
     d04:	52 9f       	mul	r21, r18
     d06:	90 0d       	add	r25, r0
     d08:	11 24       	eor	r1, r1
     d0a:	99 23       	and	r25, r25
     d0c:	a4 f0       	brlt	.+40     	; 0xd36 <__vector_5+0x124>
				{
					duty = (uint8_t) d_teta * k;			//50 Kevlin -> 100% PWM
     d0e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <d_teta>
     d12:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <d_teta+0x1>
     d16:	98 2f       	mov	r25, r24
     d18:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <k>
     d1c:	98 9f       	mul	r25, r24
     d1e:	80 2d       	mov	r24, r0
     d20:	11 24       	eor	r1, r1
     d22:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <duty>
					if( duty > 100)
     d26:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <duty>
     d2a:	85 36       	cpi	r24, 0x65	; 101
     d2c:	58 f0       	brcs	.+22     	; 0xd44 <__vector_5+0x132>
					{
						duty = 100;
     d2e:	84 e6       	ldi	r24, 0x64	; 100
     d30:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <duty>
     d34:	07 c0       	rjmp	.+14     	; 0xd44 <__vector_5+0x132>
					}
				}
				else										//if we are finally at delta2 or lower, reset flag. Only if we get above delta1 again, the pump is going to be activatda gain
				{
					duty = 0;
     d36:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <duty>
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <__vector_5+0x132>
				}
			}
			else
			{
				duty = 0;
     d3c:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <duty>
				comming_from_high_temp = 0;
     d40:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <comming_from_high_temp>
			}
		}
		
		set_PWM(duty);
     d44:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <duty>
     d48:	0e 94 cf 05 	call	0xb9e	; 0xb9e <set_PWM>
	
		loop_cnt = 0;
     d4c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <loop_cnt>
		log_counter ++;
     d50:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <log_counter>
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <log_counter>
		
		
		#ifdef LOGGING
		if(log_counter==15) //every 30 secounds
     d5a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <log_counter>
     d5e:	8f 30       	cpi	r24, 0x0F	; 15
     d60:	41 f5       	brne	.+80     	; 0xdb2 <__vector_5+0x1a0>
		{
			log_counter = 0;
     d62:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <log_counter>
			printf("%d;%d;%d\n", temp_dach, temp_kessel, duty);
     d66:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <duty>
     d6a:	48 2f       	mov	r20, r24
     d6c:	50 e0       	ldi	r21, 0x00	; 0
     d6e:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <temp_kessel>
     d72:	30 91 a4 00 	lds	r19, 0x00A4	; 0x8000a4 <temp_kessel+0x1>
     d76:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <temp_dach>
     d7a:	90 91 a2 00 	lds	r25, 0x00A2	; 0x8000a2 <temp_dach+0x1>
     d7e:	65 2f       	mov	r22, r21
     d80:	6f 93       	push	r22
     d82:	4f 93       	push	r20
     d84:	43 2f       	mov	r20, r19
     d86:	4f 93       	push	r20
     d88:	2f 93       	push	r18
     d8a:	29 2f       	mov	r18, r25
     d8c:	2f 93       	push	r18
     d8e:	8f 93       	push	r24
     d90:	84 e8       	ldi	r24, 0x84	; 132
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	89 2f       	mov	r24, r25
     d96:	8f 93       	push	r24
     d98:	84 e8       	ldi	r24, 0x84	; 132
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	8f 93       	push	r24
     d9e:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <printf>
     da2:	8d b7       	in	r24, 0x3d	; 61
     da4:	9e b7       	in	r25, 0x3e	; 62
     da6:	08 96       	adiw	r24, 0x08	; 8
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
	}
	
	
	
	
	TIFR &= ~(1<<TOV2);			//clear flag
     db2:	88 e5       	ldi	r24, 0x58	; 88
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	28 e5       	ldi	r18, 0x58	; 88
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	f9 01       	movw	r30, r18
     dbc:	20 81       	ld	r18, Z
     dbe:	2f 7b       	andi	r18, 0xBF	; 191
     dc0:	fc 01       	movw	r30, r24
     dc2:	20 83       	st	Z, r18
		
	sei();
     dc4:	78 94       	sei
}
     dc6:	00 00       	nop
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	ff 91       	pop	r31
     dce:	ef 91       	pop	r30
     dd0:	bf 91       	pop	r27
     dd2:	af 91       	pop	r26
     dd4:	9f 91       	pop	r25
     dd6:	8f 91       	pop	r24
     dd8:	7f 91       	pop	r23
     dda:	6f 91       	pop	r22
     ddc:	5f 91       	pop	r21
     dde:	4f 91       	pop	r20
     de0:	3f 91       	pop	r19
     de2:	2f 91       	pop	r18
     de4:	0f 90       	pop	r0
     de6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     dea:	0f 90       	pop	r0
     dec:	1f 90       	pop	r1
     dee:	18 95       	reti

00000df0 <Timeout_init>:
#include "main.h"
#include "regulator.h"
#include "uart.h"

void Timeout_init()
{
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0x00;
     df8:	8f e4       	ldi	r24, 0x4F	; 79
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	fc 01       	movw	r30, r24
     dfe:	10 82       	st	Z, r1
	
	TIMSK |= (1<<TOIE1);			//enable overflow-event
     e00:	89 e5       	ldi	r24, 0x59	; 89
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	29 e5       	ldi	r18, 0x59	; 89
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	f9 01       	movw	r30, r18
     e0a:	20 81       	ld	r18, Z
     e0c:	24 60       	ori	r18, 0x04	; 4
     e0e:	fc 01       	movw	r30, r24
     e10:	20 83       	st	Z, r18
	sei();
     e12:	78 94       	sei
}
     e14:	00 00       	nop
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <start_timeout_timer>:
void start_timeout_timer()
{
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;						 //reset timer counter value
     e24:	8c e4       	ldi	r24, 0x4C	; 76
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	fc 01       	movw	r30, r24
     e2a:	11 82       	std	Z+1, r1	; 0x01
     e2c:	10 82       	st	Z, r1
	TCCR1B = (1<<CS12) | (1<<CS10);  //start timer at prescaler /1024
     e2e:	8e e4       	ldi	r24, 0x4E	; 78
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	25 e0       	ldi	r18, 0x05	; 5
     e34:	fc 01       	movw	r30, r24
     e36:	20 83       	st	Z, r18
}
     e38:	00 00       	nop
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <stop_timeout_timer>:

void stop_timeout_timer()
{
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     e48:	8e e4       	ldi	r24, 0x4E	; 78
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	2e e4       	ldi	r18, 0x4E	; 78
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	f9 01       	movw	r30, r18
     e52:	20 81       	ld	r18, Z
     e54:	2a 7f       	andi	r18, 0xFA	; 250
     e56:	fc 01       	movw	r30, r24
     e58:	20 83       	st	Z, r18
}
     e5a:	00 00       	nop
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <__vector_9>:



//timeouted
ISR(TIMER1_OVF_vect)
{	
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e6a:	0f 92       	push	r0
     e6c:	11 24       	eor	r1, r1
     e6e:	0f 93       	push	r16
     e70:	1f 93       	push	r17
     e72:	2f 93       	push	r18
     e74:	3f 93       	push	r19
     e76:	4f 93       	push	r20
     e78:	5f 93       	push	r21
     e7a:	6f 93       	push	r22
     e7c:	7f 93       	push	r23
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
     e82:	af 93       	push	r26
     e84:	bf 93       	push	r27
     e86:	ef 93       	push	r30
     e88:	ff 93       	push	r31
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
	cli();
     e92:	f8 94       	cli
	
	if((getState() == 3) && (eeprom_read_byte((uint8_t*)0) != get_delta(1)))
     e94:	0e 94 4d 04 	call	0x89a	; 0x89a <getState>
     e98:	83 30       	cpi	r24, 0x03	; 3
     e9a:	a1 f4       	brne	.+40     	; 0xec4 <__vector_9+0x62>
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 05 10 	call	0x200a	; 0x200a <eeprom_read_byte>
     ea4:	08 2f       	mov	r16, r24
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     eae:	08 17       	cp	r16, r24
     eb0:	19 07       	cpc	r17, r25
     eb2:	41 f0       	breq	.+16     	; 0xec4 <__vector_9+0x62>
	{
		eeprom_update_byte((uint8_t*)(0), (uint8_t)get_delta(1));
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     eba:	68 2f       	mov	r22, r24
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 0d 10 	call	0x201a	; 0x201a <eeprom_update_byte>
	}
	
	if((getState() == 4) && (eeprom_read_byte((uint8_t*)1) != get_delta(2)))
     ec4:	0e 94 4d 04 	call	0x89a	; 0x89a <getState>
     ec8:	84 30       	cpi	r24, 0x04	; 4
     eca:	a1 f4       	brne	.+40     	; 0xef4 <__vector_9+0x92>
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 05 10 	call	0x200a	; 0x200a <eeprom_read_byte>
     ed4:	08 2f       	mov	r16, r24
     ed6:	10 e0       	ldi	r17, 0x00	; 0
     ed8:	82 e0       	ldi	r24, 0x02	; 2
     eda:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     ede:	08 17       	cp	r16, r24
     ee0:	19 07       	cpc	r17, r25
     ee2:	41 f0       	breq	.+16     	; 0xef4 <__vector_9+0x92>
	{
		eeprom_update_byte((uint8_t*)(1), (uint8_t)get_delta(2));
     ee4:	82 e0       	ldi	r24, 0x02	; 2
     ee6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <get_delta>
     eea:	68 2f       	mov	r22, r24
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 0d 10 	call	0x201a	; 0x201a <eeprom_update_byte>
	}
	
	setState(DISPLAY_OFF);
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	0e 94 3f 04 	call	0x87e	; 0x87e <setState>
	
	TCCR1B &= ~((1<<CS12) | (1<<CS10)); //stop timer
     efa:	8e e4       	ldi	r24, 0x4E	; 78
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	2e e4       	ldi	r18, 0x4E	; 78
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	f9 01       	movw	r30, r18
     f04:	20 81       	ld	r18, Z
     f06:	2a 7f       	andi	r18, 0xFA	; 250
     f08:	fc 01       	movw	r30, r24
     f0a:	20 83       	st	Z, r18
	TCNT1 = 0;						   //resetting counter register
     f0c:	8c e4       	ldi	r24, 0x4C	; 76
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	fc 01       	movw	r30, r24
     f12:	11 82       	std	Z+1, r1	; 0x01
     f14:	10 82       	st	Z, r1
	
	
	TIFR &= ~(1<<TOV1);
     f16:	88 e5       	ldi	r24, 0x58	; 88
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	28 e5       	ldi	r18, 0x58	; 88
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	f9 01       	movw	r30, r18
     f20:	20 81       	ld	r18, Z
     f22:	2b 7f       	andi	r18, 0xFB	; 251
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
	sei();
     f28:	78 94       	sei
     f2a:	00 00       	nop
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	ff 91       	pop	r31
     f32:	ef 91       	pop	r30
     f34:	bf 91       	pop	r27
     f36:	af 91       	pop	r26
     f38:	9f 91       	pop	r25
     f3a:	8f 91       	pop	r24
     f3c:	7f 91       	pop	r23
     f3e:	6f 91       	pop	r22
     f40:	5f 91       	pop	r21
     f42:	4f 91       	pop	r20
     f44:	3f 91       	pop	r19
     f46:	2f 91       	pop	r18
     f48:	1f 91       	pop	r17
     f4a:	0f 91       	pop	r16
     f4c:	0f 90       	pop	r0
     f4e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <uart_init>:
#include <avr/io.h>
#include <stdio.h>


void uart_init()
{
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<RXEN) | (1<<TXEN);  //enable receive and transmit
     f60:	8a e2       	ldi	r24, 0x2A	; 42
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	2a e2       	ldi	r18, 0x2A	; 42
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	f9 01       	movw	r30, r18
     f6a:	20 81       	ld	r18, Z
     f6c:	28 61       	ori	r18, 0x18	; 24
     f6e:	fc 01       	movw	r30, r24
     f70:	20 83       	st	Z, r18
	UBRRL = 51;						 //setting datarate to 9600 baud/s
     f72:	89 e2       	ldi	r24, 0x29	; 41
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	23 e3       	ldi	r18, 0x33	; 51
     f78:	fc 01       	movw	r30, r24
     f7a:	20 83       	st	Z, r18

	UCSRB |= (1<<RXEN) | (1<<TXEN);
     f7c:	8a e2       	ldi	r24, 0x2A	; 42
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	2a e2       	ldi	r18, 0x2A	; 42
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	f9 01       	movw	r30, r18
     f86:	20 81       	ld	r18, Z
     f88:	28 61       	ori	r18, 0x18	; 24
     f8a:	fc 01       	movw	r30, r24
     f8c:	20 83       	st	Z, r18

	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
     f8e:	80 e4       	ldi	r24, 0x40	; 64
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	20 e4       	ldi	r18, 0x40	; 64
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	f9 01       	movw	r30, r18
     f98:	20 81       	ld	r18, Z
     f9a:	26 68       	ori	r18, 0x86	; 134
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
}
     fa0:	00 00       	nop
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <uart_putchar>:


int uart_putchar(char c, FILE *stream)
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	00 d0       	rcall	.+0      	; 0xfae <uart_putchar+0x6>
     fae:	1f 92       	push	r1
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
     fb4:	89 83       	std	Y+1, r24	; 0x01
     fb6:	7b 83       	std	Y+3, r23	; 0x03
     fb8:	6a 83       	std	Y+2, r22	; 0x02
	if(c=='\n')
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	8a 30       	cpi	r24, 0x0A	; 10
     fbe:	31 f4       	brne	.+12     	; 0xfcc <uart_putchar+0x24>
		uart_putchar('\r', stream);
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	bc 01       	movw	r22, r24
     fc6:	8d e0       	ldi	r24, 0x0D	; 13
     fc8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <uart_putchar>
		
		
	while( (UCSRA & (1<<UDRE)) ==0 )
     fcc:	00 00       	nop
     fce:	8b e2       	ldi	r24, 0x2B	; 43
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	fc 01       	movw	r30, r24
     fd4:	80 81       	ld	r24, Z
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	80 72       	andi	r24, 0x20	; 32
     fdc:	99 27       	eor	r25, r25
     fde:	89 2b       	or	r24, r25
     fe0:	b1 f3       	breq	.-20     	; 0xfce <uart_putchar+0x26>
	{
	}
		
	UDR = c;
     fe2:	8c e2       	ldi	r24, 0x2C	; 44
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	29 81       	ldd	r18, Y+1	; 0x01
     fe8:	fc 01       	movw	r30, r24
     fea:	20 83       	st	Z, r18
	
	return 0;
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	90 e0       	ldi	r25, 0x00	; 0
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <__subsf3>:
     ffc:	50 58       	subi	r21, 0x80	; 128

00000ffe <__addsf3>:
     ffe:	bb 27       	eor	r27, r27
    1000:	aa 27       	eor	r26, r26
    1002:	0e 94 16 08 	call	0x102c	; 0x102c <__addsf3x>
    1006:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_round>
    100a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fp_pscA>
    100e:	38 f0       	brcs	.+14     	; 0x101e <__addsf3+0x20>
    1010:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fp_pscB>
    1014:	20 f0       	brcs	.+8      	; 0x101e <__addsf3+0x20>
    1016:	39 f4       	brne	.+14     	; 0x1026 <__addsf3+0x28>
    1018:	9f 3f       	cpi	r25, 0xFF	; 255
    101a:	19 f4       	brne	.+6      	; 0x1022 <__addsf3+0x24>
    101c:	26 f4       	brtc	.+8      	; 0x1026 <__addsf3+0x28>
    101e:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__fp_nan>
    1022:	0e f4       	brtc	.+2      	; 0x1026 <__addsf3+0x28>
    1024:	e0 95       	com	r30
    1026:	e7 fb       	bst	r30, 7
    1028:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_inf>

0000102c <__addsf3x>:
    102c:	e9 2f       	mov	r30, r25
    102e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_split3>
    1032:	58 f3       	brcs	.-42     	; 0x100a <__addsf3+0xc>
    1034:	ba 17       	cp	r27, r26
    1036:	62 07       	cpc	r22, r18
    1038:	73 07       	cpc	r23, r19
    103a:	84 07       	cpc	r24, r20
    103c:	95 07       	cpc	r25, r21
    103e:	20 f0       	brcs	.+8      	; 0x1048 <__addsf3x+0x1c>
    1040:	79 f4       	brne	.+30     	; 0x1060 <__addsf3x+0x34>
    1042:	a6 f5       	brtc	.+104    	; 0x10ac <__addsf3x+0x80>
    1044:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_zero>
    1048:	0e f4       	brtc	.+2      	; 0x104c <__addsf3x+0x20>
    104a:	e0 95       	com	r30
    104c:	0b 2e       	mov	r0, r27
    104e:	ba 2f       	mov	r27, r26
    1050:	a0 2d       	mov	r26, r0
    1052:	0b 01       	movw	r0, r22
    1054:	b9 01       	movw	r22, r18
    1056:	90 01       	movw	r18, r0
    1058:	0c 01       	movw	r0, r24
    105a:	ca 01       	movw	r24, r20
    105c:	a0 01       	movw	r20, r0
    105e:	11 24       	eor	r1, r1
    1060:	ff 27       	eor	r31, r31
    1062:	59 1b       	sub	r21, r25
    1064:	99 f0       	breq	.+38     	; 0x108c <__addsf3x+0x60>
    1066:	59 3f       	cpi	r21, 0xF9	; 249
    1068:	50 f4       	brcc	.+20     	; 0x107e <__addsf3x+0x52>
    106a:	50 3e       	cpi	r21, 0xE0	; 224
    106c:	68 f1       	brcs	.+90     	; 0x10c8 <__addsf3x+0x9c>
    106e:	1a 16       	cp	r1, r26
    1070:	f0 40       	sbci	r31, 0x00	; 0
    1072:	a2 2f       	mov	r26, r18
    1074:	23 2f       	mov	r18, r19
    1076:	34 2f       	mov	r19, r20
    1078:	44 27       	eor	r20, r20
    107a:	58 5f       	subi	r21, 0xF8	; 248
    107c:	f3 cf       	rjmp	.-26     	; 0x1064 <__addsf3x+0x38>
    107e:	46 95       	lsr	r20
    1080:	37 95       	ror	r19
    1082:	27 95       	ror	r18
    1084:	a7 95       	ror	r26
    1086:	f0 40       	sbci	r31, 0x00	; 0
    1088:	53 95       	inc	r21
    108a:	c9 f7       	brne	.-14     	; 0x107e <__addsf3x+0x52>
    108c:	7e f4       	brtc	.+30     	; 0x10ac <__addsf3x+0x80>
    108e:	1f 16       	cp	r1, r31
    1090:	ba 0b       	sbc	r27, r26
    1092:	62 0b       	sbc	r22, r18
    1094:	73 0b       	sbc	r23, r19
    1096:	84 0b       	sbc	r24, r20
    1098:	ba f0       	brmi	.+46     	; 0x10c8 <__addsf3x+0x9c>
    109a:	91 50       	subi	r25, 0x01	; 1
    109c:	a1 f0       	breq	.+40     	; 0x10c6 <__addsf3x+0x9a>
    109e:	ff 0f       	add	r31, r31
    10a0:	bb 1f       	adc	r27, r27
    10a2:	66 1f       	adc	r22, r22
    10a4:	77 1f       	adc	r23, r23
    10a6:	88 1f       	adc	r24, r24
    10a8:	c2 f7       	brpl	.-16     	; 0x109a <__addsf3x+0x6e>
    10aa:	0e c0       	rjmp	.+28     	; 0x10c8 <__addsf3x+0x9c>
    10ac:	ba 0f       	add	r27, r26
    10ae:	62 1f       	adc	r22, r18
    10b0:	73 1f       	adc	r23, r19
    10b2:	84 1f       	adc	r24, r20
    10b4:	48 f4       	brcc	.+18     	; 0x10c8 <__addsf3x+0x9c>
    10b6:	87 95       	ror	r24
    10b8:	77 95       	ror	r23
    10ba:	67 95       	ror	r22
    10bc:	b7 95       	ror	r27
    10be:	f7 95       	ror	r31
    10c0:	9e 3f       	cpi	r25, 0xFE	; 254
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__addsf3x+0x9a>
    10c4:	b0 cf       	rjmp	.-160    	; 0x1026 <__addsf3+0x28>
    10c6:	93 95       	inc	r25
    10c8:	88 0f       	add	r24, r24
    10ca:	08 f0       	brcs	.+2      	; 0x10ce <__addsf3x+0xa2>
    10cc:	99 27       	eor	r25, r25
    10ce:	ee 0f       	add	r30, r30
    10d0:	97 95       	ror	r25
    10d2:	87 95       	ror	r24
    10d4:	08 95       	ret

000010d6 <__divsf3>:
    10d6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__divsf3x>
    10da:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_round>
    10de:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fp_pscB>
    10e2:	58 f0       	brcs	.+22     	; 0x10fa <__divsf3+0x24>
    10e4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fp_pscA>
    10e8:	40 f0       	brcs	.+16     	; 0x10fa <__divsf3+0x24>
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <__divsf3+0x20>
    10ec:	5f 3f       	cpi	r21, 0xFF	; 255
    10ee:	29 f0       	breq	.+10     	; 0x10fa <__divsf3+0x24>
    10f0:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_inf>
    10f4:	51 11       	cpse	r21, r1
    10f6:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_szero>
    10fa:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__fp_nan>

000010fe <__divsf3x>:
    10fe:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_split3>
    1102:	68 f3       	brcs	.-38     	; 0x10de <__divsf3+0x8>

00001104 <__divsf3_pse>:
    1104:	99 23       	and	r25, r25
    1106:	b1 f3       	breq	.-20     	; 0x10f4 <__divsf3+0x1e>
    1108:	55 23       	and	r21, r21
    110a:	91 f3       	breq	.-28     	; 0x10f0 <__divsf3+0x1a>
    110c:	95 1b       	sub	r25, r21
    110e:	55 0b       	sbc	r21, r21
    1110:	bb 27       	eor	r27, r27
    1112:	aa 27       	eor	r26, r26
    1114:	62 17       	cp	r22, r18
    1116:	73 07       	cpc	r23, r19
    1118:	84 07       	cpc	r24, r20
    111a:	38 f0       	brcs	.+14     	; 0x112a <__divsf3_pse+0x26>
    111c:	9f 5f       	subi	r25, 0xFF	; 255
    111e:	5f 4f       	sbci	r21, 0xFF	; 255
    1120:	22 0f       	add	r18, r18
    1122:	33 1f       	adc	r19, r19
    1124:	44 1f       	adc	r20, r20
    1126:	aa 1f       	adc	r26, r26
    1128:	a9 f3       	breq	.-22     	; 0x1114 <__divsf3_pse+0x10>
    112a:	35 d0       	rcall	.+106    	; 0x1196 <__divsf3_pse+0x92>
    112c:	0e 2e       	mov	r0, r30
    112e:	3a f0       	brmi	.+14     	; 0x113e <__divsf3_pse+0x3a>
    1130:	e0 e8       	ldi	r30, 0x80	; 128
    1132:	32 d0       	rcall	.+100    	; 0x1198 <__divsf3_pse+0x94>
    1134:	91 50       	subi	r25, 0x01	; 1
    1136:	50 40       	sbci	r21, 0x00	; 0
    1138:	e6 95       	lsr	r30
    113a:	00 1c       	adc	r0, r0
    113c:	ca f7       	brpl	.-14     	; 0x1130 <__divsf3_pse+0x2c>
    113e:	2b d0       	rcall	.+86     	; 0x1196 <__divsf3_pse+0x92>
    1140:	fe 2f       	mov	r31, r30
    1142:	29 d0       	rcall	.+82     	; 0x1196 <__divsf3_pse+0x92>
    1144:	66 0f       	add	r22, r22
    1146:	77 1f       	adc	r23, r23
    1148:	88 1f       	adc	r24, r24
    114a:	bb 1f       	adc	r27, r27
    114c:	26 17       	cp	r18, r22
    114e:	37 07       	cpc	r19, r23
    1150:	48 07       	cpc	r20, r24
    1152:	ab 07       	cpc	r26, r27
    1154:	b0 e8       	ldi	r27, 0x80	; 128
    1156:	09 f0       	breq	.+2      	; 0x115a <__divsf3_pse+0x56>
    1158:	bb 0b       	sbc	r27, r27
    115a:	80 2d       	mov	r24, r0
    115c:	bf 01       	movw	r22, r30
    115e:	ff 27       	eor	r31, r31
    1160:	93 58       	subi	r25, 0x83	; 131
    1162:	5f 4f       	sbci	r21, 0xFF	; 255
    1164:	3a f0       	brmi	.+14     	; 0x1174 <__divsf3_pse+0x70>
    1166:	9e 3f       	cpi	r25, 0xFE	; 254
    1168:	51 05       	cpc	r21, r1
    116a:	78 f0       	brcs	.+30     	; 0x118a <__divsf3_pse+0x86>
    116c:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_inf>
    1170:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_szero>
    1174:	5f 3f       	cpi	r21, 0xFF	; 255
    1176:	e4 f3       	brlt	.-8      	; 0x1170 <__divsf3_pse+0x6c>
    1178:	98 3e       	cpi	r25, 0xE8	; 232
    117a:	d4 f3       	brlt	.-12     	; 0x1170 <__divsf3_pse+0x6c>
    117c:	86 95       	lsr	r24
    117e:	77 95       	ror	r23
    1180:	67 95       	ror	r22
    1182:	b7 95       	ror	r27
    1184:	f7 95       	ror	r31
    1186:	9f 5f       	subi	r25, 0xFF	; 255
    1188:	c9 f7       	brne	.-14     	; 0x117c <__divsf3_pse+0x78>
    118a:	88 0f       	add	r24, r24
    118c:	91 1d       	adc	r25, r1
    118e:	96 95       	lsr	r25
    1190:	87 95       	ror	r24
    1192:	97 f9       	bld	r25, 7
    1194:	08 95       	ret
    1196:	e1 e0       	ldi	r30, 0x01	; 1
    1198:	66 0f       	add	r22, r22
    119a:	77 1f       	adc	r23, r23
    119c:	88 1f       	adc	r24, r24
    119e:	bb 1f       	adc	r27, r27
    11a0:	62 17       	cp	r22, r18
    11a2:	73 07       	cpc	r23, r19
    11a4:	84 07       	cpc	r24, r20
    11a6:	ba 07       	cpc	r27, r26
    11a8:	20 f0       	brcs	.+8      	; 0x11b2 <__divsf3_pse+0xae>
    11aa:	62 1b       	sub	r22, r18
    11ac:	73 0b       	sbc	r23, r19
    11ae:	84 0b       	sbc	r24, r20
    11b0:	ba 0b       	sbc	r27, r26
    11b2:	ee 1f       	adc	r30, r30
    11b4:	88 f7       	brcc	.-30     	; 0x1198 <__divsf3_pse+0x94>
    11b6:	e0 95       	com	r30
    11b8:	08 95       	ret

000011ba <__fixsfsi>:
    11ba:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <__fixunssfsi>
    11be:	68 94       	set
    11c0:	b1 11       	cpse	r27, r1
    11c2:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_szero>
    11c6:	08 95       	ret

000011c8 <__fixunssfsi>:
    11c8:	0e 94 80 09 	call	0x1300	; 0x1300 <__fp_splitA>
    11cc:	88 f0       	brcs	.+34     	; 0x11f0 <__fixunssfsi+0x28>
    11ce:	9f 57       	subi	r25, 0x7F	; 127
    11d0:	98 f0       	brcs	.+38     	; 0x11f8 <__fixunssfsi+0x30>
    11d2:	b9 2f       	mov	r27, r25
    11d4:	99 27       	eor	r25, r25
    11d6:	b7 51       	subi	r27, 0x17	; 23
    11d8:	b0 f0       	brcs	.+44     	; 0x1206 <__fixunssfsi+0x3e>
    11da:	e1 f0       	breq	.+56     	; 0x1214 <__fixunssfsi+0x4c>
    11dc:	66 0f       	add	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	1a f0       	brmi	.+6      	; 0x11ec <__fixunssfsi+0x24>
    11e6:	ba 95       	dec	r27
    11e8:	c9 f7       	brne	.-14     	; 0x11dc <__fixunssfsi+0x14>
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <__fixunssfsi+0x4c>
    11ec:	b1 30       	cpi	r27, 0x01	; 1
    11ee:	91 f0       	breq	.+36     	; 0x1214 <__fixunssfsi+0x4c>
    11f0:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fp_zero>
    11f4:	b1 e0       	ldi	r27, 0x01	; 1
    11f6:	08 95       	ret
    11f8:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_zero>
    11fc:	67 2f       	mov	r22, r23
    11fe:	78 2f       	mov	r23, r24
    1200:	88 27       	eor	r24, r24
    1202:	b8 5f       	subi	r27, 0xF8	; 248
    1204:	39 f0       	breq	.+14     	; 0x1214 <__fixunssfsi+0x4c>
    1206:	b9 3f       	cpi	r27, 0xF9	; 249
    1208:	cc f3       	brlt	.-14     	; 0x11fc <__fixunssfsi+0x34>
    120a:	86 95       	lsr	r24
    120c:	77 95       	ror	r23
    120e:	67 95       	ror	r22
    1210:	b3 95       	inc	r27
    1212:	d9 f7       	brne	.-10     	; 0x120a <__fixunssfsi+0x42>
    1214:	3e f4       	brtc	.+14     	; 0x1224 <__fixunssfsi+0x5c>
    1216:	90 95       	com	r25
    1218:	80 95       	com	r24
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	08 95       	ret

00001226 <__floatunsisf>:
    1226:	e8 94       	clt
    1228:	09 c0       	rjmp	.+18     	; 0x123c <__floatsisf+0x12>

0000122a <__floatsisf>:
    122a:	97 fb       	bst	r25, 7
    122c:	3e f4       	brtc	.+14     	; 0x123c <__floatsisf+0x12>
    122e:	90 95       	com	r25
    1230:	80 95       	com	r24
    1232:	70 95       	com	r23
    1234:	61 95       	neg	r22
    1236:	7f 4f       	sbci	r23, 0xFF	; 255
    1238:	8f 4f       	sbci	r24, 0xFF	; 255
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	99 23       	and	r25, r25
    123e:	a9 f0       	breq	.+42     	; 0x126a <__floatsisf+0x40>
    1240:	f9 2f       	mov	r31, r25
    1242:	96 e9       	ldi	r25, 0x96	; 150
    1244:	bb 27       	eor	r27, r27
    1246:	93 95       	inc	r25
    1248:	f6 95       	lsr	r31
    124a:	87 95       	ror	r24
    124c:	77 95       	ror	r23
    124e:	67 95       	ror	r22
    1250:	b7 95       	ror	r27
    1252:	f1 11       	cpse	r31, r1
    1254:	f8 cf       	rjmp	.-16     	; 0x1246 <__floatsisf+0x1c>
    1256:	fa f4       	brpl	.+62     	; 0x1296 <__floatsisf+0x6c>
    1258:	bb 0f       	add	r27, r27
    125a:	11 f4       	brne	.+4      	; 0x1260 <__floatsisf+0x36>
    125c:	60 ff       	sbrs	r22, 0
    125e:	1b c0       	rjmp	.+54     	; 0x1296 <__floatsisf+0x6c>
    1260:	6f 5f       	subi	r22, 0xFF	; 255
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	16 c0       	rjmp	.+44     	; 0x1296 <__floatsisf+0x6c>
    126a:	88 23       	and	r24, r24
    126c:	11 f0       	breq	.+4      	; 0x1272 <__floatsisf+0x48>
    126e:	96 e9       	ldi	r25, 0x96	; 150
    1270:	11 c0       	rjmp	.+34     	; 0x1294 <__floatsisf+0x6a>
    1272:	77 23       	and	r23, r23
    1274:	21 f0       	breq	.+8      	; 0x127e <__floatsisf+0x54>
    1276:	9e e8       	ldi	r25, 0x8E	; 142
    1278:	87 2f       	mov	r24, r23
    127a:	76 2f       	mov	r23, r22
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <__floatsisf+0x5e>
    127e:	66 23       	and	r22, r22
    1280:	71 f0       	breq	.+28     	; 0x129e <__floatsisf+0x74>
    1282:	96 e8       	ldi	r25, 0x86	; 134
    1284:	86 2f       	mov	r24, r22
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	2a f0       	brmi	.+10     	; 0x1296 <__floatsisf+0x6c>
    128c:	9a 95       	dec	r25
    128e:	66 0f       	add	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	da f7       	brpl	.-10     	; 0x128c <__floatsisf+0x62>
    1296:	88 0f       	add	r24, r24
    1298:	96 95       	lsr	r25
    129a:	87 95       	ror	r24
    129c:	97 f9       	bld	r25, 7
    129e:	08 95       	ret

000012a0 <__fp_inf>:
    12a0:	97 f9       	bld	r25, 7
    12a2:	9f 67       	ori	r25, 0x7F	; 127
    12a4:	80 e8       	ldi	r24, 0x80	; 128
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	08 95       	ret

000012ac <__fp_nan>:
    12ac:	9f ef       	ldi	r25, 0xFF	; 255
    12ae:	80 ec       	ldi	r24, 0xC0	; 192
    12b0:	08 95       	ret

000012b2 <__fp_pscA>:
    12b2:	00 24       	eor	r0, r0
    12b4:	0a 94       	dec	r0
    12b6:	16 16       	cp	r1, r22
    12b8:	17 06       	cpc	r1, r23
    12ba:	18 06       	cpc	r1, r24
    12bc:	09 06       	cpc	r0, r25
    12be:	08 95       	ret

000012c0 <__fp_pscB>:
    12c0:	00 24       	eor	r0, r0
    12c2:	0a 94       	dec	r0
    12c4:	12 16       	cp	r1, r18
    12c6:	13 06       	cpc	r1, r19
    12c8:	14 06       	cpc	r1, r20
    12ca:	05 06       	cpc	r0, r21
    12cc:	08 95       	ret

000012ce <__fp_round>:
    12ce:	09 2e       	mov	r0, r25
    12d0:	03 94       	inc	r0
    12d2:	00 0c       	add	r0, r0
    12d4:	11 f4       	brne	.+4      	; 0x12da <__fp_round+0xc>
    12d6:	88 23       	and	r24, r24
    12d8:	52 f0       	brmi	.+20     	; 0x12ee <__fp_round+0x20>
    12da:	bb 0f       	add	r27, r27
    12dc:	40 f4       	brcc	.+16     	; 0x12ee <__fp_round+0x20>
    12de:	bf 2b       	or	r27, r31
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <__fp_round+0x18>
    12e2:	60 ff       	sbrs	r22, 0
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <__fp_round+0x20>
    12e6:	6f 5f       	subi	r22, 0xFF	; 255
    12e8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ea:	8f 4f       	sbci	r24, 0xFF	; 255
    12ec:	9f 4f       	sbci	r25, 0xFF	; 255
    12ee:	08 95       	ret

000012f0 <__fp_split3>:
    12f0:	57 fd       	sbrc	r21, 7
    12f2:	90 58       	subi	r25, 0x80	; 128
    12f4:	44 0f       	add	r20, r20
    12f6:	55 1f       	adc	r21, r21
    12f8:	59 f0       	breq	.+22     	; 0x1310 <__fp_splitA+0x10>
    12fa:	5f 3f       	cpi	r21, 0xFF	; 255
    12fc:	71 f0       	breq	.+28     	; 0x131a <__fp_splitA+0x1a>
    12fe:	47 95       	ror	r20

00001300 <__fp_splitA>:
    1300:	88 0f       	add	r24, r24
    1302:	97 fb       	bst	r25, 7
    1304:	99 1f       	adc	r25, r25
    1306:	61 f0       	breq	.+24     	; 0x1320 <__fp_splitA+0x20>
    1308:	9f 3f       	cpi	r25, 0xFF	; 255
    130a:	79 f0       	breq	.+30     	; 0x132a <__fp_splitA+0x2a>
    130c:	87 95       	ror	r24
    130e:	08 95       	ret
    1310:	12 16       	cp	r1, r18
    1312:	13 06       	cpc	r1, r19
    1314:	14 06       	cpc	r1, r20
    1316:	55 1f       	adc	r21, r21
    1318:	f2 cf       	rjmp	.-28     	; 0x12fe <__fp_split3+0xe>
    131a:	46 95       	lsr	r20
    131c:	f1 df       	rcall	.-30     	; 0x1300 <__fp_splitA>
    131e:	08 c0       	rjmp	.+16     	; 0x1330 <__fp_splitA+0x30>
    1320:	16 16       	cp	r1, r22
    1322:	17 06       	cpc	r1, r23
    1324:	18 06       	cpc	r1, r24
    1326:	99 1f       	adc	r25, r25
    1328:	f1 cf       	rjmp	.-30     	; 0x130c <__fp_splitA+0xc>
    132a:	86 95       	lsr	r24
    132c:	71 05       	cpc	r23, r1
    132e:	61 05       	cpc	r22, r1
    1330:	08 94       	sec
    1332:	08 95       	ret

00001334 <__fp_zero>:
    1334:	e8 94       	clt

00001336 <__fp_szero>:
    1336:	bb 27       	eor	r27, r27
    1338:	66 27       	eor	r22, r22
    133a:	77 27       	eor	r23, r23
    133c:	cb 01       	movw	r24, r22
    133e:	97 f9       	bld	r25, 7
    1340:	08 95       	ret

00001342 <__mulsf3>:
    1342:	0e 94 b4 09 	call	0x1368	; 0x1368 <__mulsf3x>
    1346:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__fp_round>
    134a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <__fp_pscA>
    134e:	38 f0       	brcs	.+14     	; 0x135e <__mulsf3+0x1c>
    1350:	0e 94 60 09 	call	0x12c0	; 0x12c0 <__fp_pscB>
    1354:	20 f0       	brcs	.+8      	; 0x135e <__mulsf3+0x1c>
    1356:	95 23       	and	r25, r21
    1358:	11 f0       	breq	.+4      	; 0x135e <__mulsf3+0x1c>
    135a:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_inf>
    135e:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <__fp_nan>
    1362:	11 24       	eor	r1, r1
    1364:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_szero>

00001368 <__mulsf3x>:
    1368:	0e 94 78 09 	call	0x12f0	; 0x12f0 <__fp_split3>
    136c:	70 f3       	brcs	.-36     	; 0x134a <__mulsf3+0x8>

0000136e <__mulsf3_pse>:
    136e:	95 9f       	mul	r25, r21
    1370:	c1 f3       	breq	.-16     	; 0x1362 <__mulsf3+0x20>
    1372:	95 0f       	add	r25, r21
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	55 1f       	adc	r21, r21
    1378:	62 9f       	mul	r22, r18
    137a:	f0 01       	movw	r30, r0
    137c:	72 9f       	mul	r23, r18
    137e:	bb 27       	eor	r27, r27
    1380:	f0 0d       	add	r31, r0
    1382:	b1 1d       	adc	r27, r1
    1384:	63 9f       	mul	r22, r19
    1386:	aa 27       	eor	r26, r26
    1388:	f0 0d       	add	r31, r0
    138a:	b1 1d       	adc	r27, r1
    138c:	aa 1f       	adc	r26, r26
    138e:	64 9f       	mul	r22, r20
    1390:	66 27       	eor	r22, r22
    1392:	b0 0d       	add	r27, r0
    1394:	a1 1d       	adc	r26, r1
    1396:	66 1f       	adc	r22, r22
    1398:	82 9f       	mul	r24, r18
    139a:	22 27       	eor	r18, r18
    139c:	b0 0d       	add	r27, r0
    139e:	a1 1d       	adc	r26, r1
    13a0:	62 1f       	adc	r22, r18
    13a2:	73 9f       	mul	r23, r19
    13a4:	b0 0d       	add	r27, r0
    13a6:	a1 1d       	adc	r26, r1
    13a8:	62 1f       	adc	r22, r18
    13aa:	83 9f       	mul	r24, r19
    13ac:	a0 0d       	add	r26, r0
    13ae:	61 1d       	adc	r22, r1
    13b0:	22 1f       	adc	r18, r18
    13b2:	74 9f       	mul	r23, r20
    13b4:	33 27       	eor	r19, r19
    13b6:	a0 0d       	add	r26, r0
    13b8:	61 1d       	adc	r22, r1
    13ba:	23 1f       	adc	r18, r19
    13bc:	84 9f       	mul	r24, r20
    13be:	60 0d       	add	r22, r0
    13c0:	21 1d       	adc	r18, r1
    13c2:	82 2f       	mov	r24, r18
    13c4:	76 2f       	mov	r23, r22
    13c6:	6a 2f       	mov	r22, r26
    13c8:	11 24       	eor	r1, r1
    13ca:	9f 57       	subi	r25, 0x7F	; 127
    13cc:	50 40       	sbci	r21, 0x00	; 0
    13ce:	9a f0       	brmi	.+38     	; 0x13f6 <__mulsf3_pse+0x88>
    13d0:	f1 f0       	breq	.+60     	; 0x140e <__mulsf3_pse+0xa0>
    13d2:	88 23       	and	r24, r24
    13d4:	4a f0       	brmi	.+18     	; 0x13e8 <__mulsf3_pse+0x7a>
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31
    13da:	bb 1f       	adc	r27, r27
    13dc:	66 1f       	adc	r22, r22
    13de:	77 1f       	adc	r23, r23
    13e0:	88 1f       	adc	r24, r24
    13e2:	91 50       	subi	r25, 0x01	; 1
    13e4:	50 40       	sbci	r21, 0x00	; 0
    13e6:	a9 f7       	brne	.-22     	; 0x13d2 <__mulsf3_pse+0x64>
    13e8:	9e 3f       	cpi	r25, 0xFE	; 254
    13ea:	51 05       	cpc	r21, r1
    13ec:	80 f0       	brcs	.+32     	; 0x140e <__mulsf3_pse+0xa0>
    13ee:	0c 94 50 09 	jmp	0x12a0	; 0x12a0 <__fp_inf>
    13f2:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_szero>
    13f6:	5f 3f       	cpi	r21, 0xFF	; 255
    13f8:	e4 f3       	brlt	.-8      	; 0x13f2 <__mulsf3_pse+0x84>
    13fa:	98 3e       	cpi	r25, 0xE8	; 232
    13fc:	d4 f3       	brlt	.-12     	; 0x13f2 <__mulsf3_pse+0x84>
    13fe:	86 95       	lsr	r24
    1400:	77 95       	ror	r23
    1402:	67 95       	ror	r22
    1404:	b7 95       	ror	r27
    1406:	f7 95       	ror	r31
    1408:	e7 95       	ror	r30
    140a:	9f 5f       	subi	r25, 0xFF	; 255
    140c:	c1 f7       	brne	.-16     	; 0x13fe <__mulsf3_pse+0x90>
    140e:	fe 2b       	or	r31, r30
    1410:	88 0f       	add	r24, r24
    1412:	91 1d       	adc	r25, r1
    1414:	96 95       	lsr	r25
    1416:	87 95       	ror	r24
    1418:	97 f9       	bld	r25, 7
    141a:	08 95       	ret

0000141c <round>:
    141c:	0e 94 80 09 	call	0x1300	; 0x1300 <__fp_splitA>
    1420:	e8 f0       	brcs	.+58     	; 0x145c <round+0x40>
    1422:	9e 37       	cpi	r25, 0x7E	; 126
    1424:	e8 f0       	brcs	.+58     	; 0x1460 <round+0x44>
    1426:	96 39       	cpi	r25, 0x96	; 150
    1428:	b8 f4       	brcc	.+46     	; 0x1458 <round+0x3c>
    142a:	9e 38       	cpi	r25, 0x8E	; 142
    142c:	48 f4       	brcc	.+18     	; 0x1440 <round+0x24>
    142e:	67 2f       	mov	r22, r23
    1430:	78 2f       	mov	r23, r24
    1432:	88 27       	eor	r24, r24
    1434:	98 5f       	subi	r25, 0xF8	; 248
    1436:	f9 cf       	rjmp	.-14     	; 0x142a <round+0xe>
    1438:	86 95       	lsr	r24
    143a:	77 95       	ror	r23
    143c:	67 95       	ror	r22
    143e:	93 95       	inc	r25
    1440:	95 39       	cpi	r25, 0x95	; 149
    1442:	d0 f3       	brcs	.-12     	; 0x1438 <round+0x1c>
    1444:	b6 2f       	mov	r27, r22
    1446:	b1 70       	andi	r27, 0x01	; 1
    1448:	6b 0f       	add	r22, r27
    144a:	71 1d       	adc	r23, r1
    144c:	81 1d       	adc	r24, r1
    144e:	20 f4       	brcc	.+8      	; 0x1458 <round+0x3c>
    1450:	87 95       	ror	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	93 95       	inc	r25
    1458:	0c 94 32 0a 	jmp	0x1464	; 0x1464 <__fp_mintl>
    145c:	0c 94 4d 0a 	jmp	0x149a	; 0x149a <__fp_mpack>
    1460:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_szero>

00001464 <__fp_mintl>:
    1464:	88 23       	and	r24, r24
    1466:	71 f4       	brne	.+28     	; 0x1484 <__fp_mintl+0x20>
    1468:	77 23       	and	r23, r23
    146a:	21 f0       	breq	.+8      	; 0x1474 <__fp_mintl+0x10>
    146c:	98 50       	subi	r25, 0x08	; 8
    146e:	87 2b       	or	r24, r23
    1470:	76 2f       	mov	r23, r22
    1472:	07 c0       	rjmp	.+14     	; 0x1482 <__fp_mintl+0x1e>
    1474:	66 23       	and	r22, r22
    1476:	11 f4       	brne	.+4      	; 0x147c <__fp_mintl+0x18>
    1478:	99 27       	eor	r25, r25
    147a:	0d c0       	rjmp	.+26     	; 0x1496 <__fp_mintl+0x32>
    147c:	90 51       	subi	r25, 0x10	; 16
    147e:	86 2b       	or	r24, r22
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	60 e0       	ldi	r22, 0x00	; 0
    1484:	2a f0       	brmi	.+10     	; 0x1490 <__fp_mintl+0x2c>
    1486:	9a 95       	dec	r25
    1488:	66 0f       	add	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	88 1f       	adc	r24, r24
    148e:	da f7       	brpl	.-10     	; 0x1486 <__fp_mintl+0x22>
    1490:	88 0f       	add	r24, r24
    1492:	96 95       	lsr	r25
    1494:	87 95       	ror	r24
    1496:	97 f9       	bld	r25, 7
    1498:	08 95       	ret

0000149a <__fp_mpack>:
    149a:	9f 3f       	cpi	r25, 0xFF	; 255
    149c:	31 f0       	breq	.+12     	; 0x14aa <__fp_mpack_finite+0xc>

0000149e <__fp_mpack_finite>:
    149e:	91 50       	subi	r25, 0x01	; 1
    14a0:	20 f4       	brcc	.+8      	; 0x14aa <__fp_mpack_finite+0xc>
    14a2:	87 95       	ror	r24
    14a4:	77 95       	ror	r23
    14a6:	67 95       	ror	r22
    14a8:	b7 95       	ror	r27
    14aa:	88 0f       	add	r24, r24
    14ac:	91 1d       	adc	r25, r1
    14ae:	96 95       	lsr	r25
    14b0:	87 95       	ror	r24
    14b2:	97 f9       	bld	r25, 7
    14b4:	08 95       	ret

000014b6 <vfprintf>:
    14b6:	a0 e1       	ldi	r26, 0x10	; 16
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e1 e6       	ldi	r30, 0x61	; 97
    14bc:	fa e0       	ldi	r31, 0x0A	; 10
    14be:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__prologue_saves__>
    14c2:	7c 01       	movw	r14, r24
    14c4:	1b 01       	movw	r2, r22
    14c6:	6a 01       	movw	r12, r20
    14c8:	fc 01       	movw	r30, r24
    14ca:	17 82       	std	Z+7, r1	; 0x07
    14cc:	16 82       	std	Z+6, r1	; 0x06
    14ce:	83 81       	ldd	r24, Z+3	; 0x03
    14d0:	81 ff       	sbrs	r24, 1
    14d2:	44 c3       	rjmp	.+1672   	; 0x1b5c <vfprintf+0x6a6>
    14d4:	9e 01       	movw	r18, r28
    14d6:	2f 5f       	subi	r18, 0xFF	; 255
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	39 01       	movw	r6, r18
    14dc:	f7 01       	movw	r30, r14
    14de:	93 81       	ldd	r25, Z+3	; 0x03
    14e0:	f1 01       	movw	r30, r2
    14e2:	93 fd       	sbrc	r25, 3
    14e4:	85 91       	lpm	r24, Z+
    14e6:	93 ff       	sbrs	r25, 3
    14e8:	81 91       	ld	r24, Z+
    14ea:	1f 01       	movw	r2, r30
    14ec:	88 23       	and	r24, r24
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <vfprintf+0x3c>
    14f0:	31 c3       	rjmp	.+1634   	; 0x1b54 <vfprintf+0x69e>
    14f2:	85 32       	cpi	r24, 0x25	; 37
    14f4:	39 f4       	brne	.+14     	; 0x1504 <vfprintf+0x4e>
    14f6:	93 fd       	sbrc	r25, 3
    14f8:	85 91       	lpm	r24, Z+
    14fa:	93 ff       	sbrs	r25, 3
    14fc:	81 91       	ld	r24, Z+
    14fe:	1f 01       	movw	r2, r30
    1500:	85 32       	cpi	r24, 0x25	; 37
    1502:	39 f4       	brne	.+14     	; 0x1512 <vfprintf+0x5c>
    1504:	b7 01       	movw	r22, r14
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    150c:	56 01       	movw	r10, r12
    150e:	65 01       	movw	r12, r10
    1510:	e5 cf       	rjmp	.-54     	; 0x14dc <vfprintf+0x26>
    1512:	10 e0       	ldi	r17, 0x00	; 0
    1514:	51 2c       	mov	r5, r1
    1516:	91 2c       	mov	r9, r1
    1518:	ff e1       	ldi	r31, 0x1F	; 31
    151a:	f9 15       	cp	r31, r9
    151c:	d8 f0       	brcs	.+54     	; 0x1554 <vfprintf+0x9e>
    151e:	8b 32       	cpi	r24, 0x2B	; 43
    1520:	79 f0       	breq	.+30     	; 0x1540 <vfprintf+0x8a>
    1522:	38 f4       	brcc	.+14     	; 0x1532 <vfprintf+0x7c>
    1524:	80 32       	cpi	r24, 0x20	; 32
    1526:	79 f0       	breq	.+30     	; 0x1546 <vfprintf+0x90>
    1528:	83 32       	cpi	r24, 0x23	; 35
    152a:	a1 f4       	brne	.+40     	; 0x1554 <vfprintf+0x9e>
    152c:	f9 2d       	mov	r31, r9
    152e:	f0 61       	ori	r31, 0x10	; 16
    1530:	2e c0       	rjmp	.+92     	; 0x158e <vfprintf+0xd8>
    1532:	8d 32       	cpi	r24, 0x2D	; 45
    1534:	61 f0       	breq	.+24     	; 0x154e <vfprintf+0x98>
    1536:	80 33       	cpi	r24, 0x30	; 48
    1538:	69 f4       	brne	.+26     	; 0x1554 <vfprintf+0x9e>
    153a:	29 2d       	mov	r18, r9
    153c:	21 60       	ori	r18, 0x01	; 1
    153e:	2d c0       	rjmp	.+90     	; 0x159a <vfprintf+0xe4>
    1540:	39 2d       	mov	r19, r9
    1542:	32 60       	ori	r19, 0x02	; 2
    1544:	93 2e       	mov	r9, r19
    1546:	89 2d       	mov	r24, r9
    1548:	84 60       	ori	r24, 0x04	; 4
    154a:	98 2e       	mov	r9, r24
    154c:	2a c0       	rjmp	.+84     	; 0x15a2 <vfprintf+0xec>
    154e:	e9 2d       	mov	r30, r9
    1550:	e8 60       	ori	r30, 0x08	; 8
    1552:	15 c0       	rjmp	.+42     	; 0x157e <vfprintf+0xc8>
    1554:	97 fc       	sbrc	r9, 7
    1556:	2d c0       	rjmp	.+90     	; 0x15b2 <vfprintf+0xfc>
    1558:	20 ed       	ldi	r18, 0xD0	; 208
    155a:	28 0f       	add	r18, r24
    155c:	2a 30       	cpi	r18, 0x0A	; 10
    155e:	88 f4       	brcc	.+34     	; 0x1582 <vfprintf+0xcc>
    1560:	96 fe       	sbrs	r9, 6
    1562:	06 c0       	rjmp	.+12     	; 0x1570 <vfprintf+0xba>
    1564:	3a e0       	ldi	r19, 0x0A	; 10
    1566:	13 9f       	mul	r17, r19
    1568:	20 0d       	add	r18, r0
    156a:	11 24       	eor	r1, r1
    156c:	12 2f       	mov	r17, r18
    156e:	19 c0       	rjmp	.+50     	; 0x15a2 <vfprintf+0xec>
    1570:	8a e0       	ldi	r24, 0x0A	; 10
    1572:	58 9e       	mul	r5, r24
    1574:	20 0d       	add	r18, r0
    1576:	11 24       	eor	r1, r1
    1578:	52 2e       	mov	r5, r18
    157a:	e9 2d       	mov	r30, r9
    157c:	e0 62       	ori	r30, 0x20	; 32
    157e:	9e 2e       	mov	r9, r30
    1580:	10 c0       	rjmp	.+32     	; 0x15a2 <vfprintf+0xec>
    1582:	8e 32       	cpi	r24, 0x2E	; 46
    1584:	31 f4       	brne	.+12     	; 0x1592 <vfprintf+0xdc>
    1586:	96 fc       	sbrc	r9, 6
    1588:	e5 c2       	rjmp	.+1482   	; 0x1b54 <vfprintf+0x69e>
    158a:	f9 2d       	mov	r31, r9
    158c:	f0 64       	ori	r31, 0x40	; 64
    158e:	9f 2e       	mov	r9, r31
    1590:	08 c0       	rjmp	.+16     	; 0x15a2 <vfprintf+0xec>
    1592:	8c 36       	cpi	r24, 0x6C	; 108
    1594:	21 f4       	brne	.+8      	; 0x159e <vfprintf+0xe8>
    1596:	29 2d       	mov	r18, r9
    1598:	20 68       	ori	r18, 0x80	; 128
    159a:	92 2e       	mov	r9, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <vfprintf+0xec>
    159e:	88 36       	cpi	r24, 0x68	; 104
    15a0:	41 f4       	brne	.+16     	; 0x15b2 <vfprintf+0xfc>
    15a2:	f1 01       	movw	r30, r2
    15a4:	93 fd       	sbrc	r25, 3
    15a6:	85 91       	lpm	r24, Z+
    15a8:	93 ff       	sbrs	r25, 3
    15aa:	81 91       	ld	r24, Z+
    15ac:	1f 01       	movw	r2, r30
    15ae:	81 11       	cpse	r24, r1
    15b0:	b3 cf       	rjmp	.-154    	; 0x1518 <vfprintf+0x62>
    15b2:	9b eb       	ldi	r25, 0xBB	; 187
    15b4:	98 0f       	add	r25, r24
    15b6:	93 30       	cpi	r25, 0x03	; 3
    15b8:	20 f4       	brcc	.+8      	; 0x15c2 <vfprintf+0x10c>
    15ba:	99 2d       	mov	r25, r9
    15bc:	90 61       	ori	r25, 0x10	; 16
    15be:	80 5e       	subi	r24, 0xE0	; 224
    15c0:	07 c0       	rjmp	.+14     	; 0x15d0 <vfprintf+0x11a>
    15c2:	9b e9       	ldi	r25, 0x9B	; 155
    15c4:	98 0f       	add	r25, r24
    15c6:	93 30       	cpi	r25, 0x03	; 3
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <vfprintf+0x116>
    15ca:	66 c1       	rjmp	.+716    	; 0x1898 <vfprintf+0x3e2>
    15cc:	99 2d       	mov	r25, r9
    15ce:	9f 7e       	andi	r25, 0xEF	; 239
    15d0:	96 ff       	sbrs	r25, 6
    15d2:	16 e0       	ldi	r17, 0x06	; 6
    15d4:	9f 73       	andi	r25, 0x3F	; 63
    15d6:	99 2e       	mov	r9, r25
    15d8:	85 36       	cpi	r24, 0x65	; 101
    15da:	19 f4       	brne	.+6      	; 0x15e2 <vfprintf+0x12c>
    15dc:	90 64       	ori	r25, 0x40	; 64
    15de:	99 2e       	mov	r9, r25
    15e0:	08 c0       	rjmp	.+16     	; 0x15f2 <vfprintf+0x13c>
    15e2:	86 36       	cpi	r24, 0x66	; 102
    15e4:	21 f4       	brne	.+8      	; 0x15ee <vfprintf+0x138>
    15e6:	39 2f       	mov	r19, r25
    15e8:	30 68       	ori	r19, 0x80	; 128
    15ea:	93 2e       	mov	r9, r19
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <vfprintf+0x13c>
    15ee:	11 11       	cpse	r17, r1
    15f0:	11 50       	subi	r17, 0x01	; 1
    15f2:	97 fe       	sbrs	r9, 7
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <vfprintf+0x14e>
    15f6:	1c 33       	cpi	r17, 0x3C	; 60
    15f8:	50 f4       	brcc	.+20     	; 0x160e <vfprintf+0x158>
    15fa:	44 24       	eor	r4, r4
    15fc:	43 94       	inc	r4
    15fe:	41 0e       	add	r4, r17
    1600:	27 e0       	ldi	r18, 0x07	; 7
    1602:	0b c0       	rjmp	.+22     	; 0x161a <vfprintf+0x164>
    1604:	18 30       	cpi	r17, 0x08	; 8
    1606:	38 f0       	brcs	.+14     	; 0x1616 <vfprintf+0x160>
    1608:	27 e0       	ldi	r18, 0x07	; 7
    160a:	17 e0       	ldi	r17, 0x07	; 7
    160c:	05 c0       	rjmp	.+10     	; 0x1618 <vfprintf+0x162>
    160e:	27 e0       	ldi	r18, 0x07	; 7
    1610:	9c e3       	ldi	r25, 0x3C	; 60
    1612:	49 2e       	mov	r4, r25
    1614:	02 c0       	rjmp	.+4      	; 0x161a <vfprintf+0x164>
    1616:	21 2f       	mov	r18, r17
    1618:	41 2c       	mov	r4, r1
    161a:	56 01       	movw	r10, r12
    161c:	84 e0       	ldi	r24, 0x04	; 4
    161e:	a8 0e       	add	r10, r24
    1620:	b1 1c       	adc	r11, r1
    1622:	f6 01       	movw	r30, r12
    1624:	60 81       	ld	r22, Z
    1626:	71 81       	ldd	r23, Z+1	; 0x01
    1628:	82 81       	ldd	r24, Z+2	; 0x02
    162a:	93 81       	ldd	r25, Z+3	; 0x03
    162c:	04 2d       	mov	r16, r4
    162e:	a3 01       	movw	r20, r6
    1630:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <__ftoa_engine>
    1634:	6c 01       	movw	r12, r24
    1636:	f9 81       	ldd	r31, Y+1	; 0x01
    1638:	fc 87       	std	Y+12, r31	; 0x0c
    163a:	f0 ff       	sbrs	r31, 0
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <vfprintf+0x18c>
    163e:	f3 ff       	sbrs	r31, 3
    1640:	06 c0       	rjmp	.+12     	; 0x164e <vfprintf+0x198>
    1642:	91 fc       	sbrc	r9, 1
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <vfprintf+0x19c>
    1646:	92 fe       	sbrs	r9, 2
    1648:	06 c0       	rjmp	.+12     	; 0x1656 <vfprintf+0x1a0>
    164a:	00 e2       	ldi	r16, 0x20	; 32
    164c:	05 c0       	rjmp	.+10     	; 0x1658 <vfprintf+0x1a2>
    164e:	0d e2       	ldi	r16, 0x2D	; 45
    1650:	03 c0       	rjmp	.+6      	; 0x1658 <vfprintf+0x1a2>
    1652:	0b e2       	ldi	r16, 0x2B	; 43
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <vfprintf+0x1a2>
    1656:	00 e0       	ldi	r16, 0x00	; 0
    1658:	8c 85       	ldd	r24, Y+12	; 0x0c
    165a:	8c 70       	andi	r24, 0x0C	; 12
    165c:	19 f0       	breq	.+6      	; 0x1664 <vfprintf+0x1ae>
    165e:	01 11       	cpse	r16, r1
    1660:	5a c2       	rjmp	.+1204   	; 0x1b16 <vfprintf+0x660>
    1662:	9b c2       	rjmp	.+1334   	; 0x1b9a <vfprintf+0x6e4>
    1664:	97 fe       	sbrs	r9, 7
    1666:	10 c0       	rjmp	.+32     	; 0x1688 <vfprintf+0x1d2>
    1668:	4c 0c       	add	r4, r12
    166a:	fc 85       	ldd	r31, Y+12	; 0x0c
    166c:	f4 ff       	sbrs	r31, 4
    166e:	04 c0       	rjmp	.+8      	; 0x1678 <vfprintf+0x1c2>
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	81 33       	cpi	r24, 0x31	; 49
    1674:	09 f4       	brne	.+2      	; 0x1678 <vfprintf+0x1c2>
    1676:	4a 94       	dec	r4
    1678:	14 14       	cp	r1, r4
    167a:	74 f5       	brge	.+92     	; 0x16d8 <vfprintf+0x222>
    167c:	28 e0       	ldi	r18, 0x08	; 8
    167e:	24 15       	cp	r18, r4
    1680:	78 f5       	brcc	.+94     	; 0x16e0 <vfprintf+0x22a>
    1682:	88 e0       	ldi	r24, 0x08	; 8
    1684:	48 2e       	mov	r4, r24
    1686:	2c c0       	rjmp	.+88     	; 0x16e0 <vfprintf+0x22a>
    1688:	96 fc       	sbrc	r9, 6
    168a:	2a c0       	rjmp	.+84     	; 0x16e0 <vfprintf+0x22a>
    168c:	81 2f       	mov	r24, r17
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	8c 15       	cp	r24, r12
    1692:	9d 05       	cpc	r25, r13
    1694:	9c f0       	brlt	.+38     	; 0x16bc <vfprintf+0x206>
    1696:	3c ef       	ldi	r19, 0xFC	; 252
    1698:	c3 16       	cp	r12, r19
    169a:	3f ef       	ldi	r19, 0xFF	; 255
    169c:	d3 06       	cpc	r13, r19
    169e:	74 f0       	brlt	.+28     	; 0x16bc <vfprintf+0x206>
    16a0:	89 2d       	mov	r24, r9
    16a2:	80 68       	ori	r24, 0x80	; 128
    16a4:	98 2e       	mov	r9, r24
    16a6:	0a c0       	rjmp	.+20     	; 0x16bc <vfprintf+0x206>
    16a8:	e2 e0       	ldi	r30, 0x02	; 2
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	ec 0f       	add	r30, r28
    16ae:	fd 1f       	adc	r31, r29
    16b0:	e1 0f       	add	r30, r17
    16b2:	f1 1d       	adc	r31, r1
    16b4:	80 81       	ld	r24, Z
    16b6:	80 33       	cpi	r24, 0x30	; 48
    16b8:	19 f4       	brne	.+6      	; 0x16c0 <vfprintf+0x20a>
    16ba:	11 50       	subi	r17, 0x01	; 1
    16bc:	11 11       	cpse	r17, r1
    16be:	f4 cf       	rjmp	.-24     	; 0x16a8 <vfprintf+0x1f2>
    16c0:	97 fe       	sbrs	r9, 7
    16c2:	0e c0       	rjmp	.+28     	; 0x16e0 <vfprintf+0x22a>
    16c4:	44 24       	eor	r4, r4
    16c6:	43 94       	inc	r4
    16c8:	41 0e       	add	r4, r17
    16ca:	81 2f       	mov	r24, r17
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	c8 16       	cp	r12, r24
    16d0:	d9 06       	cpc	r13, r25
    16d2:	2c f4       	brge	.+10     	; 0x16de <vfprintf+0x228>
    16d4:	1c 19       	sub	r17, r12
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <vfprintf+0x22a>
    16d8:	44 24       	eor	r4, r4
    16da:	43 94       	inc	r4
    16dc:	01 c0       	rjmp	.+2      	; 0x16e0 <vfprintf+0x22a>
    16de:	10 e0       	ldi	r17, 0x00	; 0
    16e0:	97 fe       	sbrs	r9, 7
    16e2:	06 c0       	rjmp	.+12     	; 0x16f0 <vfprintf+0x23a>
    16e4:	1c 14       	cp	r1, r12
    16e6:	1d 04       	cpc	r1, r13
    16e8:	34 f4       	brge	.+12     	; 0x16f6 <vfprintf+0x240>
    16ea:	c6 01       	movw	r24, r12
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	05 c0       	rjmp	.+10     	; 0x16fa <vfprintf+0x244>
    16f0:	85 e0       	ldi	r24, 0x05	; 5
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <vfprintf+0x244>
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	01 11       	cpse	r16, r1
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	11 23       	and	r17, r17
    1700:	31 f0       	breq	.+12     	; 0x170e <vfprintf+0x258>
    1702:	21 2f       	mov	r18, r17
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	2f 5f       	subi	r18, 0xFF	; 255
    1708:	3f 4f       	sbci	r19, 0xFF	; 255
    170a:	82 0f       	add	r24, r18
    170c:	93 1f       	adc	r25, r19
    170e:	25 2d       	mov	r18, r5
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	82 17       	cp	r24, r18
    1714:	93 07       	cpc	r25, r19
    1716:	14 f4       	brge	.+4      	; 0x171c <vfprintf+0x266>
    1718:	58 1a       	sub	r5, r24
    171a:	01 c0       	rjmp	.+2      	; 0x171e <vfprintf+0x268>
    171c:	51 2c       	mov	r5, r1
    171e:	89 2d       	mov	r24, r9
    1720:	89 70       	andi	r24, 0x09	; 9
    1722:	49 f4       	brne	.+18     	; 0x1736 <vfprintf+0x280>
    1724:	55 20       	and	r5, r5
    1726:	39 f0       	breq	.+14     	; 0x1736 <vfprintf+0x280>
    1728:	b7 01       	movw	r22, r14
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1732:	5a 94       	dec	r5
    1734:	f7 cf       	rjmp	.-18     	; 0x1724 <vfprintf+0x26e>
    1736:	00 23       	and	r16, r16
    1738:	29 f0       	breq	.+10     	; 0x1744 <vfprintf+0x28e>
    173a:	b7 01       	movw	r22, r14
    173c:	80 2f       	mov	r24, r16
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1744:	93 fc       	sbrc	r9, 3
    1746:	09 c0       	rjmp	.+18     	; 0x175a <vfprintf+0x2a4>
    1748:	55 20       	and	r5, r5
    174a:	39 f0       	breq	.+14     	; 0x175a <vfprintf+0x2a4>
    174c:	b7 01       	movw	r22, r14
    174e:	80 e3       	ldi	r24, 0x30	; 48
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1756:	5a 94       	dec	r5
    1758:	f7 cf       	rjmp	.-18     	; 0x1748 <vfprintf+0x292>
    175a:	97 fe       	sbrs	r9, 7
    175c:	4c c0       	rjmp	.+152    	; 0x17f6 <vfprintf+0x340>
    175e:	46 01       	movw	r8, r12
    1760:	d7 fe       	sbrs	r13, 7
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x2b2>
    1764:	81 2c       	mov	r8, r1
    1766:	91 2c       	mov	r9, r1
    1768:	c6 01       	movw	r24, r12
    176a:	88 19       	sub	r24, r8
    176c:	99 09       	sbc	r25, r9
    176e:	f3 01       	movw	r30, r6
    1770:	e8 0f       	add	r30, r24
    1772:	f9 1f       	adc	r31, r25
    1774:	fe 87       	std	Y+14, r31	; 0x0e
    1776:	ed 87       	std	Y+13, r30	; 0x0d
    1778:	96 01       	movw	r18, r12
    177a:	24 19       	sub	r18, r4
    177c:	31 09       	sbc	r19, r1
    177e:	38 8b       	std	Y+16, r19	; 0x10
    1780:	2f 87       	std	Y+15, r18	; 0x0f
    1782:	01 2f       	mov	r16, r17
    1784:	10 e0       	ldi	r17, 0x00	; 0
    1786:	11 95       	neg	r17
    1788:	01 95       	neg	r16
    178a:	11 09       	sbc	r17, r1
    178c:	3f ef       	ldi	r19, 0xFF	; 255
    178e:	83 16       	cp	r8, r19
    1790:	93 06       	cpc	r9, r19
    1792:	29 f4       	brne	.+10     	; 0x179e <vfprintf+0x2e8>
    1794:	b7 01       	movw	r22, r14
    1796:	8e e2       	ldi	r24, 0x2E	; 46
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    179e:	c8 14       	cp	r12, r8
    17a0:	d9 04       	cpc	r13, r9
    17a2:	4c f0       	brlt	.+18     	; 0x17b6 <vfprintf+0x300>
    17a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a6:	98 89       	ldd	r25, Y+16	; 0x10
    17a8:	88 15       	cp	r24, r8
    17aa:	99 05       	cpc	r25, r9
    17ac:	24 f4       	brge	.+8      	; 0x17b6 <vfprintf+0x300>
    17ae:	ed 85       	ldd	r30, Y+13	; 0x0d
    17b0:	fe 85       	ldd	r31, Y+14	; 0x0e
    17b2:	81 81       	ldd	r24, Z+1	; 0x01
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <vfprintf+0x302>
    17b6:	80 e3       	ldi	r24, 0x30	; 48
    17b8:	f1 e0       	ldi	r31, 0x01	; 1
    17ba:	8f 1a       	sub	r8, r31
    17bc:	91 08       	sbc	r9, r1
    17be:	2d 85       	ldd	r18, Y+13	; 0x0d
    17c0:	3e 85       	ldd	r19, Y+14	; 0x0e
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
    17c6:	3e 87       	std	Y+14, r19	; 0x0e
    17c8:	2d 87       	std	Y+13, r18	; 0x0d
    17ca:	80 16       	cp	r8, r16
    17cc:	91 06       	cpc	r9, r17
    17ce:	2c f0       	brlt	.+10     	; 0x17da <vfprintf+0x324>
    17d0:	b7 01       	movw	r22, r14
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    17d8:	d9 cf       	rjmp	.-78     	; 0x178c <vfprintf+0x2d6>
    17da:	c8 14       	cp	r12, r8
    17dc:	d9 04       	cpc	r13, r9
    17de:	41 f4       	brne	.+16     	; 0x17f0 <vfprintf+0x33a>
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	96 33       	cpi	r25, 0x36	; 54
    17e4:	20 f4       	brcc	.+8      	; 0x17ee <vfprintf+0x338>
    17e6:	95 33       	cpi	r25, 0x35	; 53
    17e8:	19 f4       	brne	.+6      	; 0x17f0 <vfprintf+0x33a>
    17ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    17ec:	34 ff       	sbrs	r19, 4
    17ee:	81 e3       	ldi	r24, 0x31	; 49
    17f0:	b7 01       	movw	r22, r14
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	4e c0       	rjmp	.+156    	; 0x1892 <vfprintf+0x3dc>
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	81 33       	cpi	r24, 0x31	; 49
    17fa:	19 f0       	breq	.+6      	; 0x1802 <vfprintf+0x34c>
    17fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    17fe:	9f 7e       	andi	r25, 0xEF	; 239
    1800:	9c 87       	std	Y+12, r25	; 0x0c
    1802:	b7 01       	movw	r22, r14
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    180a:	11 11       	cpse	r17, r1
    180c:	05 c0       	rjmp	.+10     	; 0x1818 <vfprintf+0x362>
    180e:	94 fc       	sbrc	r9, 4
    1810:	18 c0       	rjmp	.+48     	; 0x1842 <vfprintf+0x38c>
    1812:	85 e6       	ldi	r24, 0x65	; 101
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	17 c0       	rjmp	.+46     	; 0x1846 <vfprintf+0x390>
    1818:	b7 01       	movw	r22, r14
    181a:	8e e2       	ldi	r24, 0x2E	; 46
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1822:	1e 5f       	subi	r17, 0xFE	; 254
    1824:	82 e0       	ldi	r24, 0x02	; 2
    1826:	01 e0       	ldi	r16, 0x01	; 1
    1828:	08 0f       	add	r16, r24
    182a:	f3 01       	movw	r30, r6
    182c:	e8 0f       	add	r30, r24
    182e:	f1 1d       	adc	r31, r1
    1830:	80 81       	ld	r24, Z
    1832:	b7 01       	movw	r22, r14
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    183a:	80 2f       	mov	r24, r16
    183c:	01 13       	cpse	r16, r17
    183e:	f3 cf       	rjmp	.-26     	; 0x1826 <vfprintf+0x370>
    1840:	e6 cf       	rjmp	.-52     	; 0x180e <vfprintf+0x358>
    1842:	85 e4       	ldi	r24, 0x45	; 69
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	b7 01       	movw	r22, r14
    1848:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    184c:	d7 fc       	sbrc	r13, 7
    184e:	06 c0       	rjmp	.+12     	; 0x185c <vfprintf+0x3a6>
    1850:	c1 14       	cp	r12, r1
    1852:	d1 04       	cpc	r13, r1
    1854:	41 f4       	brne	.+16     	; 0x1866 <vfprintf+0x3b0>
    1856:	ec 85       	ldd	r30, Y+12	; 0x0c
    1858:	e4 ff       	sbrs	r30, 4
    185a:	05 c0       	rjmp	.+10     	; 0x1866 <vfprintf+0x3b0>
    185c:	d1 94       	neg	r13
    185e:	c1 94       	neg	r12
    1860:	d1 08       	sbc	r13, r1
    1862:	8d e2       	ldi	r24, 0x2D	; 45
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <vfprintf+0x3b2>
    1866:	8b e2       	ldi	r24, 0x2B	; 43
    1868:	b7 01       	movw	r22, r14
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1870:	80 e3       	ldi	r24, 0x30	; 48
    1872:	2a e0       	ldi	r18, 0x0A	; 10
    1874:	c2 16       	cp	r12, r18
    1876:	d1 04       	cpc	r13, r1
    1878:	2c f0       	brlt	.+10     	; 0x1884 <vfprintf+0x3ce>
    187a:	8f 5f       	subi	r24, 0xFF	; 255
    187c:	fa e0       	ldi	r31, 0x0A	; 10
    187e:	cf 1a       	sub	r12, r31
    1880:	d1 08       	sbc	r13, r1
    1882:	f7 cf       	rjmp	.-18     	; 0x1872 <vfprintf+0x3bc>
    1884:	b7 01       	movw	r22, r14
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    188c:	b7 01       	movw	r22, r14
    188e:	c6 01       	movw	r24, r12
    1890:	c0 96       	adiw	r24, 0x30	; 48
    1892:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1896:	54 c1       	rjmp	.+680    	; 0x1b40 <vfprintf+0x68a>
    1898:	83 36       	cpi	r24, 0x63	; 99
    189a:	31 f0       	breq	.+12     	; 0x18a8 <vfprintf+0x3f2>
    189c:	83 37       	cpi	r24, 0x73	; 115
    189e:	79 f0       	breq	.+30     	; 0x18be <vfprintf+0x408>
    18a0:	83 35       	cpi	r24, 0x53	; 83
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <vfprintf+0x3f0>
    18a4:	56 c0       	rjmp	.+172    	; 0x1952 <vfprintf+0x49c>
    18a6:	20 c0       	rjmp	.+64     	; 0x18e8 <vfprintf+0x432>
    18a8:	56 01       	movw	r10, r12
    18aa:	32 e0       	ldi	r19, 0x02	; 2
    18ac:	a3 0e       	add	r10, r19
    18ae:	b1 1c       	adc	r11, r1
    18b0:	f6 01       	movw	r30, r12
    18b2:	80 81       	ld	r24, Z
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	01 e0       	ldi	r16, 0x01	; 1
    18b8:	10 e0       	ldi	r17, 0x00	; 0
    18ba:	63 01       	movw	r12, r6
    18bc:	12 c0       	rjmp	.+36     	; 0x18e2 <vfprintf+0x42c>
    18be:	56 01       	movw	r10, r12
    18c0:	f2 e0       	ldi	r31, 0x02	; 2
    18c2:	af 0e       	add	r10, r31
    18c4:	b1 1c       	adc	r11, r1
    18c6:	f6 01       	movw	r30, r12
    18c8:	c0 80       	ld	r12, Z
    18ca:	d1 80       	ldd	r13, Z+1	; 0x01
    18cc:	96 fe       	sbrs	r9, 6
    18ce:	03 c0       	rjmp	.+6      	; 0x18d6 <vfprintf+0x420>
    18d0:	61 2f       	mov	r22, r17
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <vfprintf+0x424>
    18d6:	6f ef       	ldi	r22, 0xFF	; 255
    18d8:	7f ef       	ldi	r23, 0xFF	; 255
    18da:	c6 01       	movw	r24, r12
    18dc:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <strnlen>
    18e0:	8c 01       	movw	r16, r24
    18e2:	f9 2d       	mov	r31, r9
    18e4:	ff 77       	andi	r31, 0x7F	; 127
    18e6:	14 c0       	rjmp	.+40     	; 0x1910 <vfprintf+0x45a>
    18e8:	56 01       	movw	r10, r12
    18ea:	22 e0       	ldi	r18, 0x02	; 2
    18ec:	a2 0e       	add	r10, r18
    18ee:	b1 1c       	adc	r11, r1
    18f0:	f6 01       	movw	r30, r12
    18f2:	c0 80       	ld	r12, Z
    18f4:	d1 80       	ldd	r13, Z+1	; 0x01
    18f6:	96 fe       	sbrs	r9, 6
    18f8:	03 c0       	rjmp	.+6      	; 0x1900 <vfprintf+0x44a>
    18fa:	61 2f       	mov	r22, r17
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <vfprintf+0x44e>
    1900:	6f ef       	ldi	r22, 0xFF	; 255
    1902:	7f ef       	ldi	r23, 0xFF	; 255
    1904:	c6 01       	movw	r24, r12
    1906:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <strnlen_P>
    190a:	8c 01       	movw	r16, r24
    190c:	f9 2d       	mov	r31, r9
    190e:	f0 68       	ori	r31, 0x80	; 128
    1910:	9f 2e       	mov	r9, r31
    1912:	f3 fd       	sbrc	r31, 3
    1914:	1a c0       	rjmp	.+52     	; 0x194a <vfprintf+0x494>
    1916:	85 2d       	mov	r24, r5
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	08 17       	cp	r16, r24
    191c:	19 07       	cpc	r17, r25
    191e:	a8 f4       	brcc	.+42     	; 0x194a <vfprintf+0x494>
    1920:	b7 01       	movw	r22, r14
    1922:	80 e2       	ldi	r24, 0x20	; 32
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    192a:	5a 94       	dec	r5
    192c:	f4 cf       	rjmp	.-24     	; 0x1916 <vfprintf+0x460>
    192e:	f6 01       	movw	r30, r12
    1930:	97 fc       	sbrc	r9, 7
    1932:	85 91       	lpm	r24, Z+
    1934:	97 fe       	sbrs	r9, 7
    1936:	81 91       	ld	r24, Z+
    1938:	6f 01       	movw	r12, r30
    193a:	b7 01       	movw	r22, r14
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1942:	51 10       	cpse	r5, r1
    1944:	5a 94       	dec	r5
    1946:	01 50       	subi	r16, 0x01	; 1
    1948:	11 09       	sbc	r17, r1
    194a:	01 15       	cp	r16, r1
    194c:	11 05       	cpc	r17, r1
    194e:	79 f7       	brne	.-34     	; 0x192e <vfprintf+0x478>
    1950:	f7 c0       	rjmp	.+494    	; 0x1b40 <vfprintf+0x68a>
    1952:	84 36       	cpi	r24, 0x64	; 100
    1954:	11 f0       	breq	.+4      	; 0x195a <vfprintf+0x4a4>
    1956:	89 36       	cpi	r24, 0x69	; 105
    1958:	61 f5       	brne	.+88     	; 0x19b2 <vfprintf+0x4fc>
    195a:	56 01       	movw	r10, r12
    195c:	97 fe       	sbrs	r9, 7
    195e:	09 c0       	rjmp	.+18     	; 0x1972 <vfprintf+0x4bc>
    1960:	24 e0       	ldi	r18, 0x04	; 4
    1962:	a2 0e       	add	r10, r18
    1964:	b1 1c       	adc	r11, r1
    1966:	f6 01       	movw	r30, r12
    1968:	60 81       	ld	r22, Z
    196a:	71 81       	ldd	r23, Z+1	; 0x01
    196c:	82 81       	ldd	r24, Z+2	; 0x02
    196e:	93 81       	ldd	r25, Z+3	; 0x03
    1970:	0a c0       	rjmp	.+20     	; 0x1986 <vfprintf+0x4d0>
    1972:	f2 e0       	ldi	r31, 0x02	; 2
    1974:	af 0e       	add	r10, r31
    1976:	b1 1c       	adc	r11, r1
    1978:	f6 01       	movw	r30, r12
    197a:	60 81       	ld	r22, Z
    197c:	71 81       	ldd	r23, Z+1	; 0x01
    197e:	07 2e       	mov	r0, r23
    1980:	00 0c       	add	r0, r0
    1982:	88 0b       	sbc	r24, r24
    1984:	99 0b       	sbc	r25, r25
    1986:	f9 2d       	mov	r31, r9
    1988:	ff 76       	andi	r31, 0x6F	; 111
    198a:	9f 2e       	mov	r9, r31
    198c:	97 ff       	sbrs	r25, 7
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <vfprintf+0x4ec>
    1990:	90 95       	com	r25
    1992:	80 95       	com	r24
    1994:	70 95       	com	r23
    1996:	61 95       	neg	r22
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	8f 4f       	sbci	r24, 0xFF	; 255
    199c:	9f 4f       	sbci	r25, 0xFF	; 255
    199e:	f0 68       	ori	r31, 0x80	; 128
    19a0:	9f 2e       	mov	r9, r31
    19a2:	2a e0       	ldi	r18, 0x0A	; 10
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	a3 01       	movw	r20, r6
    19a8:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__ultoa_invert>
    19ac:	c8 2e       	mov	r12, r24
    19ae:	c6 18       	sub	r12, r6
    19b0:	3f c0       	rjmp	.+126    	; 0x1a30 <vfprintf+0x57a>
    19b2:	09 2d       	mov	r16, r9
    19b4:	85 37       	cpi	r24, 0x75	; 117
    19b6:	21 f4       	brne	.+8      	; 0x19c0 <vfprintf+0x50a>
    19b8:	0f 7e       	andi	r16, 0xEF	; 239
    19ba:	2a e0       	ldi	r18, 0x0A	; 10
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	1d c0       	rjmp	.+58     	; 0x19fa <vfprintf+0x544>
    19c0:	09 7f       	andi	r16, 0xF9	; 249
    19c2:	8f 36       	cpi	r24, 0x6F	; 111
    19c4:	91 f0       	breq	.+36     	; 0x19ea <vfprintf+0x534>
    19c6:	18 f4       	brcc	.+6      	; 0x19ce <vfprintf+0x518>
    19c8:	88 35       	cpi	r24, 0x58	; 88
    19ca:	59 f0       	breq	.+22     	; 0x19e2 <vfprintf+0x52c>
    19cc:	c3 c0       	rjmp	.+390    	; 0x1b54 <vfprintf+0x69e>
    19ce:	80 37       	cpi	r24, 0x70	; 112
    19d0:	19 f0       	breq	.+6      	; 0x19d8 <vfprintf+0x522>
    19d2:	88 37       	cpi	r24, 0x78	; 120
    19d4:	11 f0       	breq	.+4      	; 0x19da <vfprintf+0x524>
    19d6:	be c0       	rjmp	.+380    	; 0x1b54 <vfprintf+0x69e>
    19d8:	00 61       	ori	r16, 0x10	; 16
    19da:	04 ff       	sbrs	r16, 4
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <vfprintf+0x53a>
    19de:	04 60       	ori	r16, 0x04	; 4
    19e0:	07 c0       	rjmp	.+14     	; 0x19f0 <vfprintf+0x53a>
    19e2:	94 fe       	sbrs	r9, 4
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <vfprintf+0x540>
    19e6:	06 60       	ori	r16, 0x06	; 6
    19e8:	06 c0       	rjmp	.+12     	; 0x19f6 <vfprintf+0x540>
    19ea:	28 e0       	ldi	r18, 0x08	; 8
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	05 c0       	rjmp	.+10     	; 0x19fa <vfprintf+0x544>
    19f0:	20 e1       	ldi	r18, 0x10	; 16
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <vfprintf+0x544>
    19f6:	20 e1       	ldi	r18, 0x10	; 16
    19f8:	32 e0       	ldi	r19, 0x02	; 2
    19fa:	56 01       	movw	r10, r12
    19fc:	07 ff       	sbrs	r16, 7
    19fe:	09 c0       	rjmp	.+18     	; 0x1a12 <vfprintf+0x55c>
    1a00:	84 e0       	ldi	r24, 0x04	; 4
    1a02:	a8 0e       	add	r10, r24
    1a04:	b1 1c       	adc	r11, r1
    1a06:	f6 01       	movw	r30, r12
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	08 c0       	rjmp	.+16     	; 0x1a22 <vfprintf+0x56c>
    1a12:	f2 e0       	ldi	r31, 0x02	; 2
    1a14:	af 0e       	add	r10, r31
    1a16:	b1 1c       	adc	r11, r1
    1a18:	f6 01       	movw	r30, r12
    1a1a:	60 81       	ld	r22, Z
    1a1c:	71 81       	ldd	r23, Z+1	; 0x01
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a3 01       	movw	r20, r6
    1a24:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <__ultoa_invert>
    1a28:	c8 2e       	mov	r12, r24
    1a2a:	c6 18       	sub	r12, r6
    1a2c:	0f 77       	andi	r16, 0x7F	; 127
    1a2e:	90 2e       	mov	r9, r16
    1a30:	96 fe       	sbrs	r9, 6
    1a32:	0b c0       	rjmp	.+22     	; 0x1a4a <vfprintf+0x594>
    1a34:	09 2d       	mov	r16, r9
    1a36:	0e 7f       	andi	r16, 0xFE	; 254
    1a38:	c1 16       	cp	r12, r17
    1a3a:	50 f4       	brcc	.+20     	; 0x1a50 <vfprintf+0x59a>
    1a3c:	94 fe       	sbrs	r9, 4
    1a3e:	0a c0       	rjmp	.+20     	; 0x1a54 <vfprintf+0x59e>
    1a40:	92 fc       	sbrc	r9, 2
    1a42:	08 c0       	rjmp	.+16     	; 0x1a54 <vfprintf+0x59e>
    1a44:	09 2d       	mov	r16, r9
    1a46:	0e 7e       	andi	r16, 0xEE	; 238
    1a48:	05 c0       	rjmp	.+10     	; 0x1a54 <vfprintf+0x59e>
    1a4a:	dc 2c       	mov	r13, r12
    1a4c:	09 2d       	mov	r16, r9
    1a4e:	03 c0       	rjmp	.+6      	; 0x1a56 <vfprintf+0x5a0>
    1a50:	dc 2c       	mov	r13, r12
    1a52:	01 c0       	rjmp	.+2      	; 0x1a56 <vfprintf+0x5a0>
    1a54:	d1 2e       	mov	r13, r17
    1a56:	04 ff       	sbrs	r16, 4
    1a58:	0d c0       	rjmp	.+26     	; 0x1a74 <vfprintf+0x5be>
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	ec 0d       	add	r30, r12
    1a5e:	f1 1d       	adc	r31, r1
    1a60:	80 81       	ld	r24, Z
    1a62:	80 33       	cpi	r24, 0x30	; 48
    1a64:	11 f4       	brne	.+4      	; 0x1a6a <vfprintf+0x5b4>
    1a66:	09 7e       	andi	r16, 0xE9	; 233
    1a68:	09 c0       	rjmp	.+18     	; 0x1a7c <vfprintf+0x5c6>
    1a6a:	02 ff       	sbrs	r16, 2
    1a6c:	06 c0       	rjmp	.+12     	; 0x1a7a <vfprintf+0x5c4>
    1a6e:	d3 94       	inc	r13
    1a70:	d3 94       	inc	r13
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <vfprintf+0x5c6>
    1a74:	80 2f       	mov	r24, r16
    1a76:	86 78       	andi	r24, 0x86	; 134
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <vfprintf+0x5c6>
    1a7a:	d3 94       	inc	r13
    1a7c:	03 fd       	sbrc	r16, 3
    1a7e:	11 c0       	rjmp	.+34     	; 0x1aa2 <vfprintf+0x5ec>
    1a80:	00 ff       	sbrs	r16, 0
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <vfprintf+0x5da>
    1a84:	1c 2d       	mov	r17, r12
    1a86:	d5 14       	cp	r13, r5
    1a88:	80 f4       	brcc	.+32     	; 0x1aaa <vfprintf+0x5f4>
    1a8a:	15 0d       	add	r17, r5
    1a8c:	1d 19       	sub	r17, r13
    1a8e:	0d c0       	rjmp	.+26     	; 0x1aaa <vfprintf+0x5f4>
    1a90:	d5 14       	cp	r13, r5
    1a92:	58 f4       	brcc	.+22     	; 0x1aaa <vfprintf+0x5f4>
    1a94:	b7 01       	movw	r22, r14
    1a96:	80 e2       	ldi	r24, 0x20	; 32
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1a9e:	d3 94       	inc	r13
    1aa0:	f7 cf       	rjmp	.-18     	; 0x1a90 <vfprintf+0x5da>
    1aa2:	d5 14       	cp	r13, r5
    1aa4:	10 f4       	brcc	.+4      	; 0x1aaa <vfprintf+0x5f4>
    1aa6:	5d 18       	sub	r5, r13
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <vfprintf+0x5f6>
    1aaa:	51 2c       	mov	r5, r1
    1aac:	04 ff       	sbrs	r16, 4
    1aae:	10 c0       	rjmp	.+32     	; 0x1ad0 <vfprintf+0x61a>
    1ab0:	b7 01       	movw	r22, r14
    1ab2:	80 e3       	ldi	r24, 0x30	; 48
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1aba:	02 ff       	sbrs	r16, 2
    1abc:	17 c0       	rjmp	.+46     	; 0x1aec <vfprintf+0x636>
    1abe:	01 fd       	sbrc	r16, 1
    1ac0:	03 c0       	rjmp	.+6      	; 0x1ac8 <vfprintf+0x612>
    1ac2:	88 e7       	ldi	r24, 0x78	; 120
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <vfprintf+0x616>
    1ac8:	88 e5       	ldi	r24, 0x58	; 88
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	b7 01       	movw	r22, r14
    1ace:	0c c0       	rjmp	.+24     	; 0x1ae8 <vfprintf+0x632>
    1ad0:	80 2f       	mov	r24, r16
    1ad2:	86 78       	andi	r24, 0x86	; 134
    1ad4:	59 f0       	breq	.+22     	; 0x1aec <vfprintf+0x636>
    1ad6:	01 ff       	sbrs	r16, 1
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <vfprintf+0x628>
    1ada:	8b e2       	ldi	r24, 0x2B	; 43
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <vfprintf+0x62a>
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	07 fd       	sbrc	r16, 7
    1ae2:	8d e2       	ldi	r24, 0x2D	; 45
    1ae4:	b7 01       	movw	r22, r14
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1aec:	c1 16       	cp	r12, r17
    1aee:	38 f4       	brcc	.+14     	; 0x1afe <vfprintf+0x648>
    1af0:	b7 01       	movw	r22, r14
    1af2:	80 e3       	ldi	r24, 0x30	; 48
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1afa:	11 50       	subi	r17, 0x01	; 1
    1afc:	f7 cf       	rjmp	.-18     	; 0x1aec <vfprintf+0x636>
    1afe:	ca 94       	dec	r12
    1b00:	f3 01       	movw	r30, r6
    1b02:	ec 0d       	add	r30, r12
    1b04:	f1 1d       	adc	r31, r1
    1b06:	80 81       	ld	r24, Z
    1b08:	b7 01       	movw	r22, r14
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1b10:	c1 10       	cpse	r12, r1
    1b12:	f5 cf       	rjmp	.-22     	; 0x1afe <vfprintf+0x648>
    1b14:	15 c0       	rjmp	.+42     	; 0x1b40 <vfprintf+0x68a>
    1b16:	f4 e0       	ldi	r31, 0x04	; 4
    1b18:	f5 15       	cp	r31, r5
    1b1a:	60 f5       	brcc	.+88     	; 0x1b74 <vfprintf+0x6be>
    1b1c:	84 e0       	ldi	r24, 0x04	; 4
    1b1e:	58 1a       	sub	r5, r24
    1b20:	93 fe       	sbrs	r9, 3
    1b22:	1f c0       	rjmp	.+62     	; 0x1b62 <vfprintf+0x6ac>
    1b24:	01 11       	cpse	r16, r1
    1b26:	27 c0       	rjmp	.+78     	; 0x1b76 <vfprintf+0x6c0>
    1b28:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b2a:	23 ff       	sbrs	r18, 3
    1b2c:	2a c0       	rjmp	.+84     	; 0x1b82 <vfprintf+0x6cc>
    1b2e:	04 e5       	ldi	r16, 0x54	; 84
    1b30:	10 e0       	ldi	r17, 0x00	; 0
    1b32:	39 2d       	mov	r19, r9
    1b34:	30 71       	andi	r19, 0x10	; 16
    1b36:	93 2e       	mov	r9, r19
    1b38:	f8 01       	movw	r30, r16
    1b3a:	84 91       	lpm	r24, Z
    1b3c:	81 11       	cpse	r24, r1
    1b3e:	24 c0       	rjmp	.+72     	; 0x1b88 <vfprintf+0x6d2>
    1b40:	55 20       	and	r5, r5
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <vfprintf+0x690>
    1b44:	e4 cc       	rjmp	.-1592   	; 0x150e <vfprintf+0x58>
    1b46:	b7 01       	movw	r22, r14
    1b48:	80 e2       	ldi	r24, 0x20	; 32
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1b50:	5a 94       	dec	r5
    1b52:	f6 cf       	rjmp	.-20     	; 0x1b40 <vfprintf+0x68a>
    1b54:	f7 01       	movw	r30, r14
    1b56:	86 81       	ldd	r24, Z+6	; 0x06
    1b58:	97 81       	ldd	r25, Z+7	; 0x07
    1b5a:	26 c0       	rjmp	.+76     	; 0x1ba8 <vfprintf+0x6f2>
    1b5c:	8f ef       	ldi	r24, 0xFF	; 255
    1b5e:	9f ef       	ldi	r25, 0xFF	; 255
    1b60:	23 c0       	rjmp	.+70     	; 0x1ba8 <vfprintf+0x6f2>
    1b62:	b7 01       	movw	r22, r14
    1b64:	80 e2       	ldi	r24, 0x20	; 32
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1b6c:	5a 94       	dec	r5
    1b6e:	51 10       	cpse	r5, r1
    1b70:	f8 cf       	rjmp	.-16     	; 0x1b62 <vfprintf+0x6ac>
    1b72:	d8 cf       	rjmp	.-80     	; 0x1b24 <vfprintf+0x66e>
    1b74:	51 2c       	mov	r5, r1
    1b76:	b7 01       	movw	r22, r14
    1b78:	80 2f       	mov	r24, r16
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1b80:	d3 cf       	rjmp	.-90     	; 0x1b28 <vfprintf+0x672>
    1b82:	08 e5       	ldi	r16, 0x58	; 88
    1b84:	10 e0       	ldi	r17, 0x00	; 0
    1b86:	d5 cf       	rjmp	.-86     	; 0x1b32 <vfprintf+0x67c>
    1b88:	91 10       	cpse	r9, r1
    1b8a:	80 52       	subi	r24, 0x20	; 32
    1b8c:	b7 01       	movw	r22, r14
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <fputc>
    1b94:	0f 5f       	subi	r16, 0xFF	; 255
    1b96:	1f 4f       	sbci	r17, 0xFF	; 255
    1b98:	cf cf       	rjmp	.-98     	; 0x1b38 <vfprintf+0x682>
    1b9a:	23 e0       	ldi	r18, 0x03	; 3
    1b9c:	25 15       	cp	r18, r5
    1b9e:	10 f4       	brcc	.+4      	; 0x1ba4 <vfprintf+0x6ee>
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	bd cf       	rjmp	.-134    	; 0x1b1e <vfprintf+0x668>
    1ba4:	51 2c       	mov	r5, r1
    1ba6:	c0 cf       	rjmp	.-128    	; 0x1b28 <vfprintf+0x672>
    1ba8:	60 96       	adiw	r28, 0x10	; 16
    1baa:	e2 e1       	ldi	r30, 0x12	; 18
    1bac:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__epilogue_restores__>

00001bb0 <__divmodhi4>:
    1bb0:	97 fb       	bst	r25, 7
    1bb2:	07 2e       	mov	r0, r23
    1bb4:	16 f4       	brtc	.+4      	; 0x1bba <__divmodhi4+0xa>
    1bb6:	00 94       	com	r0
    1bb8:	07 d0       	rcall	.+14     	; 0x1bc8 <__divmodhi4_neg1>
    1bba:	77 fd       	sbrc	r23, 7
    1bbc:	09 d0       	rcall	.+18     	; 0x1bd0 <__divmodhi4_neg2>
    1bbe:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__udivmodhi4>
    1bc2:	07 fc       	sbrc	r0, 7
    1bc4:	05 d0       	rcall	.+10     	; 0x1bd0 <__divmodhi4_neg2>
    1bc6:	3e f4       	brtc	.+14     	; 0x1bd6 <__divmodhi4_exit>

00001bc8 <__divmodhi4_neg1>:
    1bc8:	90 95       	com	r25
    1bca:	81 95       	neg	r24
    1bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bce:	08 95       	ret

00001bd0 <__divmodhi4_neg2>:
    1bd0:	70 95       	com	r23
    1bd2:	61 95       	neg	r22
    1bd4:	7f 4f       	sbci	r23, 0xFF	; 255

00001bd6 <__divmodhi4_exit>:
    1bd6:	08 95       	ret

00001bd8 <__prologue_saves__>:
    1bd8:	2f 92       	push	r2
    1bda:	3f 92       	push	r3
    1bdc:	4f 92       	push	r4
    1bde:	5f 92       	push	r5
    1be0:	6f 92       	push	r6
    1be2:	7f 92       	push	r7
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	cd b7       	in	r28, 0x3d	; 61
    1bfe:	de b7       	in	r29, 0x3e	; 62
    1c00:	ca 1b       	sub	r28, r26
    1c02:	db 0b       	sbc	r29, r27
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	09 94       	ijmp

00001c10 <__epilogue_restores__>:
    1c10:	2a 88       	ldd	r2, Y+18	; 0x12
    1c12:	39 88       	ldd	r3, Y+17	; 0x11
    1c14:	48 88       	ldd	r4, Y+16	; 0x10
    1c16:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c18:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c20:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c22:	b9 84       	ldd	r11, Y+9	; 0x09
    1c24:	c8 84       	ldd	r12, Y+8	; 0x08
    1c26:	df 80       	ldd	r13, Y+7	; 0x07
    1c28:	ee 80       	ldd	r14, Y+6	; 0x06
    1c2a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c2c:	0c 81       	ldd	r16, Y+4	; 0x04
    1c2e:	1b 81       	ldd	r17, Y+3	; 0x03
    1c30:	aa 81       	ldd	r26, Y+2	; 0x02
    1c32:	b9 81       	ldd	r27, Y+1	; 0x01
    1c34:	ce 0f       	add	r28, r30
    1c36:	d1 1d       	adc	r29, r1
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	ed 01       	movw	r28, r26
    1c44:	08 95       	ret

00001c46 <__udivmodhi4>:
    1c46:	aa 1b       	sub	r26, r26
    1c48:	bb 1b       	sub	r27, r27
    1c4a:	51 e1       	ldi	r21, 0x11	; 17
    1c4c:	07 c0       	rjmp	.+14     	; 0x1c5c <__udivmodhi4_ep>

00001c4e <__udivmodhi4_loop>:
    1c4e:	aa 1f       	adc	r26, r26
    1c50:	bb 1f       	adc	r27, r27
    1c52:	a6 17       	cp	r26, r22
    1c54:	b7 07       	cpc	r27, r23
    1c56:	10 f0       	brcs	.+4      	; 0x1c5c <__udivmodhi4_ep>
    1c58:	a6 1b       	sub	r26, r22
    1c5a:	b7 0b       	sbc	r27, r23

00001c5c <__udivmodhi4_ep>:
    1c5c:	88 1f       	adc	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	5a 95       	dec	r21
    1c62:	a9 f7       	brne	.-22     	; 0x1c4e <__udivmodhi4_loop>
    1c64:	80 95       	com	r24
    1c66:	90 95       	com	r25
    1c68:	bc 01       	movw	r22, r24
    1c6a:	cd 01       	movw	r24, r26
    1c6c:	08 95       	ret

00001c6e <__ftoa_engine>:
    1c6e:	28 30       	cpi	r18, 0x08	; 8
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <__ftoa_engine+0x6>
    1c72:	27 e0       	ldi	r18, 0x07	; 7
    1c74:	33 27       	eor	r19, r19
    1c76:	da 01       	movw	r26, r20
    1c78:	99 0f       	add	r25, r25
    1c7a:	31 1d       	adc	r19, r1
    1c7c:	87 fd       	sbrc	r24, 7
    1c7e:	91 60       	ori	r25, 0x01	; 1
    1c80:	00 96       	adiw	r24, 0x00	; 0
    1c82:	61 05       	cpc	r22, r1
    1c84:	71 05       	cpc	r23, r1
    1c86:	39 f4       	brne	.+14     	; 0x1c96 <__ftoa_engine+0x28>
    1c88:	32 60       	ori	r19, 0x02	; 2
    1c8a:	2e 5f       	subi	r18, 0xFE	; 254
    1c8c:	3d 93       	st	X+, r19
    1c8e:	30 e3       	ldi	r19, 0x30	; 48
    1c90:	2a 95       	dec	r18
    1c92:	e1 f7       	brne	.-8      	; 0x1c8c <__ftoa_engine+0x1e>
    1c94:	08 95       	ret
    1c96:	9f 3f       	cpi	r25, 0xFF	; 255
    1c98:	30 f0       	brcs	.+12     	; 0x1ca6 <__ftoa_engine+0x38>
    1c9a:	80 38       	cpi	r24, 0x80	; 128
    1c9c:	71 05       	cpc	r23, r1
    1c9e:	61 05       	cpc	r22, r1
    1ca0:	09 f0       	breq	.+2      	; 0x1ca4 <__ftoa_engine+0x36>
    1ca2:	3c 5f       	subi	r19, 0xFC	; 252
    1ca4:	3c 5f       	subi	r19, 0xFC	; 252
    1ca6:	3d 93       	st	X+, r19
    1ca8:	91 30       	cpi	r25, 0x01	; 1
    1caa:	08 f0       	brcs	.+2      	; 0x1cae <__ftoa_engine+0x40>
    1cac:	80 68       	ori	r24, 0x80	; 128
    1cae:	91 1d       	adc	r25, r1
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	1f 93       	push	r17
    1cb6:	0f 93       	push	r16
    1cb8:	ff 92       	push	r15
    1cba:	ef 92       	push	r14
    1cbc:	19 2f       	mov	r17, r25
    1cbe:	98 7f       	andi	r25, 0xF8	; 248
    1cc0:	96 95       	lsr	r25
    1cc2:	e9 2f       	mov	r30, r25
    1cc4:	96 95       	lsr	r25
    1cc6:	96 95       	lsr	r25
    1cc8:	e9 0f       	add	r30, r25
    1cca:	ff 27       	eor	r31, r31
    1ccc:	ea 54       	subi	r30, 0x4A	; 74
    1cce:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd0:	99 27       	eor	r25, r25
    1cd2:	33 27       	eor	r19, r19
    1cd4:	ee 24       	eor	r14, r14
    1cd6:	ff 24       	eor	r15, r15
    1cd8:	a7 01       	movw	r20, r14
    1cda:	e7 01       	movw	r28, r14
    1cdc:	05 90       	lpm	r0, Z+
    1cde:	08 94       	sec
    1ce0:	07 94       	ror	r0
    1ce2:	28 f4       	brcc	.+10     	; 0x1cee <__ftoa_engine+0x80>
    1ce4:	36 0f       	add	r19, r22
    1ce6:	e7 1e       	adc	r14, r23
    1ce8:	f8 1e       	adc	r15, r24
    1cea:	49 1f       	adc	r20, r25
    1cec:	51 1d       	adc	r21, r1
    1cee:	66 0f       	add	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	88 1f       	adc	r24, r24
    1cf4:	99 1f       	adc	r25, r25
    1cf6:	06 94       	lsr	r0
    1cf8:	a1 f7       	brne	.-24     	; 0x1ce2 <__ftoa_engine+0x74>
    1cfa:	05 90       	lpm	r0, Z+
    1cfc:	07 94       	ror	r0
    1cfe:	28 f4       	brcc	.+10     	; 0x1d0a <__ftoa_engine+0x9c>
    1d00:	e7 0e       	add	r14, r23
    1d02:	f8 1e       	adc	r15, r24
    1d04:	49 1f       	adc	r20, r25
    1d06:	56 1f       	adc	r21, r22
    1d08:	c1 1d       	adc	r28, r1
    1d0a:	77 0f       	add	r23, r23
    1d0c:	88 1f       	adc	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	66 1f       	adc	r22, r22
    1d12:	06 94       	lsr	r0
    1d14:	a1 f7       	brne	.-24     	; 0x1cfe <__ftoa_engine+0x90>
    1d16:	05 90       	lpm	r0, Z+
    1d18:	07 94       	ror	r0
    1d1a:	28 f4       	brcc	.+10     	; 0x1d26 <__ftoa_engine+0xb8>
    1d1c:	f8 0e       	add	r15, r24
    1d1e:	49 1f       	adc	r20, r25
    1d20:	56 1f       	adc	r21, r22
    1d22:	c7 1f       	adc	r28, r23
    1d24:	d1 1d       	adc	r29, r1
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	66 1f       	adc	r22, r22
    1d2c:	77 1f       	adc	r23, r23
    1d2e:	06 94       	lsr	r0
    1d30:	a1 f7       	brne	.-24     	; 0x1d1a <__ftoa_engine+0xac>
    1d32:	05 90       	lpm	r0, Z+
    1d34:	07 94       	ror	r0
    1d36:	20 f4       	brcc	.+8      	; 0x1d40 <__ftoa_engine+0xd2>
    1d38:	49 0f       	add	r20, r25
    1d3a:	56 1f       	adc	r21, r22
    1d3c:	c7 1f       	adc	r28, r23
    1d3e:	d8 1f       	adc	r29, r24
    1d40:	99 0f       	add	r25, r25
    1d42:	66 1f       	adc	r22, r22
    1d44:	77 1f       	adc	r23, r23
    1d46:	88 1f       	adc	r24, r24
    1d48:	06 94       	lsr	r0
    1d4a:	a9 f7       	brne	.-22     	; 0x1d36 <__ftoa_engine+0xc8>
    1d4c:	84 91       	lpm	r24, Z
    1d4e:	10 95       	com	r17
    1d50:	17 70       	andi	r17, 0x07	; 7
    1d52:	41 f0       	breq	.+16     	; 0x1d64 <__ftoa_engine+0xf6>
    1d54:	d6 95       	lsr	r29
    1d56:	c7 95       	ror	r28
    1d58:	57 95       	ror	r21
    1d5a:	47 95       	ror	r20
    1d5c:	f7 94       	ror	r15
    1d5e:	e7 94       	ror	r14
    1d60:	1a 95       	dec	r17
    1d62:	c1 f7       	brne	.-16     	; 0x1d54 <__ftoa_engine+0xe6>
    1d64:	ec e5       	ldi	r30, 0x5C	; 92
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	68 94       	set
    1d6a:	15 90       	lpm	r1, Z+
    1d6c:	15 91       	lpm	r17, Z+
    1d6e:	35 91       	lpm	r19, Z+
    1d70:	65 91       	lpm	r22, Z+
    1d72:	95 91       	lpm	r25, Z+
    1d74:	05 90       	lpm	r0, Z+
    1d76:	7f e2       	ldi	r23, 0x2F	; 47
    1d78:	73 95       	inc	r23
    1d7a:	e1 18       	sub	r14, r1
    1d7c:	f1 0a       	sbc	r15, r17
    1d7e:	43 0b       	sbc	r20, r19
    1d80:	56 0b       	sbc	r21, r22
    1d82:	c9 0b       	sbc	r28, r25
    1d84:	d0 09       	sbc	r29, r0
    1d86:	c0 f7       	brcc	.-16     	; 0x1d78 <__ftoa_engine+0x10a>
    1d88:	e1 0c       	add	r14, r1
    1d8a:	f1 1e       	adc	r15, r17
    1d8c:	43 1f       	adc	r20, r19
    1d8e:	56 1f       	adc	r21, r22
    1d90:	c9 1f       	adc	r28, r25
    1d92:	d0 1d       	adc	r29, r0
    1d94:	7e f4       	brtc	.+30     	; 0x1db4 <__ftoa_engine+0x146>
    1d96:	70 33       	cpi	r23, 0x30	; 48
    1d98:	11 f4       	brne	.+4      	; 0x1d9e <__ftoa_engine+0x130>
    1d9a:	8a 95       	dec	r24
    1d9c:	e6 cf       	rjmp	.-52     	; 0x1d6a <__ftoa_engine+0xfc>
    1d9e:	e8 94       	clt
    1da0:	01 50       	subi	r16, 0x01	; 1
    1da2:	30 f0       	brcs	.+12     	; 0x1db0 <__ftoa_engine+0x142>
    1da4:	08 0f       	add	r16, r24
    1da6:	0a f4       	brpl	.+2      	; 0x1daa <__ftoa_engine+0x13c>
    1da8:	00 27       	eor	r16, r16
    1daa:	02 17       	cp	r16, r18
    1dac:	08 f4       	brcc	.+2      	; 0x1db0 <__ftoa_engine+0x142>
    1dae:	20 2f       	mov	r18, r16
    1db0:	23 95       	inc	r18
    1db2:	02 2f       	mov	r16, r18
    1db4:	7a 33       	cpi	r23, 0x3A	; 58
    1db6:	28 f0       	brcs	.+10     	; 0x1dc2 <__ftoa_engine+0x154>
    1db8:	79 e3       	ldi	r23, 0x39	; 57
    1dba:	7d 93       	st	X+, r23
    1dbc:	2a 95       	dec	r18
    1dbe:	e9 f7       	brne	.-6      	; 0x1dba <__ftoa_engine+0x14c>
    1dc0:	10 c0       	rjmp	.+32     	; 0x1de2 <__ftoa_engine+0x174>
    1dc2:	7d 93       	st	X+, r23
    1dc4:	2a 95       	dec	r18
    1dc6:	89 f6       	brne	.-94     	; 0x1d6a <__ftoa_engine+0xfc>
    1dc8:	06 94       	lsr	r0
    1dca:	97 95       	ror	r25
    1dcc:	67 95       	ror	r22
    1dce:	37 95       	ror	r19
    1dd0:	17 95       	ror	r17
    1dd2:	17 94       	ror	r1
    1dd4:	e1 18       	sub	r14, r1
    1dd6:	f1 0a       	sbc	r15, r17
    1dd8:	43 0b       	sbc	r20, r19
    1dda:	56 0b       	sbc	r21, r22
    1ddc:	c9 0b       	sbc	r28, r25
    1dde:	d0 09       	sbc	r29, r0
    1de0:	98 f0       	brcs	.+38     	; 0x1e08 <__ftoa_engine+0x19a>
    1de2:	23 95       	inc	r18
    1de4:	7e 91       	ld	r23, -X
    1de6:	73 95       	inc	r23
    1de8:	7a 33       	cpi	r23, 0x3A	; 58
    1dea:	08 f0       	brcs	.+2      	; 0x1dee <__ftoa_engine+0x180>
    1dec:	70 e3       	ldi	r23, 0x30	; 48
    1dee:	7c 93       	st	X, r23
    1df0:	20 13       	cpse	r18, r16
    1df2:	b8 f7       	brcc	.-18     	; 0x1de2 <__ftoa_engine+0x174>
    1df4:	7e 91       	ld	r23, -X
    1df6:	70 61       	ori	r23, 0x10	; 16
    1df8:	7d 93       	st	X+, r23
    1dfa:	30 f0       	brcs	.+12     	; 0x1e08 <__ftoa_engine+0x19a>
    1dfc:	83 95       	inc	r24
    1dfe:	71 e3       	ldi	r23, 0x31	; 49
    1e00:	7d 93       	st	X+, r23
    1e02:	70 e3       	ldi	r23, 0x30	; 48
    1e04:	2a 95       	dec	r18
    1e06:	e1 f7       	brne	.-8      	; 0x1e00 <__ftoa_engine+0x192>
    1e08:	11 24       	eor	r1, r1
    1e0a:	ef 90       	pop	r14
    1e0c:	ff 90       	pop	r15
    1e0e:	0f 91       	pop	r16
    1e10:	1f 91       	pop	r17
    1e12:	cf 91       	pop	r28
    1e14:	df 91       	pop	r29
    1e16:	99 27       	eor	r25, r25
    1e18:	87 fd       	sbrc	r24, 7
    1e1a:	90 95       	com	r25
    1e1c:	08 95       	ret

00001e1e <strnlen_P>:
    1e1e:	fc 01       	movw	r30, r24
    1e20:	05 90       	lpm	r0, Z+
    1e22:	61 50       	subi	r22, 0x01	; 1
    1e24:	70 40       	sbci	r23, 0x00	; 0
    1e26:	01 10       	cpse	r0, r1
    1e28:	d8 f7       	brcc	.-10     	; 0x1e20 <strnlen_P+0x2>
    1e2a:	80 95       	com	r24
    1e2c:	90 95       	com	r25
    1e2e:	8e 0f       	add	r24, r30
    1e30:	9f 1f       	adc	r25, r31
    1e32:	08 95       	ret

00001e34 <strnlen>:
    1e34:	fc 01       	movw	r30, r24
    1e36:	61 50       	subi	r22, 0x01	; 1
    1e38:	70 40       	sbci	r23, 0x00	; 0
    1e3a:	01 90       	ld	r0, Z+
    1e3c:	01 10       	cpse	r0, r1
    1e3e:	d8 f7       	brcc	.-10     	; 0x1e36 <strnlen+0x2>
    1e40:	80 95       	com	r24
    1e42:	90 95       	com	r25
    1e44:	8e 0f       	add	r24, r30
    1e46:	9f 1f       	adc	r25, r31
    1e48:	08 95       	ret

00001e4a <fputc>:
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	fb 01       	movw	r30, r22
    1e54:	23 81       	ldd	r18, Z+3	; 0x03
    1e56:	21 fd       	sbrc	r18, 1
    1e58:	03 c0       	rjmp	.+6      	; 0x1e60 <fputc+0x16>
    1e5a:	8f ef       	ldi	r24, 0xFF	; 255
    1e5c:	9f ef       	ldi	r25, 0xFF	; 255
    1e5e:	2c c0       	rjmp	.+88     	; 0x1eb8 <fputc+0x6e>
    1e60:	22 ff       	sbrs	r18, 2
    1e62:	16 c0       	rjmp	.+44     	; 0x1e90 <fputc+0x46>
    1e64:	46 81       	ldd	r20, Z+6	; 0x06
    1e66:	57 81       	ldd	r21, Z+7	; 0x07
    1e68:	24 81       	ldd	r18, Z+4	; 0x04
    1e6a:	35 81       	ldd	r19, Z+5	; 0x05
    1e6c:	42 17       	cp	r20, r18
    1e6e:	53 07       	cpc	r21, r19
    1e70:	44 f4       	brge	.+16     	; 0x1e82 <fputc+0x38>
    1e72:	a0 81       	ld	r26, Z
    1e74:	b1 81       	ldd	r27, Z+1	; 0x01
    1e76:	9d 01       	movw	r18, r26
    1e78:	2f 5f       	subi	r18, 0xFF	; 255
    1e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e7c:	31 83       	std	Z+1, r19	; 0x01
    1e7e:	20 83       	st	Z, r18
    1e80:	8c 93       	st	X, r24
    1e82:	26 81       	ldd	r18, Z+6	; 0x06
    1e84:	37 81       	ldd	r19, Z+7	; 0x07
    1e86:	2f 5f       	subi	r18, 0xFF	; 255
    1e88:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8a:	37 83       	std	Z+7, r19	; 0x07
    1e8c:	26 83       	std	Z+6, r18	; 0x06
    1e8e:	14 c0       	rjmp	.+40     	; 0x1eb8 <fputc+0x6e>
    1e90:	8b 01       	movw	r16, r22
    1e92:	ec 01       	movw	r28, r24
    1e94:	fb 01       	movw	r30, r22
    1e96:	00 84       	ldd	r0, Z+8	; 0x08
    1e98:	f1 85       	ldd	r31, Z+9	; 0x09
    1e9a:	e0 2d       	mov	r30, r0
    1e9c:	09 95       	icall
    1e9e:	89 2b       	or	r24, r25
    1ea0:	e1 f6       	brne	.-72     	; 0x1e5a <fputc+0x10>
    1ea2:	d8 01       	movw	r26, r16
    1ea4:	16 96       	adiw	r26, 0x06	; 6
    1ea6:	8d 91       	ld	r24, X+
    1ea8:	9c 91       	ld	r25, X
    1eaa:	17 97       	sbiw	r26, 0x07	; 7
    1eac:	01 96       	adiw	r24, 0x01	; 1
    1eae:	17 96       	adiw	r26, 0x07	; 7
    1eb0:	9c 93       	st	X, r25
    1eb2:	8e 93       	st	-X, r24
    1eb4:	16 97       	sbiw	r26, 0x06	; 6
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	08 95       	ret

00001ec2 <printf>:
    1ec2:	a0 e0       	ldi	r26, 0x00	; 0
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	e7 e6       	ldi	r30, 0x67	; 103
    1ec8:	ff e0       	ldi	r31, 0x0F	; 15
    1eca:	0c 94 fc 0d 	jmp	0x1bf8	; 0x1bf8 <__prologue_saves__+0x20>
    1ece:	ae 01       	movw	r20, r28
    1ed0:	4b 5f       	subi	r20, 0xFB	; 251
    1ed2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed4:	fa 01       	movw	r30, r20
    1ed6:	61 91       	ld	r22, Z+
    1ed8:	71 91       	ld	r23, Z+
    1eda:	af 01       	movw	r20, r30
    1edc:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <__iob+0x2>
    1ee0:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__iob+0x3>
    1ee4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <vfprintf>
    1ee8:	e2 e0       	ldi	r30, 0x02	; 2
    1eea:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__epilogue_restores__+0x20>

00001eee <puts>:
    1eee:	0f 93       	push	r16
    1ef0:	1f 93       	push	r17
    1ef2:	cf 93       	push	r28
    1ef4:	df 93       	push	r29
    1ef6:	e0 91 af 00 	lds	r30, 0x00AF	; 0x8000af <__iob+0x2>
    1efa:	f0 91 b0 00 	lds	r31, 0x00B0	; 0x8000b0 <__iob+0x3>
    1efe:	23 81       	ldd	r18, Z+3	; 0x03
    1f00:	21 ff       	sbrs	r18, 1
    1f02:	1b c0       	rjmp	.+54     	; 0x1f3a <puts+0x4c>
    1f04:	8c 01       	movw	r16, r24
    1f06:	d0 e0       	ldi	r29, 0x00	; 0
    1f08:	c0 e0       	ldi	r28, 0x00	; 0
    1f0a:	f8 01       	movw	r30, r16
    1f0c:	81 91       	ld	r24, Z+
    1f0e:	8f 01       	movw	r16, r30
    1f10:	60 91 af 00 	lds	r22, 0x00AF	; 0x8000af <__iob+0x2>
    1f14:	70 91 b0 00 	lds	r23, 0x00B0	; 0x8000b0 <__iob+0x3>
    1f18:	db 01       	movw	r26, r22
    1f1a:	18 96       	adiw	r26, 0x08	; 8
    1f1c:	ed 91       	ld	r30, X+
    1f1e:	fc 91       	ld	r31, X
    1f20:	19 97       	sbiw	r26, 0x09	; 9
    1f22:	88 23       	and	r24, r24
    1f24:	31 f0       	breq	.+12     	; 0x1f32 <puts+0x44>
    1f26:	09 95       	icall
    1f28:	89 2b       	or	r24, r25
    1f2a:	79 f3       	breq	.-34     	; 0x1f0a <puts+0x1c>
    1f2c:	df ef       	ldi	r29, 0xFF	; 255
    1f2e:	cf ef       	ldi	r28, 0xFF	; 255
    1f30:	ec cf       	rjmp	.-40     	; 0x1f0a <puts+0x1c>
    1f32:	8a e0       	ldi	r24, 0x0A	; 10
    1f34:	09 95       	icall
    1f36:	89 2b       	or	r24, r25
    1f38:	19 f0       	breq	.+6      	; 0x1f40 <puts+0x52>
    1f3a:	8f ef       	ldi	r24, 0xFF	; 255
    1f3c:	9f ef       	ldi	r25, 0xFF	; 255
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <puts+0x56>
    1f40:	8d 2f       	mov	r24, r29
    1f42:	9c 2f       	mov	r25, r28
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	08 95       	ret

00001f4e <__ultoa_invert>:
    1f4e:	fa 01       	movw	r30, r20
    1f50:	aa 27       	eor	r26, r26
    1f52:	28 30       	cpi	r18, 0x08	; 8
    1f54:	51 f1       	breq	.+84     	; 0x1faa <__ultoa_invert+0x5c>
    1f56:	20 31       	cpi	r18, 0x10	; 16
    1f58:	81 f1       	breq	.+96     	; 0x1fba <__ultoa_invert+0x6c>
    1f5a:	e8 94       	clt
    1f5c:	6f 93       	push	r22
    1f5e:	6e 7f       	andi	r22, 0xFE	; 254
    1f60:	6e 5f       	subi	r22, 0xFE	; 254
    1f62:	7f 4f       	sbci	r23, 0xFF	; 255
    1f64:	8f 4f       	sbci	r24, 0xFF	; 255
    1f66:	9f 4f       	sbci	r25, 0xFF	; 255
    1f68:	af 4f       	sbci	r26, 0xFF	; 255
    1f6a:	b1 e0       	ldi	r27, 0x01	; 1
    1f6c:	3e d0       	rcall	.+124    	; 0x1fea <__ultoa_invert+0x9c>
    1f6e:	b4 e0       	ldi	r27, 0x04	; 4
    1f70:	3c d0       	rcall	.+120    	; 0x1fea <__ultoa_invert+0x9c>
    1f72:	67 0f       	add	r22, r23
    1f74:	78 1f       	adc	r23, r24
    1f76:	89 1f       	adc	r24, r25
    1f78:	9a 1f       	adc	r25, r26
    1f7a:	a1 1d       	adc	r26, r1
    1f7c:	68 0f       	add	r22, r24
    1f7e:	79 1f       	adc	r23, r25
    1f80:	8a 1f       	adc	r24, r26
    1f82:	91 1d       	adc	r25, r1
    1f84:	a1 1d       	adc	r26, r1
    1f86:	6a 0f       	add	r22, r26
    1f88:	71 1d       	adc	r23, r1
    1f8a:	81 1d       	adc	r24, r1
    1f8c:	91 1d       	adc	r25, r1
    1f8e:	a1 1d       	adc	r26, r1
    1f90:	20 d0       	rcall	.+64     	; 0x1fd2 <__ultoa_invert+0x84>
    1f92:	09 f4       	brne	.+2      	; 0x1f96 <__ultoa_invert+0x48>
    1f94:	68 94       	set
    1f96:	3f 91       	pop	r19
    1f98:	2a e0       	ldi	r18, 0x0A	; 10
    1f9a:	26 9f       	mul	r18, r22
    1f9c:	11 24       	eor	r1, r1
    1f9e:	30 19       	sub	r19, r0
    1fa0:	30 5d       	subi	r19, 0xD0	; 208
    1fa2:	31 93       	st	Z+, r19
    1fa4:	de f6       	brtc	.-74     	; 0x1f5c <__ultoa_invert+0xe>
    1fa6:	cf 01       	movw	r24, r30
    1fa8:	08 95       	ret
    1faa:	46 2f       	mov	r20, r22
    1fac:	47 70       	andi	r20, 0x07	; 7
    1fae:	40 5d       	subi	r20, 0xD0	; 208
    1fb0:	41 93       	st	Z+, r20
    1fb2:	b3 e0       	ldi	r27, 0x03	; 3
    1fb4:	0f d0       	rcall	.+30     	; 0x1fd4 <__ultoa_invert+0x86>
    1fb6:	c9 f7       	brne	.-14     	; 0x1faa <__ultoa_invert+0x5c>
    1fb8:	f6 cf       	rjmp	.-20     	; 0x1fa6 <__ultoa_invert+0x58>
    1fba:	46 2f       	mov	r20, r22
    1fbc:	4f 70       	andi	r20, 0x0F	; 15
    1fbe:	40 5d       	subi	r20, 0xD0	; 208
    1fc0:	4a 33       	cpi	r20, 0x3A	; 58
    1fc2:	18 f0       	brcs	.+6      	; 0x1fca <__ultoa_invert+0x7c>
    1fc4:	49 5d       	subi	r20, 0xD9	; 217
    1fc6:	31 fd       	sbrc	r19, 1
    1fc8:	40 52       	subi	r20, 0x20	; 32
    1fca:	41 93       	st	Z+, r20
    1fcc:	02 d0       	rcall	.+4      	; 0x1fd2 <__ultoa_invert+0x84>
    1fce:	a9 f7       	brne	.-22     	; 0x1fba <__ultoa_invert+0x6c>
    1fd0:	ea cf       	rjmp	.-44     	; 0x1fa6 <__ultoa_invert+0x58>
    1fd2:	b4 e0       	ldi	r27, 0x04	; 4
    1fd4:	a6 95       	lsr	r26
    1fd6:	97 95       	ror	r25
    1fd8:	87 95       	ror	r24
    1fda:	77 95       	ror	r23
    1fdc:	67 95       	ror	r22
    1fde:	ba 95       	dec	r27
    1fe0:	c9 f7       	brne	.-14     	; 0x1fd4 <__ultoa_invert+0x86>
    1fe2:	00 97       	sbiw	r24, 0x00	; 0
    1fe4:	61 05       	cpc	r22, r1
    1fe6:	71 05       	cpc	r23, r1
    1fe8:	08 95       	ret
    1fea:	9b 01       	movw	r18, r22
    1fec:	ac 01       	movw	r20, r24
    1fee:	0a 2e       	mov	r0, r26
    1ff0:	06 94       	lsr	r0
    1ff2:	57 95       	ror	r21
    1ff4:	47 95       	ror	r20
    1ff6:	37 95       	ror	r19
    1ff8:	27 95       	ror	r18
    1ffa:	ba 95       	dec	r27
    1ffc:	c9 f7       	brne	.-14     	; 0x1ff0 <__ultoa_invert+0xa2>
    1ffe:	62 0f       	add	r22, r18
    2000:	73 1f       	adc	r23, r19
    2002:	84 1f       	adc	r24, r20
    2004:	95 1f       	adc	r25, r21
    2006:	a0 1d       	adc	r26, r0
    2008:	08 95       	ret

0000200a <eeprom_read_byte>:
    200a:	e1 99       	sbic	0x1c, 1	; 28
    200c:	fe cf       	rjmp	.-4      	; 0x200a <eeprom_read_byte>
    200e:	9f bb       	out	0x1f, r25	; 31
    2010:	8e bb       	out	0x1e, r24	; 30
    2012:	e0 9a       	sbi	0x1c, 0	; 28
    2014:	99 27       	eor	r25, r25
    2016:	8d b3       	in	r24, 0x1d	; 29
    2018:	08 95       	ret

0000201a <eeprom_update_byte>:
    201a:	26 2f       	mov	r18, r22

0000201c <eeprom_update_r18>:
    201c:	e1 99       	sbic	0x1c, 1	; 28
    201e:	fe cf       	rjmp	.-4      	; 0x201c <eeprom_update_r18>
    2020:	9f bb       	out	0x1f, r25	; 31
    2022:	8e bb       	out	0x1e, r24	; 30
    2024:	e0 9a       	sbi	0x1c, 0	; 28
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	0d b2       	in	r0, 0x1d	; 29
    202a:	02 16       	cp	r0, r18
    202c:	31 f0       	breq	.+12     	; 0x203a <eeprom_update_r18+0x1e>
    202e:	2d bb       	out	0x1d, r18	; 29
    2030:	0f b6       	in	r0, 0x3f	; 63
    2032:	f8 94       	cli
    2034:	e2 9a       	sbi	0x1c, 2	; 28
    2036:	e1 9a       	sbi	0x1c, 1	; 28
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	08 95       	ret

0000203c <_exit>:
    203c:	f8 94       	cli

0000203e <__stop_program>:
    203e:	ff cf       	rjmp	.-2      	; 0x203e <__stop_program>
